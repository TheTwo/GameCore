---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wupei.
--- DateTime: 2021/6/27
---

---@class SkillClientParam
local SkillClientParam = class("SkillClientParam")
local SkillClientEnum = require("SkillClientEnum")
local SkillClientTarget = require("SkillClientTarget")
local SEEnvironment = require("SEEnvironment")
local LogicUnitRuleKey = require('LogicUnitRuleKey')
local SESceneRoot = require("SESceneRoot")

local Vector3 = CS.UnityEngine.Vector3

---@param self SkillClientParam
---@param skillId any
---@return void
function SkillClientParam:ctor(skillId)
    self._skillId = skillId
    self._stage = require("SkillClientEnum").Stage.default
    self._otherTargets = {}
    self._targetClass = SkillClientTarget
    self._attacker = nil
    self._target = nil
    self._uid = 0
    self._dataTable = nil
    ---@type wrpc.PushBattleCastSkillMessageRequest
    self._serverDataSrc = nil
    self._damageMsgTable = nil
    self._manager = nil
    self._modifyConfigId = 0
    ---@type CS.SEMapInfo
    self._mapInfo = nil
end

---@param self SkillClientParam
---@param class any
---@return void
function SkillClientParam:SetTargetClass(class)
    self._targetClass = class
end

---@param self SkillClientParam
---@param manager any
---@return void
function SkillClientParam:SetSkillClientManager(manager)
    self._manager = manager
end

---@param self SkillClientParam
---@param ctrl any
---@param pos any
---@return void
function SkillClientParam:SetAttacker(ctrl, pos)
    local target = self._targetClass.new(self)
    target:SetInfo(SkillClientEnum.SkillTargetType.Attacker, ctrl, pos)
    self._attacker = target
end

---@param self SkillClientParam
---@return SkillClientTarget
function SkillClientParam:GetAttacker()
    return self._attacker
end

---@param self SkillClientParam
---@param ctrl any
---@param pos any
---@param damageKeyOrNil any
---@return void
function SkillClientParam:SetTarget(ctrl, pos, damageKeyOrNil)
    local target = self._targetClass.new(self)
    target:SetInfo(SkillClientEnum.SkillTargetType.Target, ctrl, pos)
    if damageKeyOrNil then
        target:SetDamageKey(damageKeyOrNil)
    end
    self._target = target
end

---@param self SkillClientParam
---@return SkillClientTarget
function SkillClientParam:GetTarget()
    return self._target
end

---@param self SkillClientParam
---@param ctrl any
---@param pos any
---@param damageKeyOrNil any
---@return void
function SkillClientParam:AddOtherTarget(ctrl, pos, damageKeyOrNil)
    local target = self._targetClass.new(self)
    target:SetInfo(SkillClientEnum.SkillTargetType.OtherTarget, ctrl, pos)
    if damageKeyOrNil then
        target:SetDamageKey(damageKeyOrNil)
    end
    table.insert(self._otherTargets, target)
end

---@param self SkillClientParam
---@return SkillClientTarget[]
function SkillClientParam:GetOtherTargets()
    return self._otherTargets
end

---@param self SkillClientParam
---@return void
function SkillClientParam:GetSkillId()
    return self._skillId
end

---@param self SkillClientParam
---@return void
function SkillClientParam:GetStage()
    return self._stage
end

---@param self SkillClientParam
---@param stage any
---@return void
function SkillClientParam:SetStage(stage)
    self._stage = stage
end

---@param self SkillClientParam
---@return void
function SkillClientParam:GetUid()
    return self._uid
end

---@param self SkillClientParam
---@param uid any
---@return void
function SkillClientParam:SetUid(uid)
    self._uid = uid
end

---@param self SkillClientParam
---@param dataTable any
---@return void
function SkillClientParam:SetDataTable(dataTable)
    self._dataTable = dataTable
end

---@return KheroSkillLogicalSeConfigCell
function SkillClientParam:GetDataTable()
    return self._dataTable
end

---@param self SkillClientParam
---@param serverDataSource wrpc.PushBattleCastSkillMessageRequest
---@return void
function SkillClientParam:SetServerData(serverDataSource)
    if serverDataSource == nil then
        return
    end

    self._serverDataSrc = serverDataSource
    local skillInfo = self._serverDataSrc.MsgSkill.SkillInfo
    if skillInfo.BehaviourModifyCfgId > 0 then
        self._modifyConfigId = skillInfo.BehaviourModifyCfgId
    end
end

---@param self SkillClientParam
---@return wrpc.SkillInfo
function SkillClientParam:GetServerData()
    if self._serverDataSrc then
        return self._serverDataSrc.MsgSkill.SkillInfo
    else
        return nil
    end
end

---@param mapInfo CS.SEMapInfo
function SkillClientParam:SetMapInfo(mapInfo)
    self._mapInfo = mapInfo
end

---@return CS.SEMapInfo
function SkillClientParam:GetMapInfo()
    return self._mapInfo
end

---@param self SkillClientParam
---@return number
function SkillClientParam:GetAttackerId()
    return self._serverDataSrc.MsgSkill.Attacker
end

---@param self SkillClientParam
---@return CS.UnityEngine.Vector3
function SkillClientParam:GetReleaserDir()
    return SEEnvironment.Instance():ServerDirection2ClientForward(self._serverDataSrc.MsgSkill.releaserDir)
end

---@param self SkillClientParam
---@return CS.UnityEngine.Vector3
function SkillClientParam:GetReleaserPos()
    local vecPos = CS.UnityEngine.Vector3(
            self._serverDataSrc.MsgSkill.TargetPos.X,
            self._serverDataSrc.MsgSkill.TargetPos.Y, 
            self._serverDataSrc.MsgSkill.TargetPos.Z)
    local pos = SEEnvironment.Instance():ServerPos2Client(vecPos)
    return pos
end

---@param self SkillClientParam
---@return CS.UnityEngine.Vector3
function SkillClientParam:GetServerDataDirection()
    if self._serverDataSrc.MsgSkill.TargetDir.X ~= 0 or self._serverDataSrc.MsgSkill.TargetDir.Y ~= 0 then
        return Vector3(self._serverDataSrc.MsgSkill.TargetDir.X, 0, self._serverDataSrc.MsgSkill.TargetDir.Y)
    else
        local attackerPos = self:GetAttacker():GetPosition()
        local targetPos = self:GetTarget():GetPosition()
        local forward = targetPos - attackerPos
        forward.y = 0
        return forward
    end
end

---@param targetId number
function SkillClientParam:GetMsgResult(targetId)
    if self._msgResultTable == nil then
        self._msgResultTable = {}
        local msgResults = self._serverDataSrc.MsgResult
        local msgResultCount = msgResults:Count()
        if msgResultCount > 0 then
            for i = 1, msgResultCount do
                local msgResult = msgResults[i]
                self._msgResultTable[msgResult.TargetId] = msgResult
            end
        end
    end

    return self._msgResultTable[targetId]
end

---@param targetId number
---@return CS.UnityEngine.Vector3, wrpc.PBVector3
function SkillClientParam:GetMoveEndPosition(targetId)
    ---@type wrpc.SkillResultData
    local resultMsg = self:GetMsgResult(targetId)
    if resultMsg and resultMsg.Move then
        local serverPos = resultMsg.Move.MoveEndPos
        local vecPos = CS.UnityEngine.Vector3(
            serverPos.X,serverPos.Y, serverPos.Z)
        return SEEnvironment.Instance():ServerPos2Client(vecPos), serverPos
    end
end

---@param self SkillClientParam
---@return number
function SkillClientParam:GetBulletSpeed()
    if not self._dataTable then
        g_Logger.Error("SkillClientParam.GetDataTableSpeed error. self._dataTable = nil, skillId = %s", self._skillId)
        return 1
    end
    local speed = 0
    if self._dataTable.BulletSpeed then
        speed = self._dataTable:BulletSpeed() *  SESceneRoot.GetClientScale()
    end
    if speed <= 0 then
        g_Logger.Error("SkillClientParam.GetDataTableSpeed error. dataTable[\"BulletSpeed\"] = %s, skillId = %s", tostring(speed), self._skillId)
        return 1
    end
    return speed
end

---@param self SkillClientParam
---@return void
function SkillClientParam:GetModifyConfigId()
    return self._modifyConfigId
end

---@param self SkillClientParam
---@param value any
---@return void
function SkillClientParam:SetAttackerPlayingSkill(value)
    if self._attacker then
        self._attacker:SetPlayingSkill(value)
    end
end

---@param self SkillClientParam
---@param target SESkillClientTarget
---@return void
function SkillClientParam:IsIgnoreMove(target)
	return false
    --return self:HasLogicUnitMask(target, LogicUnitRuleKey.Move)
end

---@param self SkillClientParam
---@param target SESkillClientTarget
---@return void
function SkillClientParam:IsIgnorePlay(target)
	return false
    --return self:HasLogicUnitMask(target, LogicUnitRuleKey.CauseDmg)
end

---@param self SkillClientParam
---@param target SESkillClientTarget
---@param type any
---@return void
function SkillClientParam:HasLogicUnitMask(target, type)
    if not target then
        return false
    end
    if not self._serverDataSrc then
        return false
    end
    local id = target:GetID()
    if id <= 0 then
        return false
    end
    local value = self._serverDataSrc.MsgSkill.SkillInfo.BlockLogicUnitMasks[id] or 0
    if value == 0 then
        return false
    end
    return ((1 << type) & value) ~= 0
end

return SkillClientParam
