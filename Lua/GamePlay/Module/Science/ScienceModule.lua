---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/6/13 10:42
---
local BaseModule = require('BaseModule')
local ModuleRefer = require('ModuleRefer')
local DBEntityPath = require('DBEntityPath')
local ConfigRefer = require('ConfigRefer')
local Delegate = require('Delegate')
local AttrValueType = require('AttrValueType')
local DBEntityType = require('DBEntityType')
local EventConst = require('EventConst')
local PushConsts = require("PushConsts")
local I18N = require("I18N")

---@class ScienceModule
local ScienceModule = class('ScienceModule',BaseModule)

function ScienceModule:OnRegister()
    g_Game.DatabaseManager:AddChanged(DBEntityPath.CastleBrief.Castle.Technology.MsgPath,Delegate.GetOrCreate(self,self.UpdateScienceInfo))
    self:UpdateScienceInfo()
end

function ScienceModule:OnRemove()
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.CastleBrief.Castle.Technology.MsgPath,Delegate.GetOrCreate(self,self.UpdateScienceInfo))
end

function ScienceModule:GetDBScience()
    local player = ModuleRefer.PlayerModule:GetPlayer()
    if player then
        local castleBrief = g_Game.DatabaseManager:GetEntity(player.SceneInfo.CastleBriefId, DBEntityType.CastleBrief)
        return castleBrief.Castle.Technology
    end
    return nil
end

function ScienceModule:GetCurResearchingTech()
    local scienceInfo = self:GetDBScience()
    if scienceInfo then
        local techLevel = scienceInfo.ResearchingTech
        if techLevel <= 0 then
            return 0
        end
        return ConfigRefer.CityTechLevels:Find(techLevel):Type()
    else
        return 0
    end
end

function ScienceModule:GetCurResearchingTechFinishTime()
    local scienceInfo = self:GetDBScience()
    if scienceInfo then
        return scienceInfo.FinishTime.Seconds
    else
        return 0
    end
end

function ScienceModule:GetCurScienceStage()
    local scienceInfo = self:GetDBScience()
    if scienceInfo then
        return scienceInfo.TechStageId
    else
        return 1
    end
end

function ScienceModule:OnSetLocalNotification(callBack)
    if callBack == nil then return end
    local player = ModuleRefer.PlayerModule:GetPlayer()
    if player then
        local techId = self:GetCurResearchingTech()
        if techId > 0 then
            local finishTime = self:GetCurResearchingTechFinishTime()
            local delay = finishTime - g_Game.ServerTime:GetServerTimestampInSeconds()
            if delay > 0 then
                local researchPushCfg = ConfigRefer.Push:Find(PushConsts.research)
                local notifyId = tonumber(researchPushCfg:Id() .. tostring(techId))
                local title = I18N.Get(researchPushCfg:Title())
                local subtitle = I18N.Get(researchPushCfg:SubTitle())
                local content = I18N.Get(researchPushCfg:Content())
                callBack(notifyId, title, subtitle, content, delay, nil)
            end
        end
    end
end


function ScienceModule:UpdateScienceInfo(_, changeTable)
    if self.scienceStageMap == nil then
        self.scienceStageMap = {}
        for _, config in ConfigRefer.CityTechStage:ipairs() do
            self.scienceStageMap[config:Id()] = {}
        end
    end

    if self.scienceInfoMap == nil then
        self.scienceInfoMap = {}
        for _, config in ConfigRefer.CityTechTypes:ipairs() do
            local teachId = config:Id()
            self.scienceInfoMap[teachId] = {cfg = config}
            if config:Stage() > 0 then
                table.insert(self.scienceStageMap[config:Stage()], teachId)
            end
        end
    end
    local scienceInfo = self:GetDBScience()
    if not scienceInfo then
        return
    end

    for teachId, level in pairs(scienceInfo.TechLevel or {}) do
        local info = self.scienceInfoMap[teachId]
        if info == nil then
            g_Logger.Error(teachId)
        else
            info.finishLevel = level
        end
    end
    if changeTable then
        if changeTable.TechStageId then
            g_Game.EventManager:TriggerEvent(EventConst.ON_REFRESH_TECH_STAGE_WDS)
        end
        if changeTable.ResearchingTech then
            g_Game.EventManager:TriggerEvent(EventConst.ON_REFRESH_TECH_RESEARCHING)
        end
        if changeTable.TechLevel and changeTable.TechLevel.Add then
            for techId, level in pairs(changeTable.TechLevel.Add) do
                g_Game.EventManager:TriggerEvent(EventConst.ON_FINISH_RESEARCH, {id = techId, lv = level})
            end
        end
    end
    g_Game.EventManager:TriggerEvent(EventConst.ON_REFRESH_TECH)
end

function ScienceModule:GetTeachLevel(teachId)
    return (self.scienceInfoMap[teachId] or {}).finishLevel or 0
end

function ScienceModule:GetstageProgress(stageId)
    local stageNodes = self.scienceStageMap[stageId] or {}
    local curProgress = 0
    local totalProgress = 0
    for _, teachId in pairs(stageNodes) do
        totalProgress = totalProgress + self.scienceInfoMap[teachId].cfg:LevelCfgListLength()
        curProgress = curProgress + (self.scienceInfoMap[teachId].finishLevel or 0)
    end
    return curProgress, totalProgress
end

function ScienceModule:GetTechListByStage(stageId)
    return self.scienceStageMap[stageId]
end

function ScienceModule:CheckIsResearchAll(techId)
    local techLevel = self:GetTeachLevel(techId)
    local techCfg = ConfigRefer.CityTechTypes:Find(techId)
    if not techCfg then
        return
    end
    local totalLevel = techCfg:LevelCfgListLength()
    return techLevel == totalLevel
end

function ScienceModule:CheckParentLevelUnlock(techLevelId)
    local techLevelCfg = ConfigRefer.CityTechLevels:Find(techLevelId)
    local techId = techLevelCfg:Type()
    local techLevel = self:GetTeachLevel(techId)
    return techLevel >= techLevelCfg:Level()
end

function ScienceModule:GetTechLevelCfg(techId, level)
    local teachCfg = ConfigRefer.CityTechTypes:Find(techId)
    local levelId = teachCfg:LevelCfgList(level)
    return ConfigRefer.CityTechLevels:Find(levelId)
end

function ScienceModule:CheckIsShowBuffNum(techId)
    local levelCfg = self:GetTechLevelCfg(techId, 1)
    if not levelCfg then
        return false
    end
    return levelCfg:AttributeReward() > 0
end

function ScienceModule:GetBuffValue(techId, level)
    if level == 0 then
        return 0
    end
    local levelCfg = self:GetTechLevelCfg(techId, level)
    local attrGroupCfg = ConfigRefer.AttrGroup:Find(levelCfg:AttributeReward())
    local attrCfg = attrGroupCfg:AttrList(attrGroupCfg:AttrListLength())
    local typeId = attrCfg:TypeId()
    local attrTypeCfg = ConfigRefer.AttrElement:Find(typeId)
    local isPercent = attrTypeCfg:ValueType() ~= AttrValueType.Fix
    local value = ModuleRefer.AttrModule:GetAttrValueByType(attrTypeCfg, attrCfg:Value())
    return isPercent, value
end

function ScienceModule:GetAbilityRewardItems(techId, level)
    local levelCfg = self:GetTechLevelCfg(techId, level)
    if not levelCfg then
        return {}
    end
    local abilityRewardLength = levelCfg:AbilityRewardLength()
    local itemIds = {}
    if abilityRewardLength > 0 then
        for i = 1, abilityRewardLength do
            local abilityRewardId = levelCfg:AbilityReward(i)
            local abilityCfg = ConfigRefer.CityAbility:Find(abilityRewardId)
            if abilityCfg:Param() > 0 then
                local paramCfg = ConfigRefer.CityProcess:Find(abilityCfg:Param())
                local outputLength = paramCfg:OutputLength()
                if outputLength > 0 then
                    for j = 1, outputLength do
                        local outPutItemId = paramCfg:Output(j):ItemId()
                        if outPutItemId > 0 then
                            itemIds[#itemIds + 1] = outPutItemId
                        end
                    end
                end
            end
        end
    end
    return itemIds
end

function ScienceModule:GetMaxResearchedTechId()
    local stageId = self:GetCurScienceStage()
    local techList = self:GetTechListByStage(stageId)
    local maxX = 0
    local techId = nil
    for _, tech in pairs(techList) do
        local x = ConfigRefer.CityTechTypes:Find(tech):X()
        if self:CheckIsResearchAll(tech) and x > maxX then
            maxX = x
            techId = tech
        end
    end

    return techId, maxX
end

function ScienceModule:CheckIsHasCanResearchTech()
    local stageId = self:GetCurScienceStage()
    local techList = self:GetTechListByStage(stageId)
    for _, tech in pairs(techList) do
        if self:CheckIsCanResearch(tech) and self:GetCurResearchingTech() == 0 then
            return true
        end
    end
    return false
end

function ScienceModule:CheckIsCanResearch(techId)
    local techLevel = self:GetTeachLevel(techId)
    local teachCfg = ConfigRefer.CityTechTypes:Find(techId)
    if techLevel == teachCfg:LevelCfgListLength() then
        return false
    end
    if teachCfg:Stage() == self:GetCurScienceStage() + 1 then
        return false
    end
    for i = 1, teachCfg:ParentTechLength() do
        local parentTech = teachCfg:ParentTech(i)
        if self:GetTeachLevel(parentTech) <= 0 then
            return false
        end
    end
    local levelCfg = self:GetTechLevelCfg(techId, techLevel + 1)
    for i = 1, levelCfg:PreBdConditionsLength() do
        local maxLevel, unlockLevel = self:GetUnlockBuildingLevel(levelCfg:PreBdConditions(i))
        if maxLevel < unlockLevel then
            return false
        end
    end
    for i = 1, levelCfg:PreTechConditionsLength() do
        if not self:CheckParentLevelUnlock(levelCfg:PreTechConditions(i)) then
            return false
        end
    end
    return true
end

function ScienceModule:CheckIsResearched(techId)
    return self:GetTeachLevel(techId) > 0
end

function ScienceModule:GetStageMaxX(stageId)
    local techList = self:GetTechListByStage(stageId)
    local maxX = 0
    for _, tech in pairs(techList) do
        local x = ConfigRefer.CityTechTypes:Find(tech):X()
        if x > maxX then
            maxX = x
        end
    end
    return maxX
end

function ScienceModule:GetStageMaxWidth(stageId)
    return self:GetStageMaxX(stageId) * 720 + self:GetStageCondiWidth()
end

function ScienceModule:GetStageCondiWidth()
    return 720
end

function ScienceModule:GetUnlockBuildingLevel(buildingLevelId)
    local buildingLevelCfg = ConfigRefer.BuildingLevel:Find(buildingLevelId)
    local city = ModuleRefer.CityModule.myCity
    local buildingTiles = city:GetCityCellTilesByBuildingType(buildingLevelCfg:Type()) or {}
    local maxLevel = 0
    for _, buildingTile in pairs(buildingTiles) do
        local curLevel = ConfigRefer.BuildingLevel:Find(buildingTile:GetCell().configId):Level()
        if curLevel > maxLevel then
            maxLevel = curLevel
        end
    end
    return maxLevel, buildingLevelCfg:Level()
end

function ScienceModule:IsMeetAllStageConditions(stageId)
    local stageConfig = ConfigRefer.CityTechStage:Find(stageId)
    local unlockBuilding = stageConfig:UnlockBuilding()
    if unlockBuilding > 0 then
        local maxLevel, unlockLevel = self:GetUnlockBuildingLevel(unlockBuilding)
        if maxLevel < unlockLevel then
            return false
        end
    else
        return false
    end
    local unlockTechPoint = stageConfig:UnlockPoint()
    if unlockTechPoint > 0 then
        local curPoint, _ = ModuleRefer.ScienceModule:GetstageProgress(stageId)
        if curPoint < unlockTechPoint then
            return false
        end
    else
        return false
    end
    local lastTech = stageConfig:LastTech()
    if lastTech > 0 then
        local techLevelCfg = ConfigRefer.CityTechLevels:Find(lastTech)
        local level = techLevelCfg:Level()
        local techType = techLevelCfg:Type()
        local curTechLevel = ModuleRefer.ScienceModule:GetTeachLevel(techType)
        if curTechLevel < level  then
            return false
        end
    else
        return false
    end
    return true
end

return ScienceModule