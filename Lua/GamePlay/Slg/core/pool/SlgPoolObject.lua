---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wupei.
--- DateTime: 2020/11/18
---
local SlgWorldObject = require('SlgWorldObject')
---@class SlgPoolObject : SlgWorldObject
local SlgPoolObject = class("SlgPoolObject",SlgWorldObject)

---@protected
function SlgPoolObject:ctor()
    SlgWorldObject.ctor(self)
    self._isSpawning = false
    self._isSpawned = false
    self._isDespawning = false
    self._isDespawned = false
    self._isValid = false
end

function SlgPoolObject:SetName(name)
    self.trans:set_name(name)
end

function SlgPoolObject:IsValid()
    return self._isValid
end

function SlgPoolObject:SetPosition(pos)
    if self:IsValid() then
        self.transform.position = pos
    else
        self._position = pos
    end
end

function SlgPoolObject:SetLocalPosition(pos)
    if self:IsValid() then
        self.transform.localPosition = pos
    else
        self._localPosition = pos
    end
end

function SlgPoolObject:SetForward(forward)
    self:SetRotation(CS.UnityEngine.Quaternion.LookRotation(forward))
end

function SlgPoolObject:SetLocalScale(localScale)
    if self:IsValid() then
        self.transform.localScale = localScale
    else
        self._localScale = localScale
    end
end

function SlgPoolObject:SetLocalEulerAngles(localEulerAngles)
    self:SetLocalRotation(CS.UnityEngine.Quaternion.Euler(localEulerAngles))
end

function SlgPoolObject:SetLocalRotation(rot)
    if self:IsValid() then
        self.transform.localRotation = rot
    else
        self._localRotation = rot
    end
end

function SlgPoolObject:SetRotation(rot)
    if self:IsValid() then
        self.transform.rotation = rot
    else
        self._rotation = rot
    end
end

function SlgPoolObject:GetPosition()
    if self:IsValid() then
        return self.transform.position
    else
        return self._position
    end
end

function SlgPoolObject:GetPositionXYZ()
    if self:IsValid() then
        return self.transform:GetXYZ()
    else
        return self._position.x, self._position.y, self._position.z
    end
end

function SlgPoolObject:GetForward()
    if self:IsValid() then
        return self.transform.forward
    else
        return CS.UnityEngine.Vector3.forward
    end
end

function SlgPoolObject:GetLocalPosition()
    if self:IsValid() then
        return self.transform.localPosition
    else
        return self._localPosition
    end
end

function SlgPoolObject:SetParent(parent)
    if self:IsValid() then
        self.transform:SetParent(parent, false)
    else
        self._parent = parent
    end
end

function SlgPoolObject:SpawnAsync(bundleName, callback)
    if self._isSpawned then
        g_Logger.Error("SlgPoolObject has spawned, bundleName = %s", bundleName)
        if callback then
            callback(self)
        end
        return
    end
    if self._isSpawning then
        g_Logger.Error("SlgPoolObject is spawning, bundleName = %s", bundleName)
        if callback then
            callback(self)
        end
        return
    end
    self._isSpawning = true
    local SlgPoolManager = require "SlgPoolManager"
    SlgPoolManager.GetInstance():SpawnAsync(bundleName, callback, self)
    return self
end

function SlgPoolObject:Despawn(time)
    if self._isDespawned then
        g_Logger.Error("SlgPoolObject is despawned, bundleName = %s", self.bundleName)
        return
    end
    if self._isDespawning then
        g_Logger.Error("SlgPoolObject is despawning, bundleName = %s", self.bundleName)
        return
    end
    self._isDespawning = true
    local poolManager = require("SlgPoolManager").GetInstance()
    if poolManager then
        poolManager:Despawn(self, time)
    end
end

function SlgPoolObject:DoOnSpawn(trans, bundleName)
    self._isSpawning = false
    self._isSpawned = true
    self._isValid = true
    self.bundleName = bundleName
    self.trans = require("SlgTransPeer").new(trans)
    ---@type CS.UnityEngine.Transform
    self.transform = trans
    if self._parent then
        self.transform:SetParent(self._parent, false)
        self._parent = nil
    end
    if self._localPosition then
        self.transform.localPosition = self._localPosition
        self._localPosition = nil
    end
    if self._position then
        self.transform.position = self._position
        self._position = nil
    end
    if self._localRotation then
        self.transform.localRotation = self._localRotation
        self._localRotation = nil
    end
    if self._rotation then
        self.transform.rotation = self._rotation
        self._rotation = nil
    end
    if self._localScale then
        self.transform.localScale = self._localScale
        self._localScale = nil
    end
    if self._visible ~= nil then
        self.transform:SetVisible(self._visible)
    end
    self:OnSpawn()
end

function SlgPoolObject:OnSpawn()

end

function SlgPoolObject:DoOnDespawn()
    self._isDespawning = false
    self._isDespawned = true
    self._isValid = false
    self._position = nil
    self:Cleanup()
    self:OnDespawn()
end

function SlgPoolObject:OnDespawn()

end

function SlgPoolObject:SetVisible(visible)
    if self:IsValid() then
        self.transform:SetVisible(visible)
    else
        self._visible = visible
    end
end


return SlgPoolObject