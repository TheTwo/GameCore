---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/5/30 10:22
---

---@class PlayerPrefsEx
local PlayerPrefsEx = class('PlayerPrefsEx')

local PlayerPrefs = CS.UnityEngine.PlayerPrefs

function PlayerPrefsEx:ctor()
    self.cacheByUid = {}
end

function PlayerPrefsEx:GetPlayerID()
    if not self.playerId then
        local moduleManager = g_Game.ModuleManager
        if not moduleManager then
            return 0
        end
        ---@type PlayerModule
        local module = moduleManager.moduleMap["PlayerModule"]
        if not module then
            return 0
        end
        if module.playerId ~= nil and module.playerId > 0 then
            self.playerId = module.playerId
        end
    end
    return self.playerId or 0
end

---UserKey
---@param key string
function PlayerPrefsEx:UserKey(key)
    local uid = self:GetPlayerID()
    assert(uid ~= nil and uid > 0)
    if not self.cacheByUid[uid] then
        self.cacheByUid[uid] = {}
    end
    
    local dict = self.cacheByUid[uid];
    if not dict[key] then
        dict[key] = key .. tostring(uid)
    end
    return dict[key];
end

---SetIntByUid
---@param key string
---@param value number int
function PlayerPrefsEx:SetIntByUid( key,  value)
    self:SetInt(self:UserKey(key), value);
end


---SetLongByUid
---@param key string
---@param value number long
function PlayerPrefsEx:SetLongByUid( key,  value)
    self:SetLong(self:UserKey(key), value);
end

---SetFloatByUid
---@param key string
---@param value number float
function PlayerPrefsEx:SetFloatByUid( key,  value)
    self:SetFloat(self:UserKey(key), value);
end

---SetStringByUid
---@param key string
---@param value string
function PlayerPrefsEx:SetStringByUid( key,  value)
    self:SetString(self:UserKey(key), value);
end

---GetIntByUid
---@param key string
---@param defaultValue number int
---@return number int
function PlayerPrefsEx:GetIntByUid( key,  defaultValue)
    return self:GetInt(self:UserKey(key), defaultValue);
end

---GetFloatByUid
---@param key string
---@param defaultValue number float
---@return number float
function PlayerPrefsEx:GetFloatByUid( key,  defaultValue)
    return self:GetFloat(self:UserKey(key), defaultValue);
end

---GetStringByUid
---@param key string
---@param defaultValue string
---@return string
function PlayerPrefsEx:GetStringByUid( key,  defaultValue)
    return self:GetString(self:UserKey(key), defaultValue);
end

---GetLongByUid
---@param key string
---@param defaultValue number
---@return number
function PlayerPrefsEx:GetLongByUid( key,  defaultValue)
    return self:GetLong(self:UserKey(key), defaultValue);
end

function PlayerPrefsEx:DeleteKeyByUid( key)
    PlayerPrefs.DeleteKey(self:UserKey(key));
end

function PlayerPrefsEx:HasUidKey( key)
    return PlayerPrefs.HasKey(self:UserKey(key));
end

function PlayerPrefsEx:SetUidDailyReminded( key)
    self:SetLong(self:UserKey(key), g_Game.ServerTime:GetServerTimestampInDays());
end

function PlayerPrefsEx:ShouldDailyRemindByUid( key)
    local lastShowIndex = self:GetLong(self:UserKey(key));
    local dayIndex = g_Game.ServerTime:GetServerTimestampInDays()

    if dayIndex > lastShowIndex then
        return true;
    end 
    return false;
end

--region UnityEngine interface wrap

function PlayerPrefsEx:GetInt( key,  defaultValue)
    defaultValue = defaultValue or 0
    return PlayerPrefs.GetInt(key, defaultValue);
end

function PlayerPrefsEx:GetLong(key,  defaultValue)
    defaultValue = defaultValue or 0
    local str = PlayerPrefs.GetString(key);
    local value = tonumber(str);
    if value then
        return value;
    end
    return defaultValue;
end

function PlayerPrefsEx:GetFloat( key,  defaultValue)
    defaultValue = defaultValue or 0.0
    return PlayerPrefs.GetFloat(key, defaultValue);
end


function PlayerPrefsEx:GetString( key,  defaultValue)
    defaultValue = defaultValue or ''
    return PlayerPrefs.GetString(key, defaultValue);
end

function PlayerPrefsEx:DeleteAll()
    PlayerPrefs.DeleteAll();
end

function PlayerPrefsEx:DeleteKey( key)
    PlayerPrefs.DeleteKey(key);
end

function PlayerPrefsEx:SetInt( key,  value)
    PlayerPrefs.SetInt(key, value);
end

function PlayerPrefsEx:SetLong( key,  value)
    PlayerPrefs.SetString(key, tostring(value));
end

function PlayerPrefsEx:SetFloat( key,  value)
    PlayerPrefs.SetFloat(key, value);
end

function PlayerPrefsEx:SetString( key,  value)
    PlayerPrefs.SetString(key, value);
end

function PlayerPrefsEx:Save()
    PlayerPrefs.Save();
end
--end region

return PlayerPrefsEx
