---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by BE.Tenner.
--- DateTime: 2021/7/15 14:36
---
--- 单位渲染组件

local SEUnitComponentType = require("SEUnitComponentType")
local SEUnitComponent = require("SEUnitComponent")
local SEUnitType = require("SEUnitType")
local SEUnitCategory = require("SEUnitCategory")
local ConfigRefer = require("ConfigRefer")
local SELogger = require("SELogger")
local ArtResourceUtils = require("ArtResourceUtils")
local ArtResourceConsts = require("ArtResourceConsts")
local SEPetStatusType = require("SEPetStatusType")
local Utils = require("Utils")
local ColorConsts = require("ColorConsts")
local UIHelper = require("UIHelper")
local SEEnvironmentModeType = require("SEEnvironmentModeType")
local SESceneRoot = require("SESceneRoot")
local Layers = require("Layers")

local LAYER_CHARACTER = Layers.Character
local LAYER_SELECT = Layers.Selected
local TAG_PLAYER = "Player"

local V3_ONE = CS.UnityEngine.Vector3.one
local V3_ZERO = CS.UnityEngine.Vector3.zero

---@class SEUnitRenderer:SEUnitComponent
local SEUnitRenderer = class("SEUnitRenderer",  SEUnitComponent);

---@param self SEUnitRenderer
---@param unit SEUnit
---@return void
function SEUnitRenderer:ctor(unit)
    SEUnitRenderer.super.ctor(self, SEUnitComponentType.Renderer, unit)
    ---@type CS.SESplashTrigger
    self._splashTrigger = nil
    ---@type CS.SEMovingSoundTrigger
    self._movingSoundTrigger = nil
    self._createHelper = unit:GetManager():GetEnvironment():GetPooledCreateHelper()
	---@type CS.SEAdditionalMaterial
	self._additionalMaterial = nil
	---@type CS.DragonReborn.AssetTool.PooledGameObjectHandle
	self._createdEffectHandle = nil
	---@type table<number, CS.UnityEngine.GameObject>|nil
	self._goBeforeSetSelected = nil
end

---@param self SEUnitRenderer
---@return void
function SEUnitRenderer:Init()
	---@type SEUnit
    local unit = self:GetUnit()
    local data = unit:GetData()
    local config = data:GetConfig()
    ---@type ArtResourceConfigCell
    local resConf = ConfigRefer.ArtResource:Find(config:Model())
    local actor = unit:GetActor()
    if (data == nil or actor == nil) then
        return
    end
	
	local extraScale = data:GetExtraScale()
    actor:Init(data:GetPrefabPath(), data:GetMapRoot(), function(fromPool)
		local env = self:GetEnvironment()
		local unitManager = env._unitManager

        local go = actor:GetRootObject()
        go.transform.localPosition = V3_ZERO
        go.transform.localScale = V3_ONE * extraScale

        -- Model scale
		local fbx = self:GetActor():GetFbxTransform()
        if (resConf.ModelScale and resConf:ModelScale() > 0) then
            if (Utils.IsNotNull(fbx)) then
                --fbx.localScale = fbx.localScale * resConf:ModelScale()
				fbx.localScale = V3_ONE * resConf:ModelScale()
            end
		else
			if (Utils.IsNotNull(fbx)) then
				fbx.localScale = V3_ONE
			end
        end
		if (resConf.ModelRotationLength and resConf:ModelRotationLength() > 2) then
			if (Utils.IsNotNull(fbx)) then
				fbx.localRotation = CS.UnityEngine.Quaternion.Euler(CS.UnityEngine.Vector3(
						resConf:ModelRotation(1),
						resConf:ModelRotation(2),
						resConf:ModelRotation(3)))
			end
		end
		if (Utils.IsNotNull(fbx)) then
			fbx.localPosition = V3_ZERO
		end

        -- Unit data
		---@type CS.SEUnitDataComp
        local unitDataComp = go:GetComponent(typeof(CS.SEUnitDataComp))
		if (not unitDataComp) then
			unitDataComp = go:AddComponent(typeof(CS.SEUnitDataComp))
			unitDataComp.ID = unit._id
		elseif fromPool then
			unitDataComp.ID = unit._id
		else
			g_Logger.Error("SEUnitRenderer actor:Init use existing unitDataComp! old:%s current:%s", unitDataComp.ID, unit._id)
		end

		-- 层级设定
		go:SetLayerRecursive(LAYER_CHARACTER)

		-- 常驻特效
		local seEffect = unit:GetData():GetConfig():SeEffect()
		if (seEffect > 0) then
			local rootNode = go.transform:FirstOrDefaultByName("root")
			if (Utils.IsNull(rootNode)) then
				SELogger.LogError("Not root node for unit %s", unit:GetID())
			else
				local effectNode = rootNode
				local nodeName = unit:GetData():GetConfig():SeEffectPoint()
				if (not Utils.IsNullOrEmpty(nodeName)) then
					effectNode = rootNode:FirstOrDefaultByName(nodeName)
					if (Utils.IsNull(effectNode)) then
						effectNode = rootNode
					end
				end
				self._createdEffectHandle = self._createHelper:Create(ArtResourceUtils.GetItem(seEffect), effectNode, function(effect, userData, handle)
					effect.transform.localPosition = CS.UnityEngine.Vector3.zero
					effect.transform.localScale = CS.UnityEngine.Vector3.one
				end)
			end
		end

        -- Dialog
        if (config:HasDialog()) then
            self._createHelper:Create(ArtResourceUtils.GetItem(ArtResourceConsts.se_unit_dialog), require("SESceneRoot").GetSceneRoot(), function(dgo, userData, handle)
				if (self:GetEnvironment():GetUnitManager():IsUnitValid(unit)) then
					self:UnitDialogCallback(dgo, go, unit, config, resConf, handle)
				elseif handle then
					handle:Delete()
				end
            end)
        end

		-- 宠物抓捕状态
		if (config:PetStatus() ~= SEPetStatusType.Default) then
			self:GetActor():SetEmissionEnable(true)
		else
			self:GetActor():SetEmissionEnable(false)
		end

        local entity = unit:GetEntity()

        -- Speed change
        if (entity and entity.MovePathInfo) then
			if (env and unitManager) then
				unitManager:OnUnitSpeedChange(unit)
			end
        end

        -- Fight state change
        local fight = unit:GetFight()
        if (unit and fight) then
			if (env and unitManager) then
				unitManager:OnUnitFightChange(unit)
			end
        end

        -- Teleports to spawn point
        local locomotion = unit:GetLocomotion()
        if (locomotion ~= nil) then
            locomotion:Init()
            locomotion:TeleportTo(data:GetSpawnPos(), true)
            unit:GetStateMachine():OnIdle()
        end

        -- Spawn behavior
        if (config.SpawnBehaviour and config:SpawnBehaviour() > 0) then
            self:GetEnvironment():GetSkillManager():CastSkillPerform(
                    config:SpawnBehaviour(),
                    wds.enum.SkillStageType.SkillStageTypeDefault,
                    unit:GetActor(),
                    unit:GetActor():GetPosition(),
                    nil,
                    unit:GetActor():GetPosition())
        end

        -- 队长处理
        if (unit:GetType() == SEUnitType.Hero and unit:IsCaptain()) then
            -- Tag
            unit:GetActor():GetTransform().tag = TAG_PLAYER

			-- 更新单位阵营
			self:GetEnvironment():GetUnitManager():UpdateUnitsFaction()

			-- 场景加载完毕
			self:GetEnvironment():SetSceneLoadComplete()
        end

		-- 阵营
		if (self:GetEnvironment():IsHostile(unit)) then
			unit:SetHostile()
		elseif (self:GetEnvironment():IsFriendly(unit)) then
			unit:SetFriendly()
		end

		-- 计数
		if (unit:IsHostile()) then
			self._unit._manager:AddHostileUnitCount(self._unit._type)
		else
			self._unit._manager:AddFriendlyUnitCount(self._unit._type)
		end

		-- 尸体消失效果
		self:GetActor()._corpseController = go:GetComponent(typeof(CS.SEUnitCorpseDisslove))
		if (unit:IsHostile()) then
			if (Utils.IsNull(self:GetActor()._corpseController)) then
				self:GetActor()._corpseController = go:AddComponent(typeof(CS.SEUnitCorpseDisslove))
			else
				self:GetActor()._corpseController:StopDissolve(false)
			end
		else
			if (Utils.IsNotNull(self:GetActor()._corpseController)) then
				CS.UnityEngine.Object.Destroy(self:GetActor()._corpseController)
			end
			self:GetActor()._corpseController = nil
		end

		-- PVP时，对方单位增加描边
		if unit:IsHostile() and self:GetEnvironment():IsPVP() then
			actor:AppendMaterial(self:GetEnvironment():GetFactionManager():GetEnemyAppendMat())
		end

        -- 隐藏
		local unitType = unit._type
        unit:SetHidden(unit:GetManager():IsUnitTypeHidden(unitType))

		-- 20230504: 1Day版本抓宠关默认隐藏英雄
		local petCatchHeroHide = false
		if (unit:GetType() == SEUnitType.Hero) then
			local mapCfg = self._environment:GetInstanceConfig()
			if (mapCfg and mapCfg:PetWildIdLength() > 0) then
				petCatchHeroHide = true
				unit:SetHidden(true)
			end
		end

		-- Hud
		if (not petCatchHeroHide) then
			self._createHelper:Create(ArtResourceUtils.GetItem(ArtResourceConsts.se_unit_hud), require("SESceneRoot").GetSceneRoot(), function(hgo, userData, handle)
				if (self:GetEnvironment():GetUnitManager():IsUnitValid(unit)) then
					self:UnitHudCallback(hgo, go, unit, unitType, config, resConf, handle)
				elseif handle then
					handle:Delete()
				end
			end)
		end

		if config:CanCatch() then
			self._createHelper:Create(ArtResourceUtils.GetItem(ArtResourceConsts.ui3d_bubble_pet_probability), require("SESceneRoot").GetSceneRoot(), function(hgo, userData, handle)
				if (self:GetEnvironment():GetUnitManager():IsUnitValid(unit)) then
					self:UnitPetCatchHudCallback(hgo, go, unit, unitType, config, resConf, handle)
				elseif handle then
					handle:Delete()
				end
			end)
		end

        unit:GetStateMachine():OnGameObjectCreated()

        -- 出生即死判断（创建尸体）
        if (unit:GetHPServer() <= 0) then
            unit:SetDead(true)
        end

		unit:SetInit()
		actor:SetForward(data:GetSpawnForward())		
    end)
end

---@param hudGo CS.UnityEngine.GameObject
---@param go CS.UnityEngine.GameObject
---@param unit SEUnit
---@param unitType number
---@param config SeNpcConfigCell
---@param resConf ArtResourceConfigCell
---@param handle CS.DragonReborn.AssetTool.PooledGameObjectHandle
---@return void
function SEUnitRenderer:UnitHudCallback(hudGo, go, unit, unitType, config, resConf, handle)
    hudGo.transform:SetParent(go.transform)
    hudGo.transform.localPosition = CS.UnityEngine.Vector3(0, resConf:HpYOffset(), 0)
	hudGo.transform.localScale = V3_ONE
    ---@type CS.SEUnitHud
    local hud = hudGo:GetComponent(typeof(CS.SEUnitHud))
	hud.FacingCamera.transform.localScale = V3_ONE
    hud.FacingCamera.FacingCamera = self:GetEnvironment():GetCamera()
	if self:GetEnvironment():GetEnvMode() == SEEnvironmentModeType.CityScene then
		hud.FacingCamera.OrthographicScaleExtraScale = (1 / SESceneRoot.GetClientScale() / unit:GetData():GetExtraScale())
	else
		hud.FacingCamera.OrthographicScaleExtraScale = 1
	end
    unit:SetHud(hud, handle)
	hud.PwnedNode:SetActive(false)

	-- 样式
	if (config:Category() ~= SEUnitCategory.Elite
			and (unitType == SEUnitType.Monster	or unitType == SEUnitType.Puppet)) then
		hud.UseHPBar2 = true
	else
		hud.UseHPBar2 = false
	end

	local hpbar = hud:GetHPBar()
	hpbar.BackTweenDelayTime = ConfigRefer.ConstSe:SeUnitHpTweenSpeed()
    hpbar.BackTweenSpeed = ConfigRefer.ConstSe:SeUnitHpTweenSpeed()
    

	if (unitType == SEUnitType.Pet) then
		if unit:IsFriendly() then
			local clr = UIHelper.TryParseHtmlString(ColorConsts.army_green)
			--hud:SetHPForeColor(UIHelper.TryParseHtmlString(ColorConsts.army_blue))
			hud:SetHPForeColor(clr)
		else
			hud:SetHPForeColor(UIHelper.TryParseHtmlString(ColorConsts.army_red))
		end
	else
		local clr = UIHelper.TryParseHtmlString(ColorConsts.reminder_yellow)
		if (unit:IsFriendly()) then
			clr = UIHelper.TryParseHtmlString(ColorConsts.army_green)
		elseif (unit:IsHostile()) then
			clr = UIHelper.TryParseHtmlString(ColorConsts.army_red)
		end
		hud:SetHPForeColor(clr)
	end

    if (unitType == SEUnitType.Player or unitType == SEUnitType.Hero) then
        hpbar.BackGreatDamageThreshold = ConfigRefer.ConstSe:SePlayerGreatDamageRatio()
    else
		hpbar.BackGreatDamageThreshold = 1
    end

    self:GetEnvironment():GetUnitManager():OnUnitFightChange(unit)
    hudGo:SetActive(true)
    if (self:GetUnit():GetHPServer() <= 0) then
        hud:HideHP()
    end

	-- 等级
	self:RefreshHudLevel(unit, hud, config)

    -- 傀儡存活进度
    if (unit:GetData():GetConfig():SurvivalCountDown() and unit:IsPuppetType()) then
        local entity = unit:GetEntity()
        if (entity.BasicInfo.Expiration and entity.BasicInfo.Expiration > 0) then
            local time = (entity.BasicInfo.Expiration - g_Game.ServerTime:GetServerTimestampInMilliseconds()) / 1000
            hud:ShowProgress(time, true, true)
        end
    else
        hud:HideProgress()
    end
end

---@param self SEUnitRenderer
---@param dialogGo CS.UnityEngine.GameObject
---@param go CS.UnityEngine.GameObject
---@param unit SEUnit
---@param config SeNpcConfigCell
---@param resConf ArtResourceConfigCell
---@param handle CS.DragonReborn.AssetTool.PooledGameObjectHandle
---@return void
function SEUnitRenderer:UnitDialogCallback(dialogGo, go, unit, config, resConf, handle)
    dialogGo.transform:SetParent(go.transform)
    dialogGo.transform.localPosition = CS.UnityEngine.Vector3(0, resConf:HpYOffset(), 0)
    dialogGo.transform.localScale = CS.UnityEngine.Vector3.one * config:DialogScale()
    ---@type CS.SEUnitDialog
    local dialog = dialogGo:GetComponent(typeof(CS.SEUnitDialog))
    dialog.Camera.FacingCamera = self:GetEnvironment():GetCamera()
    unit:SetDialog(dialog, handle)
    dialogGo:SetActive(false)
end

---@param hudGo CS.UnityEngine.GameObject
---@param go CS.UnityEngine.GameObject
---@param unit SEUnit
---@param unitType number
---@param config SeNpcConfigCell
---@param resConf ArtResourceConfigCell
---@param handle CS.DragonReborn.AssetTool.PooledGameObjectHandle
function SEUnitRenderer:UnitPetCatchHudCallback(hudGo, go, unit, unitType, config, resConf, handle)
	hudGo.transform:SetParent(go.transform)
	hudGo.transform.localPosition = CS.UnityEngine.Vector3(0, resConf:HpYOffset(), 0)
	hudGo.transform.localScale = V3_ONE
	---@type SEUnitHudPetCatch
	local hud = hudGo:GetLuaBehaviour("SEUnitHudPetCatch").Instance
	hud.FacingCamera.FacingCamera = self:GetEnvironment():GetCamera()
	if self:GetEnvironment():GetEnvMode() == SEEnvironmentModeType.CityScene then
		hud.FacingCamera.OrthographicScaleExtraScale = (1 / SESceneRoot.GetClientScale() / unit:GetData():GetExtraScale())
	else
		hud.FacingCamera.OrthographicScaleExtraScale = 1
	end
	unit:SetPetCatchHud(hud, handle)
	hud:SetUnit(unit)
	hud:ResetToNormal()
	hud:ShowAsCatchTarget(nil)
	unit:OnStateWrapper3Change()
end

---@param self SEUnitRenderer
---@return boolean
function SEUnitRenderer:CanTriggerSplash()
    return self._splashTrigger ~= nil
end

---@param self SEUnitRenderer
---@return void
function SEUnitRenderer:ActivateSplash()
    --if (self._splashTrigger) then
    --    self._splashTrigger:Activate()
    --end
end

---@param self SEUnitRenderer
---@return void
function SEUnitRenderer:PlayMovingSound()
    if (self._movingSoundTrigger) then
        self._movingSoundTrigger:Play()
    end
end

---@param self SEUnitRenderer
function SEUnitRenderer:GetAdditionalMaterial()
	return self._additionalMaterial
end

---@param unit SEUnit
---@param hud CS.SEUnitHud
---@param config SeNpcConfigCell
function SEUnitRenderer:RefreshHudLevel(unit, hud, config)
	if not config then return end
	-- 等级
	local levelNode = hud:GetLevelNode()
	local levelText = hud:GetLevelText()
	local level
	if (config.LevelShow and config:LevelShow()) then
		if (unit:IsHero() or unit._type == SEUnitType.Pet) then
			level = unit:GetEntity().BasicInfo.Level
		else
			level = config.Level and config:Level() or 0
			if (unit:IsHostile()) then
				local extraLevel = self._unit._manager._env._instConfig:LVAddon() or 0
				level = level + extraLevel
			end
		end
	end
	if (level and level > 0) then
		--g_Logger.Trace("*** unit %s level %s", unit._id, level)
		levelNode:SetActive(true)
		levelText.text = tostring(level)
	else
		levelNode:SetActive(false)
	end
end

function SEUnitRenderer:SetSelected(selected)
	if selected and not self._goBeforeSetSelected then
		local fbxRendererArray = self:GetActor():GetFbxRendererList()
		if Utils.IsNotNull(fbxRendererArray) and fbxRendererArray.Length > 0 then
			self._goBeforeSetSelected = {}
			for i = 0, fbxRendererArray.Length -1  do
				local render = fbxRendererArray[i]
				if Utils.IsNotNull(render) and render.gameObject.layer == LAYER_CHARACTER then
					render.gameObject.layer = LAYER_SELECT
					table.insert(self._goBeforeSetSelected, render.gameObject)
				end
			end
		end
	elseif not selected and self._goBeforeSetSelected then
		for _, v in pairs(self._goBeforeSetSelected) do
			if Utils.IsNotNull(v) then
				v.layer = LAYER_CHARACTER
			end
		end
		self._goBeforeSetSelected = nil
	end
end

function SEUnitRenderer:Release()
	self:SetSelected(false)
	if (self._createdEffectHandle) then
		self._createdEffectHandle:Delete()
		self._createdEffectHandle = nil
	end
end

return SEUnitRenderer
