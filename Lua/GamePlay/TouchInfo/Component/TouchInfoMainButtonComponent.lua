---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xh.
--- DateTime: 2022/7/22 11:46
---

local BaseUIComponent = require('BaseUIComponent')
local Delegate = require("Delegate")
local ArtResourceUIConsts = require("ArtResourceUIConsts")
local KingdomMapUtils = require('KingdomMapUtils')
local UIHelper = require("UIHelper")
local EventConst = require("EventConst")

---@class TouchInfoButtonData
---@field func fun():boolean 返回true时点击完不关闭环形菜单
---@param param any
---@field icon string
---@field text string
---@field background string
---@field enableFunc boolean|function
---@field disableTipFunc fun(param):string
---@field textStyle string|nil
---@field disableTextStyle string|nil
---@field disableFunc fun():boolean  返回true时点击完不关闭环形菜单

---@class TouchInfoMainButtonComponent : BaseUIComponent
local TouchInfoMainButtonComponent = class("TouchInfoMainButtonComponent", BaseUIComponent)

function TouchInfoMainButtonComponent:OnCreate()
    self._p_btn_main = self:Button("p_btn_main", Delegate.GetOrCreate(self, self.OnClick))
    self._background = self:Image("p_btn_main")
    self._p_text = self:Text("p_text")
    self._p_icon = self:Image("p_icon")
    self._p_disable_tip = self:Text("p_disable_tip")
end

---@param data TouchInfoButtonData
function TouchInfoMainButtonComponent:OnFeedData(data)
    if data.icon then
        self._p_icon.gameObject:SetActive(true)
        g_Game.SpriteManager:LoadSprite(data.icon, self._p_icon)
    else
        self._p_icon.gameObject:SetActive(false)
    end
    self.func = data.func
    self.param = data.param
    self.disableFunc = data.disableFunc
    
    self._p_text.text = data.text
    if type(data.enableFunc) == "boolean" then
        self.active = data.enableFunc
    elseif type(data.enableFunc) == "function" then
        self.active = data.enableFunc(self.param)
    else
        self.active = true
    end
    


    if not self.active then
        self:LoadSprite(ArtResourceUIConsts.sp_btn_circle_grey, self._background)
        UIHelper.SetGray(self._p_icon.gameObject, true)
        self._p_disable_tip.text = data.disableTipFunc and data.disableTipFunc(data.param) or string.Empty
    else
        g_Game.SpriteManager:LoadSprite(data.background, self._background)
        UIHelper.SetGray(self._p_icon.gameObject, false)
        self._p_disable_tip.text = string.Empty
    end

    if self.active and type(data.textStyle) == "string" then
        self._p_text.Style = data.textStyle
    elseif not self.active and type(data.disableTextStyle) == "string" then
        self._p_text.Style = data.disableTextStyle
    end
end

function TouchInfoMainButtonComponent:OnClose()
    self.active = false
end

function TouchInfoMainButtonComponent:OnClick()
    if self.active and self.func then
        if not self.func(self.param) then
            if self.active then
                self:GetParentBaseUIMediator():CloseSelf()
            end
        end
        g_Game.EventManager:TriggerEvent(EventConst.MAP_RESET_SELECTION)
    elseif not self.active and self.disableFunc then
        if not self.disableFunc(self.param) then
            if self.active then
                self:GetParentBaseUIMediator():CloseSelf()
            end
        end
    end
end

return TouchInfoMainButtonComponent