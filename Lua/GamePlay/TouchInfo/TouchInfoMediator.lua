--- sceneName : scene_common_touch_info_detail
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xh.
--- DateTime: 2022/7/19 14:48
--- Updated by zhangyang recently
--- Feature: 2022/11/17 增加分页展示子Window
---
local Vector2 = CS.UnityEngine.Vector2
local Screen = CS.UnityEngine.Screen
local LuaBaseComponent = CS.DragonReborn.UI.LuaBaseComponent
local GameObject = CS.UnityEngine.GameObject
local LayoutRebuilder = CS.UnityEngine.UI.LayoutRebuilder

local BaseUIMediator = require ('BaseUIMediator')
local Utils = require("Utils")
local KingdomMapUtils = require("KingdomMapUtils")
local UIHelper = require('UIHelper')
local TouchInfoTemplatePrefabNames = require("TouchInfoTemplatePrefabNames")
local TouchInfoTemplateComponentNames = require("TouchInfoTemplateComponentNames")
local Delegate = require("Delegate")
local EventConst = require("EventConst")
local TouchInfoWindowStyle = require("TouchInfoWindowStyle")
local TouchInfoTemplate = require("TouchInfoTemplate")

---@class TouchInfoMediator : BaseUIMediator
---@field data TouchInfoData
---@field anchorRoot CS.UnityEngine.RectTransform
---@field rightRoot CS.UnityEngine.RectTransform
-- -@field mainRoot CS.UnityEngine.RectTransform
---@field secondaryRoot CS.UnityEngine.RectTransform
-- -@field buttonRoot CS.UnityEngine.RectTransform
---@field mainWindow CS.UnityEngine.RectTransform
---@field mainWindowLayout CS.DragonReborn.UI.UGUIExtends.CircleLayoutGroup
---@field isAutoMoving boolean
local TouchInfoMediator = class('TouchInfoMediator', BaseUIMediator)
local MAX_TOGGLE_COUNT = 2

function TouchInfoMediator:OnCreate()
    self.anchorRoot = self:Transform("p_root")
    self.rightRoot = self:Transform("p_city_info_right")
    self.leftRoot = self:GameObject("p_city_info_left")
    -- self.mainRoot = self:Transform("p_group_main")
    self.secondaryRoot = self:Transform("p_group_secondary")
    self.templateRoot = self:Transform("p_template_root")
    -- self.buttonRoot = self:Transform("p_table_btn")
    self.mainWindow = self:Transform("p_window_main")
    self.mainWindowLayout = self:BindComponent("p_window_main", typeof(CS.DragonReborn.UI.UGUIExtends.CircleLayoutGroup))

    ---@type TouchInfoToggleGroup
    self.toggleRoot = self:LuaObject("p_group_tab")
    self.nonToggleImage = self:GameObject("p_icon_arrow")
end

---@param param TouchInfoData
function TouchInfoMediator:OnOpened(param)
    self.data = param
    self.templateRoot.gameObject:SetActive(false)
    
    self.isAutoMoving = false
    
    self:CollectComponents()
    self:ClearComponents()
    self:InitComponents()
    self:UpdatePosition()

    local basicCamera = KingdomMapUtils.GetBasicCamera()
    basicCamera:SetAnchoredPosition(self.data.position)
    self:MoveCameraToFitScreen()

    g_Game:AddLateFrameTicker(Delegate.GetOrCreate(self, self.Tick))
end

function TouchInfoMediator:OnShow(param)
    BaseUIMediator.OnShow(self, param)
    local call = Delegate.GetOrCreate(self, self.ProcessCityGestureEvent)
    g_Game.EventManager:AddListener(EventConst.CITY_GESTURE_CLICK, call)
    g_Game.EventManager:AddListener(EventConst.CITY_GESTURE_PRESS_DOWN, call)
    g_Game.EventManager:AddListener(EventConst.CITY_GESTURE_TOUCH_START, call)
    g_Game.EventManager:AddListener(EventConst.UI_BUTTON_CLICK_PRE, Delegate.GetOrCreate(self, self.OnButtonClick))
end

function TouchInfoMediator:OnHide(param)
    local call = Delegate.GetOrCreate(self, self.ProcessCityGestureEvent)
    g_Game.EventManager:RemoveListener(EventConst.UI_BUTTON_CLICK_PRE, Delegate.GetOrCreate(self, self.OnButtonClick))
    g_Game.EventManager:RemoveListener(EventConst.CITY_GESTURE_CLICK, call)
    g_Game.EventManager:RemoveListener(EventConst.CITY_GESTURE_PRESS_DOWN, call)
    g_Game.EventManager:RemoveListener(EventConst.CITY_GESTURE_TOUCH_START, call)
    BaseUIMediator.OnHide(self, param)
end

function TouchInfoMediator:OnClose(param)
    if self.data and self.data.closeCallback then
        self.data.closeCallback()
    end
    g_Game:RemoveLateFrameTicker(Delegate.GetOrCreate(self, self.Tick))
    local basicCamera = KingdomMapUtils.GetBasicCamera()
    if basicCamera then
        basicCamera:SetAnchoredPosition(nil)
    end
    g_Game.EventManager:TriggerEvent(EventConst.TOUCH_INFO_UI_CLOSE)
end

function TouchInfoMediator:Tick()
    if Utils.IsNull(self.CSComponent) then
        return
    end
    self:UpdatePosition()
    if self.isAutoMoving then
        if self:CheckFitScreen() then
            -- stop moving
            local basicCamera = KingdomMapUtils.GetBasicCamera()
            basicCamera:LookAt(basicCamera:GetLookAtPosition())
            self.isAutoMoving = false
        end
    end
end

function TouchInfoMediator:CollectComponents()
    self.componentPrefabMap = {}
    for type, prefabName in pairs(TouchInfoTemplatePrefabNames) do
        self.componentPrefabMap[type] = self:LuaBaseComponent(prefabName)
        local curScript = self.componentPrefabMap[type]:GetLuaScriptPath()
        if curScript ~= TouchInfoTemplateComponentNames[type] then
            g_Logger.Error(("TouchInfo界面的模板资源与脚本不匹配, 当前为%s, 预期为%s"):format(curScript, TouchInfoTemplateComponentNames[type]))
        end
    end
    self.bgTrans = self:Transform("p_window")
    self.bgWithBackTrans = self:Transform("p_window_with_background")

    self.bgTrans.gameObject:SetActive(false)
    self.bgWithBackTrans.gameObject:SetActive(false)
    self.windowBaseMap = {
        [TouchInfoWindowStyle.Empty] = self.bgTrans,
        [TouchInfoWindowStyle.WithBackground] = self.bgWithBackTrans,
    }
end

function TouchInfoMediator:InitComponents()
    self:InitMainWindow()
    self:InstantiateLeftWindows()
end

---@param typ number TouchInfoTemplate枚举
---@param data table 对应的数据
---@param parent CS.UnityEngine.RectTransform
---@param blackboard {pairState:number}
function TouchInfoMediator:InstantiateComp(typ, data, parent, blackboard)
    local compTemplate = self.componentPrefabMap[typ]
    if compTemplate then
        local comp = UIHelper.DuplicateUIComponent(compTemplate, parent)
        self:PreFeedData(typ, data, blackboard)
        comp:FeedData(data)
    else
        g_Logger.Error(("不存在的模板类型 %d"):format(typ))
    end
end

---@param typ number TouchInfoTemplate枚举
---@param data table 对应的数据
---@param parent CS.UnityEngine.RectTransform
---@param blackboard {pairState:number}
function TouchInfoMediator:PreFeedData(typ, data, blackboard)
    if typ == TouchInfoTemplate.GROUP_PAIR then
        data.backState = blackboard.pairState
        blackboard.pairState = (blackboard.pairState ~ 0x3) & 0x3
    end
end

---@param windowData TouchInfoWindowData
---@param parent CS.UnityEngine.RectTransform
---@return CS.UnityEngine.RectTransform
function TouchInfoMediator:InstantiateWindow(style, windowData, parent)
    local template = self.windowBaseMap[style]
    local windowTrans = GameObject.Instantiate(template, parent)
    windowTrans.gameObject:SetActive(true)
    local windowGlobalBlackboard = {pairState = 1}
    for _, v in ipairs(windowData.data) do
        self:InstantiateComp(v.typ, v.compData, windowTrans, windowGlobalBlackboard)
    end
    return windowTrans
end

function TouchInfoMediator:InitMainWindow()
    for _, v in ipairs(self.data.windowData[1].data) do
        self:InstantiateComp(v.typ, v.compData, self.mainWindow)
    end

    for i, v in ipairs(self.data.btns) do
        self:InstantiateComp(v.typ, v.compData, self.mainWindow)
    end
    self.mainWindowLayout:RebuildLayout()
end

function TouchInfoMediator:InstantiateLeftWindows()
    -- 无需分页
    if not self.data.windowToggleData.showToggle then
        self:InstantiateMultiLeftWindows()
    else
        local imageIds = self.data.windowToggleData.toggleImageIds
        local idCount = imageIds ~= nil and #imageIds or 0
        if idCount == 1 then
            self:InstantiateMultiLeftWindows()
        elseif idCount ~= #self.data.windowToggleData.windowIdxGroup then
            g_Logger.Error(("标签数量与左侧窗口数不符, 标签数为%d, 窗口组数为%d"):format(idCount, #self.data.windowToggleData.windowIdxGroup))
            self:InstantiateMultiLeftWindows()
        else
            self:InstantiateToggleLeftWindows()
        end
    end
end

function TouchInfoMediator:InstantiateMultiLeftWindows()
    for i = 2, #self.data.windowData do
        self:InstantiateWindow(self.data.windowData[i].windowStyle, self.data.windowData[i], self.secondaryRoot)
    end
    self.leftRoot:SetActive(#self.data.windowData > 1)
    self.toggleRoot.CSComponent.gameObject:SetActive(false)
    self.nonToggleImage:SetActive(#self.data.windowData > 1)
    LayoutRebuilder.ForceRebuildLayoutImmediate(self.anchorRoot)
end

function TouchInfoMediator:InstantiateToggleLeftWindows()
    self.toggleRoot.CSComponent.gameObject:SetActive(true)
    self.nonToggleImage:SetActive(false)
    local idx = math.clamp(self.data.windowToggleData.firstToggle, 1, math.min(#self.data.windowData - 1, MAX_TOGGLE_COUNT))
    self.toggleRoot:SetupGroup(
        {self.toggleRoot.toggleBtn1, self.toggleRoot.toggleBtn2},
        {{index = 1, imageId = self.data.windowToggleData.toggleImageIds[1]}, {index = 2, imageId = self.data.windowToggleData.toggleImageIds[2]}},
        Delegate.GetOrCreate(self, self.OnLeftWindowToggleChanged)
    )
    self.toggleRoot:SelectToggle(idx)
end

---@param data TouchInfoLeftWindowToggleButtonData
function TouchInfoMediator:OnLeftWindowToggleChanged(data)
    if self.toggleWindow == nil then
        self.toggleWindow = {}
        for i, v in ipairs(self.data.windowToggleData.windowIdxGroup) do
            self.toggleWindow[i] = {}
            for _, windowIdx in ipairs(v) do
                local windowTrans = self:InstantiateWindow(self.data.windowData[windowIdx].windowStyle, self.data.windowData[windowIdx], self.secondaryRoot)
                table.insert(self.toggleWindow[i], windowTrans.gameObject)
            end
        end
    end

    for i, v in ipairs(self.toggleWindow) do
        for _, window in ipairs(v) do
            window:SetActive(data.index == i)
        end
    end
    LayoutRebuilder.ForceRebuildLayoutImmediate(self.anchorRoot)
end

function TouchInfoMediator:ClearComponents()
    self:ClearMainWindow()
    
    local secondaryComponents = self.secondaryRoot:GetComponentsInChildren(typeof(LuaBaseComponent))
    for i = 0, secondaryComponents.Length - 1 do
        local component = secondaryComponents[i]
        UIHelper.DeleteUIComponent(component)
    end
    for i = 0, self.secondaryRoot.childCount - 1 do
        GameObject.Destroy(self.secondaryRoot:GetChild(i).gameObject)
    end
end

function TouchInfoMediator:ClearMainWindow()
    local mainComponents = self.mainWindow:GetComponentsInChildren(typeof(LuaBaseComponent))
    for i = 0, mainComponents.Length - 1 do
        local component = mainComponents[i]
        UIHelper.DeleteUIComponent(component)
    end
    for i = 0, self.mainWindow.childCount - 1 do
        GameObject.Destroy(self.mainWindow:GetChild(i).gameObject)
    end
end


function TouchInfoMediator:UpdatePosition()
    local position = self.data.position
    self.anchorRoot.position = KingdomMapUtils.WorldToUIPosition(position)
end

function TouchInfoMediator:MoveCameraToFitScreen()
    if not self:CheckFitScreen() then
        local basicCamera = KingdomMapUtils.GetBasicCamera()
        basicCamera:LookAt(self.data.position, 0.5, function() self.isAutoMoving = false  end)
        self.isAutoMoving = true
    end
end

function TouchInfoMediator:CheckFitScreen()
    local size = Vector2(Screen.width, Screen.height)
    local max = self.CSComponent.transform.rect.max + self.anchorRoot.anchoredPosition + size / 2
    local min = self.CSComponent.transform.rect.min + self.anchorRoot.anchoredPosition + size / 2
    return 0 <= min.x and max.x <= size.x and 0 <= min.y and max.y <= size.y 
end

function TouchInfoMediator:ProcessCityGestureEvent()
    if not self.data or not self.data.onCityGestureClose then
        return
    end
    self:CloseSelf()
end

---@param baseComponent BaseUIComponent
function TouchInfoMediator:OnButtonClick(baseComponent)
    local mediator = baseComponent:GetParentBaseUIMediator()
    if mediator == nil or mediator == self then
        return
    end
    self:CloseSelf()
end

return TouchInfoMediator
