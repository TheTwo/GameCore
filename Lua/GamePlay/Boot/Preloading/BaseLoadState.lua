local SdkCrashlytics = require("SdkCrashlytics")
local ModuleRefer = require('ModuleRefer')

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/4/28 16:23
---
---@class BaseLoadState
local BaseLoadState = class("BaseLoadState")

function BaseLoadState:ctor()
    self._dependencies = {}    
    self.Start = false
    self.Finished = false
    self.Exited = false
end


---@return number
function BaseLoadState:StateNumber()
    return 0
end

---@param otherStep BaseLoadState
function BaseLoadState:AddDependency(otherStep)
    table.insert(self._dependencies, otherStep)
end

---@return boolean
function BaseLoadState:AllDependenciesFinished()
    --由于继承没有重载ctor导致初始化失败
    if not self._dependencies then
        return false
    end

    for _, state in ipairs(self._dependencies) do
        if not state.Exited then
            return false
        end
    end
    return true;
end

--需要重载的函数

function BaseLoadState:GetProgressWeight()
    return 1
end

function BaseLoadState:GetProgress()
    return 0
end

---@return string
function BaseLoadState:Description()
    return ""
end
---@return number
function BaseLoadState:DescriptionPriority()
    return 0
end

function BaseLoadState:Enter()
    g_Logger.Log(GetClassName(self) .. 'Enter')

    self.Start = true
    SdkCrashlytics.RecordBaseLoadingState(GetClassName(self), true)

    self.timeBegin = CS.UnityEngine.Time.time 
end

function BaseLoadState:Exit()
    g_Logger.Log(GetClassName(self) .. 'Exit')
    SdkCrashlytics.RecordBaseLoadingState(GetClassName(self), false)

    local duration = CS.UnityEngine.Time.time - self.timeBegin
    ModuleRefer.FPXSDKModule:TrackLoading(self:StateNumber(), GetClassName(self), duration)

    self.Exited = true
end

function BaseLoadState:Tick(dt)

end

function BaseLoadState:Finish()
    self.Finished = true
end

return BaseLoadState