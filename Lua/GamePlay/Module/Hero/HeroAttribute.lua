---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/6/21 13:34
---
local HeroAttributeInfo = require('HeroAttributeInfo')
---@class HeroAttribute
---@field new fun(group:AttrGroupConfigCell):HeroAttribute
---@field attributes table<number,HeroAttributeInfo>
local HeroAttribute = class('HeroAttribute')

---@param group AttrGroupConfigCell
function HeroAttribute:ctor(group)
    if not group then return end
    local length = group:AttrListLength()
    if length < 1 then return end
    self.attributes = {}
    for i = 1, length do
        local attr = group:AttrList(i)
        local info = HeroAttributeInfo.New(attr)
        self.attributes[info.type] = info
    end
end

---@param data table<number,number> @AttrTypeAndValue from network
function HeroAttribute:InitWithAttrTypeAndValue(data)
    self.attributes = {}
    for typeId, value in pairs(data) do
        self.attributes[typeId] = HeroAttributeInfo.CreateInfo(typeId,value)
    end
end

---@param key number @类型Id@AttrElement
---@return HeroAttributeInfo
function HeroAttribute:Get(key)
    if not self.attributes then return nil end
    return self.attributes[key]
end

---@param other HeroAttribute
---@param trim boolean @如果没有对应属性，则忽略
function HeroAttribute:Add(other,trim)
    if not other or not other.attributes then
        return self
    end
    for k, v in pairs(other.attributes) do
        if self.attributes[k] then
            self.attributes[k].value = self.attributes[k].value + v.value
        elseif not trim then
            self.attributes[k] = HeroAttributeInfo.New()
            self.attributes[k]:Clone(v)
        end
    end
    return self
end

function HeroAttribute:__add(other)
    return self:Add(other)
end

---@param other HeroAttribute
function HeroAttribute:Sub(other)
    if not other or not other.attributes then
        return self
    end

    for k, v in pairs(other.attributes) do
        if self.attributes[k] then
            self.attributes[k].value = self.attributes[k].value - v.value
        end
    end

    return self
end
function HeroAttribute:__sub(other)
    return self:Sub(other)
end
return HeroAttribute