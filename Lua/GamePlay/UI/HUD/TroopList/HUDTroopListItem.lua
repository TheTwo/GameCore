---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/4/22 11:51
---

local BaseTableViewProCell = require('BaseTableViewProCell')
local UIHelper = require('UIHelper')
local DBEntityPath = require('DBEntityPath')
local ModuleRefer = require('ModuleRefer')
local UIMediatorNames = require('UIMediatorNames')
local I18N = require('I18N')
local SlgUtils = require('SlgUtils')
local EventConst = require("EventConst")
local Delegate = require('Delegate')
local HUDTroopStateHolder = require('HUDTroopStateHolder')
local HUDTroopBubbleHolder = require('HUDTroopBubbleHolder')
local HUDTroopUtils = require("HUDTroopUtils")
local QueuedTask = require("QueuedTask")
local Utils = require("Utils")

---@class HUDTroopListItem : BaseTableViewProCell
---@field kingdomInteraction KingdomInteractionModule
---@field slgModule SlgModule
---@field heroIcon HeroInfoItemSmallComponent
local HUDTroopListItem = class('HUDTroopListItem',BaseTableViewProCell)

function HUDTroopListItem:ctor()
    BaseTableViewProCell.ctor(self)
    self.troopId = 0
    self.kingdomInteraction = nil
    self.eventsAdd = false
    ---@type number|nil
    self.castleBriefId = nil
    self.troopStatusDirtyFrame = 0
    self.spriteCache = {}

    self.stateHolder = nil
end

function HUDTroopListItem:OnCreate(param)
    self.heroCfgId = 0
    ---@type HeroInfoItemComponent
    self.heroIcon = self:LuaObject('child_card_hero_s')
    self.btnLock = self:Button('p_item_lock',Delegate.GetOrCreate(self,self.OnLockBtnClick))
    self.btnAdd = self:Button('p_item_add',Delegate.GetOrCreate(self,self.OnAddBtnClick))
    self.imgStatus = self:Image('p_troop_status')
    self.imgIconStatus = self:Image('p_icon_status')
    self.sliderTroopHp = self:Slider('p_troop_hp')

    self.goTroopSelect = self:GameObject('p_group_check')
    self.toggleTroopSelect = self:Toggle('child_toggle',Delegate.GetOrCreate(self,self.OnSelectToggleClick))
    self.kingdomInteraction = ModuleRefer.KingdomInteractionModule
    self.slgModule = ModuleRefer.SlgModule

    self.btnEventLabel = self:Button('p_btns_s',Delegate.GetOrCreate(self,self.OnClickEventLabel))
    self.imgEventLabel = self:Image('p_icon_s')
    self.imgEventLabelSpName =nil
end

function HUDTroopListItem:OnShow(param)
    self:SetupEvents(true)
    self:SetupHolder()
end

function HUDTroopListItem:OnHide(param)
    self:SetupEvents(false)
    self:ReleaseHolder()
end

function HUDTroopListItem:OnRecycle()
    if self.kingdomInteraction and self.kingdomInteraction:IsDraging() then
        self:OnTroopDragCancel()
    end
    self:SetupEvents(false)
    self:ReleaseHolder()
end

function HUDTroopListItem:OnClose()
    self:SetupEvents(false)

    if self.waitTeamHeroTask then
        self.waitTeamHeroTask:Release()
        self.waitTeamHeroTask = nil
    end

    if self.waitTroopTask then
        self.waitTroopTask:Release()
        self.waitTroopTask = nil
    end
end

---@param data HUDTroopListData
function HUDTroopListItem:OnFeedData(data)
    self.castleBriefId = ModuleRefer.PlayerModule:GetCastle().ID
    self.isInitializing = true
    self.index = data.index
    self.presetIndex = data.presetIndex

    ---@type TroopInfo
    self.troopInfo = data.troopInfo
    if self.troopInfo.entityData then
        self.troopId = self.troopInfo.entityData.ID;
    else
        self.troopId = 0
    end

    local leaderIsEmpty = true
    if self.troopInfo.locked then
        self.goTroopSelect:SetVisible(false)
        self:SetupLock()
        self:SetupTroopEventLabel(nil)
    else
        if HUDTroopUtils.DoesPresetHaveAnyHero(self.troopInfo.preset) then
            local leaderId = ModuleRefer.TroopModule:GetPresetLeadHeroId(self.troopInfo.preset)
            local heroCache = ModuleRefer.HeroModule:GetHeroByCfgId(leaderId)
            if heroCache and heroCache.dbData then
                leaderIsEmpty = false
            end
        elseif self.troopInfo.entityData ~= nil then
            -- Show GM Troop Info
            local leaderId = SlgUtils.GetTroopLeadHeroId(self.troopInfo.entityData.Battle.Group.Heros)
            local heroCache = ModuleRefer.HeroModule:GetHeroByCfgId(leaderId)
            if heroCache then
                leaderIsEmpty = false
            end
        end

        if leaderIsEmpty then
            self.goTroopSelect:SetVisible(false)
            self:SetupAdd()
            self:SetupTroopEventLabel(nil)
        else
            self:SetupTroopInfo(self.troopInfo)
            self:SetupTroopEventLabel(data)
        end
    end
    self:ReleaseHolder()
    self:SetupHolder(self.troopInfo.locked, leaderIsEmpty)
    self.isInitializing = false
end

---@param troopInfo TroopInfo
function HUDTroopListItem:SetupTroopInfo(troopInfo)
    self.heroIcon:SetVisible(true)
    self.imgStatus:SetVisible(true)
    self.sliderTroopHp:SetVisible(true)
    self.btnLock:SetVisible(false)
    self.btnAdd:SetVisible(false)

    local selectCount = self.slgModule.selectManager:GetSelectCount()
    if selectCount > 1 then
        self.goTroopSelect:SetVisible(true)
        if self.bubbleHolder then
            self.bubbleHolder:UpdateUI()
        end
        if troopInfo.entityData then
            self.toggleTroopSelect.isOn = self.slgModule.selectManager:IsTroopSelect(troopInfo.entityData.ID)
        else
            self.toggleTroopSelect.isOn = self.slgModule.selectManager:IsPresetSelect(self.presetIndex)
        end
    else
        if self.bubbleHolder then
            self.bubbleHolder:UpdateUI()
        end
        self.goTroopSelect:SetVisible(false)
    end

    if troopInfo.entityData then
        self.heroIcon:ChangeStateSelect( self.slgModule.selectManager:IsTroopSelect(troopInfo.entityData.ID) )
    else
        self.heroIcon:ChangeStateSelect(self.slgModule.selectManager:IsPresetSelect(self.presetIndex))
    end

    ---@type wds.Troop
    local troopData = troopInfo.entityData

    local heroCfgID = ModuleRefer.TroopModule:GetTroopLeadHeroId(self.presetIndex)
    if heroCfgID == 0 and troopData then
        heroCfgID = SlgUtils.GetTroopLeadHeroId(troopData.Battle.Group.Heros)
    end

    if self.heroCfgId ~= heroCfgID then
        ---@type HeroInfoData
        local itemData = {
            heroData = ModuleRefer.HeroModule:GetHeroByCfgId(heroCfgID),
            hideJobIcon = true,
            hideStrengthen = true,
            hideStyle = true,
        }
        self.heroCfgId = heroCfgID
        self.heroIcon:FeedData(itemData)
    end

    self:UpdateHp()
    self:UpdateTroopStatus()
    self:OnTroopStateChanged(troopData)

    if self.kingdomInteraction then
        self:DragEvent('p_btn_troop_head',
                Delegate.GetOrCreate(self,self.OnTroopBeginDrag),
                Delegate.GetOrCreate(self,self.OnTroopDrag) ,
                Delegate.GetOrCreate(self,self.OnEndTroopDrag),
                true)
        self:DragCancelEvent('p_btn_troop_head',Delegate.GetOrCreate(self,self.OnTroopDragCancel))
    end
    self:PointerClick('p_btn_troop_head', Delegate.GetOrCreate(self,self.OnTroopClick))
end

function HUDTroopListItem:UpdateHp()
    local presetData = self.troopInfo.preset

    local ctrl = self.slgModule:GetTroopCtrl(self.troopId)
    if ctrl then
        local troopHp = ctrl:GetHP()
        local troopMaxHp = ctrl:GetMaxHP()
        if troopMaxHp < 1 then
            self.sliderTroopHp:SetVisible(false)
        else
            self.sliderTroopHp:SetVisible(true)
            self.sliderTroopHp.value = math.clamp01(troopHp / troopMaxHp)
        end
    elseif presetData then
        local troopHp, troopMaxHp = ModuleRefer.SlgModule:GetTroopHpByPreset(presetData)
        if troopMaxHp < 1 then
            self.sliderTroopHp:SetVisible(false)
        else
            self.sliderTroopHp:SetVisible(true)
            self.sliderTroopHp.value = math.clamp01(troopHp / troopMaxHp)
        end
    else
        self.sliderTroopHp:SetVisible(false)
        self.sliderTroopHp.value = 1
    end
end

---@param data HUDTroopListData
function HUDTroopListItem:SetupTroopEventLabel(data)
    if not data or not data.eventTriggerd then
        self.imgEventLabel:SetVisible(false)
        self.btnEventLabel:SetVisible(false)
        self.onLabelClick = nil
        return
    end
    self.imgEventLabel:SetVisible(true)
    self.btnEventLabel:SetVisible(true)
    if self.imgEventLabelSpName ~= 'sp_city_icon_battle_1' then
        self.imgEventLabelSpName = 'sp_city_icon_battle_1'
        UIHelper.LoadSprite('sp_city_icon_battle_1', self.imgEventLabel)
    end
    self.onLabelClick = data.onClick
end

function HUDTroopListItem:OnClickEventLabel()
    if self.onLabelClick then
        self.onLabelClick(self.index)
    end
end

function HUDTroopListItem:SetupAdd()
    self.heroIcon:SetVisible(false)
    self.imgStatus:SetVisible(false)
    self.sliderTroopHp:SetVisible(false)
    self.btnLock:SetVisible(false)
    self.btnAdd:SetVisible(true)
end

function HUDTroopListItem:SetupLock()
    self.heroIcon:SetVisible(false)
    self.imgStatus:SetVisible(false)
    self.sliderTroopHp:SetVisible(false)
    self.btnLock:SetVisible(true)
    self.btnAdd:SetVisible(false)
end

function HUDTroopListItem:SetupEvents(add)
    if not self.eventsAdd and add then
        self.eventsAdd = add
        g_Game.DatabaseManager:AddChanged(DBEntityPath.CastleBrief.TroopPresets.MsgPath, Delegate.GetOrCreate(self, self.OnTroopPresetStateChanged))
        g_Game.DatabaseManager:AddChanged(DBEntityPath.Troop.MapStates.MsgPath,Delegate.GetOrCreate(self,self.OnTroopStateChanged))
        g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.Hero.HeroInfos.MsgPath,Delegate.GetOrCreate(self,self.OnHeroInfoChanged))
        g_Game.DatabaseManager:AddChanged(DBEntityPath.Hero.MapStates.MsgPath, Delegate.GetOrCreate(self, self.OnHeroMapStatesChanged))
        g_Game:AddFrameTicker(Delegate.GetOrCreate(self, self.Tick))
    elseif self.eventsAdd and not add then
        self.eventsAdd = add
        g_Game.DatabaseManager:RemoveChanged(DBEntityPath.CastleBrief.TroopPresets.MsgPath, Delegate.GetOrCreate(self, self.OnTroopPresetStateChanged))
        g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Troop.MapStates.MsgPath,Delegate.GetOrCreate(self,self.OnTroopStateChanged))
        g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Hero.MapStates.MsgPath, Delegate.GetOrCreate(self, self.OnHeroMapStatesChanged))
        g_Game:RemoveFrameTicker(Delegate.GetOrCreate(self, self.Tick))
    end
end

function HUDTroopListItem:SetupHolder(locked, empty)
    if locked == nil then
        locked = true
    end
    if empty == nil then
        empty = true
    end

    if self.stateHolder then
        self.stateHolder:Release()
    end
    self.stateHolder = HUDTroopStateHolder.new(self, self.presetIndex, locked, empty)
    self.stateHolder:Setup()

    if self.bubbleHolder then
        self.bubbleHolder:Release()
    end
    self.bubbleHolder = HUDTroopBubbleHolder.new(self, self.presetIndex, empty, locked)
    self.bubbleHolder:Setup()
end

function HUDTroopListItem:ReleaseHolder()
    if self.stateHolder then
        self.stateHolder:Release()
        self.stateHolder = nil
    end
    if self.bubbleHolder then
        self.bubbleHolder:Release()
        self.bubbleHolder = nil
    end
end

---@param go CS.UnityEngine.GameObject
---@param event CS.UnityEngine.EventSystems.PointerEventData
function HUDTroopListItem:OnTroopBeginDrag(go, event)
    if self.slgModule:IsInCity() then
        if self.slgModule:IsInMyCity() then
            g_Game.EventManager:TriggerEvent(EventConst.CITY_ORDER_EXPLORER_SLG_TROOP_DRAG_BEGIN, self.presetIndex-1, go, event)
        end
        return
    end
    
    local selectTroop = self.slgModule.troopManager:FindTroopCtrl(self.troopId)
    if selectTroop and not selectTroop:CanSelect() then
        if selectTroop._data.MapStates.HideOnMap then
            goto continueOnTroopBeginDrag
        else
            ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("toast_team_busy_03"))
        end
        return
    end
    ::continueOnTroopBeginDrag::
    if selectTroop then
        if not self.slgModule.selectManager:IsCtrlSelected(selectTroop) then
            self.slgModule.selectManager:SetSelect(selectTroop)
        end
        self.kingdomInteraction:SetupDragTrans(selectTroop.troopView.transform)
        self.slgModule.touchManager:SetPressOnCtrl(selectTroop)
        self.kingdomInteraction:DoOnDragStart(event.position)
    elseif self.presetIndex then
        local presetInfo = self.slgModule.troopManager:GetTroopInfoByPresetIndex(self.presetIndex)
        if presetInfo and not presetInfo.locked
            and self.slgModule:IsPresetCanCreated(presetInfo.preset,true)
        then
            if not self.slgModule.selectManager:IsPresetSelect(self.presetIndex) then
                self.slgModule.selectManager:SetSelectPreset(self.presetIndex)
            end
        elseif presetInfo and not self.slgModule:IsPresetCanCreated(presetInfo.preset) then
            if self.slgModule:IsPresetInGve(presetInfo.preset) then
                ModuleRefer.ToastModule:AddSimpleToast(I18N.Get('gvewarning_test2'))
            else
                if SlgUtils.PresetAllHeroInjured(presetInfo.preset,self.slgModule.battleMinHpPct) then
                    ModuleRefer.ToastModule:AddSimpleToast(I18N.Get('toast_hp0_march_alert'))
                else
                    ModuleRefer.ToastModule:AddSimpleToast(I18N.Get(I18N.Preset().toast_none_troop))
                end
            end
            return
        else
            if SlgUtils.PresetAllHeroInjured(presetInfo.preset,self.slgModule.battleMinHpPct) then
                ModuleRefer.ToastModule:AddSimpleToast(I18N.Get('toast_hp0_march_alert'))
            else
                ModuleRefer.ToastModule:AddSimpleToast(I18N.Get(I18N.Preset().toast_none_troop))
            end
            return
        end
        self.kingdomInteraction:SetupDragTrans(self.slgModule.worldHolder)
        self.slgModule.touchManager:SetPressOnCtrl()
        self.kingdomInteraction:DoOnDragStart(event.position)
    end
end

---@param go CS.UnityEngine.GameObject
---@param event CS.UnityEngine.EventSystems.PointerEventData
function HUDTroopListItem:OnTroopDrag(go,event)
    if self.slgModule:IsInMyCity() then
        g_Game.EventManager:TriggerEvent(EventConst.CITY_ORDER_EXPLORER_SLG_TROOP_DRAG_UPDATE, self.presetIndex-1, go, event)
        return
    end
    if not self.kingdomInteraction or not self.kingdomInteraction:IsDraging() then
        return
    end
    self.kingdomInteraction:DoOnDragUpdate(event.position)
end

---@param go CS.UnityEngine.GameObject
---@param event CS.UnityEngine.EventSystems.PointerEventData
function HUDTroopListItem:OnEndTroopDrag(go,event)
    if self.slgModule:IsInMyCity() then
        g_Game.EventManager:TriggerEvent(EventConst.CITY_ORDER_EXPLORER_SLG_TROOP_DRAG_END, self.presetIndex-1, go, event)
        return
    end
    if  not self.kingdomInteraction or not self.kingdomInteraction:IsDraging()  then
        return
    end

    if event.pointerEnter and go == event.pointerEnter then
        self:OnTroopDragCancel(go)
        return
    end

    self.kingdomInteraction:DoOnDragStop(event.position)
    self.kingdomInteraction:SetupDragTrans(nil)
end

function HUDTroopListItem:OnTroopDragCancel(go)
    if self.slgModule:IsInMyCity() then
        g_Game.EventManager:TriggerEvent(EventConst.CITY_ORDER_EXPLORER_SLG_TROOP_DRAG_CANCEL, self.presetIndex-1, go)
        return
    end
    if not self.troopId or self.troopId < 1 then
        return
    end

    if not self.slgModule.selectManager:IsTroopSelect(self.troopId) then
        return
    end

    local ctrl = self.slgModule:GetTroopCtrl(self.troopId)
    if ctrl then
        ctrl:ReleaseTroopLine()
    end
    self.kingdomInteraction:DoCancelDrag()
end

function HUDTroopListItem:UpdateTroopStatus()
    local iconName, backName, show = HUDTroopUtils.GetPresetStateIcon(self.presetIndex)
    self.slgModule:LoadTroopStateIconSprite(iconName, self.imgIconStatus)
    self.slgModule:LoadTroopStateIconSprite(backName, self.imgStatus)

    self.imgIconStatus:SetVisible(show)
    self.imgStatus:SetVisible(show)
    self.heroIcon:ShowEscrow(false) --隐藏托管状态

    --已经实例化的部队不进入重伤判断
    local isInjured = false
    local preset = HUDTroopUtils.GetPreset(self.presetIndex)
    if preset then
        isInjured = SlgUtils.PresetAllHeroInjured(preset, self.slgModule.battleMinHpPct)
    end

    UIHelper.SetGray(self.heroIcon.CSComponent.gameObject,isInjured)
end

---@return boolean
function HUDTroopListItem:InCtiySelectMainHero()
    local team = HUDTroopUtils.GetExplorerTeam(self.presetIndex)
    if not team or team:InExplore() then
        local heroId = ModuleRefer.TroopModule:GetTroopLeadHeroId(self.presetIndex)
        if heroId <= 0 then
            return
        end

        if self.waitTeamHeroTask then
            self.waitTeamHeroTask:Release()
        end

        self.waitTeamHeroTask = QueuedTask.new()
        self.waitTeamHeroTask:WaitTrue(function()
            local citySeManger = HUDTroopUtils.GetCitySeManager()
            local transform = citySeManger:GetWanderingHeroTransform(heroId)
            return Utils.IsNotNull(transform)
        end, 120):DoAction(function()
            local citySeManger = HUDTroopUtils.GetCitySeManager()
            local transform = citySeManger:GetWanderingHeroTransform(heroId)
            if Utils.IsNotNull(transform) then
                local position = transform.position
                
                ---@type BasicCamera
                local camera = self.slgModule.curScene.basicCamera
                camera:LookAt(position, 0.5, function()
                    camera:SetFollowTarget(transform)
                end)
            end
        end):Start()
    else
        if self.waitTeamHeroTask then
            self.waitTeamHeroTask:Release()
        end

        self.waitTeamHeroTask = QueuedTask.new()
        self.waitTeamHeroTask:WaitTrue(function()
            local actor = team:GetFocusOnHeroActor()
            return actor ~= nil
        end, 120):DoAction(function()
            local actor = team:GetFocusOnHeroActor()
            if actor then
                local position = actor:GetPosition()
                local transform = actor:GetTransform()
                
                ---@type BasicCamera
                local camera = self.slgModule.curScene.basicCamera
                camera:LookAt(position, 0.5, function()
                    camera:SetFollowTarget(transform)
                    local city = HUDTroopUtils.GetMyCity()
                    g_Game.EventManager:TriggerEvent(EventConst.CITY_ORDER_EXPLORER_TEAM_OPERATE_MENU, city.uid, team)
                end)
            end
        end):Start()
    end
end

function HUDTroopListItem:InCitySelectTroop()
    self.slgModule.curScene:LeaveCity(function()
        if self.waitTroopTask then
            self.waitTroopTask:Release()
        end

        self.waitTroopTask = QueuedTask.new()
        self.waitTroopTask:WaitTrue(function()
            local troopId = HUDTroopUtils.GetTroopIdOfPreset(self.presetIndex)
            local ctrl = self.slgModule:GetCtrl(troopId)
            return ctrl and ctrl:IsValid()
        end, 120):DoAction(function()
            local troopId = HUDTroopUtils.GetTroopIdOfPreset(self.presetIndex)
            local ctrl = self.slgModule:GetCtrl(troopId)
            if ctrl then
                self.slgModule:SelectAndOpenTroopMenu(ctrl)
                self.slgModule:LookAtTroop(ctrl)
            end
        end):Start()
    end)
end

function HUDTroopListItem:InKingdomSelectTroop()
    self.slgModule.selectManager:SetSelectPreset(self.presetIndex)

    if self.troopId <= 0 then
        --编队未出战
        self.slgModule:SelectAndOpenTroopMenu(nil)
        self.slgModule:LookAtMyCity()

        if HUDTroopUtils.IsPresetInHome(self.presetIndex) then -- 集结溃败回家，部队会被删掉，状态为在集结中
            ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("team_status_home"))
        else
            ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("alliance_team_error06"))
        end
    else
        --编队已出战
        ---@type wds.Troop | wds.MapMob
        local troop = SlgUtils.GetEntityById(self.troopId)
        if SlgUtils.IsTroopInRally(troop) then
            if SlgUtils.IsTroopInGarrison(troop) then
                local ctrl = self.slgModule:GetCtrl(self.troopId)
                if ctrl then --集结已发车
                    self.slgModule:SelectAndOpenTroopMenu(nil)
                    self.slgModule:LookAtTroop(ctrl)
                else --已到达集结发起人主堡
                    local masterMember = self.slgModule:GetAssembleTroopMasterMember(self.troopId)
                    if masterMember then
                        ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("toast_assembly_site_arrival"))
                        local position = self.slgModule:ServerCoordinate2Vector3(masterMember.BigWorldPosition)
                        self.slgModule:LookAtPosition(position)
                    end
                end
            else --正在前往集结发起人主堡，或者集结解散回家
                local ctrl = self.slgModule:GetTroopCtrl(self.troopId)
                if ctrl then
                    self.slgModule:SelectAndOpenTroopMenu(ctrl)
                    self.slgModule:LookAtTroop(ctrl)
                end
            end
        else
            local ctrl = self.slgModule:GetTroopCtrl(self.troopId)
            if ctrl then
                self.slgModule:SelectAndOpenTroopMenu(ctrl)
                self.slgModule:LookAtTroop(ctrl)
            end
        end
    end
end

function HUDTroopListItem:OnTroopClick(go)
    if self.slgModule:IsInCity() then
        --当前场景是城内
        g_Game.EventManager:TriggerEvent(EventConst.CITY_ORDER_EXPLORER_SLG_TROOP_CLICK, self.presetIndex, go)

        if HUDTroopUtils.IsPresetInHome(self.presetIndex) then
            self:InCtiySelectMainHero()
        else
            self:InCitySelectTroop()
        end
    else
        --当前场景不是城内（大世界、SLG副本）
        if self.kingdomInteraction and self.kingdomInteraction:IsDraging() then
            return
        end

        self:InKingdomSelectTroop()
    end
end

---@param entity wds.CastleBrief
---@param changed wds.TroopPresets
function HUDTroopListItem:OnTroopPresetStateChanged(entity, changed)
    if not self.castleBriefId or entity.ID ~= self.castleBriefId or not self.presetIndex or not changed then
        return
    end

    if changed.Presets then
        ---@type wds.TroopPreset
        local changedPreset = changed.Presets[self.presetIndex]
        if changedPreset then
            if changedPreset.Status or changedPreset.BasicInfo then
                self:UpdateTroopStateIcon()
            end
        end
    end
end

function HUDTroopListItem:Tick(dt)
    self:UpdateHp()
end

---OnTroopStateChanged
---@param data wds.Troop
function HUDTroopListItem:OnTroopStateChanged(data,changed)
    if not data or data.ID ~= self.troopId then
        return
    end
    self:UpdateTroopStateIcon()
    if self.kingdomInteraction and self.kingdomInteraction:IsDraging() and not SlgUtils.IsTroopSelectable(data) then
        self:OnTroopDragCancel()
    end
end

function HUDTroopListItem:OnLockBtnClick()
    ModuleRefer.ToastModule:AddSimpleToast(I18N.Get('formation_locked'))
end

function HUDTroopListItem:OnAddBtnClick()
    local KingdomMapUtils = require("KingdomMapUtils")
    if KingdomMapUtils.IsNewbieState() then
        return
    end

    g_Game.UIManager:Open(UIMediatorNames.UITroopMediator,{selectedTroopIndex = self.presetIndex})
end

---@param isOn boolean
function HUDTroopListItem:OnSelectToggleClick(isOn)
    if self.isInitializing then
        return
    end
    if self.troopId > 0 then
        local selectTroop = self.slgModule.troopManager:FindTroopCtrl(self.troopId)
        if selectTroop == nil or not selectTroop:CanSelect() then
            if selectTroop._data.MapStates.HideOnMap then
                ModuleRefer.ToastModule:AddSimpleToast(I18N.Get('stationed_warn'))
            else
                ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("toast_team_busy_03"))
            end
            self.toggleTroopSelect.isOn = false
            return
        end
        if isOn then
            self.slgModule.selectManager:AddSelect(selectTroop)
        else
            self.slgModule.selectManager:CancelSelect(selectTroop)
        end
    else
        if isOn then
            self.slgModule.selectManager:AddSelectPreset(self.presetIndex)
        else
            self.slgModule.selectManager:CancelSelectPreset(self.presetIndex)
        end
    end
    self.heroIcon:ChangeStateSelect(isOn)
end

function HUDTroopListItem:UpdateTroopStateIcon()
    if self.troopStatusDirtyFrame == g_Game.Time.frameCount then
        return
    end
    self.troopStatusDirtyFrame = g_Game.Time.frameCount
    self:UpdateTroopStatus()
end

---@param data wds.Player
---@param changed table<number, wds.HeroInfo>
function HUDTroopListItem:OnHeroInfoChanged(data,changed)
    if not self.heroCfgId or self.heroCfgId < 1 or not changed or not changed[self.heroCfgId] then
        return
    end
    ---@type HeroInfoData
    local itemData = {
        heroData = ModuleRefer.HeroModule:GetHeroByCfgId(self.heroCfgId),
        hideJobIcon = true
    }
    self.heroIcon:FeedData(itemData)
end

---@param data wds.Hero
function HUDTroopListItem:OnHeroMapStatesChanged(data,change)
    local teamData = HUDTroopUtils.GetExplorerTeamData(self.presetIndex)
    if teamData == nil then
        return
    end

    local hero = teamData:GetEntity()
    if hero == nil then
        return
    end

    if hero.ID ~= data.ID then
        return
    end
    
    self:UpdateTroopStateIcon()
end

return HUDTroopListItem;
