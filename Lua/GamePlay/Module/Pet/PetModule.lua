---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hao.wu.ss
--- DateTime: 2023/2/6 9:56
---

local BaseModule = require('BaseModule')
local ModuleRefer = require('ModuleRefer')
local DBEntityPath = require('DBEntityPath')
local ConfigRefer = require('ConfigRefer')
local Delegate = require('Delegate')
local KingdomMapUtils = require("KingdomMapUtils")
local ProtocolId = require("ProtocolId")
local UIMediatorNames = require("UIMediatorNames")
local DBEntityType = require("DBEntityType")
local PooledGameObjectCreateHelper = CS.DragonReborn.AssetTool.PooledGameObjectCreateHelper
local Utils = require("Utils")
local EventConst = require("EventConst")
local PetQuality = require("PetQuality")
local PetAttrQuality = require("PetAttrQuality")
---@type CS.DG.Tweening.Ease
local Ease = CS.DG.Tweening.Ease
local TimeFormatter = require("TimeFormatter")
local MapUtils = CS.Grid.MapUtils
local Vector2Short = CS.DragonReborn.Vector2Short
local ColorUtil = require("ColorUtil")
local VECTOR3_ONE = CS.UnityEngine.Vector3.one
local VECTOR3_ZERO = CS.UnityEngine.Vector3.zero
local I18N = require("I18N")
local NM = ModuleRefer.NotificationModule
local NotificationType = require("NotificationType")
local TimerUtility = require("TimerUtility")
local UIAsyncDataProvider = require("UIAsyncDataProvider")
local CommonConfirmPopupMediatorDefine = require('CommonConfirmPopupMediatorDefine')
local PetSkillType = require('PetSkillType')
local PetWorkType = require('PetWorkType')
local ManualUIConst = require('ManualUIConst')
local CommonConfirmPopupMediatorDefine = require('CommonConfirmPopupMediatorDefine')
local InputFieldWithCheckStatus = require('InputFieldWithCheckStatus')
local UIHelper = require('UIHelper')
local ColorConsts = require('ColorConsts')
local PetCollectionEnum = require('PetCollectionEnum')
---@class WorldPetData
---@field uniqueName string
---@field data wds.PetWildInfo
---@field moving boolean
---@field model CS.UnityEngine.GameObject
---@field bubbleGo CS.UnityEngine.GameObject
---@field bubble CS.UI3DBubbleWorld
---@field animator CS.UnityEngine.Animator
---@field worldPos CS.UnityEngine.Vector3
---@field gridPos CS.DragonReborn.Vector2Short
---@field init boolean
---@field selectionGo CS.UnityEngine.GameObject
---@field effectGo CS.UnityEngine.GameObject
---@field village wds.Village
---@field modelCreateHandle CS.DragonReborn.AssetTool.PooledGameObjectHandle
---@field bubbleCreateHandle CS.DragonReborn.AssetTool.PooledGameObjectHandle
---@field worldTaskBubbleHandle CS.DragonReborn.AssetTool.PooledGameObjectHandle
---@field catchEffectCreateHandle CS.DragonReborn.AssetTool.PooledGameObjectHandle

--- 宠物模块
---@class PetModule
local PetModule = class('PetModule', BaseModule)
local WORLD_PET_TICK_TIME = 1
local WORLD_PET_CATCH_RADIUS = 2
local WORLD_PET_INT_DATA = 110
local ATTR_DISP_ID_POWER = 100
local SP_PET_ATTR_QUALITY_BASE = "sp_pet_icon_quality_"
local SP_PET_ATTR_QUALITY_FRAME = "sp_pet_base_quality_"
local QUALITY_SP = {
	"sp_pet_icon_quality_n",
	"sp_pet_icon_quality_r",
	"sp_pet_icon_quality_sr",
	"sp_pet_icon_quality_ssr",
	"sp_pet_icon_quality_sp",
}
local QUALITY_I18N = {
	"equip_quality2",
	"equip_quality3",
	"equip_quality4",
	"equip_quality5",
}
local COLOR_SP = {
	ColorUtil.FromHexNoAlphaString("626364"),
	ColorUtil.FromHexNoAlphaString("6d9d3a"),
	ColorUtil.FromHexNoAlphaString("4a8ddf"),
	ColorUtil.FromHexNoAlphaString("b259e6"),
	ColorUtil.FromHexNoAlphaString("f9751c"),
}

local PET_FRAME_CIRCLE = {
    [0] = 'sp_item_frame_circle_0',
    [1] = 'sp_item_frame_circle_1',
    [2] = 'sp_item_frame_circle_2',
    [3] = 'sp_item_frame_circle_3',
    [4] = 'sp_item_frame_circle_4',
    [5] = 'sp_item_frame_circle_5',
}

function PetModule:SetUp()
	self._init = false
	self._skillPetMap = {}
	---@type table<string, WorldPetData>
	self._worldPetList = {}
	self._watchingTroopsForPetCatch = {}
	self._watchingTroopsForPetCatchClose = {}
	---@type table<number, table<number, PetSkillExpCache>>
	self._skillExpCache = {}
	self._skillLevelCache = {}
	---@type table
	self._lastSelectedWorldPetData = nil
	self._lastAddPetId = 0
	self._lastRemovePetId = 0
	---@type CS.Notification.NotificationDynamicNode
	self._redDotMain = nil
	---@type Timer
	self._worldPetTickTimer = nil
	---@type table<number, number>
	self._petLevelLimitMap = {}
	self._petLv2strongholdLevel = {}
	---@type table<string, wds.PetWildInfo>
	self._worldPetDataList = nil
	---@type table<string, wds.Village>
	self._worldPetVillageList = nil
	self._worldPetUnitRoot = {}
	self._allowSyncPetPopUpQueue = true
	self._isInitRedDot = false
	self._petRedDots = {}

	WORLD_PET_CATCH_RADIUS = ConfigRefer.PetConsts.PetWildCatchDistance and ConfigRefer.PetConsts:PetWildCatchDistance() or WORLD_PET_CATCH_RADIUS
	self._worldCatchRadiusSquared = 0
	self._createHelper = PooledGameObjectCreateHelper.Create("PetWorld")
	self:Reset()
	self:LoadConfig()
	self:ClearDataAvailableCache()
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.PlayerPet.PetInfos.MsgPath, Delegate.GetOrCreate(self, self.RefreshPetData))
	g_Game.EventManager:AddListener(EventConst.ENTER_KINGDOM_MAP_END, Delegate.GetOrCreate(self, self.OnEnterWorldMap))
	g_Game.EventManager:AddListener(EventConst.LEAVE_KINGDOM_MAP_START, Delegate.GetOrCreate(self, self.OnLeaveWorldMap))
	g_Game.EventManager:AddListener(EventConst.RADAR_MEDIATOR_OPENED, Delegate.GetOrCreate(self, self.OnRadarMediatorOpened))
	g_Game.EventManager:AddListener(EventConst.ON_UNLOCK_WORLD_FOG, Delegate.GetOrCreate(self, self.ClearDataAvailableCache))
	g_Game.DatabaseManager:AddChanged(DBEntityPath.CastleBrief.BasicInfo.MainBuildingLevel.MsgPath, Delegate.GetOrCreate(self, self.OnCastleLevelChanged))
	g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.PlayerPet.PetSkill.LearnableSkill.MsgPath, Delegate.GetOrCreate(self, self.OnLearnableSkillChanged))
	g_Game.ServiceManager:AddResponseCallback(ProtocolId.SyncGetPet, Delegate.GetOrCreate(self,self.SyncGetPet))
	g_Game.ServiceManager:AddResponseCallback(ProtocolId.UsePetEgg, Delegate.GetOrCreate(self, self.OnUseEgg))
	g_Game.EventManager:AddListener(EventConst.RELOGIN_SUCCESS, Delegate.GetOrCreate(self,self.RefreshPetData))
	self:InitPetLevelLimitMap()
	self:InitRedDot()
	self:RefreshPetData()
	self._levelUpExpItemCfgId = ConfigRefer.PetConsts:PetLevelUpCost()
	self._levelUpExpItemCfg = ConfigRefer.Item:Find(self._levelUpExpItemCfgId)
	self._init = true
end

function PetModule:GetCreateHelper()
	return self._createHelper
end

function PetModule:OnRemove()
	g_Game.EventManager:RemoveListener(EventConst.ENTER_KINGDOM_MAP_END, Delegate.GetOrCreate(self, self.OnEnterWorldMap))
	g_Game.EventManager:RemoveListener(EventConst.LEAVE_KINGDOM_MAP_START, Delegate.GetOrCreate(self, self.OnLeaveWorldMap))
	g_Game.EventManager:RemoveListener(EventConst.RADAR_MEDIATOR_OPENED, Delegate.GetOrCreate(self, self.OnRadarMediatorOpened))
	g_Game.EventManager:RemoveListener(EventConst.ON_UNLOCK_WORLD_FOG, Delegate.GetOrCreate(self, self.ClearDataAvailableCache))
	g_Game.DatabaseManager:RemoveChanged(DBEntityPath.CastleBrief.BasicInfo.MainBuildingLevel.MsgPath, Delegate.GetOrCreate(self, self.OnCastleLevelChanged))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.PlayerPet.PetInfos.MsgPath, Delegate.GetOrCreate(self, self.RefreshPetData))
	g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.PlayerPet.PetSkill.LearnableSkill.MsgPath, Delegate.GetOrCreate(self, self.OnLearnableSkillChanged))
	g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.SyncGetPet, Delegate.GetOrCreate(self,self.SyncGetPet))
	g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.UsePetEgg, Delegate.GetOrCreate(self, self.OnUseEgg))
	g_Game.EventManager:RemoveListener(EventConst.RELOGIN_SUCCESS, Delegate.GetOrCreate(self,self.RefreshPetData))
	self:ClearWorldPets()
	self:Reset()
end

function PetModule:OnUseEgg(isSuccess, reply, rpc)
    if not isSuccess then return end
      ---@type CatchPetResultMediatorParameter
      local param = {}
      param.result = reply.Return
      param.isEgg = true
      g_Game.UIManager:Open(UIMediatorNames.CatchPetResultMediator, param)
end

function PetModule:RestoreAllUnits()
end

function PetModule:InitPetLevelLimitMap()
	if (not ConfigRefer.PetConsts.PetLevelUpCondition) then return end
	for lv = 1, ConfigRefer.PetConsts:PetLevelUpConditionLength() do
		self._petLevelLimitMap[ConfigRefer.PetConsts:PetLevelUpCondition(lv)] = lv
		self._petLv2strongholdLevel[lv] = ConfigRefer.PetConsts:PetLevelUpCondition(lv)
	end
end

---@param self PetModule
---@return wds.Player
function PetModule:GetPlayer()
    return ModuleRefer.PlayerModule:GetPlayer()
end

---@param self PetModule
---@return number
function PetModule:GetWorldPetIntData()
	return WORLD_PET_INT_DATA
end

--- 初始化红点
---@param self PetModule
function PetModule:InitRedDot()
	self._redDotMain = NM:GetOrCreateDynamicNode("pet_main", NotificationType.PET_MAIN)
end

--- 获取主红点
---@param self PetModule
function PetModule:GetRedDotMain()
	return self._redDotMain
end

---@param self PetModule
function PetModule:OnEnterWorldMap()
	self._worldCatchRadiusSquared = WORLD_PET_CATCH_RADIUS * KingdomMapUtils.GetStaticMapData().UnitsPerTileX
	self._worldCatchRadiusSquared = self._worldCatchRadiusSquared * self._worldCatchRadiusSquared
	self._worldPetTickTimer =  TimerUtility.IntervalRepeat(Delegate.GetOrCreate(self, self.WorldPetTick), WORLD_PET_TICK_TIME, -1, true)
end

---@param self PetModule
function PetModule:OnLeaveWorldMap()
	if (self._worldPetTickTimer) then
		self._worldPetTickTimer:Stop()
		self._worldPetTickTimer = nil
	end
	self:ClearWorldPets()
end

function PetModule:OnRadarMediatorOpened()
	--self:ClearRadarTaskPetBubble()
end

function PetModule:WorldPetTick()
	self:RefreshWorldPets()
end

---@param self PetModule
---@return table<string, wds.PetWildInfo>, table<string, wds.Village> @dataList, villageList
function PetModule:GenWorldPetData()
	---@type table<string, wds.PetWildInfo>
	local dataList = {}

	---@type table<string, wds.Village>
	local villageList = {}

	-- 玩家数据
	for compId, data in pairs(self:GetPlayer().PlayerWrapper2.PlayerPet.PetWildInfos) do
		if (self:IsDataAvailable(data)) then
			local uniqueName = self:ProcessUniqueName(data.UniqueName)
			dataList[uniqueName] = data
		end
	end

	-- 村庄数据
	---@type table<number, wds.Village>
	local villages = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.Village)
	for _, village in pairs(villages) do
		-- g_Logger.Error('GenWorldPetData from village: %d count %s', village.ID, village.VillagePetWild.PetWildInfos:Count())
		if (village and village.VillagePetWild) then
			for compId, data in pairs(village.VillagePetWild.PetWildInfos) do
				if (self:IsDataAvailable(data)) then
					local uniqueName = self:ProcessUniqueName(data.UniqueName)
					dataList[uniqueName] = data
					villageList[uniqueName] = village
				end
			end
		end
	end

	return dataList, villageList
end

---@param self PetModule
---@param data wds.PetWildInfo
function PetModule:IsDataAvailable(data)
	if (not data) then return false end
	if (not Utils.IsNullOrEmpty(data.CurCatchingPlayerName)) then return false end
	if not self.dataAvailableCache[data.UniqueName] then
		local isUnlock = ModuleRefer.MapFogModule:IsFogUnlocked(data.CurPos.X, data.CurPos.Y)
		self.dataAvailableCache[data.UniqueName] = isUnlock and 1 or 0
	end
	return self.dataAvailableCache[data.UniqueName] == 1
end

function PetModule:ClearDataAvailableCache()
	self.dataAvailableCache = {}
end

--- 获取大世界宠物列表
---@param self PetModule
---@return table<string, WorldPetData>
function PetModule:GetWorldPetList()
	local dataList, villageList = self:GenWorldPetData()

	for _, data in pairs(self:GetPlayer().PlayerWrapper2.PlayerPet.PetWildInfos) do
		local uniqueName = self:ProcessUniqueName(data.UniqueName)
		dataList[uniqueName] = data
	end

	---@type table<string, WorldPetData>
	local worldPetList = {}
	for uniqueName, data in pairs(dataList) do
		local wpos, gpos = self:GetWorldPos(data.CurPos.X, data.CurPos.Y)
		---@type WorldPetData
		local pdata = {
			uniqueName = uniqueName,
			data = data,
			moving = false,
			model = nil,
			bubbleGo = nil,
			bubble = nil,
			animator = nil,
			worldPos = wpos,
			gridPos = gpos,
			init = false,
			selectionGo = nil,
			listener = nil,
			effectGo = nil,
			village = villageList[uniqueName],
		}
		worldPetList[uniqueName] = pdata
	end
	return worldPetList
end

---@param self PetModule
---@param uniqueName string
---@param worldPos CS.UnityEngine.Vector3
---@return boolean
function PetModule:IsPetWithinCatchRadius(uniqueName, worldPos)
	local data = self._worldPetList[uniqueName]
	if (not data or not worldPos) then return false end
	local wp = data.worldPos
	local dx = wp.x - worldPos.x
	local dy = wp.z - worldPos.z
	if (dx * dx + dy * dy <= self._worldCatchRadiusSquared) then
		return true
	end
	return false
end

--- 大世界指定位置是否有宠可抓
---@param self PetModule
---@param worldPosition CS.UnityEngine.Vector3
---@return boolean, talbe 指定位置是否有宠物, 列表
function PetModule:HasPetInWorld(worldPosition)
	local list = {}
	for uniqueName, data in pairs(self._worldPetList) do
		local wp = data.worldPos
		local dx = wp.x - worldPosition.x
		local dy = wp.z - worldPosition.z
		if (dx * dx + dy * dy <= self._worldCatchRadiusSquared) then
			table.insert(list, {
				id = uniqueName,
				catchable = data.data.IsOK,
			})
		end
	end
	return #list > 0, list
end

--- 显示世界宠物选择圈
---@param self PetModule
---@param uniqueName string
---@param hideOthers boolean
function PetModule:ShowWorldPetSelection(uniqueName, hideOthers)
	if (hideOthers == nil) then hideOthers = true end
	local data = self._worldPetList[uniqueName]
	if (not data) then return end
	if (Utils.IsNotNull(data.selectionGo)) then
		if (hideOthers) then
			self:HideLastSelectedWorldPet()
		end
		self._lastSelectedWorldPetData = data
		data.selectionGo:SetActive(true)
	end
end

--- 隐藏上一个世界宠物的选择圈
---@param self PetModule
function PetModule:HideLastSelectedWorldPet()
	if (self._lastSelectedWorldPetData and Utils.IsNotNull(self._lastSelectedWorldPetData.selectionGo)) then
		self._lastSelectedWorldPetData.selectionGo:SetActive(false)
	end
end

function PetModule:GetWorldPos(tilePosX, tilePosY)
	local x = math.floor(tilePosX)
	local z = math.floor(tilePosY)
	return MapUtils.CalculateCoordToTerrainPosition(x, z, KingdomMapUtils.GetMapSystem()), Vector2Short(x, z)
end

---@param self PetModule
---@param uniqueName string
function PetModule:GetWorldPetData(uniqueName)
	if (uniqueName == nil) then return nil end
	return self._worldPetList[uniqueName]
end

--- 刷新大世界宠物
---@param self PetModule
function PetModule:RefreshWorldPets()
	-- 不在大世界
	if (not KingdomMapUtils.IsMapState()) then
		return
	end

	-- 数据
	self._worldPetDataList, self._worldPetVillageList = self:GenWorldPetData()

	-- 刷新或更新或删除
	local addOrUpdate = {}
	for uniqueName, data in pairs(self._worldPetDataList) do
		local wpos, gpos = self:GetWorldPos(data.CurPos.X, data.CurPos.Y)
		-- 负Y值表示地形还没有加载, 跳过
		if (wpos.y >= 0) then
			if self._worldPetList[uniqueName] == nil then
				-- 新增
				---@type WorldPetData
				local pdata = {
					uniqueName = uniqueName,
					data = data,
					moving = false,
					model = nil,
					bubbleGo = nil,
					bubble = nil,
					animator = nil,
					worldPos = wpos,
					gridPos = gpos,
					init = false,
					selectionGo = nil,
					listener = nil,
					effectGo = nil,
					worldTaskBubbleHandle = nil,
					isRadarTask = false,
					village = self._worldPetVillageList[uniqueName],
				}
				local buildingPosX = math.floor(data.CurPos.X)
				local buildingPosY = math.floor(data.CurPos.Y)
				self._worldPetList[uniqueName] = pdata
				ModuleRefer.MapUnitModule:AddUnit(wds.PetWildInfo.TypeHash, uniqueName, buildingPosX, buildingPosY, 2, 2, buildingPosX, buildingPosY, 5, 5, true)
			else
				-- 更新
				ModuleRefer.MapUnitModule:UpdateUnit(wds.PetWildInfo.TypeHash, uniqueName, true)
			end
			addOrUpdate[uniqueName] = true
			-- g_Logger.Error('add or update unit %s', uniqueName)
		end
	end

	-- 删除
	for uniqueName, _ in pairs(self._worldPetList) do
		if (not addOrUpdate[uniqueName]) then
			ModuleRefer.MapUnitModule:RemoveUnit(wds.PetWildInfo.TypeHash, uniqueName, true)
			self:ReleaseWorldPet(self._worldPetList[uniqueName])
			self._worldPetList[uniqueName] = nil
			-- g_Logger.Error('remove unit %s', uniqueName)
		end
	end
end

function PetModule:ProcessUniqueName(uniqueName)
	uniqueName = string.gsub(uniqueName, "-", "")
	return tonumber(uniqueName)
end

---@param self PetModule
---@param data WorldPetData
function PetModule:TryOpenCatchMenu(data)
	self:OnWorldPetClick(nil, data)
end

---@param worldPetData WorldPetData
---@return boolean
function PetModule:CheckPetCatchable(worldPetData)
	-- 其他玩家正在抓捕
	if (not Utils.IsNullOrEmpty(worldPetData.data.CurCatchingPlayerName)) then
		return false
	end

	local createType = worldPetData.data.CreateType
	-- 雷达宠物，一定可抓
	if createType == wds.PetWildCreateType.PetWildTypeRadar then
		return true
	end

	-- 乡镇宠物，自己联盟占领的，可抓
	if createType == wds.PetWildCreateType.PetWildTypeVillage then
		local player = ModuleRefer.PlayerModule:GetPlayer()
		-- 自己不在联盟
		if (player.Owner.AllianceID <= 0) then
			return false
		end

		if not worldPetData.village then
			return false
		end

		-- 乡镇没有联盟占领
		if worldPetData.village.Owner.AllianceID <= 0 then
			return false
		end

		-- 乡镇归属的联盟，不是自己的联盟
		if player.Owner.AllianceID ~= worldPetData.village.Owner.AllianceID then
			return false
		end

		return true
	end

	-- 在通讯范围内的可抓，且圈层解锁
	if createType == wds.PetWildCreateType.PetWildTypeLandform then
		-- 补充规则：如果圈层宠物配置的可出现地形，都没有解锁，那么宠物不可抓
		local petWildCfgId = worldPetData.data.ConfigId
		local petWildCfg = ConfigRefer.PetWild:Find(petWildCfgId)
		if petWildCfg then
			local anyUnlock = false
			for i = 1, petWildCfg:LandNameLength() do
				local landCfgId = petWildCfg:LandName(i)
				if ModuleRefer.LandformModule:IsLandformUnlockByCfgId(landCfgId) then
					anyUnlock = true
					break
				end
			end

			if not anyUnlock then
				return false
			end
		end

		local tileX, tileZ = KingdomMapUtils.ParseBuildingPos(worldPetData.data.BornPos)
		local isLandUnlock = ModuleRefer.LandformModule:IsLandUnlock(tileX, tileZ)
		local isInCommunication = ModuleRefer.TerritoryModule:IsInCommunicationArea(tileX, tileZ)
		return isLandUnlock and isInCommunication
	end

	-- 其他类型暂不支持
	g_Logger.Error('宠物创建类型不支持')
	return false
end

---@param data WorldPetData
function PetModule:OnWorldPetClick(go, data)
	if not data then
		g_Logger.Error('OnWorldPetClick data is nil')
		return
	end

	local worldPetData = self._worldPetList[data.uniqueName]
	if not worldPetData then
		g_Logger.Error('OnWorldPetClick worldPetData is nil')
		return
	end

	local catchable = self:CheckPetCatchable(worldPetData)
	if not catchable then
		if not string.IsNullOrEmpty(worldPetData.data.CurCatchingPlayerName) then
			-- 有人正在抓捕
			ModuleRefer.ToastModule:AddSimpleToast(I18N.GetWithParams("pet_catch_busy", worldPetData.data.CurCatchingPlayerName))
		else
			-- 乡镇或圈层逻辑不满足
			---@type CreateTouchMenuForWildPetData
			local context = {}
			context.worldPetData = worldPetData
			ModuleRefer.SEPreModule:CreateTouchMenuForWildPetUncatchable(context)
		end

		return
	end

	-- 能抓，但是宠物已满
	if (self:CheckIsFullPet()) then
		ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("pet_amout_limit"))
		return
	end

	-- 可以抓宠
	---@type CreateTouchMenuForWildPetData
	local context = {}
	context.worldPetData = worldPetData
	ModuleRefer.SEPreModule:CreateTouchMenuForWildPetCatchable(context)
end

function PetModule:IsInCityPetCatchHasItem()
	local hasPetCatchItem = false
	local list = ModuleRefer.PetModule:GetPetCatchItemCfgList()
	for _, item in pairs(list) do
		if ModuleRefer.InventoryModule:GetAmountByConfigId(item:ItemCfg()) > 0 then
			hasPetCatchItem = true
			break
		end
	end
	return hasPetCatchItem
end

--- 清除大世界宠物
---@param self PetModule
function PetModule:ClearWorldPets()
	for _, data in pairs(self._worldPetList) do
		ModuleRefer.MapUnitModule:RemoveUnit(wds.PetWildInfo.TypeHash, data.uniqueName, true)
		self:ReleaseWorldPet(data)
	end
	self._worldPetList = {}
end

--- 清除大世界宠物
---@param self PetModule
---@param data WorldPetData
function PetModule:ReleaseWorldPet(data)
	if (not data) then return end
	if (Utils.IsNotNull(data.model)) then
		-- if (Utils.IsNotNull(data.bubbleGo) and data.bubble) then
		-- 	data.bubble.OnUp = nil
		-- end
		-- if (data.listener) then
		-- 	data.listener.onUp = nil
		-- end
	end
end

function PetModule:Reset()
	self._maxCount = 0
	self._petCount = 0
	---@type table<number, wds.PetInfo>
	self._pets = {}
	self._petCfgList = {}
	self._cardCfgList = {}
	---@type table<number, table<number, wds.PetInfo>>
	self._typePets = {}
	---@type table<number, number>
	self._typePetCount = {}
	---@type table<number, boolean>
	self._typePetBind = {}
	self._typeCfgList = {}
	---@type table<number>
	self._typeList = {}
	---@type table<number, PetExpItemConfigCell>
	self._petExpItemCfgList = {}
	---@type table<number, PetCatchItemConfigCell>
	self._petCatchItemCfgList = {}
	self._expTempCfgList = {}
	self._itemCfgList = {}
	self._worldPetList = {}
	self._cityPetList = {}
	self._petWildSeMap = {}
	self._hasPetTable = {}
	self._petLevelUpItemId = 0
	self._isInitRedDot = false
	self._petRedDots = {}
end

--- 加载配置表
---@param self PetModule
function PetModule:LoadConfig()
	self._typeCfgList = {}
	self._typeList = {}
	self.researchSum = 0
	for _, cell in ConfigRefer.PetType:ipairs() do
		if (cell:IsRelease()) then
			self._typeCfgList[cell:Id()] = cell
			table.insert(self._typeList, cell:Id())

			local petResearch = ConfigRefer.PetResearch:Find(cell:PetResearchId())
			if petResearch then
				local expTemplate = ConfigRefer.ExpTemplate:Find(petResearch:Exp())
				if expTemplate then
					for i = 1, expTemplate:ExpLvLength() do
						self.researchSum = self.researchSum + expTemplate:ExpLv(i)
					end
				end
			end
		end
	end
	table.sort(self._typeList)

	self._petExpItemCfgList = {}
	-- for _, cell in ConfigRefer.PetExpItem:ipairs() do
	-- 	self._petExpItemCfgList[cell:Id()] = cell
	-- end

	self._petCatchItemCfgList = {}
	for _, cell in ConfigRefer.PetCatchItem:ipairs() do
		self._petCatchItemCfgList[cell:Id()] = cell
	end

	self._petWildSeMap = {}
	for _, cell in ConfigRefer.MapInstance:ipairs() do
		for i = 1, cell:PetWildIdLength() do
			self._petWildSeMap[cell:PetWildId(i)] = cell:Id()
		end
	end

	self._petLevelUpItemId = ConfigRefer.PetConsts:PetLevelUpCost()
	if (self._petLevelUpItemId and self._petLevelUpItemId > 0) then
		ModuleRefer.InventoryModule:AddCountChangeListener(self._petLevelUpItemId, Delegate.GetOrCreate(self, self.OnPetLevelUpItemChange))
	end
end

--- 通过宠物抓捕ID获取SE副本ID
---@param self PetModule
---@param petWildId number
function PetModule:GetSeMapIdByPetWildId(petWildId)
	return self._petWildSeMap[petWildId]
end

--- 刷新宠物数据
---@param self PetModule
function PetModule:RefreshPetData(entity, changed)
	self._pets = {}
	self._typePets = {}
	self._typePetCount = {}
	self._typePetBind = {}
	self._petCount = 0
	self._hasPetTable = {}
	self._petMaxLevel = 0
	self._maxCount = self:GetPlayer().PlayerWrapper2.PlayerPet.PetMaxCount
	local isAddNewPet = false

	local levelUpNode = NM:GetOrCreateDynamicNode("pet_level_up_", NotificationType.PET_LEVEL_UP)
	if (self._isInitRedDot) then
		--宠物统一等级红点
		NM:AddToParent(levelUpNode, self._redDotMain)
	end

	for id, petInfo in pairs(self:GetPlayer().PlayerWrapper2.PlayerPet.PetInfos) do
		if (not self._pets) then self._pets = {} end

		-- 过滤未投放宠物
		local petCfg = self:GetPetCfg(petInfo.ConfigId)
		if not petCfg then goto continue end
		if (not petCfg:IsRelease()) then goto continue end

		--新获得的宠物
		if (not self._pets[id]) then
			isAddNewPet = true
			self._pets[id] = petInfo
			self._pets[id].rank = self:GetStarLevel(id)
			if (petInfo.Level > self._petMaxLevel) then
				self._petMaxLevel = petInfo.Level
			end
			
			self._petCount = self._petCount + 1
			self._hasPetTable[petInfo.ConfigId] = true
			local cardCfg = nil
			if petCfg then
				cardCfg = ConfigRefer.Card:Find(petCfg:CardId())
			end
			if (cardCfg) then
				self._skillPetMap[cardCfg:Skill()] = petInfo
			end

			-- 初始化宠物本身红点 上阵宠物才有红点
			if petInfo.BindHeroId and petInfo.BindHeroId > 0 then
				self._petRedDots[id] = NM:GetOrCreateDynamicNode("Pet_Main_Icon_" .. id, NotificationType.PET_MAIN_ICON)
				NM:AddToParent(self._petRedDots[id], self._redDotMain)
				NM:AddToParent(levelUpNode, self._petRedDots[id])
			end
		end
		if (not self._typePets[petInfo.Type]) then
			self._typePets[petInfo.Type] = {}
			self._typePetCount[petInfo.Type] = 0
		end
		self._typePets[petInfo.Type][id] = petInfo
		self._typePetCount[petInfo.Type] = self._typePetCount[petInfo.Type] + 1
		if (petInfo.BindHeroId and petInfo.BindHeroId > 0) then
			self._typePetBind[petInfo.Type] = true
		end

		::continue::
	end

	if (not self._isInitRedDot or isAddNewPet) then
		self._isInitRedDot = true
		self:RefreshLevelUpRedDots()
		self:RefreshSkillRedDots()
	end

	-- 处理添加与移除
	if (changed) then
		if (changed.Add) then
			for id, _ in pairs(changed.Add) do
				if (not changed.Remove or not changed.Remove[id]) then
					g_Game.EventManager:TriggerEvent(EventConst.ON_PET_ADD, id)
					self._lastAddPetId = id
				end
			end
		end
		if (changed.Remove) then
			for id, _ in pairs(changed.Remove) do
				if (not changed.Add or not changed.Add[id]) then
					g_Game.EventManager:TriggerEvent(EventConst.ON_PET_REMOVE, id)
					-- 移除升级红点
					self._lastRemovePetId = id
					local node = NM:GetDynamicNode("Pet_Main_Icon_" .. id, NotificationType.PET_MAIN_ICON)
					if node then
						NM:RemoveFromParent(node, self._redDotMain)
						self._petRedDots[id] = nil
					end
				end
			end
		end

		-- 宠物升级消息通知，虽然已经有PET_LEVEL_UP消息
		-- 预防一手宠物界面以外的地方也能升级
		local levelUpIds = {}
		for id, v in pairs(changed) do
			if v.Level and v.Level > 0 then
				table.insert(levelUpIds, id)
			end
		end
		if #levelUpIds > 0 then
			g_Game.EventManager:TriggerEvent(EventConst.ON_PET_LEVEL_UP, levelUpIds)
		end
	end

	if (self._init) then
		ModuleRefer.TroopModule:RefreshRedDotStatus()
	end
	g_Game.EventManager:TriggerEvent(EventConst.SE_EXPLORER_PET_CAN_UPGRADE_CHECK)
end

--- 根据技能ID获取宠物信息
---@param self PetModule
---@param skillId number
---@return wds.PetInfo
function PetModule:GetPetInfoBySkillId(skillId)
	return self._skillPetMap[skillId]
end

--- 获取宠物数量上限
---@param self PetModule
---@return number
function PetModule:GetMaxCount()
	return self._maxCount
end

function PetModule:WillFull(wannaCount)
	return self:GetPetCount() + wannaCount > self:GetMaxCount()
end

--- 检查是否到上限
---@param self PetModule
---@return bool
function PetModule:CheckIsFullPet()
	local isFull = self:GetPetCount() >= self:GetMaxCount()
	return isFull
end

--- 获取剩余空位置
---@param self PetModule
---@return number
function PetModule:GetEmptyPetCount()
	return self:GetMaxCount() - self:GetPetCount()
end

--- 获取当前宠物数量
---@param self PetModule
---@return number
function PetModule:GetPetCount()
	return self._petCount
end

--- 获取当前拥有的宠物最大等级
---@param self PetModule
---@return number
function PetModule:GetMaxPetLevel()
	return self._petMaxLevel
end

--- 获取分类宠物列表
---@param self PetModule
function PetModule:GetTypedPetList()
	return self._typePets
end

--- 获取宠物列表
---@param self PetModule
function PetModule:GetPetList()
	return self._pets
end


--- 通过ID获取宠物
---@param self PetModule
---@param id number
---@return wds.PetInfo
function PetModule:GetPetByID(id)
	local petLevel,exp = self:GetPetResonateLevel()
	if self._pets[id] then
		self._pets[id].Level = petLevel
		self._pets[id].Exp = exp
	end
	return self._pets[id]
end

--- 获取宠物类别配置列表
---@param self PetModule
function PetModule:GetTypeCfgList()
	return self._typeCfgList
end

--- 获取宠物配置
---@param self PetModule
---@param cfgId number
---@return PetConfigCell
function PetModule:GetPetCfg(cfgId)
	if (not self._petCfgList[cfgId]) then
		self._petCfgList[cfgId] = ConfigRefer.Pet:Find(cfgId)
	end
	return self._petCfgList[cfgId]
end

---@param id number
---@return PetConfigCell
function PetModule:GetPetCfgById(id)
	local petData = self:GetPetByID(id)
	if petData then
		return self:GetPetCfg(petData.ConfigId)
	end
	return {}
end

function PetModule:GetCardCfg(cardId)
	if (not self._cardCfgList[cardId]) then
		self._cardCfgList[cardId] = ConfigRefer.Card:Find(cardId)
	end
	return self._cardCfgList[cardId]
end

--- 获取宠物类别配置
---@param self PetModule
---@param typeId number
---@return PetTypeConfigCell
function PetModule:GetTypeCfg(typeId)
	return self._typeCfgList[typeId]
end

--- 获取宠物类别列表
---@param self PetModule
function PetModule:GetTypeList()
	return self._typeList
end

--- 获取宠物经验道具配置列表
---@param self PetModule
function PetModule:GetPetExpItemCfgList()
	return self._petExpItemCfgList
end

--- 获取宠物经验道具配置
---@param self PetModule
---@param cfgId number
function PetModule:GetPetExpItemCfg(cfgId)
	return self._petExpItemCfgList[cfgId]
end

--- 获取宠物抓捕道具配置列表
---@param self PetModule
function PetModule:GetPetCatchItemCfgList()
	return self._petCatchItemCfgList
end

--- 获取宠物抓捕道具配置
---@param self PetModule
---@param cfgId number
function PetModule:GetPetCatchItemCfg(cfgId)
	return self._petCatchItemCfgList[cfgId]
end

--- 获取指定类别的宠物
---@param self PetModule
---@return table<number, wds.PetInfo>
function PetModule:GetPetsByType(type)
	return self._typePets[type]
end

--- 获取指定类别宠物数量
---@param self PetModule
---@param type number 类型
---@return number
function PetModule:GetPetCountByType(type)
	return self._typePetCount[type]
end

--- 指定类别是否有已绑定的宠物
---@param self PetModule
---@param type number
---@return boolean
function PetModule:IsPetTypeBindHero(type)
	return self._typePetBind[type]
end

function PetModule:GetExpTemplateCfg(id)
	if (not self._expTempCfgList[id]) then
		self._expTempCfgList[id] = ConfigRefer.ExpTemplate:Find(id)
	end
	return self._expTempCfgList[id]
end

-- 宠物技能 学习进度
function PetModule:GetPetSkillExpAndLevel(skillId)
	local allSkills = self:GetPetLearnedSkills()
	for k,v in pairs(allSkills) do
		if k == skillId then
			local cfg = ConfigRefer.PetLearnableSkill:Find(skillId)
			local skillLevelCfg = ConfigRefer.PetSkillLevelTemplate:Find(cfg:Level())
			local itemGroup = skillLevelCfg:CostItemGroup()

			if v.Active then
				local expCfg = skillLevelCfg:CostExpTemplate()
				if (not self._expTempCfgList[expCfg]) then
					self._expTempCfgList[expCfg] = ConfigRefer.ExpTemplate:Find(expCfg)
				end
				local maxLevel = self._expTempCfgList[expCfg]:MaxLv()
				local nextLevel = math.min(v.Level,maxLevel)
				local nextMaxExp = self._expTempCfgList[expCfg]:ExpLv(nextLevel)
				local curExp = v.LevelExp
				for i = 1, v.Level-1 do
					curExp = curExp - self._expTempCfgList[expCfg]:ExpLv(i)
				end
				return curExp,nextMaxExp, v.Level,itemGroup
			else
				local maxExp = cfg:ExpForActive()
				return v.Exp, maxExp, v.Level,itemGroup
			end
		end
	end
	return 0,0
end

function PetModule:GetItemCfg(itemCfgId)
	if (not self._itemCfgList[itemCfgId]) then
		self._itemCfgList[itemCfgId] = ConfigRefer.Item:Find(itemCfgId)
	end
	return self._itemCfgList[itemCfgId]
end

--- 根据经验值计算目标等级
---@param self PetModule
---@param cfgId number
---@param exp number
---@return number, number, number 等级, 经验, 百分比
function PetModule:CalcTargetLevel(cfgId, exp)
    local cfg = self:GetPetCfg(cfgId)
    if (not cfg) then return 1 end
    local expTempId = cfg:Exp()
    local expTemp = ConfigRefer.ExpTemplate:Find(expTempId)
    local expLength = expTemp:ExpLvLength()
    for i = 1, expLength do
        exp = exp - expTemp:ExpLv(i)
        if exp < 0 then
            local lastExp = exp + expTemp:ExpLv(i)
            return i, lastExp, lastExp / expTemp:ExpLv(i)
        end
    end
    return expLength, 0, 1
end

--- 获取指定等级总经验
---@param self PetModule
---@param cfgId number
---@param level number
function PetModule:GetLevelExp(cfgId, level)
    local cfg = self:GetPetCfg(cfgId)
    if (not cfg) then return 0 end
    local expTempId = cfg:Exp()
    local expTemp = ConfigRefer.ExpTemplate:Find(expTempId)
    local expLength = expTemp:ExpLvLength()
	level = math.min(level, expLength)
	local totalExp = 0
    for i = 1, level - 1 do
		totalExp = totalExp + expTemp:ExpLv(i)
	end
	return totalExp
end

--- 获取宠物最大等级
---@param self PetModule
---@return number
function PetModule:GetMaxLevel()
	local maxLv = ConfigRefer.PetConsts:PetLevelMax()
    return maxLv > 0 and maxLv or 999
end

--- 获取当前限制的最大等级
---@param self PetModule
---@return number
function PetModule:GetLimitedMaxLevel()
	local furnitureId = ConfigRefer.PetConsts:PetLevelUpConditionFurniture()
	local city = ModuleRefer.CityModule.myCity
	if not city then return 0 end
	local furnitureManager = city.furnitureManager
	local castleFurniture = furnitureManager:GetMaxLevelFurnitureByTypeInWds(furnitureId)
	local furnitureLevl = 0
	if castleFurniture then
		local furCfg = ConfigRefer.CityFurnitureLevel:Find(castleFurniture.ConfigId)
		furnitureLevl = furCfg:Level()
	end
	local limitLv = 0
	for strongholdLevel, lv in pairs(self._petLevelLimitMap) do
		if furnitureLevl >= strongholdLevel then
			limitLv = lv
		end
	end
	return limitLv
end

--- 获取需要提升的基地等级
---@param self PetModule
---@param lv number
---@return number
function PetModule:GetNeedHoldLevel(lv)
	return self._petLv2strongholdLevel[lv + 1] or 0
end

--- 得到宠物当前等级的经验百分
---@param self PetModule
---@param cfgId number PetConfigCell:Id()
---@param level number
---@param exp number
---@return number, number, number 经验百分比, 当前经验值, 当前等级最大经验值
function PetModule:GetExpPercent(cfgId, level, exp)
	local cfg = self:GetPetCfg(cfgId)
	if (not cfg) then return 0, 0, 0 end
    local expTemp = self:GetExpTemplateCfg(cfg:Exp())
    if (not expTemp ) then return 0, 0, 0 end
    level = (level and level > 0) and level or 1
    level = math.min(level, expTemp:ExpLvLength(), expTemp:MaxLv())
    local lastLevel = level - 1
    if lastLevel > 0 then
        for i = 1, lastLevel do
            exp = exp - expTemp:ExpLv(i)
        end
    end
    local maxExp = expTemp:ExpLv(level)
    return exp / maxExp, exp, maxExp
	-- return 0, 0, 0
end

--- 获取稀有度名称
---@param self PetModule
---@param quality number
function PetModule:GetQualitySP(quality)
	return QUALITY_SP[quality]
end

--- 获取稀有度名称
---@param self PetModule
---@param quality number
function PetModule:GetQualityI18N(quality)
	return QUALITY_I18N[quality]
end

---@param self PetModule
---@return CS.UnityEngine.Color
function PetModule:GetQualityColor(quality)
	return COLOR_SP[quality]
end

--- 获取稀有度背景框
---@param self PetModule
---@param quality number
function PetModule:GetQualityCircleBackground(quality)
	return PET_FRAME_CIRCLE[quality]
end

---@param self PetModule
---@param troopId number
---@param petData table
function PetModule:WatchTroopForWorldPetCatch(troopId, petData)
	-- self._watchingTroopsForPetCatch[troopId] = petData
end

---@param self PetModule
---@param troopId number
function PetModule:UnwatchTroopForWorldPetCatch(troopId)
	-- self._watchingTroopsForPetCatch[troopId] = nil
end

---@param self PetModule
---@param troopId number
---@param petData table
function PetModule:WatchTroopForWorldPetCatchClose(troopId, petId)
	-- self._watchingTroopsForPetCatchClose[troopId] = petId
end

---@param self PetModule
---@param troopsData table
function PetModule:UnwatchTroopsForWorldPetCatch(troopsData)
	-- if (not troopsData) then return end
	-- for _, data in pairs(troopsData) do
	-- 	if (data.troop) then
	-- 		self._watchingTroopsForPetCatch[data.troop.ID] = nil
	-- 	end
	-- end
end

---@param self PetModule
---@param troopsData table
---@param petId table
function PetModule:WatchTroopsForWorldPetCatch(troopsData, petData)
	-- if (not troopsData) then return end
	-- for _, data in pairs(troopsData) do
	-- 	if (data.troop) then
	-- 		self._watchingTroopsForPetCatch[data.troop.ID] = petData
	-- 	end
	-- end
end

---@param self PetModule
---@param petId number
function PetModule:GetPetPower(petId)
	if (not petId or not self._pets) then return 0 end
	local ATTR_DISP_POWER = 100
	return self:GetPetAttrDisplayValue(petId, ATTR_DISP_POWER)
end

-- 宠物是否绑定
---@param petId number
---@return boolean
function PetModule:IsPetLocked(petId)
	local petInfo = self._pets[petId]
	if not petInfo then
		return
	end
	return petInfo.IsLocked
end

--- 是否拥有指定配置ID的宠物
---@param self PetModule
---@param cfgId number
---@return boolean
function PetModule:HasPetByCfgId(cfgId)
	return self._hasPetTable[cfgId]
end

function PetModule:GetPetLinkHero(petId, isPvP)
	if isPvP then
		return ModuleRefer.ReplicaPVPModule:EditGetPetLinkHero(petId)
	else
		local petInfo = self._pets[petId]
		if petInfo and petInfo.BindHeroId and petInfo.BindHeroId > 0 then
			return petInfo.BindHeroId
		end
	end

	return nil
end

function PetModule:GetAllPetLinkHeros(petType, isPvP)
	if isPvP then
		return ModuleRefer.ReplicaPVPModule:EditGetAllPetLinkHeros(petType)
	else
		local heros = {}
		local pets = self:GetPetsByType(petType)
		for id, _ in pairs(pets) do
			heros[#heros + 1] = self:GetPetLinkHero(id, isPvP)
		end
		return heros
	end
end

---@class PetSkillExpCache
---@field minExp number
---@field lvExp number
---@field maxExp number

---@param self PetModule
---@param expTempId number
---@param level number
---@return PetSkillExpCache
function PetModule:GetSkillExpCache(expTempId, level)
	if (not self._skillExpCache[expTempId]) then
		self._skillExpCache[expTempId] = {}
		local expTemp = ConfigRefer.ExpTemplate:Find(expTempId)
		if (not expTemp) then return end

		local totalExp = 0
		for lv = 1, expTemp:MaxLv() do
			local lvExp = expTemp:ExpLv(lv)
			self._skillExpCache[expTempId][lv] = {
				minExp = totalExp,
				lvExp = lvExp,
				maxExp = totalExp + lvExp - 1,
			}
			totalExp = totalExp + lvExp
		end
	end
	if (not level) then
		return self._skillExpCache[expTempId]
	else
		return self._skillExpCache[expTempId][level]
	end
end

---@param self PetModule
---@param expTempId number
---@param exp number
---@return number, PetSkillExpCache
function PetModule:GetSkillLevelByExp(expTempId, exp)
	local cache = self:GetSkillExpCache(expTempId)
	local lastLv, lastItem
	for lv, item in pairs(cache) do
		lastLv = lv
		lastItem = item
		if (exp >= item.minExp and exp <= item.maxExp) then
			return lv, item
		end
	end
	return lastLv, lastItem
end

--- 获取宠物喂养经验
---@param self PetModule
---@param petInfo wds.PetInfo
---@return number
function PetModule:GetPetFeedExp(petInfo)
	if (not petInfo) then return 0 end
	local petCfg = self:GetPetCfg(petInfo.ConfigId)
	local skillExp = 0
	for _, exp in ipairs(petInfo.SkillExps) do
		skillExp = skillExp + exp
	end
	return math.floor(skillExp * ConfigRefer.PetConsts:PetRankExpRatio()) + petCfg:RankExp()
end

--- 获取宠物强化喂养经验
---@param self PetModule
---@param petInfo wds.PetInfo
---@return number
function PetModule:GetPetStrengthFeedExp(petInfo)
	local exp = self:GetPetTotalStrengthenExp(petInfo)
	local petCfg = self:GetPetCfg(petInfo.ConfigId)
	return math.floor(exp * ConfigRefer.PetConsts:PetRankExpRatio()) + petCfg:RankExp()
end

--- 获取宠物强化总经验
---@param self PetModule
---@param petInfo wds.PetInfo
---@return number
function PetModule:GetPetTotalStrengthenExp(petInfo)
	if (not petInfo) then return 0 end
	local petCfg = self:GetPetCfg(petInfo.ConfigId)
	local expCfg = ConfigRefer.ExpTemplate:Find(petCfg:RankExpTemplate())
	local exp = 0
	local level = petInfo.RankLevel
	if level >= 1 then
		for i = 1, level do
			exp = exp + expCfg:ExpLv(i)
		end
	end
	exp = exp + petInfo.RankExp
	return exp
end

function PetModule:CalcStrengthenTargetLevel(petInfo, exp)
    local cfg = self:GetPetCfg(petInfo.ConfigId)
    if (not cfg) then return 1 end
	local petCfg = self:GetPetCfg(petInfo.ConfigId)
	local expCfg = ConfigRefer.ExpTemplate:Find(petCfg:RankExpTemplate())
    local expLength = expCfg:ExpLvLength()
    for i = 1, expLength do
        exp = exp - expCfg:ExpLv(i)
        if exp < 0 then
            local lastExp = exp + expCfg:ExpLv(i)
            return i - 1, lastExp, lastExp / expCfg:ExpLv(i), expCfg:ExpLv(i)
        end
    end
    return expLength, 0, 0, 0
end

function PetModule:CalcStrengthenLimitLevel(petInfo, exp, limitLv)
    local cfg = self:GetPetCfg(petInfo.ConfigId)
    if (not cfg) then return 1 end
	local petCfg = self:GetPetCfg(petInfo.ConfigId)
	local expCfg = ConfigRefer.ExpTemplate:Find(petCfg:RankExpTemplate())
    local expLength = expCfg:ExpLvLength()
	if limitLv > expLength then
		limitLv = expLength
	end
    for i = 1, limitLv do
        exp = exp - expCfg:ExpLv(i)
        if exp < 0 then
            local lastExp = exp + expCfg:ExpLv(i)
            return i - 1, lastExp, lastExp / expCfg:ExpLv(i), expCfg:ExpLv(i)
        end
    end
    return limitLv, exp, 1, expCfg:ExpLv(limitLv)
end

--- 获取宠物服务端显示属性值
---@param self PetModule
---@param petId number
---@param attrId number
---@return number
function PetModule:GetPetAttrDisplayServerValue(petId, attrId)
	local petInfo = self:GetPetByID(petId)
	return petInfo and petInfo.Props and petInfo.Props[attrId]
end

--- 获取宠物显示属性值, 优先使用服务端数值, 如果服务端数值不存在则使用客户端计算数值
---@param self PetModule
---@param petId number
---@param attrId number
---@return number, string
function PetModule:GetPetAttrDisplayValue(petId, attrId)
	local dispConf = ConfigRefer.AttrDisplay:Find(attrId)
	local petInfo = self:GetPetByID(petId)
	if (not petInfo) then
		return 0, ""
	end
	if (petInfo.Props and petInfo.Props[attrId]) then
		return petInfo.Props[attrId], dispConf and dispConf:DisplayAttr()
	end
	local attrList = ModuleRefer.AttrModule:CalcAttrGroupByTemplateId(petInfo.AttrTemplateCfgId, petInfo.Level)
	return ModuleRefer.AttrModule:GetDisplayValueWithData(dispConf, attrList)
end

--- 获取最后添加的宠物ID
---@param self PetModule
---@return number
function PetModule:GetLastAddPetId()
	return self._lastAddPetId or 0
end

--- 获取可用(未绑定)宠物列表
---@param self PetModule
---@return table<number, wds.PetInfo>
function PetModule:GetFreePetList()
	local list = {}
	for id, petInfo in pairs(self._pets) do
		if (not petInfo.BindHeroId or petInfo.BindHeroId <= 0) and not self:IsPetWorking(id) then
			list[id] = petInfo
		end
	end
	return list
end

--- 获取可用(未绑定)宠物的类型列表
---@param self PetModule
---@return table<number, boolean>
function PetModule:GetFreePetTypeList()
	local freePetList = self:GetFreePetList()
	if (table.isNilOrZeroNums(freePetList)) then return end
	local list = {}
	for _, petInfo in pairs(freePetList) do
		list[petInfo.Type] = true
	end
	return list
end

--- 刷新红点状态
---@param self PetModule
function PetModule:RefreshRedDot()
	self:RefreshLevelUpRedDots()
end

--- 刷新升级红点状态
---@param self PetModule
function PetModule:RefreshLevelUpRedDots(isFull)
	local mainDotCount = self:GetRedDotMain().NotificationCount
	if mainDotCount > 0 and not isFull then
		return
	end
	
	local petUpgradeEntryId = ConfigRefer.PetConsts:PetLevelUpUnlock()
	self._petUpgradeEntryCfg = ConfigRefer.SystemEntry:Find(petUpgradeEntryId)
	local petUpgradeUnlocked = ModuleRefer.NewFunctionUnlockModule:CheckNewFunctionIsUnlocked(petUpgradeEntryId)
	local limitedLevel = self:GetLimitedMaxLevel()
	local maxLevel = self:GetMaxLevel()
	local petLevel,Exp = self:GetPetResonateLevel()
	
	--宠物统一等级红点
	local node = NM:GetOrCreateDynamicNode("pet_level_up_", NotificationType.PET_LEVEL_UP)
	local hasPet = self:GetPetCount() > 0
	if hasPet then
		if (petLevel >= maxLevel or petLevel >= limitedLevel) then
			NM:SetDynamicNodeNotificationCount(node, 0)
		else
			--宠物都一样等级 只走一遍
			for k,v in pairs(self:GetPetList()) do
				local _, exp, expMax = self:GetExpPercent(v.ConfigId, petLevel, Exp)
				local has = ModuleRefer.InventoryModule:GetAmountByConfigId(self._petLevelUpItemId)
				local need = expMax - exp
				if (has >= need) and petUpgradeUnlocked then
					NM:SetDynamicNodeNotificationCount(node, 1)
				else
					NM:SetDynamicNodeNotificationCount(node, 0)
				end
				break
			end
		end
	else
		NM:SetDynamicNodeNotificationCount(node, 0)
	end
end

function PetModule:RefreshSkillEquipRedDot(petId,cellIndex,isUnEquip)
	local equipNode = NM:GetOrCreateDynamicNode("PetSkillEquip_"..petId.."_"..cellIndex, NotificationType.PET_SKILL_EQUIP)
	local isInTroop = ModuleRefer.TroopModule:GetPetBelongedTroopIndex(petId) ~= 0
	NM:SetDynamicNodeNotificationCount(equipNode, (isInTroop and isUnEquip) and 1 or 0)
end

function PetModule:UpgradeRefreshRedDot(petId,cellIndex)
	local equipNode = NM:GetOrCreateDynamicNode("PetSkillUpgrade_"..petId.."_"..cellIndex, NotificationType.PET_SKILL_UPGRADE)
	local isInTroop = ModuleRefer.TroopModule:GetPetBelongedTroopIndex(petId) ~= 0
	NM:SetDynamicNodeNotificationCount(equipNode, isInTroop and 1 or 0)
end

--- 刷新技能红点状态
---@param self PetModule
function PetModule:RefreshSkillRedDots(isFull)
	local mainDotCount = self:GetRedDotMain().NotificationCount
	if mainDotCount > 0 and not isFull then
		return
	end

	--不满足第一个技能槽解锁时 没有技能红点
	local curLevel = self:GetPetResonateLevel()
	if curLevel < ConfigRefer.PetConsts:PetExtraSkillUnlockLevel(1) then
		return
	end

	local canEquip = false
	local allSkills = self:GetPetLearnedSkills()
	for k, v in pairs(allSkills) do
		if v.Active then
			local count = ConfigRefer.PetLearnableSkill:Find(k):CanLearnNum()
			if #v.LearnPetCompId < count then
				canEquip = true
				break
			end
		end
	end

	for k, node in pairs(self._petRedDots) do
		local pet = self:GetPetByID(k)
		if pet == nil then
			goto Continue
		end
		local isInTroop = ModuleRefer.TroopModule:GetPetBelongedTroopIndex(pet.ID) ~= 0
		local petNode = NM:GetOrCreateDynamicNode("Pet_Main_Icon_" .. pet.ID, NotificationType.PET_MAIN_ICON)
		if mainDotCount > 0 and not isFull then
			return
		end
		--两个技能槽
		for i= 1, 2 do
			local skillNode = NM:GetOrCreateDynamicNode("PetSkill_"..pet.ID.."_"..i, NotificationType.PET_SKILL_CELL)
			local equipNode = NM:GetOrCreateDynamicNode("PetSkillEquip_"..pet.ID.."_"..i, NotificationType.PET_SKILL_EQUIP)
			local upgradeNode = NM:GetOrCreateDynamicNode("PetSkillUpgrade_"..pet.ID.."_"..i, NotificationType.PET_SKILL_UPGRADE)

			NM:AddToParent(skillNode, petNode)
			NM:AddToParent(equipNode, skillNode)
			NM:AddToParent(upgradeNode, skillNode)

			local skills = pet.PetInfoWrapper.LearnedSkill
			local hasSkill = skills and skills[i] and skills[i] > 0
			local isEmpty
			local canUpgrade
			--技能装备红点
			if isInTroop and canEquip then
				local level = pet.Level
				local unlockLevel = ConfigRefer.PetConsts:PetExtraSkillUnlockLevel(i)
				if level >= unlockLevel then
					if hasSkill then
						isEmpty = false
					else
						isEmpty = true
					end
				else
					isEmpty = false
				end
			end

			--技能升级红点
			if isInTroop and hasSkill then
				-- local fixedSkillLevel = self:GetSkillLevel(pet.ID,true)
				-- local quality = ConfigRefer.PetLearnableSkill:Find(skills[i]):Quality()
				-- if fixedSkillLevel <= 1 and quality == PetQuality.LV1
				--  or fixedSkillLevel <= 3 and quality == PetQuality.LV2
				--  or fixedSkillLevel <= 5 and quality == PetQuality.LV3
				--  or fixedSkillLevel <= 7 and quality == PetQuality.LV4 then

					local cur, max, level = self:GetPetSkillExpAndLevel(skills[i])
					local need = max - cur
					local count = 0
					local cfg = ConfigRefer.PetLearnableSkill:Find(skills[i])
					for k2,v2 in pairs(self._pets) do
						local qualify = true
						-- 技能升级材料是否符合条件
						if  pet.ID == v2.ID then
							qualify = false
						elseif v2.bindHeroId and v2.bindHeroId > 0 then
							qualify = false
						elseif self:IsPetWorking(v2.ID) then
							qualify = false
						end
						if qualify then
							local petTypeId = self:GetPetCfg(v2.ConfigId):Type()
							if cfg:RefPetType() == petTypeId then
								count = count + 1
							end
						end
					end
					if count >= need then
						canUpgrade = true
					end

					NM:SetDynamicNodeNotificationCount(upgradeNode, canUpgrade and 1 or 0)
				-- end
			end

			NM:SetDynamicNodeNotificationCount(equipNode, (isInTroop and canEquip and isEmpty) and 1 or 0)
		end
		::Continue::
	end
end

function PetModule:IsPetWorking(petId)
	local city = ModuleRefer.CityModule.myCity
	local workPets = city:GetCastleBrief().Castle.CastlePets
	for k,v in pairs(workPets) do
		if k == petId then
			return v.FurnitureId
		end
	end
	return nil
end

--- 宠物升级道具数量变更
---@param self PetModule
function PetModule:OnPetLevelUpItemChange()
	self:RefreshLevelUpRedDots(true)

	--升级后，可能解锁技能时，刷新技能红点
	local curLevel = self:GetPetResonateLevel()
	if curLevel >= ConfigRefer.PetConsts:PetExtraSkillUnlockLevel(1) then
		self:RefreshSkillRedDots(true)
	end
end

-- --- 英雄绑定宠物
-- ---@param self PetModule
-- ---@param heroId number
-- ---@param petId number
-- function PetModule:OnHeroBindPet(heroId, petId)
-- 	local node = NM:GetOrCreateDynamicNode("Pet_Main_Icon_" .. petId, NotificationType.PET_MAIN_ICON)
-- 	NM:AddToParent(node, self._redDotMain)
-- 	self._petRedDots[petId] = node
-- 	self:RefreshLevelUpRedDots()
-- 	self:RefreshSkillRedDots()
-- end

-- --- 英雄解绑宠物
-- ---@param self PetModule
-- ---@param heroId number
-- ---@param petId number
-- function PetModule:OnHeroUnbindPet(heroId, petId)
-- 	local node = NM:GetOrCreateDynamicNode("Pet_Main_Icon_" .. petId, NotificationType.PET_MAIN_ICON)
-- 	NM:RemoveFromParent(node, self._redDotMain)
-- 	NM:DisposeDynamicNode(node)
-- 	self._petRedDots[petId] = nil
-- end

function PetModule:GetPetRedDot(petId)
	return self._petRedDots[petId]
end

function PetModule:OnCastleLevelChanged()
	self:RefreshRedDot()
end

function PetModule:OnLearnableSkillChanged(entity, changedData)
	if changedData.Add then
		local receiveNode = NM:GetOrCreateDynamicNode("PetSkillReceive", NotificationType.PET_SKILL_RECEIVE)
		for k,v in pairs(changedData.Add) do
			local skillReceiveNode = NM:GetOrCreateDynamicNode("PetSkillReceive_"..k, NotificationType.PET_SKILL_RECEIVE)
			NM:SetDynamicNodeNotificationCount(skillReceiveNode, 1)
			NM:AddToParent(skillReceiveNode, receiveNode)
		end
    end
end

function PetModule:GetPetData(uniqueName)
	return self._worldPetList[uniqueName]
end

function PetModule:GetPetOriginDataAndVillage(uniqueName)
	return self._worldPetDataList[uniqueName], self._worldPetVillageList[uniqueName]
end

---@param uniqueName string
---@param transform CS.UnityEngine.Transform
function PetModule:SetPetUnitRoot(uniqueName, transform)
	self._worldPetUnitRoot[uniqueName] = transform
end

---@return CS.UnityEngine.Transform
function PetModule:GetPetVxRoot(uniqueName)
	return self._worldPetUnitRoot[uniqueName]
end

---@return CS.UnityEngine.Transform
function PetModule:GetPetVxCenter(uniqueName)
	local trans = self._worldPetUnitRoot[uniqueName]
	if Utils.IsNull(trans) then
		return nil
	end

	---@type CS.FXAttachPointHolder
	local attachPointComp = trans.gameObject:GetComponent(typeof(CS.FXAttachPointHolder))
    if Utils.IsNotNull(attachPointComp) then
        local hangPoint = attachPointComp:GetAttachPoint('vx_center')
		if Utils.IsNotNull(hangPoint) then
			return hangPoint
		end
    end

	return trans
end

function PetModule:GetPetBattleLabel(petConfigId)
	local petCfg = ConfigRefer.Pet:Find(petConfigId)
	local petTypeCfg = ConfigRefer.PetType:Find(petCfg:Type())
	return petTypeCfg:BattleLabel()
end

function PetModule:GetPetTier(petConfigId)
	local petCfg = ConfigRefer.Pet:Find(petConfigId)
	local petTypeCfg = ConfigRefer.PetType:Find(petCfg:Type())
	return petTypeCfg:TierLabel()
end

function PetModule:GetAllPetTypeLinkHerosByList(troopHeroList, petType, isPvP)
    local list = {}

	for _, heroId in ipairs(troopHeroList) do
		local linkPetId = nil
		if isPvP then
			linkPetId = ModuleRefer.ReplicaPVPModule:EditGetHeroLinkPet(heroId)
		else
			linkPetId = ModuleRefer.HeroModule:GetHeroLinkPet(heroId)
		end
		if linkPetId and linkPetId > 0 then
			local pet = self:GetPetByID(linkPetId)
			local petCfg = self:GetPetCfg(pet.ConfigId)
			if petCfg and petCfg:Type() == petType then
				list[#list + 1] = heroId
			end
		end
	end

    return list
end

function PetModule:GetAllPetTypeLinkHerosById(heroId, petType, isPvP)
	local list = {}
	if isPvP then
		return ModuleRefer.ReplicaPVPModule:EditGetAllPetLinkHeros(petType)
	else
    	local troopIndex = ModuleRefer.TroopModule:GetHeroTeamIndex(heroId)
		local troopHeroList = ModuleRefer.TroopModule:GetHeroListInTroop(troopIndex)
    	list = self:GetAllPetTypeLinkHerosByList(troopHeroList, petType, isPvP)
	end
	return list
end

function PetModule:CheckIsReplacSameTeamPet(heroId, petId, isPvP)
	if isPvP then
		local bindPetId = ModuleRefer.ReplicaPVPModule:EditGetHeroLinkPet(heroId)
		return bindPetId == petId
	else
		local troopIndex = ModuleRefer.TroopModule:GetHeroTeamIndex(heroId)
		local castle = ModuleRefer.PlayerModule:GetCastle()
		if troopIndex then
			local preset = castle.TroopPresets.Presets[troopIndex]
			local heroes = preset and preset.Heroes or {}
			for _, info in ipairs(heroes) do
				local linkPetId = ModuleRefer.HeroModule:GetHeroLinkPet(info.HeroCfgID)
				if linkPetId == petId then
					return true
				end
			end
		end
		return false
	end
end

---@param compId number
function PetModule:IsLockByPvp(compId)
	local player = ModuleRefer.PlayerModule:GetPlayer()
	if player == nil then return false end

	local playerPvpData = player.PlayerWrapper3.PlayerReplicaPvp
	if playerPvpData == nil then return false end

	-- 是否在进攻编队里
	local atkPreset = playerPvpData.AtkPreset
	if atkPreset ~= nil and atkPreset.Brief ~= nil then
		for i = 1, atkPreset.Brief:Count() do
			if atkPreset.Brief[i].PetCompId == compId then
				return true
			end
		end
	end

	-- 是否在防守编队里
	local defPreset = playerPvpData.DefPreset
	if defPreset ~= nil and defPreset.Brief ~= nil then
		for i = 1, defPreset.Brief:Count() do
			if defPreset.Brief[i].PetCompId == compId then
				return true
			end
		end
	end

	return false
end

function PetModule:HasFreePet()
	if not self._pets then
		return false
	end

	for _, petInfo in pairs(self._pets) do
		if not petInfo.BindHeroId or petInfo.BindHeroId <= 0 then
			return true
		end
	end
	return false
end

---@param petCompId number
---@return boolean
function PetModule:IsNewPet(petCompId)
	local petInfo = self:GetPetByID(petCompId)
	if not petInfo then
		return false
	end

	return petInfo.TypeIndex == 1
end

---@param petCfgId number @PetConfigCell Id
---@return boolean
function PetModule:IsHighQuality(petCfgId)
	local petCfgCell = ConfigRefer.Pet:Find(petCfgId)
	if not petCfgCell then
		return false
	end

	local quality = petCfgCell:Quality()
	return quality >= PetQuality.LV4
end

---通过道具获得宠物
---@param isSuccess boolean
---@param data wrpc.SyncGetPetRequest
function PetModule:SyncGetPet(isSuccess, data)
    if isSuccess then
		local petView = data.PetView
		local reason = data.Reason
		if reason == wrpc.GetPetReason.GetPetReason_UseItem or reason == wrpc.GetPetReason.GetPetReason_OpenPetEgg or reason == wrpc.GetPetReason.GetPetReason_Incubate then
			if data.PetView.TypeIndex == 1 then
				if ModuleRefer.CityModule:IsInMyCity() then
					local city = ModuleRefer.CityModule:GetMyCity()
					if not city or city:IsInSingleSeExplorerMode() or city:IsInRecoverZoneEffectMode() then
						return
					end
				end
				---@type SEPetSettlementParam
				local param = {}
				param.petCompId = petView.CompId
				param.showAsGetPet = true
				-- g_Game.UIManager:Open(UIMediatorNames.SEPetSettlementMediator, param)
				local provider = UIAsyncDataProvider.new()
				local name = UIMediatorNames.SEPetSettlementMediator
				local check = UIAsyncDataProvider.CheckTypes.DoNotShowOnOtherMediator | UIAsyncDataProvider.CheckTypes.DoNotShowInCityZoneRecoverState
				local checkFailedStrategy
				if self._allowSyncPetPopUpQueue then
					checkFailedStrategy = UIAsyncDataProvider.StrategyOnCheckFailed.DelayToAnyTimeAvailable
				else
					checkFailedStrategy = UIAsyncDataProvider.StrategyOnCheckFailed.Cancel
				end
				provider:Init(name, nil, check, checkFailedStrategy, false, param)
				provider:SetOtherMediatorCheckType(0)
				provider:AddOtherMediatorBlackList(UIMediatorNames.SEPetSettlementMediator)
				provider:AddOtherMediatorBlackList(UIMediatorNames.CityHatchEggOpenUIMediator)
				provider:AddOtherMediatorBlackList(UIMediatorNames.StoryDialogUIMediator)
        		provider:AddOtherMediatorBlackList(UIMediatorNames.StoryDialogChatUIMediator)
        		provider:AddOtherMediatorBlackList(UIMediatorNames.StoryDialogRecordUIMediator)
        		provider:AddOtherMediatorBlackList(UIMediatorNames.StoryDialogSkipPopupUIMediator)
				TimerUtility.DelayExecute(function()
					g_Game.UIAsyncManager:AddAsyncMediator(provider)
				end, 1)
			end
		end
    end
end

function PetModule:IsGoldenPet(petCfgId)
	local petCfg = ConfigRefer.Pet:Find(petCfgId)
	if not petCfg then return false end

	return petCfg:Quality() >= PetQuality.LV4
end

---设置是否允许多个宠物弹窗排队弹出
---@param allow boolean
function PetModule:SetAllowSyncPetPopUpQueue(allow)
	self._allowSyncPetPopUpQueue = allow
end

function PetModule:TransformTemplateId(templateId)
	--问吕相龙
	if templateId == 706 or templateId == 705 or templateId == 704  then
		templateId = 701
	end
	return templateId
end

---@param self UIPetMediator
---@param qualityData PetAttrQualityData
---@return string
function PetModule:GetPetAttrQualitySP(qualityData)
	local suffix = "s"
	if (qualityData:Quality() == PetAttrQuality.A) then
		suffix = "a"
	elseif (qualityData:Quality() == PetAttrQuality.B) then
		suffix = "b"
	elseif (qualityData:Quality() == PetAttrQuality.C) then
		suffix = "c"
	end
	return SP_PET_ATTR_QUALITY_BASE .. suffix, SP_PET_ATTR_QUALITY_FRAME .. suffix
end

---打开一个宠物展示界面，显示指定SAB属性，用于前端拿不到宠物属性但又要展示宠物的情况
---严格依赖于PetRandomAttrItem表的配置项顺序，谨慎使用
---@param cfgId number
---@param attrStr string @e.g. 'SSA'
function PetModule:ShowPetPreview(cfgId, attrStr)
	attrStr = string.upper(attrStr)
	local attrId = 0
	local offset = 0
	local char2bit = {}
	if string.find(attrStr, "S") then
		offset = 8
		char2bit = {
			['S'] = 1,
			['A'] = 0,
		}
	else
		offset = 0
		char2bit = {
			['A'] = 1,
			['B'] = 0,
		}
	end
	for i = 1, 3 do
		local b = char2bit[string.sub(attrStr, i, i)]
		attrId = attrId | (b << (i - 1))
	end
	attrId = attrId + offset
	if attrId < 1 or attrId > 15 then
		g_Logger.ErrorChannel("PetModule", "attrStr %s is valid", attrStr)
		return
	end
	---@type PetShareMediatorParam
	local data = {}
	data.configID = cfgId
	data.z = attrId
	g_Game.UIManager:Open(UIMediatorNames.PetShareMediator, data)
end

-- 检查温泉等级
function PetModule:IsSatisfyFurnitureLevel(petId)
    local pet = self:GetPetByID(petId)
    local maxLevel = self:GetLimitedMaxLevel()
    local curLevel = pet.Level
    if curLevel >= maxLevel then
        ---@type CommonConfirmPopupMediatorParameter
        local confirmParameter = {}
        confirmParameter.styleBitMask = CommonConfirmPopupMediatorDefine.Style.ConfirmAndCancel
        confirmParameter.confirmLabel = I18N.Get("goto")
        confirmParameter.cancelLabel = I18N.Get("cancle")
        confirmParameter.content = I18N.Get("pet_levelup_upperbound_tips")
        confirmParameter.title = I18N.Get("pet_fountain_level_up_tips_name")
        confirmParameter.onConfirm = function()
            g_Game.UIManager:CloseAllByName(UIMediatorNames.CommonConfirmPopupMediator)
            g_Game.UIManager:CloseAllByName(UIMediatorNames.UIPetMediator)
			local city = ModuleRefer.CityModule.myCity
            local furnitureTypeId = ConfigRefer.CityConfig:HotSpringFurniture()
            city:LookAtTargetFurnitureByTypeCfgId(furnitureTypeId,0.8,nil,true)
            return true
        end
        g_Game.UIManager:Open(UIMediatorNames.CommonConfirmPopupMediator, confirmParameter)
        return false
    end
	return true
end

function PetModule:PetAddExp(petId, itemCount, callback)
    local isSatisfy = self:IsSatisfyFurnitureLevel(petId)
	if not isSatisfy then
		return
	end

	self:SendLevelUp(petId, itemCount, callback)
end

function PetModule:SendLevelUp(petId, itemCount, callback)
local msg = require("PetAddExpParameter").new()
    msg.args.PetCompId = petId
    msg.args.ExpItemCfgIds:Add(self._levelUpExpItemCfgId)
    msg.args.ExpItemNums:Add(itemCount)
    msg:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, suc, resp)
        if (suc) then
            if callback then
                callback()
            end
        end
    end)
end

function PetModule:GetPetLevelUpRequiredItemCount(petId)
    if (self._levelUpExpItemCfg) then
        local pet = ModuleRefer.PetModule:GetPetByID(petId)
		local petLevel,exp = self:GetPetResonateLevel()

        local _, exp, expMax = ModuleRefer.PetModule:GetExpPercent(pet.ConfigId, petLevel, exp)
        local need = math.max(1, expMax - exp)
        return need
    else
        g_Logger.ErrorChannel("Pet", "未找到宠物升级道具 %s", self._levelUpExpItemCfgId)
        return -1
    end
end

---@param inventoryModule InventoryModule
function PetModule:CanPetOnClickUp(petId, inventoryModule)
    if not self._levelUpExpItemCfg then
        return false
    end
    local pet = ModuleRefer.PetModule:GetPetByID(petId)
    if not pet then
        return false
    end
    if pet.Level >= self:GetLimitedMaxLevel() or pet.Level >= self:GetMaxLevel() then
        return
    end
    local has = inventoryModule:GetAmountByConfigId(self._levelUpExpItemCfgId)
    local need = self:GetPetLevelUpRequiredItemCount(petId)
    return has >= need, self._levelUpExpItemCfgId, need
end

function PetModule:IsExclusivePet(petConfigID)
    local petConfig = ConfigRefer.Pet:Find(petConfigID)
    return petConfig:VillageBuildingId() > 0
end

function PetModule:GetPetWorkTypeStr(workType)
    if workType == PetWorkType.AnimalHusbandry then
        return I18N.Get("AnimalHusbandry")
    elseif workType == PetWorkType.Collect then
        return I18N.Get("Collect")
    elseif workType == PetWorkType.Fire then
        return I18N.Get("Fire")
    elseif workType == PetWorkType.Handwork then
        return I18N.Get("Handwork")
    elseif workType == PetWorkType.Mining then
        return I18N.Get("Mining")
    elseif workType == PetWorkType.None then
        return I18N.Get("None")
    elseif workType == PetWorkType.Watering then
        return I18N.Get("Watering")
    elseif workType == PetWorkType.Woodcutting then
        return I18N.Get("Woodcutting")
    end
end

function PetModule:GetPetWorkTypeIcon(workType)
    if workType == PetWorkType.Handwork then
        return "sp_common_icon_make"
    elseif workType == PetWorkType.Woodcutting then
        return "sp_common_icon_wood"
    elseif workType == PetWorkType.Mining then
        return "sp_common_icon_stone"
    elseif workType == PetWorkType.Collect then
        return "sp_common_icon_collect"
    elseif workType == PetWorkType.Fire then
        return "sp_common_icon_fire"
    elseif workType == PetWorkType.Watering then
        return "sp_common_icon_water"
    elseif workType == PetWorkType.AnimalHusbandry then
        return "sp_common_icon_livestock"
    end
    return string.Empty
end

-- 学习宠物技能
function PetModule:LearnSkill(costs, targetSkillId, callback)
    local msg = require("PetAddLearnableSkillExpParameter").new()
    msg.args.DstSkillId = targetSkillId
    msg.args.CostPetCompIds:AddRange(costs)
    msg:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, suc, resp)
        if (suc) then
			g_Game.EventManager:TriggerEvent(EventConst.PET_LEARN_SKILL)
            if callback then
                callback()
            end
        end
    end)
end

-- 升级宠物技能
function PetModule:UpgradeSkill(costs, targetSkillId, callback)
    local msg = require("PetAddLearnableSkillLevelExpParameter").new()
    msg.args.DstSkillId = targetSkillId
    msg.args.CostPetCompIds:AddRange(costs)
    msg:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, suc, resp)
        if (suc) then
			g_Game.EventManager:TriggerEvent(EventConst.PET_UPGRADE_SKILL,targetSkillId)
			self:RefreshSkillRedDots(true)
            if callback then
                callback()
            end
        end
    end)
end


-- 装备宠物技能
function PetModule:EquipSkill(petId, skillId, cellIndex, callback)
    local msg = require("PetLearnSkillParameter").new()
    msg.args.PetCompId = petId
    msg.args.CellIndex = cellIndex - 1
    msg.args.SkillId = skillId
    msg:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, suc, resp)
        if (suc) then
			g_Game.EventManager:TriggerEvent(EventConst.PET_EQUIP_SKILL, {skillId = skillId, cellIndex = cellIndex})
			-- self:RefreshSkillEquipRedDot(petId, cellIndex,false)
			self:RefreshSkillRedDots(true)
            if callback then
                callback()
            end
        end
    end)
end

-- 卸下宠物技能
function PetModule:UnEquipSkill(petId, cellIndex, callback)
    local msg = require("PetForgetSkillParameter").new()
    msg.args.PetCompId = petId
    msg.args.CellIndex = cellIndex - 1
    msg:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, suc, resp)
        if (suc) then
			g_Game.EventManager:TriggerEvent(EventConst.PET_UNEQUIP_SKILL)
			-- self:RefreshSkillEquipRedDot(petId, cellIndex,true)
			self:RefreshSkillRedDots(true)
            if callback then
                callback()
            end
        end
    end)
end

-- 宠物改名 （用的玩家改名规则）
function PetModule:RenamePet(petId, callback)
	local petName = self:GetPetName(petId)
	---@type CommonConfirmPopupMediatorParameter
    local parameter = {}
    parameter.styleBitMask = CommonConfirmPopupMediatorDefine.Style.ConfirmAndCancel | CommonConfirmPopupMediatorDefine.Style.WithInputCheck
    parameter.title = I18N.Get("pet_rename_name")
    parameter.content = ''
    parameter.confirmLabel = I18N.Get("alliance_setting_change")
    parameter.cancelLabel = I18N.Get("cancle")
    parameter.inputParameter = {
        initText = petName,
        checkFunc = function(name,checkCallback,error) 
			self:CheckPetName(petId,name,checkCallback,error)
		end
    }
	parameter.onChangedCheck = true
	parameter.onBeginCheck = true
    parameter.onConfirm = function(context, inputStatus, inputValue)
        if inputStatus ~= InputFieldWithCheckStatus.Status.Pass then
            return false
        end
		local lastPopId = context
        self:SendRenamePet(petId, inputValue,function()
			    g_Game.UIManager:Close(lastPopId)
			end)
        return true
    end
    parameter.context = g_Game.UIManager:Open(UIMediatorNames.CommonConfirmPopupMediator, parameter)
end

function PetModule:CheckPetName(petId, name, callback, err)
    local parameter = require("PetModifyNameParameter").new()
    parameter.args.Name = name
	parameter.args.PetCompId = petId
	parameter.args.OnlyCheck = true
    parameter:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, isSuccess, rsp)
        if (callback) then
            callback(name, isSuccess)
        end
    end, err)
end



function PetModule:SendRenamePet(petId, newName, callback)
 	local msg = require("PetModifyNameParameter").new()
    msg.args.PetCompId = petId
    msg.args.Name = newName
    msg:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, suc, resp)
        if (suc) then
			g_Game.EventManager:TriggerEvent(EventConst.PET_RENAME)
            if callback then
                callback()
            end
        end
    end)
end

-- 宠物名字
function PetModule:GetPetName(petID)
	if petID == nil then
		return ""
	end
	local name
	local pet = self:GetPetByID(petID)
	if pet.PetInfoWrapper and pet.PetInfoWrapper.Name~="" then
		name = pet.PetInfoWrapper.Name
	else
		local cfg = self:GetPetCfg(pet.ConfigId)
		name = I18N.Get(cfg:Name())
	end
	return name
end

-- 宠物融合
function PetModule:PetFusion(costs, isPreview)
end

-- 宠物所有可学习的技能
function PetModule:GetPetLearnedSkills()
    local allSkills = ModuleRefer.PlayerModule:GetPlayer().PlayerWrapper2.PlayerPet.PetSkill.LearnableSkill
    return allSkills
end

-- 获得装备此技能的所有宠物
function PetModule:GetPetsByEquippedSkill(skillId)
    local res = {}
    for k, v in pairs(self._pets) do
        if v.PetInfoWrapper.LearnedSkill then
			for k2,v2 in pairs(v.PetInfoWrapper.LearnedSkill) do
				if v2 == skillId then
					table.insert(res, v)
				end
			end
        end
    end
    return res
end



function PetModule:IsPetEquipSkill(petId, skillId)
	local res self:GetPetsByEquippedSkill(skillId)
    return res[petId]
end

function PetModule:IsPetEquipSkillAtSlot(petId, cellIndex)
	local pet = self:GetPetByID(petId)
	if pet.PetInfoWrapper.LearnedSkill then
			for k2,v2 in pairs(pet.PetInfoWrapper.LearnedSkill) do
				if k2 == cellIndex and v2 > 0 then
					return true
				end
			end
        end
	return false
end


function PetModule:GetPetLearnableSkill(skillId)
	local res
	local allSkills = self:GetPetLearnedSkills()
	for k,v in pairs(allSkills) do
		if k == skillId then
			res = v
			break
		end
	end
	return res
end

-- 宠物是否学习了技能
function PetModule:IsSkillLearned(skillId)
	local res = false
	local allSkills = self:GetPetLearnedSkills()
	for k,v in pairs(allSkills) do
		if k == skillId and v.Active then
			res = true
			break
		end
	end
	return res
end

--TODO: 缓存宠物技能等级
function PetModule:GetStarLevel(petId)
	local pet = self:GetPetByID(petId)
	local res = self:GetSkillLevel(petId,true)

	if pet.PetInfoWrapper.LearnedSkill then
		for k,v in pairs(pet.PetInfoWrapper.LearnedSkill) do
			if v > 0 then
				res = res + self:GetSkillLevel(petId,false,v)
			end 
		end
    end
	return res
end

---@param petId number
---@return int, {level:number, quality:number}[]
function PetModule:GetSkillLevelQuality(petId)
	local pet = self:GetPetByID(petId)
	local skillLevels = {}
	local level = self:GetSkillLevel(petId,true)
	table.insert(skillLevels, {quality = self:GetSkillQuality(petId), level = level})

	if pet.PetInfoWrapper.LearnedSkill then
		for k,v in pairs(pet.PetInfoWrapper.LearnedSkill) do
			if v > 0 then
				local temp = self:GetSkillLevel(petId,false,v)
				level = level + temp 
				table.insert(skillLevels, {quality = self:GetSkillQuality(nil,v), level = temp, skillId = v})
			end 
		end
    end

	table.sort(skillLevels,function(a, b)
		 return a.quality > b.quality
	end)
	return level, skillLevels
end

function PetModule:GetSkillQuality(petId,learnableSkillId)
	local quality 
	if petId then
		local pet = ModuleRefer.PetModule:GetPetByID(petId)
    	local petCfg = ModuleRefer.PetModule:GetPetCfg(pet.ConfigId)
		quality= petCfg:Quality()
	else
		local cell = ConfigRefer.PetLearnableSkill:Find(learnableSkillId)
		quality = cell:Quality()
	end
	return quality
end

function PetModule:GetSkillLevelQualityList(petCfgId, fixedSkillLevels, learnableSkillLevels)
	local list = {}
    local petQuality = ModuleRefer.PetModule:GetPetQuality(petCfgId)
    for _, level in pairs(fixedSkillLevels) do
        table.insert(list, {level = level, quality = petQuality})
    end

    for id, level in pairs(learnableSkillLevels) do
        local skill = ConfigRefer.PetLearnableSkill:Find(id)
        if skill then
            table.insert(list, {level = level, quality = skill:Quality()})
        end
    end

    return list
end

function PetModule:GetSkillTypePetCfgId(petCfgId)
    local petCfg = ModuleRefer.PetModule:GetPetCfg(petCfgId)
    local slgSkillId = petCfg:SLGSkillID(2)
    local slgSkillCell = ConfigRefer.SlgSkillInfo:Find(slgSkillId)

    local kHeroCfg = ConfigRefer.KheroSkillLogical:Find(slgSkillCell:SkillId())
    local type = kHeroCfg:PetSkillTagType()
	return self:GetSkillTypeStr(type)
end

-- 技能页签
function PetModule:GetSkillTypeStr(type)
    local res
    if type == PetSkillType.All then
        res = I18N.Get("ALL")
    elseif type == PetSkillType.Damage then
        res = I18N.Get("Damage")
    elseif type == PetSkillType.Heal then
        res = I18N.Get("Heal")
    elseif type == PetSkillType.Buff then
        res = I18N.Get("Buff")
    elseif type == PetSkillType.Passive then
        res = I18N.Get("Passive")
    end
    return res
end

-- 宠物品质底
function PetModule:GetPetQualityFrame(quality)
    return "sp_pet_base_frame_0" .. (2 + quality)
end

--Quality = 1\2\3
function PetModule:GetPetMainQualityFrame(quality)
    return "sp_pet_base_frame_0" .. (5 + quality)
end

function PetModule:GetQualityStr(quality,str)
    local res
	local color
    if quality == PetQuality.LV2 then
        res = I18N.Get("pet_quality_B")
		UIHelper.GetColoredText(res, ColorConsts.quality_blue)
		color = ColorConsts.quality_blue
    elseif quality == PetQuality.LV3 then
        res = I18N.Get("pet_quality_A")
		UIHelper.GetColoredText(res, ColorConsts.quality_purple)
		color = ColorConsts.quality_purple
    elseif quality == PetQuality.LV4 then
        res = I18N.Get("pet_quality_S")
		color = ColorConsts.quality_orange
    end

	if str then
		return UIHelper.GetColoredText(str, color)
	else
		return UIHelper.GetColoredText(res, color)
	end
end

function PetModule:GetPetQualityColor(level)
	local color
	if level == PetQuality.LV1 then
        color =  UIHelper.TryParseHtmlString(ColorConsts.quality_green)
	elseif level == PetQuality.LV2 then
        color =  UIHelper.TryParseHtmlString(ColorConsts.quality_blue)
    elseif level == PetQuality.LV3 then
        color =  UIHelper.TryParseHtmlString(ColorConsts.quality_purple)
    elseif level >= PetQuality.LV4 then
        color =  UIHelper.TryParseHtmlString(ColorConsts.quality_orange)
    end
    return color
end

-- 共鸣水晶等级默认为0
function PetModule:GetHighestLevelPets()
	local player = self:GetPlayer()
	local pets = player.PlayerWrapper2.PlayerPet.SystemLevelPetIds
	local targetLevel = player.PlayerWrapper2.PlayerPet.PetSystemLevel
	return targetLevel, pets
end

function PetModule:GetCurSelectedPet()
	local mediator = g_Game.UIManager:FindUIMediatorByName(UIMediatorNames.UIPetMediator)
    if mediator then
		return mediator._selectedId
	end
end

function PetModule:GetSkillLevel(petId, isFixedSkill,skillId)
	local petInfo = self:GetPetByID(petId)
	local level = 0

	if petInfo then
		if isFixedSkill then
			return petInfo.SkillLevels[1]
		else
			local skill = self:GetPetLearnableSkill(skillId)
			if skill then
				level = skill.Level
			end
		end
	end
	return level
end

function PetModule:GetPetSkillDesc(petId,skillId)
    local cfg = ConfigRefer.PetLearnableSkill:Find(skillId)
	local level = math.max(1,self:GetSkillLevel(petId,false,skillId))
	
	if cfg:DescArgsLength() < level then
		g_Logger.Error("没配 skillId = "..skillId .." DescArgsLength < level")
		return "skillId: "..skillId
	end

	return self:GetSkillDescArgs(cfg:Desc(),cfg:DescArgs(level))
end

function PetModule:GetPetFixedSkillDesc(petId, petCfgId)
    local petCfg = ModuleRefer.PetModule:GetPetCfg(petCfgId)
    local slgSkillId = petCfg:SLGSkillID(2)
    local slgSkillCell = ConfigRefer.SlgSkillInfo:Find(slgSkillId)

    local kHeroCfg = ConfigRefer.KheroSkillLogical:Find(slgSkillCell:SkillId())
    local name = kHeroCfg:NameKey()
	local level = math.max(1,self:GetSkillLevel(petId,true))
	if kHeroCfg:IntroductionKeyArgsLength()<level then
		return "# slgSkillId: " .. slgSkillId .. " Wrong IntroductionKeyArgs level: ".. level
	end
	return self:GetSkillDescArgs(kHeroCfg:IntroductionKey(),kHeroCfg:IntroductionKeyArgs(level)) , I18N.Get(name)
end

function PetModule:GetSkillDescArgs(desc, descArgs)
 	local res = {}
    for word in string.gmatch(descArgs, '([^,]+)') do
        table.insert(res, word)
    end

    return I18N.GetWithParams(desc,res[1],res[2])
end

function PetModule:OnSetLocalNotification(callback)
	if self._pets == nil or next(self._pets) == nil then return end

	local petId = nil
	for id, pet in pairs(self._pets) do
		if not string.IsNullOrEmpty(pet.PetInfoWrapper.Name) then
			petId = id
			break
		end
	end

	if petId == nil then
		petId = next(self._pets)
	end

	if petId == nil then return end

	local PushConsts = require("PushConsts")
    local pushCfg = ConfigRefer.Push:Find(PushConsts['41'])
    local notifyId = tonumber(pushCfg:Id())
    local title = I18N.Get(pushCfg:Title())
    local subtitle = I18N.Get(pushCfg:SubTitle())
    local content = I18N.Get(pushCfg:Content())
    callback(notifyId, title, subtitle, content, TimeFormatter.OneDaySeconds)

	local pushCfg = ConfigRefer.Push:Find(PushConsts['42'])
	local notifyId = tonumber(pushCfg:Id())
	local title = I18N.Get(pushCfg:Title())
	local subtitle = I18N.Get(pushCfg:SubTitle())
	local content = I18N.Get(pushCfg:Content())
	callback(notifyId, title, subtitle, content, TimeFormatter.OneDaySeconds * 2)
end

function PetModule:GetPetQuality(petCfgId)
	local pet = ConfigRefer.Pet:Find(petCfgId)
	if pet then
		return pet:Quality()
	end

	return PetAttrQuality.C
end


function PetModule:SetPetWorkingConfirm(value)
    self.isFirstShow = value
end

function PetModule:GetPetWorkingConfirm()
    return self.isFirstShow
end

function PetModule:SetPetLock(petId)
	local params = require('SetPetIsLockParameter').new()
    params.args.PetCompId = petId
    params.args.Value = not ModuleRefer.PetModule:IsPetLocked(petId)
    params:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, suc, resp)
        if (suc) then
            g_Game.EventManager:TriggerEvent(EventConst.PET_REFRESH_UNLOCK_STATE, petId)
        end
    end)
end

function PetModule:GetPetSkillIcon(quality)
	if quality ==PetQuality.LV1 then 
		return ManualUIConst.sp_common_icon_strong_2_star
	elseif quality == PetQuality.LV2 then
		return ManualUIConst.sp_common_icon_strong_3_star
	elseif quality == PetQuality.LV3 then
		return ManualUIConst.sp_common_icon_strong_4_star
	elseif quality == PetQuality.LV4 then
		return ManualUIConst.sp_common_icon_strong_5_star
	else
		g_Logger.Error("PetLearnableSkill.csv quality 只支持LV1-LV4")
		return ManualUIConst.sp_common_icon_strong_3_star
	end

end

--新版宠物共鸣等级，所有宠物等于一个等级hhhh
function PetModule:GetPetResonateLevel()
	local player = ModuleRefer.PlayerModule:GetPlayer()
	local level = player.PlayerWrapper2.PlayerPet.Level
	local exp = player.PlayerWrapper2.PlayerPet.LevelExp
	return level, exp
end

---@param exceptList table<number, any>
---@return boolean
function PetModule:HasOtherPet(exceptList)
    for key, _ in pairs(self._pets) do
        if not exceptList[key] then
            return true
        end
    end
    return false
end

function PetModule:GetResearchSum()
	return self.researchSum
end

function PetModule:GetPetItemInfoByPets(pets,workType)
	local count = 0
	for k,v in pairs(pets) do
		count = count + 1
	end
	if count == 0 then
		return self:GetPetItemByWorkType(workType)
	end
	local items = {}
	local lockPetNum = 0
	for id,v in pairs (pets)do
		local pet =self:GetPetByID(id)
		local petCfgId = pet.ConfigId
		local petCfg = ConfigRefer.Pet:Find(petCfgId)
		local petTypeCfg= self:GetTypeCfg(petCfg:Type())
		local status = ModuleRefer.PetCollectionModule:GetPetStatus(petTypeCfg)
		for i = 1, petCfg:PetWorksLength() do
			local workTypeCfg = ConfigRefer.PetWork:Find(petCfg:PetWorks(i))
			if workTypeCfg:Type() == workType then
				if status ==  PetCollectionEnum.PetStatus.Lock then
						lockPetNum = lockPetNum + 1
						--只添加一个剪影动物
						if lockPetNum > 1 then
							break
						end
					end
				table.insert(items,{isPet = true,status = status,petTypeId =petCfg:Type(), id = petCfg:SourceItems(1), num = 1, petWorkType = workType, petWorkTypeLevel = workTypeCfg:Level()})
			end
		end
	end
	table.sort(items, function(a, b)
		-- if a.status ~= b.status then
		-- 	return a.status > b.status
		-- else
		if a.petWorkTypeLevel ~= b.petWorkTypeLevel then
        	return a.petWorkTypeLevel > b.petWorkTypeLevel
		else
        	return a.petTypeId < b.petTypeId
		end
    end)
	return items
end

function PetModule:GetPetItemByWorkType(workType)
	local items ={}
	local lockPetNum = 0
	for k,v in ConfigRefer.PetType:ipairs() do
		local samplePet = v:SamplePetCfg()
		local status = ModuleRefer.PetCollectionModule:GetPetStatus(v)

		if samplePet > 0 then
			local petCfg = ConfigRefer.Pet:Find(samplePet)
			for i = 1, petCfg:PetWorksLength() do
				local workTypeCfg = ConfigRefer.PetWork:Find(petCfg:PetWorks(i))
				if workTypeCfg:Type() == workType then
					if status ==  PetCollectionEnum.PetStatus.Lock then
						lockPetNum = lockPetNum + 1
						--只添加一个剪影动物
						if lockPetNum > 1 then
							break
						end
					end
					table.insert(items,{isPet = true, status = status,petTypeId =v:Id(), id = petCfg:SourceItems(1), num = 1, petWorkType = workType, petWorkTypeLevel = workTypeCfg:Level()})
					break
				end
			end
		end
	end

	table.sort(items, function(a, b)
		-- if a.status ~= b.status then
		-- 	return a.status > b.status
		-- else
		if a.petWorkTypeLevel ~= b.petWorkTypeLevel then
        	return a.petWorkTypeLevel > b.petWorkTypeLevel
		else
        	return a.petTypeId < b.petTypeId
		end
    end)
	return items
end


return PetModule