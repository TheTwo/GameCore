---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wupei.
--- DateTime: 2020/11/2
---
local DBEntityType = require('DBEntityType')
local Delegate = require('Delegate')
local ModuleRefer = require('ModuleRefer')
local SlgUtils = require('SlgUtils')

local TroopConst = require('TroopConst')
local TroopCtrl = require("TroopCtrl")
local DBEntityPath = require("DBEntityPath")
local CageStatusMask = wds.BehemothCageStatusMask

---@class BehemothTroopCtrl : TroopCtrl
local BehemothTroopCtrl = class('BehemothTroopCtrl',TroopCtrl)

---@protected
---@param data wds.MapMob
function BehemothTroopCtrl:ctor(data,dbEntityPath)
    TroopCtrl.ctor(self,data,dbEntityPath)
end
---@param poolObj TroopView
function BehemothTroopCtrl:SetupView(poolObj)
    TroopCtrl.SetupView(self, poolObj)
    if poolObj then
        poolObj.ShowMaxLodLevel = 2
    end
end

function BehemothTroopCtrl:OnNewEntity()
    TroopCtrl.OnNewEntity(self)

    self.troopType = SlgUtils.TroopType.Behemoth

    local cageId = self._data.MobInfo.BehemothCageId
    ---@type wds.BehemothCage
    self.cageEntity = g_Game.DatabaseManager:GetEntity(cageId, DBEntityType.BehemothCage)
    self.playerAllianceId = ModuleRefer.AllianceModule:GetAllianceId()
    if self.cageEntity then
        self:UpdateStateByCageState(self.cageEntity.BehemothCage)
    end
end

function BehemothTroopCtrl:DoOnNewEntity()
    TroopCtrl.DoOnNewEntity(self)
    g_Game.DatabaseManager:AddChanged(DBEntityPath.BehemothCage.BehemothCage.MsgPath, Delegate.GetOrCreate(self,self.OnCageInfoChanged))
    self._module.troopManager:AddToWatchList(self)
end

function BehemothTroopCtrl:DoOnDestroyEntity()
    self._module.troopManager:RemoveFromWatchList(self._data.ID)        
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.BehemothCage.BehemothCage.MsgPath, Delegate.GetOrCreate(self,self.OnCageInfoChanged))
   TroopCtrl.DoOnDestroyEntity(self)
end
function BehemothTroopCtrl:TickInWatchList()
    if self._data.MapStates.Battling then
       if self.troopView and self.troopView:InsideViewFrustum() then
            self._module:SetupFocusBossTroop(self)
       else
            self._module:BossTroopLoseFocus(self)       
       end
    else
        -- self._module:BossTroopLoseFocus(self)       
        if self.troopView and self.troopView:InsideViewFrustum() then
            self._module:SetupFocusBossTroop(self)
       else
            self._module:BossTroopLoseFocus(self)       
       end
    end
end

---@param data wds.BehemothCage
---@param changed wds.BehemothCageInfo
function BehemothTroopCtrl:OnCageInfoChanged(data, changed)
    if not self.cageEntity then
        self:GetCageEntity()
    end
    if not self.cageEntity or data.ID ~= self.cageEntity.ID then
        return
    end

    self:UpdateStateByCageState(data.BehemothCage)
end

---@param cageInfo wds.BehemothCageInfo
function BehemothTroopCtrl:UpdateStateByCageState(cageInfo)   
    local occupied = cageInfo.Status & CageStatusMask.BehemothCageStatusMaskOccupied ~= 0
    self:SetOccupyState(occupied)
    -- In Sleep
    if (cageInfo.Status & CageStatusMask.BehemothCageStatusMaskActOpen) == 0 -- 未激活       
    then
        self:Set2Sleep()
        self.troopView:SyncTroopState()
        return
    end
    -- In Idle
    if (cageInfo.Status & CageStatusMask.BehemothCageStatusMaskInBattle) == 0 --非战斗
        or (cageInfo.Status & CageStatusMask.BehemothCageStatusMaskInLocked) > 0 -- 锁定
    then
        --未占领 && 有邻居
        local isAnger = (cageInfo.Status & CageStatusMask.BehemothCageStatusMaskHasNeighbor) > 0 and not occupied
        self:SetIdle(isAnger)
    else
        self:SetInBattle()
    end
    self.troopView:SyncTroopState()
end

function BehemothTroopCtrl:SetOccupyState(occupied)
    --TODO:设置巨兽的材质
end

function BehemothTroopCtrl:Set2Sleep()
    self.troopView:SetBehaviourState(TroopConst.BEHAVIOUR_SLEEP)
end

function BehemothTroopCtrl:SetIdle(anger)
    if anger then
        self.troopView:SetBehaviourState(TroopConst.BEHAVIOUR_ANGER)
    else
        self.troopView:SetBehaviourState(TroopConst.BEHAVIOUR_NONE)
    end
end

function BehemothTroopCtrl:SetInBattle()
    self.troopView:SetBehaviourState(TroopConst.BEHAVIOUR_NONE)
end

function BehemothTroopCtrl:OnExeSkill(skillIds)
   self._module:OnBossExeSkill(self._data.ID,skillIds)
end

function BehemothTroopCtrl:SetAsFocusBoss()
    if not self.cageEntity then
        local cageId = self._data.MobInfo.BehemothCageId
        ---@type wds.BehemothCage
        self.cageEntity = g_Game.DatabaseManager:GetEntity(cageId, DBEntityType.BehemothCage)
        self.playerAllianceId = ModuleRefer.AllianceModule:GetAllianceId()
    end
    if self.cageEntity then
        self:UpdateStateByCageState(self.cageEntity.BehemothCage)
    end
end

function BehemothTroopCtrl:GetCageEntity()
    if not self.cageEntity then
        local cageId = self._data.MobInfo.BehemothCageId
        ---@type wds.BehemothCage
        self.cageEntity = g_Game.DatabaseManager:GetEntity(cageId, DBEntityType.BehemothCage)
    end
    return self.cageEntity
end

return BehemothTroopCtrl