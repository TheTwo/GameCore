---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/5/16 17:10
---
local BaseUIComponent = require('BaseUIComponent')
local TimeFormatter = require('TimeFormatter')
local ModuleRefer = require('ModuleRefer')
local Delegate = require('Delegate')
local TimerUtility = require('TimerUtility')
local DBEntityPath = require('DBEntityPath')
local UIMediatorNames = require('UIMediatorNames')
local ConfigRefer = require('ConfigRefer')
local I18N = require("I18N")
local FpAnimTriggerEvent = require('FpAnimTriggerEvent')
local FunctionClass = require('FunctionClass')
local EventConst = require('EventConst')
local HUDConst = require('HUDConst')
local AcitivityShopType = require('AcitivityShopType')
local NotificationType = require('NotificationType')
local ActivityShopConst = require('ActivityShopConst')
local NewFunctionUnlockIdDefine = require("NewFunctionUnlockIdDefine")
---@class HUDActivityComponent : BaseUIMediator
local HUDActivityComponent = class("HUDActivityComponent",BaseUIComponent)
---@protected
local FIRST_UNLOCK_RECHARGE = 'FIRST_UNLOCK_RECHARGE'

function HUDActivityComponent:ctor(...)
    BaseUIComponent.ctor(self, ...)
end

function HUDActivityComponent:OnCreate(param)
    ---scene_hud_city
    --activity button
    self.notifyNodeFirstPay = self:GameObject('child_reddot_default_recharge')
    self.firstPayAniTrigger = self:AnimTrigger('Trigger')

    --store button
    self._btn_store = self:Button('p_btn_store',Delegate.GetOrCreate(self,self.OnStoreButton))
    self._txt_storeTitle = self:Text('p_text_store', I18N.Get('bundle_center_hub'))

    --activity slots
    self._activitySlots = {}
    self._activitySlots[1] = self:Image('p_btn_box',Delegate.GetOrCreate(self,self.OnSlotClick1))
    self._activitySlots[2] = self:Image('p_btn_box_1',Delegate.GetOrCreate(self,self.OnSlotClick2))
    self._activitySlots[3] = self:Image('p_btn_box_2',Delegate.GetOrCreate(self,self.OnSlotClick3))

    -- self.notifyNode:SetActive(false)
    -- self.goBottom:SetActive(true)

    self.goStore = self:GameObject('p_store')
    self.textStoreActivity = self:Text('p_text_store_activity', I18N.Get('first_pay_icon_txt'))
    self.goStoreN = self:GameObject('p_store_n')
    self.imgIconStoreActivity = self:Image('p_icon_store_activity')
    self.imgIconStore = self:Image('p_icon_store')

    self.goStore:SetActive(true)
    self.goStoreN:SetActive(true)

    self.compNoviceTask = self:LuaObject('p_novice_task')
    self.compActivitySummary = self:LuaObject('p_popup_summary')
    self.compActivityFirstRecharge = self:LuaObject('p_activity_first_charge')
    ---@type HUDSeClimbTower
    self.compClimbTower = self:LuaObject('p_climbtower')

    self.compActivityCenter = self:LuaObject('p_activity_center')
    self.compBattlePass = self:LuaObject('p_battlepass')
    self.compEarthRevival = self:LuaObject('p_world_trend')

    self.scoreNotifyNode = self:LuaObject('child_reddot_default_recharge')


    --拯救美女
    self.p_activity_send_hero = self:LuaObject('p_activity_send_hero')
	
	g_Logger.LogChannel("HUDActivityComponent", "HUDActivityComponent:OnCreate")
end

function HUDActivityComponent:OnShow(param)
    for _, v in pairs(self._activitySlots) do
        v:SetVisible(false)
    end
    g_Game.EventManager:AddListener(EventConst.HERO_RESCUE, Delegate.GetOrCreate(self, self.RefreshHeroRescue))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.Window.MsgPath,Delegate.GetOrCreate(self, self.UpdatePopSummary))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.SystemEntry.OpenSystems.MsgPath,
                                        Delegate.GetOrCreate(self, self.UpdateOpenSystems))

    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.PlayerAutoReward.Rewards.MsgPath,
                                        Delegate.GetOrCreate(self, self.UpdatePlayerAutoRewardActivities))
    self:UpdateOpenSystems()
    self:UpdatePlayerAutoRewardActivities()

    local notifyNode = ModuleRefer.NotificationModule:GetDynamicNode(
        ActivityShopConst.NotificationNodeNames.ActivityShopEntry, NotificationType.ACTIVITY_SHOP_HUD)
    ModuleRefer.NotificationModule:AttachToGameObject(notifyNode, self.scoreNotifyNode.go, self.scoreNotifyNode.redDot)

	g_Logger.LogChannel("HUDActivityComponent", "HUDActivityComponent:OnShow")
end

function HUDActivityComponent:OnHide(param)
    g_Game.EventManager:RemoveListener(EventConst.HERO_RESCUE, Delegate.GetOrCreate(self, self.RefreshHeroRescue))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.Window.MsgPath,Delegate.GetOrCreate(self, self.UpdatePopSummary))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.SystemEntry.OpenSystems.MsgPath,
                                        Delegate.GetOrCreate(self, self.UpdateOpenSystems))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.PlayerAutoReward.Rewards.MsgPath,
                                        Delegate.GetOrCreate(self, self.UpdatePlayerAutoRewardActivities))
end

function HUDActivityComponent:UpdateOpenSystems()
    if self.goStore then
        local isStoreUnlock = ModuleRefer.NewFunctionUnlockModule:CheckNewFunctionIsUnlocked(NewFunctionUnlockIdDefine.Global_store_unlock)
        self.goStore:SetActive(isStoreUnlock)
    end

    if self.compClimbTower then
        local climbTowerSysEntryId = ConfigRefer.ClimbTowerConst:ClimbTowerSystemID()
        local isClimbTowerUnlock = ModuleRefer.NewFunctionUnlockModule:CheckNewFunctionIsUnlocked(climbTowerSysEntryId)
        self.compClimbTower:SetVisible(isClimbTowerUnlock)
    end

    if self.compActivityCenter then
        local activityCenterSysEntryId = NewFunctionUnlockIdDefine.Global_activity_center
        local isActivityCenterUnlock = ModuleRefer.NewFunctionUnlockModule:CheckNewFunctionIsUnlocked(activityCenterSysEntryId)
        self.compActivityCenter:SetVisible(isActivityCenterUnlock)
    end

    if self.compNoviceTask then
        self.compNoviceTask:UpdateShow()
    end

    if self.compActivitySummary then
        self.compActivitySummary:Init()
    end

    if self.compActivityFirstRecharge then
        self.compActivityFirstRecharge:Init()
    end

    if self.compEarthRevival then
        self.compEarthRevival:UpdateShow()
    end

    self:RefreshHeroRescue()
end


function HUDActivityComponent:RefreshHeroRescue()
    if self.p_activity_send_hero then
        local needRescue = ModuleRefer.HeroRescueModule:IsHeroNeedRescue()
        self.p_activity_send_hero:SetVisible(needRescue)
    end
end

function HUDActivityComponent:UpdatePlayerAutoRewardActivities()
    if self.compBattlePass then
        self.compBattlePass:SetVisible(true)
        self.compBattlePass:UpdateShow()
    end
end

function HUDActivityComponent:UpdatePopSummary()
    self.compActivitySummary:Init()
    self.compActivityFirstRecharge:Init()
end

function HUDActivityComponent:OnSlotClick1()

end

function HUDActivityComponent:OnSlotClick2()

end

function HUDActivityComponent:OnSlotClick3()

end

function HUDActivityComponent:OnActivityCenterButton()
    g_Game.UIManager:Open(UIMediatorNames.UIOneDayMediator)
end

function HUDActivityComponent:OnStoreButton()
    g_Game.UIManager:Open(UIMediatorNames.ActivityShopMediator)
end

return HUDActivityComponent
