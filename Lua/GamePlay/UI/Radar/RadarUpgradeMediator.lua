-- local BaseUIMediator = require('BaseUIMediator')
-- local Delegate = require('Delegate')
-- local ModuleRefer = require("ModuleRefer")
-- local I18N = require('I18N')
-- local GuideUtils = require('GuideUtils')
-- local UIHelper = require("UIHelper")
-- local ConfigRefer = require("ConfigRefer")
-- local EventConst = require('EventConst')
-- local DBEntityPath = require('DBEntityPath')
-- local CommonItemDetailsDefine = require('CommonItemDetailsDefine')
-- local RadarLevelUpParameter = require('RadarLevelUpParameter')
-- local UIMediatorNames = require('UIMediatorNames')
-- local UIHelper = require('UIHelper')
-- local CityWorkUICostItemData = require('CityWorkUICostItemData')


-- local RadarUpgradeMediator = class('RadarUpgradeMediator',BaseUIMediator)

-- local QUALITY_KEY = {
--     'leida_putong',
--     'leida_gaoji',
--     'leida_xiyou',
--     'leida_chuanshuo',
-- }

-- local QUALITY_COLOR = {
--     "#87A763",
--     "#6D91BC",
--     "#AA77C8",
--     "#DB8358",
-- }

-- function RadarUpgradeMediator:OnCreate()
--     self.compChildPopupBaseL = self:LuaBaseComponent('child_popup_base_l')
--     self.textHint = self:Text('p_text_hint', I18N.Get("leida_tishi1"))
--     self.textTitleLv = self:Text('p_title_level', I18N.Get("leida_dangqiandengji"))
--     self.textLv = self:Text('p_text_lv')
--     self.textNow = self:Text('p_text_now')
--     self.tableviewproTableNow = self:TableViewPro('p_table_now')
--     self.goGroupNext = self:GameObject('p_group_next')
--     self.textLvNext = self:Text('p_text_lv_next')
--     self.textNeed = self:Text('p_text_need', I18N.Get("leida_xiaohao"))
--     self.tableviewproTableItem = self:TableViewPro('p_table_item')
--     self.compChildCompB = self:LuaObject('child_comp_btn_b')
--     self.transChildCompB = self:Transform('child_comp_btn_b')

--     self.textCost = self:Text('p_text_cost', I18N.Get("bw_info_radar_upgrade_cost"))
--     self.goCostGrid = self:GameObject('p_cost_grid')
--     self.compCostItem = self:LuaBaseComponent('p_item_cost')

--     self.textCondition = self:Text('p_text_condition', I18N.Get("bw_info_radar_upgrade_cond"))
--     self.goConditionGrid = self:GameObject('p_condition_vertical')
--     self.compConditionItem = self:LuaBaseComponent('p_conditions')
--     self.textMaxLevel = self:Text('p_text_full', I18N.Get("leida_manji"))
-- end

-- function RadarUpgradeMediator:OnOpened()
--     self.compChildPopupBaseL:FeedData({
--         title = I18N.Get("leida_levelup"),
--     })

--     local upButton = {}
--     upButton.buttonText = I18N.Get("bw_btn_radar_upgrade")
--     -- upButton.disableClick = Delegate.GetOrCreate(self, self.OnClickDisableBtn)
--     upButton.onClick = Delegate.GetOrCreate(self, self.OnClickBtn)
--     self.compChildCompB:FeedData(upButton)
--     -- g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.Radar.MsgPath,Delegate.GetOrCreate(self,self.RefreshLv))
--     -- g_Game.ServiceManager:AddResponseCallback(RadarLevelUpParameter.GetMsgId(), Delegate.GetOrCreate(self, self.OnRadarLevelUp))
--     self:RefreshLv()
--     self:RefreshUpgradeCondition()
-- end

-- function RadarUpgradeMediator:RefreshLv()
--     self.curlevel = ModuleRefer.RadarModule:GetRadarLv()
--     local isMax = ModuleRefer.RadarModule:CheckIsMax()
--     self.textLv.text = I18N.Get("radar_level_num") .. self.curlevel
--     self.goGroupNext:SetActive(not isMax)
--     if isMax then
--         self.textNow.text = I18N.Get("leida_manji")
--     else
--         self.textNow.text = ""
--         local nextLv = self.curlevel + 1
--         self.textLvNext.text = I18N.Get("radar_level_num") .. nextLv
--     end

--     local curCfg = ConfigRefer.RadarLevel:Find(self.curlevel)
--     local totalTask = 0
--     for i = 1, curCfg:RadarTaskAnnulusTaskNumLength() do
--         totalTask = totalTask + curCfg:RadarTaskAnnulusTaskNum(i)
--     end
--     local nextCfg = ConfigRefer.RadarLevel:Find(self.curlevel + 1)
--     self.tableviewproTableNow:Clear()
--     local index = 1
--     if isMax then
--         self.tableviewproTableNow:AppendData({des = I18N.Get("Radar_intel_limit"), value = totalTask, index = index})
--     else
--         local nextTotalTask = 0
--         for i = 1, nextCfg:RadarTaskAnnulusTaskNumLength() do
--             nextTotalTask = nextTotalTask + nextCfg:RadarTaskAnnulusTaskNum(i)
--         end
--         self.tableviewproTableNow:AppendData({nextValue = nextTotalTask, des = I18N.Get("Radar_intel_limit"), value = totalTask, index = index})
--     end
--     index = index + 1
--     self.tableviewproTableNow:AppendData({nextValue = nextCfg:UnlockMistPointRecoverMax(), des = I18N.Get("Radar_mist_glowstick_max"), value = curCfg:UnlockMistPointRecoverMax(), index = index})
--     local length = nextCfg:QualityWeightsLength()
--     for i = 3, length do
--         local single = {}
--         single.des = UIHelper.GetColoredText(I18N.Get(QUALITY_KEY[i]), QUALITY_COLOR[i])
--         if curCfg:QualityWeightsLength() >= i and curCfg:QualityWeights(i) > 0 then
--             single.value = curCfg:QualityWeights(i) .. "%"
--         else
--             single.value = "--"
--         end
--         if not isMax then
--             if nextCfg:QualityWeights(i) > 0 then
--                 single.nextValue = nextCfg:QualityWeights(i) .. "%"
--             else
--                 single.nextValue = "--"
--             end
--         end
--         if single.value ~= "--" or single.nextValue ~= "--" then
--             single.index = index + 1
--             index = single.index
--             self.tableviewproTableNow:AppendData(single)
--         end
--     end
-- end

-- function RadarUpgradeMediator:RefreshUpgradeCondition()
--     local curCfg = ConfigRefer.RadarLevel:Find(self.curlevel)
--     if not curCfg then
--         return
--     end
--     self:ClearUpgradeConditionCache()
--     self.compCostItem.gameObject:SetActive(false)
--     local itemArrays = ModuleRefer.InventoryModule:ItemGroupId2ItemArrays(curCfg:CostItem())
--     if #itemArrays > 0 then
--         for _, item in ipairs(itemArrays) do
--             local costItem = UIHelper.DuplicateUIComponent(self.compCostItem, self.goCostGrid.transform)
--             local data = CityWorkUICostItemData.new(item.configCell:Id(), item.count)
--             costItem.Lua:OnFeedData(data)
--             costItem.gameObject:SetActive(true)
--             table.insert(self.costItemList, costItem)
--         end
--     else
--         self.goCostGrid:SetActive(false)
--     end
    
--     self.compConditionItem.gameObject:SetActive(false)
--     local conditionLength = curCfg:MistLevelUpConditionLength()
--     if conditionLength > 0 then
--         for i = 1, conditionLength do
--             local conditionItem = UIHelper.DuplicateUIComponent(self.compConditionItem, self.goConditionGrid.transform)
--             local taskConfig = ConfigRefer.Task:Find(curCfg:MistLevelUpCondition(i))
--             conditionItem.Lua:OnFeedData(taskConfig)
--             conditionItem.gameObject:SetActive(true)
--             table.insert(self.conditionList, conditionItem)
--         end
--     else
--         self.goConditionGrid:SetActive(false)
--     end
--     local isMax = ModuleRefer.RadarModule:CheckIsMax()

--     self.textMaxLevel.gameObject:SetActive(isMax)
-- end

-- function RadarUpgradeMediator:OnClickBtn()
--     -- local _scene = g_Game.SceneManager.current
--     -- if _scene:GetName() == require('KingdomScene').Name then
--     --     if _scene:IsInMyCity() then
--     --         GuideUtils.GotoByGuide(5063)
--     --     else
--     --         GuideUtils.GotoByGuide(5063)
--     --     end
--     -- end
--     local canUpgrade = ModuleRefer.RadarModule:CheckIsCanUpgrade()
--     if not canUpgrade then
--         ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("bw_btn_radar_upgrade_dissatisfied"))
--         return
--     end
--     local parameter = RadarLevelUpParameter.new()
--     parameter:Send()
--     self:CloseSelf()
-- end

-- function RadarUpgradeMediator:OnRadarLevelUp(isSuccess, reply, rpc)
--     if not isSuccess then
--         return
--     end
--     g_Game.UIManager:Open(UIMediatorNames.RadarUpgradeSuccMediator)
-- end

-- function RadarUpgradeMediator:OnClickDisableBtn()
--     ModuleRefer.ToastModule:ShowTextToast({clickTransform = self.transChildCompB, content = I18N.Get("leida_tishi2")})
-- end

-- function RadarUpgradeMediator:OnClose()
--     self:ClearUpgradeConditionCache()
--     -- g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.Radar.MsgPath,Delegate.GetOrCreate(self,self.RefreshLv))
--     -- g_Game.ServiceManager:RemoveResponseCallback(RadarLevelUpParameter.GetMsgId(), Delegate.GetOrCreate(self, self.OnRadarLevelUp))
-- end

-- function RadarUpgradeMediator:ClearUpgradeConditionCache()
--     if not self.costItemList then
--         self.costItemList = {}
--     end
--     for i = 1, #self.costItemList do
--         UIHelper.DeleteUIComponent(self.costItemList[i])
--     end
--     if not self.conditionList then
--         self.conditionList = {}
--     end
--     for i = 1, #self.conditionList do
--         UIHelper.DeleteUIComponent(self.conditionList[i])
--     end
-- end

-- return RadarUpgradeMediator