---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yingjie.cui.
--- DateTime: 2022/8/19 20:25
---
local Delegate = require('Delegate')

---@class AssetManager
---@field new fun():AssetManager
local AssetManager = class("AssetManager", require("BaseManager"))

function AssetManager:ctor()
    self._preLoadHoldHandle = {}
    ---@type CS.DragonReborn.AssetTool.AssetManager
    self.manager = CS.DragonReborn.AssetTool.AssetManager.Instance;
    self.manager:OnGameInitialize(nil)
    g_Game:AddSystemTicker(Delegate.GetOrCreate(self,self.Tick))
end

function AssetManager:Tick(delta)
    self.manager:Tick(delta)
end

function AssetManager:Reset()
    for _, handle in pairs(self._preLoadHoldHandle) do
        try_catch_traceback_with_vararg(self.manager.UnloadAsset, nil, self.manager, handle)
    end
    table.clear(self._preLoadHoldHandle)
    try_catch_traceback_with_vararg(self.manager.Reset, nil, self.manager)
    g_Game:RemoveSystemTicker(Delegate.GetOrCreate(self,self.Tick))
end

function AssetManager:OnLowMemory()
    try_catch_traceback_with_vararg(self.manager.OnLowMemory, nil, self.manager)
end

function AssetManager:IsInitialized()
    return self.manager and self.manager.Initialized or false
end

---@param assetName string
---@return boolean
function AssetManager:CanLoadSync(assetName)
    return self.manager:CanLoadSync(assetName)
end

---@param assetName string
---@param isSprite boolean
---@param reason CS.DragonReborn.AssetTool.AssetManager.SyncLoadReason
function AssetManager:LoadAsset(assetName, isSprite, reason)
    if reason == nil and isSprite == nil then
        return self.manager:LoadAsset(assetName)
    end
    if reason == nil then
        return self.manager:LoadAsset(assetName, isSprite)
    end
    return self.manager:LoadAsset(assetName, isSprite, reason)
end

---@param assetSet CS.System.Collections.Generic.HashSet<string>
---@param needAssetsReady boolean
---@param onAssetsReadyFunc CS.System.Action<bool>
function AssetManager:EnsureSyncLoadAssets(assetSet, needAssetsReady, onAssetsReadyFunc)
    g_Logger.Log('EnsureSyncLoadAssets %s', CS.DragonReborn.DataUtils.ToJson(assetSet))
    return self.manager:EnsureSyncLoadAssets(assetSet, needAssetsReady, onAssetsReadyFunc)
end

function AssetManager:LoadText(filename)
    return self.manager:LoadText(filename)
end

function AssetManager:LoadTextBytes(filename)
    return self.manager:LoadTextBytes(filename)
end

function AssetManager:LoadTextToJsonObj(filename)
    return IOUtilsWrap.ReadTextAsLuaJsonObject(self.manager, require("rapidjson").decode, filename)
end

function AssetManager:LoadTextWithCallback(filename, callback)
    self.manager:LoadTextWithCallback(filename, callback)
end

function AssetManager:ReloadAssetBundleConfig()
    return self.manager:ReloadAssetBundleConfig()
end

function AssetManager:UnloadUnused()
    self.manager:UnloadUnused()
end

function AssetManager:DumpAllLoadedBundleName()
    local t = {}
    local bundleNames = CS.DragonReborn.AssetTool.AssetManager.DumpAllLoadedBundleName()
    for i = 0, bundleNames.Length -1 do
        table.insert(t, bundleNames[i])
    end
    dump(t)
end

-- 真机下生效，Dump到Application.persistentPath下
function AssetManager:DumpLoadedAssetDetails()
    self.manager:DumpDebugInfo()
end

function AssetManager:ResetLoadedAssetDetails()
    self.manager:ClearDebugInfo()
end

function AssetManager:GetAllDependencyAssetBundles(assetName)
    return self.manager:GetAllDependencyAssetBundles(assetName)
end

function AssetManager:GetAllDependencyAssetBundlesByAssets(assetNames)
    return self.manager:GetAllDependencyAssetBundlesByAssets(assetNames)
end

function AssetManager:IsBundleMode()
    return self.manager:IsBundleMode()
end

---@param assetSet CS.System.Collections.Generic.HashSet<string>
---@param onAssetsReadyFunc CS.System.Action<bool>
function AssetManager:EnsureAssets(assetSet, onAssetsReadyFunc)
    self.manager:EnsureAssets(assetSet, onAssetsReadyFunc)
end

---@param assetSet CS.System.Collections.Generic.HashSet<string>
---@param readyAsset CS.System.Collections.Generic.List<string>
---@param needDownload CS.System.Collections.Generic.List<string>
---@param inValid CS.System.Collections.Generic.List<string>
function AssetManager:CheckSyncLoadAssetsReady(assetSet, readyAsset, needDownload, inValid)
    self.manager:CheckSyncLoadAssetsReady(assetSet, readyAsset, needDownload, inValid)
end

function AssetManager:ExistsInAssetSystem(assetName)
    if string.IsNullOrEmpty(assetName) then return false end
    return self.manager:ExistsInAssetSystem(assetName, false)
end

return AssetManager