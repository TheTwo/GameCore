---
--- SE服务器事件监听管理器
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by BE.Tenner.
--- DateTime: 2021/9/18 14:19
---

local SEUnitType = require("SEUnitType")
local DBEntityType = require("DBEntityType")
local Delegate = require("Delegate")
local ProtocolId = require("ProtocolId")
local DBEntityPath = require("DBEntityPath")
local ConfigRefer = require("ConfigRefer")
local InteractorCreateType = require('InteractorCreateType')
local RangeType = require('RangeType')
local ShapeType = require('ShapeType')
local SELogger = require("SELogger")
local LogicUnitRuleKey = require("LogicUnitRuleKey")
local Utils = require("Utils")
local SkillBehaviourModifyType = require("SkillBehaviourModifyType")
local ModuleRefer = require("ModuleRefer")
local rapidjson = require("rapidjson")
local OnChangeHelper = require("OnChangeHelper")
local SESceneRoot = require("SESceneRoot")
local EventConst = require("EventConst")
local UIMediatorNames = require("UIMediatorNames")
local SEEnvironmentModeType = require("SEEnvironmentModeType")
local PowerSubType = require("PowerSubType")

local SYNCDATA_KEY_ENEMY_ROUND_COUNT = "se_killmonster_count"
local SYNCDATA_KEY_ENEMY_ROUND_TOTAL_COUNT = "se_killmonster_totalcount"

---@class SEWdsManager
local SEWdsManager = class("SEWdsManager")

---@alias SEWdsManager_OnPlayerCardChangeCallback fun(entity:wds.ScenePlayer)

-- 客户端寻路最大修正距离（与服务器的偏差最大值）
local NAVMESH_FIX_DIST = 0.5

-- 客户端同步位置阈值
local SYNC_POS_THRESHOLD = 1

local LOW_DEVICE_SKILL_CAST_SKIP = 2
local LOW_DEVICE_FIGHT_CHANGE_SKIP = 1
local LOW_DEVICE_TRACE_STEP_SKIP = 1

---@param self SEWdsManager
---@param env SEEnvironment
---@return void
function SEWdsManager:ctor(env)
    ---@type SEEnvironment
    self.env = env
	---@type SEMessageQueue
	self.mq = nil
	---@type table<number, wds.ScenePlayer>
	self.scenePlayers = {}
    self.selfLevelCampIndex = 0
	self.castSkillCounter = 0
	self.traceStepCounter = 0
	self.fightChangeCounter = 0
	self.isLowDevice = false
	---@type table<number, KheroSkillLogicalSeConfigCell>
	self._skillCfgCache = {}
    ---@type SEWdsManager_OnPlayerCardChangeCallback[]
    self._onPlayerCardDataChangedCallback_tmp = {}
    ---@type SEWdsManager_OnPlayerCardChangeCallback[]
    self._onPlayerCardDataChangedCallback = {}
    ---@type table<string, boolean>
    self._customTrackScenePlayerCardFieldChange = {}
    self._customTrackScenePlayerCardFieldChange["JustForChange"] = true
    self._customTrackScenePlayerCardFieldChange["CardIds"] = true
    self._customTrackScenePlayerCardFieldChange["CardInfos"] = true
    self._customTrackScenePlayerCardFieldChange["PetCardIds"] = true
    ---@type table<wds.ScenePlayerCardBase, fun()>
    self._trackedScenePlayerCardComps = {}
    ---@type table<wds.ScenePlayerCardBase, wds.ScenePlayer>
    self._trackedScenePlayerCardCompsEntity = {}

    NAVMESH_FIX_DIST = ConfigRefer.ConstSe.SeNavmeshFixThreshold and ConfigRefer.ConstSe:SeNavmeshFixThreshold() or NAVMESH_FIX_DIST
    SYNC_POS_THRESHOLD = ConfigRefer.ConstSe.SeNpcSyncPosThreshold and ConfigRefer.ConstSe:SeNpcSyncPosThreshold() or SYNC_POS_THRESHOLD
end

---@param self SEWdsManager
---@return void
function SEWdsManager:Init()
	self.mq = self:GetEnvironment():GetMessageQueue()
	g_Game:AddIgnoreInvervalTicker(Delegate.GetOrCreate(self, self.ProcessQueuedMessages))
    self:AddWdsListeners()
	self.isLowDevice = g_Game.PerformanceLevelManager:IsLowLevel()
end

---@param self SEWdsManager
---@return void
function SEWdsManager:Dispose()
    self:ClearWdsListeners()
	g_Game:RemoveIgnoreInvervalTicker(Delegate.GetOrCreate(self, self.ProcessQueuedMessages))
end

---@param self SEWdsManager
---@param type DBEntityType
---@param entity wds.ScenePlayer
function SEWdsManager:OnNewScenePlayer(type, entity)
	if (entity) then
        local playerId = entity.Owner.PlayerID
		SELogger.Trace("ScenePlayer id: %s, playerId: %s", entity.ID, playerId)
        self.scenePlayers[playerId] = entity
        for _, value in pairs(entity.ScenePlayerCard.Infos) do
            self:AddComponentScenePlayerCardFieldChangedTrack(value, entity)
        end

        -- 更新己方阵营信息
        if playerId == ModuleRefer.PlayerModule:GetPlayerId() then
            self.selfLevelCampIndex = entity.Owner.LevelCampIndex
        end

		self:GetEnvironment():GetSkillManager():OnPlayerCardChange()
	end
end

---@param self SEWdsManager
---@param type DBEntityType
---@param entity wds.ScenePlayer
function SEWdsManager:OnDestoryScenePlayer(type, entity)
    if not entity then return end
    local playerId = entity.Owner.PlayerID
    SELogger.Trace("Destory ScenePlayer id: %s, playerId: %s", entity.ID, playerId)
    local trackedEntity = self.scenePlayers[playerId]
    if not trackedEntity then return end
    self.scenePlayers[playerId] = nil
    for _, value in pairs(trackedEntity.ScenePlayerCard.Infos) do
        self:RemoveComponentScenePlayerCardFieldTrack(value)
    end
    self:GetEnvironment():GetSkillManager():OnPlayerCardChange()
end

---@param entity wds.ScenePlayer
function SEWdsManager:OnScenePlayerScenePlayerCardInfosChanged(entity, changedData)
    if not entity then return end
    if not self.scenePlayers[entity.Owner.PlayerID] then return end
    local add,remove,_ = OnChangeHelper.GenerateMapComponentFieldChangeMap(changedData, wds.ScenePlayerHeroBase)
    if add then
        for _, value in pairs(add) do
            self:AddComponentScenePlayerCardFieldChangedTrack(value, entity)
        end
    end
    if remove then
        for _, value in pairs(remove) do
            self:RemoveComponentScenePlayerCardFieldTrack(value)
        end
    end
end

---@param comp wds.ScenePlayerCardBase
function SEWdsManager:AddComponentScenePlayerCardFieldChangedTrack(comp, entity)
    local removeFunc = self._trackedScenePlayerCardComps[comp]
    if removeFunc then return end
    removeFunc = comp:OnChanged(Delegate.GetOrCreate(self, self.OnComponentScenePlayerCardFieldChanged))
    self._trackedScenePlayerCardComps[comp] = removeFunc
    self._trackedScenePlayerCardCompsEntity[comp] = entity
end

---@param comp wds.ScenePlayerCardBase
function SEWdsManager:RemoveComponentScenePlayerCardFieldTrack(comp)
    local removeFunc = self._trackedScenePlayerCardComps[comp]
    if not removeFunc then return end
    self._trackedScenePlayerCardComps[comp] = nil
    self._trackedScenePlayerCardCompsEntity[comp] = nil
    removeFunc()
end

---@param comp wds.ScenePlayerCardBase
---@param changedMap table<string, any>
function SEWdsManager:OnComponentScenePlayerCardFieldChanged(comp, changedMap)
    local entity = self._trackedScenePlayerCardCompsEntity[comp]
    if not entity then return end
    for key, _ in pairs(changedMap) do
        if self._customTrackScenePlayerCardFieldChange[key] then
            self:FireOnPlayerCardChange(entity)
            return
        end
    end
end

---@param playerId number
---@return wds.ScenePlayer
function SEWdsManager:GetScenePlayer(playerId)
    if self.scenePlayers == nil then
        return nil
    end

    if playerId == nil then
        playerId = ModuleRefer.PlayerModule:GetPlayerId()
    end

    if not table.ContainsKey(self.scenePlayers, playerId) then
        SELogger.Log('GetScenePlayer from playerId %s is nil', playerId)
    end

	return self.scenePlayers[playerId]
end

---@return number
function SEWdsManager:GetSelfLevelCampIndex()
    return self.selfLevelCampIndex or 0
end

---添加服务器事件监听
---@param self SEWdsManager
---@return void
function SEWdsManager:AddWdsListeners()
	-- Scene Player
	local scenePlayers = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.ScenePlayer)
	for _, v in pairs(scenePlayers) do
		self:OnNewScenePlayer(DBEntityType.ScenePlayer, v)
	end
    g_Game.DatabaseManager:AddEntityNewByType(DBEntityType.ScenePlayer, Delegate.GetOrCreate(self, self.OnNewScenePlayer))
    g_Game.DatabaseManager:AddEntityDestroyByType(DBEntityType.ScenePlayer, Delegate.GetOrCreate(self, self.OnDestoryScenePlayer))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.ScenePlayer.ScenePlayerCard.Infos.MsgPath, Delegate.GetOrCreate(self, self.OnScenePlayerScenePlayerCardInfosChanged))

    -- Heroes
    local heroes = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.Hero)
    for _, v in pairs(heroes) do
        self:GetEnvironment():GetUnitManager():CreateHero(v)
    end
    g_Game.DatabaseManager:AddEntityNewByType(DBEntityType.Hero, Delegate.GetOrCreate(self, self.OnNewEntity))
    g_Game.DatabaseManager:AddEntityDestroyByType(DBEntityType.Hero, Delegate.GetOrCreate(self, self.OnDestroyEntity))

    -- Monsters
    local monsters = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.Monster)
    for _, v in pairs(monsters) do
        self:GetEnvironment():GetUnitManager():CreateMonster(v)
    end
    g_Game.DatabaseManager:AddEntityNewByType(DBEntityType.Monster, Delegate.GetOrCreate(self, self.OnNewEntity))
    g_Game.DatabaseManager:AddEntityDestroyByType(DBEntityType.Monster, Delegate.GetOrCreate(self, self.OnDestroyEntity))

    -- Puppets
    local puppets = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.Puppet)
    for _, v in pairs(puppets) do
        self:GetEnvironment():GetUnitManager():CreatePuppet(v)
    end
    g_Game.DatabaseManager:AddEntityNewByType(DBEntityType.Puppet, Delegate.GetOrCreate(self, self.OnNewEntity))
    g_Game.DatabaseManager:AddEntityDestroyByType(DBEntityType.Puppet, Delegate.GetOrCreate(self, self.OnDestroyEntity))

	-- Pets
	local pets = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.SePet)
	for _, v in pairs(pets) do
		self:GetEnvironment():GetUnitManager():CreatePet(v)
	end
	g_Game.DatabaseManager:AddEntityNewByType(DBEntityType.SePet, Delegate.GetOrCreate(self, self.OnNewEntity))
	g_Game.DatabaseManager:AddEntityDestroyByType(DBEntityType.SePet, Delegate.GetOrCreate(self, self.OnDestroyEntity))
	
    -- SeInteractor
    local interactors = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.SeInteractor)
    for k, v in pairs(interactors) do
        self:CreateInteractor(v)
    end
    g_Game.DatabaseManager:AddEntityNewByType(DBEntityType.SeInteractor, Delegate.GetOrCreate(self, self.OnNewEntity))
    g_Game.DatabaseManager:AddEntityDestroyByType(DBEntityType.SeInteractor, Delegate.GetOrCreate(self, self.OnDestroyEntity))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.SeInteractor.Interactor.MsgPath, Delegate.GetOrCreate(self, self.UpdateInteractorStatus))

    -- Team
    local scenePlayers = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.ScenePlayer)
    for _, scenePlayer in pairs(scenePlayers) do
        self:CreateScenePlayerTeams(scenePlayer)
    end
    g_Game.DatabaseManager:AddEntityNewByType(DBEntityType.ScenePlayer, Delegate.GetOrCreate(self, self.OnNewEntity))
    g_Game.DatabaseManager:AddEntityDestroyByType(DBEntityType.ScenePlayer, Delegate.GetOrCreate(self, self.OnDestroyEntity))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.ScenePlayer.ScenePlayerPreset.PresetList.MsgPath, Delegate.GetOrCreate(self, self.UpdateScenePlayerPreset))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.ScenePlayer.ScenePlayerCenterPoint.Infos.MsgPath, Delegate.GetOrCreate(self, self.UpdateScenePlayerCenter))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.ScenePlayer.ScenePlayerHero.Infos.MsgPath, Delegate.GetOrCreate(self, self.UpdateScenePlayerHero))

    -- Unit move
    --g_Game.ServiceManager:AddResponseCallback(ProtocolId.TraceStep, Delegate.GetOrCreate(self, self.TraceStepRsp))
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.PushTraceStepInfo, Delegate.GetOrCreate(self, self.PushTraceStepInfo))

    -- Skill
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.PushBattleCastSkillMessage, Delegate.GetOrCreate(self, self.PushBattleCastSkillMessage))
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.PushBattleSkillStopMessage, Delegate.GetOrCreate(self, self.PushBattleSkillStopMessage))

    -- Damage
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.PushBattleBuffDamage, Delegate.GetOrCreate(self, self.PushBattleBuffDamage))

    -- Interact
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.BreakInteract, Delegate.GetOrCreate(self, self.PushBreakInteract))

    -- 交互回调（主要用于失败）
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.CallBackInteract, Delegate.GetOrCreate(self, self.PushCallBackInteract))
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.NotifyOpenInteractorItemList, Delegate.GetOrCreate(self, self.PushNotifyOpenInteractorItemList))

    -- Broadcast
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.BroadcastCmd, Delegate.GetOrCreate(self, self.BroadcastCmd))

    -- BattleEnd PushLevelFinish & PushLevelReward
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.PushLevelReward, Delegate.GetOrCreate(self, self.PushLevelReward))

    -- LevelRTInfo
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.PushLevelRTInfo, Delegate.GetOrCreate(self, self.PushLevelRTInfo))

    -- 时间流速
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.PushServerTime, Delegate.GetOrCreate(self, self.PushServerTime))
    
    -- 结算
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.PushExploreBalance, Delegate.GetOrCreate(self, self.PushExploreBalance))

    -- DB相关
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Hero.MapStates.StateWrapper.MsgPath, Delegate.GetOrCreate(self, self.OnHeroMapStatesWrapperChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Hero.Skill.MsgPath, Delegate.GetOrCreate(self, self.OnHeroSkillChange))
    --g_Game.DatabaseManager:AddChanged(DBEntityPath.Hero.Owner.MsgPath, Delegate.GetOrCreate(self, self.OnHeroOwnerChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Hero.Skill.SeBuffs.MsgPath, Delegate.GetOrCreate(self, self.OnHeroBuffChange))
	g_Game.DatabaseManager:AddChanged(DBEntityPath.Hero.MapBasics.MsgPath, Delegate.GetOrCreate(self, self.OnHeroMovePathInfoChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Hero.MovePathInfo.MsgPath, Delegate.GetOrCreate(self, self.OnHeroMovePathInfoChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Hero.Fight.MsgPath, Delegate.GetOrCreate(self, self.OnHeroFightChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Hero.BasicInfo.Level.MsgPath, Delegate.GetOrCreate(self, self.OnHeroLevelChanged))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Hero.MapStates.StateWrapper.Battle.MsgPath, Delegate.GetOrCreate(self, self.OnUnitEntityMapStatesBattleChanged))

    g_Game.DatabaseManager:AddChanged(DBEntityPath.Monster.MapStates.StateWrapper.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMapStatesWrapperChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Monster.MapStates.StateWrapper3.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMapStatesWrapper3Change))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Monster.Skill.SeBuffs.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterBuffChange))
	g_Game.DatabaseManager:AddChanged(DBEntityPath.Monster.MapBasics.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Monster.MovePathInfo.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Monster.Fight.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterFightChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Monster.MapStates.StateWrapper.Battle.MsgPath, Delegate.GetOrCreate(self, self.OnUnitEntityMapStatesBattleChanged))

    g_Game.DatabaseManager:AddChanged(DBEntityPath.Puppet.MapStates.StateWrapper.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMapStatesWrapperChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Puppet.MapStates.StateWrapper3.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMapStatesWrapper3Change))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Puppet.Skill.SeBuffs.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterBuffChange))
	g_Game.DatabaseManager:AddChanged(DBEntityPath.Puppet.MapBasics.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Puppet.MovePathInfo.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Puppet.Fight.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterFightChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Puppet.MapStates.StateWrapper.Battle.MsgPath, Delegate.GetOrCreate(self, self.OnUnitEntityMapStatesBattleChanged))

	g_Game.DatabaseManager:AddChanged(DBEntityPath.SePet.MapStates.StateWrapper.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMapStatesWrapperChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.SePet.MapStates.StateWrapper3.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMapStatesWrapper3Change))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.SePet.Skill.SeBuffs.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterBuffChange))
	g_Game.DatabaseManager:AddChanged(DBEntityPath.SePet.MapBasics.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.SePet.MovePathInfo.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.SePet.Fight.MsgPath, Delegate.GetOrCreate(self, self.OnSePetFightChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.SePet.BasicInfo.Level.MsgPath, Delegate.GetOrCreate(self, self.OnSePetLevelChanged))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.SePet.MapStates.StateWrapper.Battle.MsgPath, Delegate.GetOrCreate(self, self.OnUnitEntityMapStatesBattleChanged))

    g_Game.DatabaseManager:AddChanged(DBEntityPath.Scene.Level.SyncData.Global.MsgPath, Delegate.GetOrCreate(self, self.OnLevelSyncDataChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Scene.SceneBase.TimeRate.MsgPath, Delegate.GetOrCreate(self, self.OnBattleSpeedRefresh))
end

---清除服务端事件监听
---@param self SEWdsManager
---@return void
function SEWdsManager:ClearWdsListeners()
	-- Scene player
	g_Game.DatabaseManager:RemoveEntityNewByType(DBEntityType.ScenePlayer, Delegate.GetOrCreate(self, self.OnNewScenePlayer))
    g_Game.DatabaseManager:RemoveEntityDestroyByType(DBEntityType.ScenePlayer, Delegate.GetOrCreate(self, self.OnDestoryScenePlayer))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.ScenePlayer.ScenePlayerCard.Infos.MsgPath, Delegate.GetOrCreate(self, self.OnScenePlayerScenePlayerCardInfosChanged))

    -- Heroes
    g_Game.DatabaseManager:RemoveEntityNewByType(DBEntityType.Hero, Delegate.GetOrCreate(self, self.OnNewEntity))
    g_Game.DatabaseManager:RemoveEntityDestroyByType(DBEntityType.Hero, Delegate.GetOrCreate(self, self.OnDestroyEntity))

    -- Monsters
    g_Game.DatabaseManager:RemoveEntityNewByType(DBEntityType.Monster, Delegate.GetOrCreate(self, self.OnNewEntity))
    g_Game.DatabaseManager:RemoveEntityDestroyByType(DBEntityType.Monster, Delegate.GetOrCreate(self, self.OnDestroyEntity))

    -- Puppets
    g_Game.DatabaseManager:RemoveEntityNewByType(DBEntityType.Puppet, Delegate.GetOrCreate(self, self.OnNewEntity))
    g_Game.DatabaseManager:RemoveEntityDestroyByType(DBEntityType.Puppet, Delegate.GetOrCreate(self, self.OnDestroyEntity))

	-- Pets
	g_Game.DatabaseManager:RemoveEntityNewByType(DBEntityType.SePet, Delegate.GetOrCreate(self, self.OnNewEntity))
	g_Game.DatabaseManager:RemoveEntityDestroyByType(DBEntityType.SePet, Delegate.GetOrCreate(self, self.OnDestroyEntity))
	
    -- SeInteractor
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.SeInteractor.Interactor.MsgPath, Delegate.GetOrCreate(self, self.UpdateInteractorStatus))
    g_Game.DatabaseManager:RemoveEntityNewByType(DBEntityType.SeInteractor, Delegate.GetOrCreate(self, self.OnNewEntity))
    g_Game.DatabaseManager:RemoveEntityDestroyByType(DBEntityType.SeInteractor, Delegate.GetOrCreate(self, self.OnDestroyEntity))

    --- Team
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.ScenePlayer.ScenePlayerPreset.PresetList.MsgPath, Delegate.GetOrCreate(self, self.UpdateScenePlayerPreset))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.ScenePlayer.ScenePlayerCenterPoint.Infos.MsgPath, Delegate.GetOrCreate(self, self.UpdateScenePlayerCenter))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.ScenePlayer.ScenePlayerHero.Infos.MsgPath, Delegate.GetOrCreate(self, self.UpdateScenePlayerHero))
    g_Game.DatabaseManager:RemoveEntityNewByType(DBEntityType.ScenePlayer, Delegate.GetOrCreate(self, self.OnNewEntity))
    g_Game.DatabaseManager:RemoveEntityDestroyByType(DBEntityType.ScenePlayer, Delegate.GetOrCreate(self, self.OnDestroyEntity))

    -- Unit move
    --g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.TraceStep, Delegate.GetOrCreate(self, self.TraceStepRsp))
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.PushTraceStepInfo, Delegate.GetOrCreate(self, self.PushTraceStepInfo))

    -- Skill
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.PushBattleCastSkillMessage, Delegate.GetOrCreate(self, self.PushBattleCastSkillMessage))
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.PushBattleSkillStopMessage, Delegate.GetOrCreate(self, self.PushBattleSkillStopMessage))

    -- Damage
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.PushBattleDamage, Delegate.GetOrCreate(self, self.PushBattleBuffDamage))

    -- Interact
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.BreakInteract, Delegate.GetOrCreate(self, self.PushBreakInteract))

    -- 交互回调（主要用于失败）
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.CallBackInteract, Delegate.GetOrCreate(self, self.PushCallBackInteract))
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.NotifyOpenInteractorItemList, Delegate.GetOrCreate(self, self.PushNotifyOpenInteractorItemList))

    -- Broadcast
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.BroadcastCmd, Delegate.GetOrCreate(self, self.BroadcastCmd))

    -- BattleEnd PushLevelFinish & PushLevelReward
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.PushLevelReward, Delegate.GetOrCreate(self, self.PushLevelReward))

    -- LevelRTInfo
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.PushLevelRTInfo, Delegate.GetOrCreate(self, self.PushLevelRTInfo))

    -- 时间流速
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.PushServerTime, Delegate.GetOrCreate(self, self.PushServerTime))

    -- 结算
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.PushExploreBalance, Delegate.GetOrCreate(self, self.PushExploreBalance))

    -- DB相关
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Hero.MapStates.StateWrapper.MsgPath, Delegate.GetOrCreate(self, self.OnHeroMapStatesWrapperChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Hero.Skill.MsgPath, Delegate.GetOrCreate(self, self.OnHeroSkillChange))
    --g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Hero.Owner.MsgPath, Delegate.GetOrCreate(self, self.OnHeroOwnerChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Hero.Skill.SeBuffs.MsgPath, Delegate.GetOrCreate(self, self.OnHeroBuffChange))
	g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Hero.MapBasics.MsgPath, Delegate.GetOrCreate(self, self.OnHeroMovePathInfoChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Hero.MovePathInfo.MsgPath, Delegate.GetOrCreate(self, self.OnHeroMovePathInfoChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Hero.Fight.MsgPath, Delegate.GetOrCreate(self, self.OnHeroFightChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Hero.BasicInfo.Level.MsgPath, Delegate.GetOrCreate(self, self.OnHeroLevelChanged))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Hero.MapStates.StateWrapper.Battle.MsgPath, Delegate.GetOrCreate(self, self.OnUnitEntityMapStatesBattleChanged))

    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Monster.MapStates.StateWrapper.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMapStatesWrapperChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Monster.Skill.SeBuffs.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterBuffChange))
	g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Monster.MapBasics.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Monster.MovePathInfo.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Monster.Fight.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterFightChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Monster.MapStates.StateWrapper.Battle.MsgPath, Delegate.GetOrCreate(self, self.OnUnitEntityMapStatesBattleChanged))

    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Puppet.MapStates.StateWrapper.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMapStatesWrapperChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Puppet.Skill.SeBuffs.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterBuffChange))
	g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Puppet.MapBasics.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Puppet.MovePathInfo.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Puppet.Fight.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterFightChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Puppet.MapStates.StateWrapper.Battle.MsgPath, Delegate.GetOrCreate(self, self.OnUnitEntityMapStatesBattleChanged))

	g_Game.DatabaseManager:RemoveChanged(DBEntityPath.SePet.MapStates.StateWrapper.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMapStatesWrapperChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.SePet.Skill.SeBuffs.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterBuffChange))
	g_Game.DatabaseManager:RemoveChanged(DBEntityPath.SePet.MapBasics.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.SePet.MovePathInfo.MsgPath, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.SePet.Fight.MsgPath, Delegate.GetOrCreate(self, self.OnSePetFightChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.SePet.BasicInfo.Level.MsgPath, Delegate.GetOrCreate(self, self.OnSePetLevelChanged))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.SePet.MapStates.StateWrapper.Battle.MsgPath, Delegate.GetOrCreate(self, self.OnUnitEntityMapStatesBattleChanged))

    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Scene.Level.SyncData.Global.MsgPath, Delegate.GetOrCreate(self, self.OnLevelSyncDataChange))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Scene.SceneBase.TimeRate.MsgPath, Delegate.GetOrCreate(self, self.OnBattleSpeedRefresh))
end

---@param self SEWdsManager
function SEWdsManager:OnLevelSyncDataChange(entity, changedData)
	self.mq:PushOverride(DBEntityPath.Scene.Level.SyncData.Global.MsgPath .. tostring(entity.ID),
		entity, Delegate.GetOrCreate(self, self.OnLevelSyncDataChangeProc))
end

function SEWdsManager:OnLevelSyncDataChangeProc(entity)
    ---@type wds.LevelDataUint
    local roundCount = entity.Level.SyncData.Global[SYNCDATA_KEY_ENEMY_ROUND_COUNT]
    ---@type wds.LevelDataUint
    local roundTotalCount = entity.Level.SyncData.Global[SYNCDATA_KEY_ENEMY_ROUND_TOTAL_COUNT]

    local curr = 0
    local total = 0
    if (roundCount) then curr = roundCount.IntValue or 0 end
    if (roundTotalCount) then total = roundTotalCount.IntValue or 0 end
    self:GetEnvironment():GetUiBattlePanel():UpdateEnemyRound(curr, total)
end

function SEWdsManager:OnBattleSpeedRefresh()
    local env = self:GetEnvironment()
    if not env or env._disposing then return end
    env:UpdateBattleSpeedFromSecenInfo()
end

---@param self SEWdsManager
---@return SEEnvironment
function SEWdsManager:GetEnvironment()
    return self.env
end

--region Callbacks
-- entity
function SEWdsManager:OnNewEntity(entityType, entity)
    if entityType == DBEntityType.Hero then
        self:GetEnvironment():GetUnitManager():CreateHero(entity)
    elseif entityType == DBEntityType.Monster then
        self:GetEnvironment():GetUnitManager():CreateMonster(entity)
    elseif entityType == DBEntityType.Puppet then
        self:GetEnvironment():GetUnitManager():CreatePuppet(entity)
    elseif entityType == DBEntityType.SePet then
        self:GetEnvironment():GetUnitManager():CreatePet(entity)
    elseif entityType == DBEntityType.SeInteractor then
        self:CreateInteractor(entity)
    elseif entityType == DBEntityType.ScenePlayer then
        self:CreateScenePlayerTeams(entity)
    end
end

function SEWdsManager:OnDestroyEntity(entityType, entity)
    if entityType == DBEntityType.SeInteractor then
        self:DestroyInteractor(entity)
    elseif entityType == DBEntityType.ScenePlayer then
        self:DestroyScenePlayerTeams(entity)
    else
        self:GetEnvironment():GetUnitManager():DestroyUnit(entity)
    end
end

-- rpc.push
---@param msg wrpc.PushTraceStepInfoRequest
function SEWdsManager:PushTraceStepInfo(isSucceed, msg)
    if not isSucceed then
        return
    end
	self.mq:PushOverride("PushTraceStepInfo_" .. tostring(msg.Info.EntityId), msg.Info, Delegate.GetOrCreate(self, self.OnPushTraceStepInfo))
end

---@param msg wrpc.PushBattleCastSkillMessageRequest
function SEWdsManager:PushBattleCastSkillMessage(isSucceed, msg)
	if (not msg or (type(msg) ~= "table" and type(msg) ~= "userdata")) then
		return
	end

	local allowSkip = true
	local cfgId = msg.MsgSkill.SkillInfo.SkillCfgId
	local skillCfg = self:GetSkillConfig(cfgId)

	-- 需要躲避的技能不能跳过
	if (skillCfg and skillCfg:NeedAvoid()) then
		allowSkip = false
		if (self.env:IsAutoBattle()) then
			self.env._uiBattlePanel:TryAvoidSkill(skillCfg, msg)
		end
	end

	-- 我方英雄技能不跳过
	local attacker = self.env._unitManager:GetUnit(msg.MsgSkill.Attacker)
	if (attacker and (attacker:IsHero() or attacker:IsPet())) then
		allowSkip = false
	end

	if (allowSkip and self.isLowDevice) then
		self.castSkillCounter = self.castSkillCounter + 1
		if (self.castSkillCounter > LOW_DEVICE_SKILL_CAST_SKIP) then
			self.castSkillCounter = 0
			self.mq:PushOverride("PushBattleCastSkillMessage_" .. tostring(msg.MsgSkill.Attacker), msg, Delegate.GetOrCreate(self, self.OnPushBattleCastSkill))
        end
	else
		self.mq:PushQueued("PushBattleCastSkillMessage_" .. tostring(msg.MsgSkill.Attacker), msg, Delegate.GetOrCreate(self, self.OnPushBattleCastSkill))
	end
end

function SEWdsManager:PushBattleSkillStopMessage(isSucceed, msg)
	self.mq:PushQueued("PushBattleSkillStopMessage", msg, Delegate.GetOrCreate(self, self.OnPushBattleSkillStop))
end

---@param msg wrpc.SkillResultData
function SEWdsManager:PushBattleBuffDamage(isSucceed, msg)
    self.mq:PushQueued("PushBattleBuffDamage", msg, Delegate.GetOrCreate(self, self.OnPushBattleBuffDamage))
end

function SEWdsManager:BroadcastCmd(isSucceed, msg)
	self.mq:PushQueued("BroadcastCmd", msg, Delegate.GetOrCreate(self, self.OnPushBroadcastCmd))
end
function SEWdsManager:PushLevelReward(isSucceed, msg)
	self.mq:PushOverride(tostring(ProtocolId.PushLevelReward), msg, Delegate.GetOrCreate(self, self.OnPushLevelReward))
end
function SEWdsManager:PushLevelRTInfo(isSucceed, msg)
	self.mq:PushQueued("PushLevelRTInfo", msg, Delegate.GetOrCreate(self, self.OnPushLevelRTInfo))
end
function SEWdsManager:PushServerTime(isSucceed, msg)
	self.mq:PushOverride("PushServerTime", msg, Delegate.GetOrCreate(self, self.OnPushServerTime))
end

function SEWdsManager:OnPushServerTime(msg)
    self:GetEnvironment():ChangeTimeScale(msg.SceneTimeInfo.Rate)
    self:GetEnvironment():SetBaseServerTime(msg.SceneTimeInfo.CurServerTime)
end

---@param msg wrpc.PushExploreBalanceRequest
function SEWdsManager:PushExploreBalance(isSuccess, msg)
    self.mq:PushQueued("PushExploreBalance", msg, Delegate.GetOrCreate(self, self.OnPushExploreBalance))
end

---@param msg wrpc.PushExploreBalanceRequest
function SEWdsManager:OnPushExploreBalance(msg)
    ---@type SEExploreSettlementMediatorParameter
    local uiParameter = {}
    uiParameter.result = msg.Success and 1 or 2
    uiParameter.gainList = {}
    uiParameter.showTypes = {}
    uiParameter.showTypes[PowerSubType.HeroBase] = true
    uiParameter.showTypes[PowerSubType.HeroEquip] = true
    uiParameter.showTypes[PowerSubType.HeroStrengthen] = true
    uiParameter.showTypes[PowerSubType.HeroSkill] = true
    uiParameter.showTypes[PowerSubType.PetBase] = true
    uiParameter.showTypes[PowerSubType.PetStrengthen] = true
    for itemId, count in pairs(msg.BringItems) do
        ---@type {itemId:number, count:number}
        local itemPair = {}
        itemPair.itemId = itemId
        itemPair.count = count
        table.insert(uiParameter.gainList, itemPair)
    end
    g_Game.UIManager:Open(UIMediatorNames.SEExploreSettlementMediator, uiParameter)
end

-- wds.change
---@param entity wds.Hero
function SEWdsManager:OnHeroMapStatesWrapperChange(entity, changedData)
	self.mq:PushOverride(DBEntityPath.Hero.MapStates.StateWrapper.MsgPath .. tostring(entity.ID),
		entity.ID,
		Delegate.GetOrCreate(self, self.OnHeroMapStatesWrapperChangeProc))
end

function SEWdsManager:OnHeroMapStatesWrapperChangeProc(id)
    local unit = self:GetEnvironment():GetUnitManager():GetUnit(id)
    if (unit) then
        unit:OnStateWrapperChange()
    end
end

---@param entity wds.Hero
function SEWdsManager:OnHeroSkillChange(entity, changedData)
	self.mq:PushOverride(DBEntityPath.Hero.Skill.MsgPath .. tostring(entity.ID, entity.Skill.SeSkillCds),
		entity, Delegate.GetOrCreate(self, self.OnHeroSkillChangeProc))
end

function SEWdsManager:OnHeroSkillChangeProc(entity)
    local hero = self:GetEnvironment():GetUnitManager():GetHero(entity.ID)
    if (hero) then
        self:GetEnvironment():GetUnitManager():OnHeroSkillChange(hero, entity.Skill.SeSkillCds)
    end
end

---@param entity wds.Hero
function SEWdsManager:OnHeroBuffChange(entity, changedData)
	self.mq:PushOverride(DBEntityPath.Hero.Skill.SeBuffs.MsgPath .. tostring(entity.ID),
		entity, Delegate.GetOrCreate(self, self.OnHeroBuffChangeProc))
end

function SEWdsManager:OnHeroBuffChangeProc(entity)
	self:OnUnitBuffChange(entity.ID)
end

---@param entity wds.Hero
function SEWdsManager:OnHeroMovePathInfoChange(entity, changedData)
	self.mq:PushOverride(DBEntityPath.Hero.MovePathInfo.MsgPath .. tostring(entity.ID),
		entity, Delegate.GetOrCreate(self, self.OnHeroMovePathInfoChangeProc))
end

---@param entity wds.Hero
function SEWdsManager:OnHeroMovePathInfoChangeProc(entity)
	self:OnUnitMovePathInfoChange(entity)
end

---@param entity wds.Hero
function SEWdsManager:OnHeroFightChange(entity, changedData)
    if changedData and changedData["HP"] then
        self.mq:PushOverride(DBEntityPath.Hero.Fight.MsgPath .. tostring(entity.ID),
		    entity, Delegate.GetOrCreate(self, self.OnHeroFightChangeForceSyncHpProc))
    else
        self.mq:PushOverride(DBEntityPath.Hero.Fight.MsgPath .. tostring(entity.ID),
		    entity, Delegate.GetOrCreate(self, self.OnHeroFightChangeProc))
    end
end

---@param entity wds.Hero
function SEWdsManager:OnHeroFightChangeForceSyncHpProc(entity)
    self:OnUnitFightChange(entity.ID, true)
end

---@param entity wds.Hero
function SEWdsManager:OnHeroFightChangeProc(entity)
    self:OnUnitFightChange(entity.ID)
end

---@param entity wds.Hero
function SEWdsManager:OnHeroLevelChanged(entity, _)
    self.mq:PushOverride(DBEntityPath.Hero.BasicInfo.Level.MsgPath .. tostring(entity.ID),
		entity, Delegate.GetOrCreate(self, self.OnHeroLevelChangedProc))
end

---@param entity wds.Hero
function SEWdsManager:OnHeroLevelChangedProc(entity)
    self:OnUnitBasicInfoLevelChange(entity.ID)
end

---@param entity wds.SePet
function SEWdsManager:OnSePetFightChange(entity, changedData)
    if changedData and changedData["HP"] then
        self.mq:PushOverride(DBEntityPath.SePet.Fight.MsgPath .. tostring(entity.ID),
                entity, Delegate.GetOrCreate(self, self.OnSePetFightChangeForceSyncHpProc))
    else
        self.mq:PushOverride(DBEntityPath.SePet.Fight.MsgPath .. tostring(entity.ID),
                entity, Delegate.GetOrCreate(self, self.OnSePetFightChangeProc))
    end
end

---@param entity wds.SePet
function SEWdsManager:OnSePetFightChangeForceSyncHpProc(entity)
    self:OnUnitFightChange(entity.ID, true)
end

---@param entity wds.SePet
function SEWdsManager:OnSePetFightChangeProc(entity)
    self:OnUnitFightChange(entity.ID)
end

---@param entity wds.Monster
function SEWdsManager:OnMonsterMapStatesWrapperChange(entity, changedData)
	self.mq:PushOverride(DBEntityPath.Monster.MapStates.StateWrapper.MsgPath .. tostring(entity.ID),
		entity, Delegate.GetOrCreate(self, self.OnMonsterMapStatesWrapperChangeProc))
end

---@param entity wds.Monster
function SEWdsManager:OnMonsterMapStatesWrapperChangeProc(entity)
    local unit = self:GetEnvironment():GetUnitManager():GetUnit(entity.ID)
    if (unit) then
        unit:OnStateWrapperChange()
    end
end

---@param entity wds.Monster
function SEWdsManager:OnMonsterMapStatesWrapper3Change(entity, changedData)
    self.mq:PushOverride(DBEntityPath.Monster.MapStates.StateWrapper3.MsgPath .. tostring(entity.ID),
            entity, Delegate.GetOrCreate(self, self.OnMonsterMapStatesWrapper3ChangeProc))
end

---@param entity wds.Monster
function SEWdsManager:OnMonsterMapStatesWrapper3ChangeProc(entity)
    local unit = self:GetEnvironment():GetUnitManager():GetUnit(entity.ID) or self:GetEnvironment():GetUnitManager():GetDeadUnit(entity.ID)
    if (unit) then
        unit:OnStateWrapper3Change()
    end
end

---@param entity wds.Monster
function SEWdsManager:OnMonsterBuffChange(entity, changedData)
    self.mq:PushOverride(DBEntityPath.Monster.Skill.SeBuffs.MsgPath .. tostring(entity.ID),
		entity, Delegate.GetOrCreate(self, self.OnMonsterBuffChangeProc))
end

---@param entity wds.Monster
function SEWdsManager:OnMonsterBuffChangeProc(entity)
	self:OnUnitBuffChange(entity.ID)
end

---@param entity wds.Monster
function SEWdsManager:OnMonsterMovePathInfoChange(entity, changedData)
	if (self.isLowDevice) then
		self.traceStepCounter = self.traceStepCounter + 1
		if (self.traceStepCounter > LOW_DEVICE_TRACE_STEP_SKIP) then
			self.traceStepCounter = 0
			self.mq:PushOverride(DBEntityPath.Monster.MovePathInfo.MsgPath .. tostring(entity.ID),
				entity, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChangeProc))
		end
	else
		self.mq:PushOverride(DBEntityPath.Monster.MovePathInfo.MsgPath .. tostring(entity.ID),
			entity, Delegate.GetOrCreate(self, self.OnMonsterMovePathInfoChangeProc))
	end
end

---@param entity wds.Monster
function SEWdsManager:OnMonsterMovePathInfoChangeProc(entity)
	self:OnUnitMovePathInfoChange(entity)
end

---@param entity wds.Monster
function SEWdsManager:OnMonsterFightChange(entity, changedData)
	if (self.isLowDevice) then
		self.fightChangeCounter = self.fightChangeCounter + 1
		if (self.fightChangeCounter > LOW_DEVICE_FIGHT_CHANGE_SKIP) then
			self.fightChangeCounter = 0
			self.mq:PushOverride(DBEntityPath.Monster.Fight.MsgPath .. tostring(entity.ID),
				entity, Delegate.GetOrCreate(self, self.OnMonsterFightChangeProc))
		end
	else
		self.mq:PushOverride(DBEntityPath.Monster.Fight.MsgPath .. tostring(entity.ID),
			entity, Delegate.GetOrCreate(self, self.OnMonsterFightChangeProc))
	end
end

---@param entity wds.Monster
function SEWdsManager:OnMonsterFightChangeProc(entity)
	self:OnUnitFightChange(entity.ID)
end

---@param entity wds.SePet
function SEWdsManager:OnSePetLevelChanged(entity, _)
    self.mq:PushOverride(DBEntityPath.SePet.BasicInfo.Level.MsgPath .. tostring(entity.ID),
		entity, Delegate.GetOrCreate(self, self.OnSePetLevelChangedProc))
end

---@param entity wds.SePet
function SEWdsManager:OnSePetLevelChangedProc(entity)
    self:OnUnitBasicInfoLevelChange(entity.ID)
end

---@param entity wds.Hero|wds.SePet|wds.Monster|wds.Puppet
function SEWdsManager:OnUnitEntityMapStatesBattleChanged(entity, _)
    self.mq:PushOverride(entity.TypeName .. "MapStates.StateWrapper.Battle" .. tostring(entity.ID),
            entity, Delegate.GetOrCreate(self, self.OnUnitEntityMapStatesBattleChangedProc))
end

---@param entity wds.Hero|wds.SePet|wds.Monster|wds.Puppet
function SEWdsManager:OnUnitEntityMapStatesBattleChangedProc(entity)
    self:OnUnitFightChange(entity.ID)
    if entity.TypeHash == DBEntityType.Monster then
        self:OnMonsterMapStateBattleChange(entity)
    elseif entity.TypeHash == DBEntityType.Hero then
        self:GetEnvironment():OnAnyHeroBattleStateChanged(entity)
    end
end

---@param entity wds.Monster
function SEWdsManager:OnMonsterMapStateBattleChange(entity)
    local env = self:GetEnvironment()
    if env:GetEnvMode() ~= SEEnvironmentModeType.CityScene then return end
    local unitMgr = env:GetUnitManager()
    local id = entity.ID
    local unit = unitMgr:GetUnit(id) or unitMgr:GetDeadUnit(id)
    if not unit or not unit:IsBoss() or not unit:IsHostile() then return end
    local index = unitMgr:GetBossIndex(unit)
    if not index or index <= 0 then return end
    local battling = entity.MapStates.StateWrapper.Battle
    if battling then
        unitMgr:RefreshBossHud(unit, index)
    else
        local panel = env:GetUiBattlePanel()
        if not panel then return end
        panel:HideBossHPBar(index)
    end
end

-- unit
function SEWdsManager:OnUnitBuffChange(id)
    local unit = self:GetEnvironment():GetUnitManager():GetUnit(id) or self:GetEnvironment():GetUnitManager():GetDeadUnit(id)
    if unit then
        unit:OnBuffChange()
    end
end

--- entity可能是Hero, Monster, Puppet, SePet
---@param entity wds.Monster
function SEWdsManager:OnUnitMovePathInfoChange(entity)
    local id = entity.ID
    local unit = self:GetEnvironment():GetUnitManager():GetUnit(id)
    if unit then
        self:GetEnvironment():GetUnitManager():OnUnitSpeedChange(unit)
    end

    -- 优化位移，取消PushTraceStepInfo，自己模拟Push
    local stepInfo = wrpc.StepInfo()
    stepInfo.EntityId = id
    stepInfo.Pos = entity.MapBasics.Position
    stepInfo.Dir = entity.MapBasics.Direction
    stepInfo.Path = entity.MovePathInfo.Path
    stepInfo.Speed = entity.MovePathInfo.Speed
    stepInfo.Mask = entity.MovePathInfo.Mask
    stepInfo.State = entity.MovePathInfo.MoveState
    stepInfo.Flag = entity.MovePathInfo.Flag
    self:OnPushTraceStepInfo(stepInfo)
    -- self._mq:PushOverride("PushTraceStepInfo_Opt" .. tostring(stepInfo.EntityId), stepInfo, Delegate.GetOrCreate(self, self.OnPushTraceStepInfo))
end

function SEWdsManager:OnUnitFightChange(id, forceSyncHp)
    local unit = self:GetEnvironment():GetUnitManager():GetUnit(id)
    if unit then
        if (unit:GetHPServer() <= 0) then
            unit:SetHpClientFromDamage(0)
            unit:SyncHpClientFromKeyEvent()
        else
            if forceSyncHp then
                unit:ForceSyncFromServerHp()
            end
            self:GetEnvironment():GetUnitManager():OnUnitFightChange(unit)
        end
    else
        unit = self:GetEnvironment():GetUnitManager():GetDeadUnit(id)
        if (unit) then
            if (unit:GetHPServer() > 0) then
                self:GetEnvironment():GetUnitManager():Revive(unit)
                unit:SetDead(false)
                unit:ForceSyncFromServerHp()
                self:GetEnvironment():GetUnitManager():OnUnitFightChange(unit)
            end
        end
    end
end

function SEWdsManager:OnUnitBasicInfoLevelChange(id)
    local unit = self:GetEnvironment():GetUnitManager():GetUnit(id)
    if not unit then return end
    unit:OnLevelChanged()
end

--endregion

---@param self SEWdsManager
---@param msg wrpc.PushLevelRTInfoRequest
---@return void
function SEWdsManager:OnPushLevelRTInfo(msg)
    SELogger.Log("PushLevelRTInfo: %s", msg)
    --CS.NodeDebugUtils.Log(msg.NodeId, msg.Timestamp, msg.Msg)
end

---销毁交互物
---@param self SEWdsManager
---@param entity wds.SeInteractor
---@return void
function SEWdsManager:DestroyInteractor(entity)
    --SELogger.Log("Try destroy interactor id [%s] config id [%s]", tostring(entity.ID), tostring(entity.Interactor.ConfigID))
    self:DoDestroyInteractor(entity)
end

---创建交互物
---@param self SEWdsManager
---@param entity wds.SeInteractor
---@return void
function SEWdsManager:CreateInteractor(entity)
    SELogger.Log("Try create interactor id [%s] config id [%s]", entity.ID, entity.Interactor.ConfigID)
    self:UpdateInteractorStatus(entity, 0)
end

function SEWdsManager:OnUpdateInteractorStatus(entity)
    local conf = ConfigRefer.Mine:Find(entity.Interactor.ConfigID)

    -- SE mine components
    local un = entity.LevelEntityInfo.UniqueName
    if (conf and conf:CreateType() == InteractorCreateType.Dynamic) then
        un = tostring(entity.ID)
    end
    local comps = self:GetEnvironment():GetInteractorComponentsByUniqueName(un)
    if (not comps) then
        if (conf and conf:CreateType() == InteractorCreateType.Fix or not self:GetEnvironment():GenInteractor(entity)) then
            SELogger.LogError("SE mine components for interactor entity id [%s] unique name [%s] config id [%s] not found!",
                    tostring(entity.ID),
                    tostring(entity.LevelEntityInfo.UniqueName),
                    tostring(entity.Interactor.ConfigID))
        end
        return
    else
        for _, v in pairs(comps) do
            v:SetID(entity.ID)
            v:SetConfigID(entity.Interactor.ConfigID)
            local interactorConf = ConfigRefer.Mine:Find(entity.Interactor.ConfigID)
            if (interactorConf) then
                if (v.MoveToDistanceThreshold ~= nil) then
                    v.MoveToDistanceThreshold = interactorConf:Distance()
                    SELogger.LogLow("Interactor id %s conf id %s interactible distance: %s", entity.ID, entity.Interactor.ConfigID, interactorConf.Distance)
                end
                if (v.InteractAsap ~= nil) then
                    v.InteractAsap = interactorConf:InteractAsap()
                    SELogger.LogLow("Interactor id %s conf id %s interact asap: %s", entity.ID, entity.Interactor.ConfigID, interactorConf.InteractAsap)
                end
                if (v.AlwaysSearchable ~= nil) then
                    v.AlwaysSearchable = interactorConf:AlwaysSearchable()
                    SELogger.LogLow("Interactor id %s conf id %s always searchable: %s", entity.ID, entity.Interactor.ConfigID, interactorConf.AlwaysSearchable)
                end
            end
            SELogger.Log("Interactor %s change status to %s, interactable: %s", entity.LevelEntityInfo.UniqueName, entity.Interactor.LifeStatus, entity.Interactor.State.CanInteract)
            v:ChangeStatus(entity.Interactor.LifeStatus, entity.Interactor.State.CanInteract)
            -- 拾取完毕
            if (entity.Interactor.LifeStatus == wds.InteractorLifeStatus.InteractorLifeStatusVanished) then
                self:GetEnvironment():GetUnitManager():LootComplete(entity.ID)
            end
        end
    end
end


---更新交互物状态
---@param self SEWdsManager
---@param entity wds.SeInteractor
---@return void
function SEWdsManager:UpdateInteractorStatus(entity, changedData)
	self.mq:PushOverride(DBEntityPath.SeInteractor.Interactor.MsgPath .. tostring(entity.ID),
		entity, Delegate.GetOrCreate(self, self.OnUpdateInteractorStatus))
end

---@param entity wds.SeInteractor
function SEWdsManager:DoDestroyInteractor(entity)
    self.mq:PushOverride(DBEntityPath.SeInteractor.Interactor.MsgPath .. tostring(entity.ID),
            entity, Delegate.GetOrCreate(self, self.DoDestroyInteractorProc))
end

---@param entity wds.SeInteractor
function SEWdsManager:DoDestroyInteractorProc(entity)
    local env = self:GetEnvironment()
    env:CancelGenInteractor(entity.ID)
    env:RemoveDynamicSEInteractorRangeEvent(entity.ID)
    local conf = ConfigRefer.Mine:Find(entity.Interactor.ConfigID)

    -- SE mine components
    local un = entity.LevelEntityInfo.UniqueName
    if (conf and conf:CreateType() == InteractorCreateType.Dynamic) then
        un = tostring(entity.ID)
    end
    local comps = self:GetEnvironment():GetInteractorComponentsByUniqueName(un)
    if comps then
        for _, v in pairs(comps) do
            env:DestoryInteractorGo(v)
        end
    end
end

---@param entity wds.ScenePlayer
function SEWdsManager:CreateScenePlayerTeams(entity)
    self:UpdateScenePlayerPreset(entity, nil)
end

---@param entity wds.ScenePlayer
function SEWdsManager:DestroyScenePlayerTeams(entity)
    self:OnDestroyScenePlayerPreset(entity, nil)
end

---@param entity wds.ScenePlayer
function SEWdsManager:UpdateScenePlayerPreset(entity, changeData)
    self.mq:PushOverride(DBEntityPath.ScenePlayer.ScenePlayerPreset.PresetList.MsgPath .. tostring(entity.ID),
        entity, Delegate.GetOrCreate(self, self.OnUpdateScenePlayerPreset))
end

---@param entity wds.ScenePlayer
function SEWdsManager:OnUpdateScenePlayerPreset(entity)
    if entity.Owner.PlayerID ~= ModuleRefer.PlayerModule:GetPlayerId() then return end
    local teamManager = self:GetEnvironment():GetTeamManager()
    teamManager:CreateOrUpdateTeam(entity)
end

function SEWdsManager:OnDestroyScenePlayerPreset(entity)
    if entity.Owner.PlayerID ~= ModuleRefer.PlayerModule:GetPlayerId() then return end
    local teamManager = self:GetEnvironment():GetTeamManager()
    teamManager:DestroyTeam(entity)
end

---@param entity wds.ScenePlayer
function SEWdsManager:UpdateScenePlayerCenter(entity, changeData)
    self.mq:PushOverride(DBEntityPath.ScenePlayer.ScenePlayerCenterPoint.Infos.MsgPath .. tostring(entity.ID),
        entity, Delegate.GetOrCreate(self, self.OnUpdateScenePlayerCenter))
end

---@param entity wds.ScenePlayer
function SEWdsManager:UpdateScenePlayerHero(entity, changeData)
    self.mq:PushOverride(DBEntityPath.ScenePlayer.ScenePlayerHero.Infos.MsgPath .. tostring(entity.ID),
        entity, Delegate.GetOrCreate(self, self.OnUpdateScenePlayerHero))
end

---@param entity wds.ScenePlayer
function SEWdsManager:OnUpdateScenePlayerCenter(entity)
    if entity.Owner.PlayerID ~= ModuleRefer.PlayerModule:GetPlayerId() then return end
    local teamManager = self:GetEnvironment():GetTeamManager()
    teamManager:UpdateTeamCenter(entity)
end

function SEWdsManager:OnUpdateScenePlayerHero(entity)
    if entity.Owner.PlayerID ~= ModuleRefer.PlayerModule:GetPlayerId() then return end
    local teamManager = self:GetEnvironment():GetTeamManager()
    teamManager:UpdateTeamCaptain(entity)
end

---推送移动信息
---@param self SEWdsManager
---@param stepInfo wrpc.StepInfo
---@return void
function SEWdsManager:OnPushTraceStepInfo(stepInfo)
    local pos = self:GetEnvironment():ServerPos2Client(
        CS.UnityEngine.Vector3(stepInfo.Pos.X, stepInfo.Pos.Y, stepInfo.Pos.Z))
    local fpos = pos

    -- Dummy unit
    local dummy = self:GetEnvironment():GetUnitManager():GetDummyUnit(stepInfo.EntityId)
    if (dummy) then
        dummy:SetPosition(pos)
        return
    end

    -- 移动单位
    ---@type SEUnit
    local unit = self:GetEnvironment():GetUnitManager():GetUnit(stepInfo.EntityId)
    if (not unit) then
        --SELogger.LogError("Unit ID [%s] not exist!!", stepInfo.EntityId)
        return
    end

    -- 死亡单位
    if (unit:IsDead()) then
        return
    end

    -- 被Joystick控制队伍接管了移动
    if self:GetEnvironment():GetTeamManager():IsUnitControlByTeam(unit) then
        return
    end

    -- 路径
    local path = {}
    if (stepInfo.Path and #stepInfo.Path > 0) then
        for i=1, #stepInfo.Path do
            local sp = stepInfo.Path[i]
            path[i] = self:GetEnvironment():ServerPos2Client(
                CS.UnityEngine.Vector3(sp.X, sp.Y, sp.Z))
            -- path[i] = CS.UnityEngine.Vector3(sp.X, sp.Z, sp.Y)
        end
    end
    if (path and #path > 0) then
        fpos = path[#path]
    end

    SELogger.LogLow("OnPushTraceStepInfo: Entity id %s, pos: %s, final pos: %s", unit._id, pos, fpos)

    -- 忽略电梯中的英雄（只记录位置）
    if (unit:GetType() == SEUnitType.Hero and unit.IsInElevator and unit:IsInElevator()) then
        SELogger.Log("Unit %s is in elevator, only record position.", unit._id)
        unit:GetActor():SetServerPosition(fpos)
        return
    end

    -- 瞬移
    if stepInfo.Flag == wds.MoveFlag.MoveFlag_Jump then
        unit:GetController():StopMove()
        unit:GetLocomotion():TeleportTo(pos)
        local forward = CS.UnityEngine.Vector3(stepInfo.Dir.X, 0, stepInfo.Dir.Y)
        unit:GetActor():SetForward(forward)
        SELogger.LogLow("Teleport unit %s from %s to %s forward %s", unit._id, unit:GetActor():GetPosition(), pos, forward)
        return

	-- 技能位移忽略
	elseif stepInfo.Flag == wds.MoveFlag.MoveFlag_SkillBlink then
		SELogger.LogLow("Unit %s skill blink, only record position.", unit._id)
		unit:GetActor():SetServerPosition(pos)
		return

	-- 定身控制检测
    elseif (unit:IsControl() or unit:IsDominated()) then
        SELogger.LogLow("Unit %s is in control or dominated, can't move!", unit._id)
        unit:GetController():StopMove()
        return

    -- 正常位移
    else
        -- 同步位置
        local cpos = unit:GetActor():GetPosition()
        local scale = SESceneRoot.GetClientScale()
        if (cpos and pos and CS.UnityEngine.Vector3.Distance(cpos, pos) >= (SYNC_POS_THRESHOLD * scale)) then
            unit:GetActor():SetPosition(pos)
            unit:GetActor():SetServerPosition(pos)
        end

        -- 设置速度
        unit:GetLocomotion():SetMoveSpeed(stepInfo.Speed)

        -- 设置移动路径
        local manual = ((stepInfo.Mask & wds.enum.MoveMask.MoveMask_Manual) == wds.enum.MoveMask.MoveMask_Manual)
        unit:GetController():SetTargetPath(path, manual)
    end
end

---推送广播消息
---@param self SEWdsManager
---@param msg wrpc.BroadcastCmdRequest
---@return void
function SEWdsManager:OnPushBroadcastCmd(msg)
    SELogger.Trace("BroadcastCmd, type: [%s], params: [%s]", msg.CmdType, msg.Params)
    if (msg.CmdType == wrpc.CmdType.CmdTypeStartCG) then
		SELogger.Trace("StartCG %s", msg.Params[1])
		self:GetEnvironment():PlayTimeline(msg.Params[1])
    elseif (msg.CmdType == wrpc.CmdType.CmdTypePlayPopup) then
        self:GetEnvironment():GetUnitManager():ShowBubbleDialog(msg.Params[1], msg.Params[2])
    elseif (msg.CmdType == wrpc.CmdType.CmdTypeStartClientCmd) then
        local cmdId = msg.Params[1]
        local cmdConf = ConfigRefer.ClientCmdSe:Find(cmdId)
        if (cmdConf) then
            self:GetEnvironment():ProcessClientCommand(cmdConf, msg.Params)
        else
            SELogger.LogError("Client command ID %s not found!", cmdId)
        end
    end
end

---推送关卡奖励
---@param self SEWdsManager
---@param msg wrpc.PushLevelRewardRequest
---@return void
function SEWdsManager:OnPushLevelReward(msg)
    SELogger.Log("OnPushLevelReward, Tid:[%s], Id:[%s], Suc:[%s]", tostring(msg.Tid), tostring(msg.Id), msg.Suc)
	self:GetEnvironment():ProcessBattleEnd()
	g_Game.UIManager:CloseByName(require('UIMediatorNames').SEBattleWarningMediator)
	g_Game.UIManager:CloseByName(require('UIMediatorNames').SEBattleBossWarningMediator)
	self:GetEnvironment():ShowSettlement(msg.Suc, msg.RewardInfo)
end

---通过ID获取单位
---@param self SEWdsManager
---@param id any
---@return SEUnit
function SEWdsManager:GetUnitById(id)
    local attacker = self:GetEnvironment():GetUnitManager():GetUnit(id)
    if (not attacker) then
        attacker = self:GetEnvironment():GetUnitManager():GetDummyUnit(id)
    end
    return attacker
end

---推送技能信息
---@param self SEWdsManager
---@param msg wrpc.PushBattleCastSkillMessageRequest
---@return void
function SEWdsManager:OnPushBattleCastSkill(msg)
    -- 处理伤害和buff
    local msgResults = msg.MsgResult
    local msgResultsCount = msgResults:Count()
    if msgResultsCount > 0 then
        --SELogger.Log("msgDamages: %s", msgDamages)
        for i = 1, msgResultsCount do
            local msgResult = msgResults[i]
            -- 通过标志位判断是否有伤害数据
            local causeDmgBitMask = 1 << LogicUnitRuleKey.CauseDmg
            if (Utils.IsBitMaskMatch(msgResult.Mask, causeDmgBitMask) and msgResult.Damage) then
                self:GetEnvironment():GetDamageManager():OnPushBattleDamage(msgResult, msg.MsgSkill.Attacker)

                local target = self:GetUnitById(msgResult.TargetId)
                if target then
                    target:SetHpClientFromDamage(msgResult.Damage.NewHP)
                end
            end
        end
    end

    -- 处理技能表现
    local msgSkill = msg.MsgSkill
    local attacker = self:GetUnitById(msgSkill.Attacker)

	-- 处理死亡单位施放技能表现问题
	if (not attacker) then
		attacker = self:GetEnvironment():GetUnitManager():GetDeadUnit(msgSkill.Attacker)
		if (attacker) then
			local cell = attacker:GetData():GetConfig()
			if (not cell:CastSkillWhenDead()) then
				attacker = nil
			end
		end
	end

    local skillInfo = msgSkill.SkillInfo
    --SELogger.Log("SkillInfo: %s", skillInfo)
    if skillInfo.SkillCfgId > 0 then
        self:CastSkill(attacker, msg)
    end
end

---施放技能
---@param self SEWdsManager
---@param attacker SEUnit
---@param msg wrpc.PushBattleCastSkillMessageRequest
---@return void
function SEWdsManager:CastSkill(attacker, msg)
    local msgSkill = msg.MsgSkill
    local skillInfo = msg.MsgSkill.SkillInfo
    local skill = self:GetSkillConfig(skillInfo.SkillCfgId) --ConfigRefer.KheroSkillLogicalSe:Find(skillInfo.SkillCfgId)

    -- Skill performance
    if (not skill or not skill.Asset or skill:Asset() == 0) then
        return
    end

	self.env._uiBattlePanel:ShowCard(skillInfo.SkillCfgId, msgSkill.Attacker)

    local target = self:GetEnvironment():GetUnitManager():GetUnit(skillInfo.Target)
    if (not target) then
		-- 说明: 因为单位死亡和技能消息时序不确定, 因此技能可能会打到已经死了的目标
		target = self:GetEnvironment():GetUnitManager():GetDeadUnit(skillInfo.Target)
		if (not target) then
			target = self:GetEnvironment():GetUnitManager():GetDummyUnit(skillInfo.Target)
		end
    end

    if (skill:RangeType() == RangeType.Range or skill:RangeType() == RangeType.TargetRange) then
        -- 范围技能
        local srcPos = self:GetEnvironment():ServerPos2Client(CS.UnityEngine.Vector3(skillInfo.Pos.X, skillInfo.Pos.Y, skillInfo.Pos.Z))
        local dstPos = self:GetEnvironment():ServerPos2Client(CS.UnityEngine.Vector3(skillInfo.TargetPos.X, skillInfo.TargetPos.Y, skillInfo.TargetPos.Z))

        local atkActor
        if (not self:GetEnvironment():IsDummy(msgSkill.Attacker)) then
            if attacker then
                atkActor = attacker:GetActor()
            end

            ---- 根据技能范围形状决定目标点通过什么获取
            if (skill:Shape() ~= ShapeType.Round) then
                if atkActor == nil then
                    SELogger.Trace("CastSkill return: 方向技能, attacker不能为空, attacker: %s", msgSkill.Attacker)
                    return
                end

				dstPos = atkActor:GetPosition()
				local plusPos = dstPos
				if (skillInfo and skillInfo.TargetDir) then
					try_catch(function()
						plusPos = dstPos + CS.UnityEngine.Vector3(skillInfo.TargetDir.X, 0, skillInfo.TargetDir.Y)
					end, function()
						plusPos = dstPos
					end)
				end
				dstPos = plusPos
            end
        end

        local tgtActor
        if (target) then
            tgtActor = target:GetActor()
        end

        local originSkillTargets = {}
        
		-- 技能表现替换
		if (skillInfo.BehaviourModifyCfgIds and skillInfo.BehaviourModifyCfgIds:Count() > 0) then
            local modifyCfgsCount = skillInfo.BehaviourModifyCfgIds:Count()
            local modifyTable = {}
            for i = 1, modifyCfgsCount do
                local modifyTargetId = skillInfo.TargetIds[i]
                local modifyCfgId = skillInfo.BehaviourModifyCfgIds[i]
                if table.ContainsKey(modifyTable, modifyCfgId) then
                    table.insert(modifyTable[modifyCfgId], modifyTargetId)
                else
                    modifyTable[modifyCfgId] = {}
                    table.insert(modifyTable[modifyCfgId], modifyTargetId)
                end
            end

            local modifyTableCount = table.nums(modifyTable)
            if modifyTableCount > 0 then
                for modifyCfgId, modifyTargetIds in pairs(modifyTable) do
                    if modifyCfgId == 0 then
                        self:AddToTargetsTable(originSkillTargets, modifyTargetIds)
                    else
                        local bmcell = ConfigRefer.SkillBehaviourModify:Find(modifyCfgId)
                        if (bmcell and (not bmcell:IsKeyevent() or skillInfo.StageType == wds.enum.SkillStageType.SkillStageTypeDefault)) then
                            local modifySkillTargets = {}
                            self:AddToTargetsTable(modifySkillTargets, modifyTargetIds)
                            self:GetEnvironment():GetSkillManager():CastSkillPerform(bmcell:BehaviourId(), skillInfo.StageType, atkActor,
                                    srcPos, tgtActor, dstPos, modifySkillTargets, skill, msg)
                            -- SELogger.Log('CastSkillPerform modifyCfgId: %s targets %s', bmcell:BehaviourId(), rapidjson.encode(modifyTargetIds))

                            if (bmcell:ModifyType() == SkillBehaviourModifyType.Add) then
                                self:AddToTargetsTable(originSkillTargets, modifyTargetIds)
                            end
                        end
                    end
                    
                end
            end

            if table.nums(originSkillTargets) > 0 then
                self:GetEnvironment():GetSkillManager():CastSkillPerform(skill:Asset(), skillInfo.StageType, atkActor, srcPos, tgtActor, dstPos, originSkillTargets, skill, msg)
            end
		else
            self:GetEnvironment():GetSkillManager():CastSkillPerform(skill:Asset(), skillInfo.StageType, atkActor, srcPos, tgtActor, dstPos, nil, skill, msg)
        end
    else
        -- 单体技能
		-- 说明: 因为单位死亡和技能消息时序不确定, 因此技能可能会打到已经死了的目标
        --if (target == nil or target:IsDead()) then -- Dead unit doesn't affect by skills
		if (not target) then
			SELogger.Trace("没找到技能目标: %s", skillInfo.Target)
            return
        end

        local tgtActor = target:GetActor()
        local atkActor
        if attacker then
            atkActor = attacker:GetActor()
        end

        if (not atkActor or not atkActor:GetPosition() or not tgtActor or not tgtActor:GetPosition()) then
            SELogger.Trace('CastSkill return: atkActor or tgtActor is nil')
            return
        end

		-- 技能表现替换
		local sbmodify = false
		if (skillInfo.BehaviourModifyCfgId and skillInfo.BehaviourModifyCfgId > 0) then
			local bmcell = ConfigRefer.SkillBehaviourModify:Find(skillInfo.BehaviourModifyCfgId)
			if (bmcell and (not bmcell:IsKeyevent() or skillInfo.StageType == wds.enum.SkillStageType.SkillStageTypeDefault)) then
				sbmodify = true
				self:GetEnvironment():GetSkillManager():CastSkillPerform(bmcell:BehaviourId(), skillInfo.StageType, atkActor,
						nil, tgtActor, nil, nil, skill, msg)
				if (bmcell:ModifyType() == SkillBehaviourModifyType.Add) then
					sbmodify = false
				end
			end
		end
		if (not sbmodify) then
			self:GetEnvironment():GetSkillManager():CastSkillPerform(skill:Asset(), skillInfo.StageType, atkActor,
					nil, tgtActor, nil, nil, skill, msg)
		end
    end
end

function SEWdsManager:AddToTargetsTable(targets, targetIds)
    for _, q in pairs(targetIds) do
        local unit = self:GetEnvironment():GetUnitManager():GetUnit(q)
        if (not unit) then
            -- 死亡单位也受AOE伤害
            unit = self:GetEnvironment():GetUnitManager():GetDeadUnit(q)
        end
        if (unit and unit:GetActor()) then
            table.insert(targets, unit:GetActor())
        end
    end
end

---推送技能打断消息
---@param self SEWdsManager
---@param msg wrpc.PushBattleSkillStopMessageRequest
---@return void
function SEWdsManager:OnPushBattleSkillStop(msg)
    self:GetEnvironment():GetSkillManager():PushBattleSkillStop(msg)
end

---@param self SEWdsManager
---@param msgData wrpc.PushBattleBuffDamageRequest
function SEWdsManager:OnPushBattleBuffDamage(msgData)
    local msg = msgData.Msg

    -- 通过标志位判断是否有伤害数据
    local causeDmgBitMask = 1 << LogicUnitRuleKey.CauseDmg
    if (Utils.IsBitMaskMatch(msg.Mask, causeDmgBitMask) and msg.Damage) then
        self:GetEnvironment():GetDamageManager():OnPushBattleBuffDamage(msg)
        local target = self:GetUnitById(msg.TargetId)
        if target then
            target:SetHpClientFromDamage(msg.Damage.NewHP)
            target:SyncHpClientFromKeyEvent()
        end
    end
end

---@param self SEWdsManager
---@param id number
function SEWdsManager:TimelineEnd(id)
	local msg = require("NotifyCmdParameter").new()
	msg.args.CmdType = wrpc.CmdType.CmdTypeStopCG
	msg.args.Params:Add(id)
	msg:Send()
end

function SEWdsManager:ProcessQueuedMessages()
	self.mq:PopAll()
end

function SEWdsManager:GetSkillConfig(id)
	if (not self._skillCfgCache[id]) then
		self._skillCfgCache[id] = ConfigRefer.KheroSkillLogicalSe:Find(id)
	end
	return self._skillCfgCache[id]
end

---@param callback SEWdsManager_OnPlayerCardChangeCallback
function SEWdsManager:AddOnPlayerCardChange(callback)
    table.insert(self._onPlayerCardDataChangedCallback, callback)
end

---@param callback SEWdsManager_OnPlayerCardChangeCallback
function SEWdsManager:RemoveOnPlayerCardChange(callback)
    for i = #self._onPlayerCardDataChangedCallback, 1, -1 do
        if self._onPlayerCardDataChangedCallback[i] == callback then
            table.remove(self._onPlayerCardDataChangedCallback, i)
            break
        end
    end
end

---@param callback wds.ScenePlayer
function SEWdsManager:FireOnPlayerCardChange(entity)
    table.clear(self._onPlayerCardDataChangedCallback_tmp)
    table.addrange(self._onPlayerCardDataChangedCallback_tmp, self._onPlayerCardDataChangedCallback)
    for _, value in ipairs(self._onPlayerCardDataChangedCallback_tmp) do
        value(entity)
    end
    table.clear(self._onPlayerCardDataChangedCallback_tmp)
end

return SEWdsManager
