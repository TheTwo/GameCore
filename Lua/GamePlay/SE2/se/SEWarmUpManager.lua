---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by BE.Tenner.
--- DateTime: 2023/7/24 11:47
---

---@class SEWarmUpManager
local SEWarmUpManager = class("SEWarmUpManager")
local ConfigRefer = require("ConfigRefer")
local SELogger = require("SELogger")
local Utils = require("Utils")
local ModuleRefer = require("ModuleRefer")
local ArtResourceUtils = require("ArtResourceUtils")
local ArtResourceConsts = require("ArtResourceConsts")
local SkillClientManager = require("SkillClientManager")
local SEPreExportDefine = require("SEPreExportDefine")
local SEEnvironmentModeType = require("SEEnvironmentModeType")

local DAMAGE_TEXT_WARMUP_COUNT = 3
local DAMAGE_TEXT_WARMUP_COUNT_HOSTILE = 10

local WARMUP_ASSET_FT = "se_floating_text_1"
local WARMUP_ASSET_FT_HOSTILE = "se_floating_text_hostile_1"

local WARMUP_ASSET_UI_GRAY = SEPreExportDefine.WARMUP_ASSET_UI_GRAY
local WARMUP_ASSET_MAT_PET_FRESNEL_02 = SEPreExportDefine.WARMUP_ASSET_MAT_PET_FRESNEL_02
local WARMUP_ASSET_MAT_PET_FRESNEL_03 = SEPreExportDefine.WARMUP_ASSET_MAT_PET_FRESNEL_03
local WARMUP_ASSET_MAT_PET_FRESNEL_05_RED = SEPreExportDefine.WARMUP_ASSET_MAT_PET_FRESNEL_05_RED

---@type table<number, table<string>>
SEWarmUpManager._nameList = {}
---@type table<number, table<string, number>>
SEWarmUpManager._countMap = {}
---@type table<number, boolean>
SEWarmUpManager._notGameObjectMap = {}

---@param self SEWarmUpManager
---@param env SEEnvironment
---@param pooledCreateHelper CS.DragonReborn.AssetTool.PooledGameObjectCreateHelper
---@return void
function SEWarmUpManager:ctor(env, pooledCreateHelper)
	---@type SEEnvironment
	self._env = env
    ---@type CS.DragonReborn.AssetTool.PooledGameObjectCreateHelper
    self._pooledCreateHelper = pooledCreateHelper
end

function SEWarmUpManager:Dispose()

end

function SEWarmUpManager:WarmUp(presetIndex, environmentMode)
	SEWarmUpManager.PrepareWarmUpData(self._env._instanceId, presetIndex, environmentMode)

	for name, count in pairs(SEWarmUpManager._countMap[self._env._instanceId]) do
		SELogger.Trace("Warming up: %s x %s", name, count)
		if (not SEWarmUpManager._notGameObjectMap[self._env._instanceId][name]) then
			self._pooledCreateHelper:WarmUp(name, count)
		end
	end
end

---@param tid number @副本ID
---@param troopIndex number @编队索引
---@param environmentMode SEEnvironmentModeType @是否爬塔
---@param force boolean @是否强制刷新
---@return table<string>
function SEWarmUpManager.PrepareWarmUpData(tid, troopIndex, environmentMode, force)
	if (not tid or tid <= 0) then return end
	local mapConf = ConfigRefer.MapInstance:Find(tid)
	if (not mapConf) then return end

	if (SEWarmUpManager._nameList[tid] and not force) then return end

	SEWarmUpManager._nameList[tid] = {}
	SEWarmUpManager._countMap[tid] = {}
	SEWarmUpManager._notGameObjectMap[tid] = {}

	-- 飘字
	SEWarmUpManager.AddWarmUpData(tid, WARMUP_ASSET_FT, DAMAGE_TEXT_WARMUP_COUNT)
	SEWarmUpManager.AddWarmUpData(tid, WARMUP_ASSET_FT_HOSTILE, DAMAGE_TEXT_WARMUP_COUNT_HOSTILE)

	-- 材质
	SEWarmUpManager.AddWarmUpData(tid, WARMUP_ASSET_UI_GRAY, 1, true)
	SEWarmUpManager.AddWarmUpData(tid, WARMUP_ASSET_MAT_PET_FRESNEL_02, 1, true)
	SEWarmUpManager.AddWarmUpData(tid, WARMUP_ASSET_MAT_PET_FRESNEL_03, 1, true)
	SEWarmUpManager.AddWarmUpData(tid, WARMUP_ASSET_MAT_PET_FRESNEL_05_RED, 1, true)
	if (not Utils.IsNullOrEmpty(mapConf:CloudShader())) then
		SEWarmUpManager.AddWarmUpData(tid, mapConf:CloudShader(), 1, true)
	end

	-- shader
	local shaderCollectionName = ModuleRefer.EnterSceneModule:GetShaderWarmupByTid(tid)
	SEWarmUpManager.AddWarmUpData(tid, shaderCollectionName, 1, true)

	-- 迷雾
	if (not Utils.IsNullOrEmpty(mapConf:Fog())) then
		SEWarmUpManager.AddWarmUpData(tid, mapConf:Fog(), 1)
	end

    -- 手动导出
	if (mapConf.NpcPreCacheLength and mapConf:NpcPreCacheLength() > 0) then
		for i = 1, mapConf:NpcPreCacheLength() do
			SEWarmUpManager.PrepareSeNpcData(tid, mapConf:NpcPreCache(i))
		end
	end

	-- 英雄技能
	if (mapConf.HeroPreCacheLength and mapConf:HeroPreCacheLength() > 0) then
		for i = 1, mapConf:HeroPreCacheLength() do
			SEWarmUpManager.PrepareHeroSkillData(tid, mapConf:HeroPreCache(i))
		end
	end

    -- 自动导出
    for _, cell in ConfigRefer.SePreCache:ipairs() do
        local count = cell:Count()
        if (cell:SceneId() == tid and count > 0) then
			SEWarmUpManager.PrepareSeNpcData(tid, cell:Model(), count)
        end
    end

	-- 编队
	local heroList = {}
	if environmentMode == SEEnvironmentModeType.ClimbTower then
		heroList = ModuleRefer.SEClimbTowerModule:GetUsableHeroListInAllTeams()
	elseif environmentMode == SEEnvironmentModeType.Roguelike then
		heroList = ModuleRefer.RogueSEModule:GetHeroListInTroop(troopIndex)
	else
		heroList = ModuleRefer.TroopModule:GetHeroListInTroop(troopIndex)
	end
	for _, heroId in ipairs(heroList) do
		SEWarmUpManager.PrepareHeroModelData(tid, heroId)
		SEWarmUpManager.PrepareHeroSkillData(tid, heroId)
	end

	return SEWarmUpManager._nameList[tid]
end

---@param tid number
---@param seNpcId number
---@param count number
function SEWarmUpManager.PrepareSeNpcData(tid, seNpcId, count)
	local senpc = ConfigRefer.SeNpc:Find(seNpcId)
	if (senpc) then
		local model = ArtResourceUtils.GetItem(senpc:Model())
		if (model) then
			SEWarmUpManager.AddWarmUpData(tid, model, count)
			SEWarmUpManager.AddWarmUpData(tid, ArtResourceUtils.GetItem(ArtResourceConsts.se_unit_hud), count)
		end
		
		for j = 1, senpc:SeskillLength() do
			local skillId = senpc:Seskill(j)
			if (skillId) then
				SEWarmUpManager.PrepareSkillData(tid, skillId)
			end
		end
	end
end

--- 预载英雄模型
---@param tid number
---@param heroId number
function SEWarmUpManager.PrepareHeroModelData(tid, heroId)
	local heroConf = ConfigRefer.Heroes:Find(heroId)
	if (heroConf) then
		SEWarmUpManager.PrepareSeNpcData(tid, heroConf:SeNpcCfgId())
	end
end

--- 预载英雄技能
---@param tid number
---@param heroId number
function SEWarmUpManager.PrepareHeroSkillData(tid, heroId)
	local heroConf = ConfigRefer.Heroes:Find(heroId)
	if (heroConf) then
		for i = 1, heroConf:CardsLength() do
			local cardCfg = ConfigRefer.Card:Find(heroConf:Cards(i))
			if (cardCfg) then
				SEWarmUpManager.PrepareSkillData(tid, cardCfg:Skill())
			end
		end
	end
end

--- 根据技能ID预载特效
---@param tid number
---@param skillId number
function SEWarmUpManager.PrepareSkillData(tid, skillId)
	local skillConf = ConfigRefer.KheroSkillLogicalSe:Find(skillId)
	if (not skillConf) then return end
	local assetId = skillConf:Asset()
	if (not assetId or assetId == 0) then return end
	local skill = SkillClientManager.GetSkillsMap()[assetId]
	if (skill) then
		for _, stage in pairs(skill.Stages) do
			if (stage) then
				for _, attacker in pairs(stage.Attacker) do
					if (attacker and attacker.EffectPath) then
						SEWarmUpManager.PrepareByFullPath(tid, attacker.EffectPath)
					end
				end
				for _, target in pairs(stage.Target) do
					if (target and target.EffectPath) then
						SEWarmUpManager.PrepareByFullPath(tid, target.EffectPath)
					end
				end
			end
		end
	end
end

---@param tid number
---@param fullPath string
function SEWarmUpManager.PrepareByFullPath(tid, fullPath)
	if (Utils.IsNullOrEmpty(fullPath)) then return end
	local name = get_filename_without_extension(fullPath)
	SEWarmUpManager.AddWarmUpData(tid, name)
end

---@param tid number
---@param name string
---@param count number
---@param notGameObject boolean
function SEWarmUpManager.AddWarmUpData(tid, name, count, notGameObject)
	if (not count or count <= 0) then count = 1 end
	if (not SEWarmUpManager._countMap[tid][name]) then
		SEWarmUpManager._countMap[tid][name] = count
		table.insert(SEWarmUpManager._nameList[tid], name)
		if (notGameObject) then
			SEWarmUpManager._notGameObjectMap[tid][name] = true
		end
	else
		SEWarmUpManager._countMap[tid][name] = SEWarmUpManager._countMap[tid][name] + count
	end
end

return SEWarmUpManager
