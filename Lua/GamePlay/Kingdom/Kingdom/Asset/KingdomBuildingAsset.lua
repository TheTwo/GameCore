--local KingdomBaseAsset = require("KingdomBaseAsset")
--local ObjectType = require("ObjectType")
--local ConfigRefer = require("ConfigRefer")
--local Utils = require("Utils")
--local Delegate = require("Delegate")
--local ModuleRefer = require("ModuleRefer")
--local KingdomTouchInfoFactory = require("KingdomTouchInfoFactory")
--local KingdomMapUtils = require("KingdomMapUtils")
--local ArtResourceUtils = require("ArtResourceUtils")
--local ArtResourceUIConsts = require("ArtResourceUIConsts")
--local MapHUDFadeDefine = require("MapHUDFadeDefine")
--
--local One = CS.UnityEngine.Vector3.one
--
-----@class KingdomBuildingAsset : KingdomBaseAsset
-----@field data wds.MapEntityBrief
-----@field position CS.UnityEngine.Vector3
-----@field behaviour PvPTileAssetHUDIconBehavior
-----@field icon string
-----@field name string
-----@field level string
-----@field touchData TouchMenuUIDatum
--local KingdomBuildingAsset = class("KingdomBuildingAsset", KingdomBaseAsset)
--
-----@return string
--function KingdomBuildingAsset:GetPrefabName(lod)
--    if self.objectType == ObjectType.SlgVillage or self.objectType == ObjectType.SlgCastle then
--        if KingdomMapUtils.InMapKingdomLod(lod) then
--            return "ui3d_building_lod"
--        end
--        return string.Empty
--    elseif self.objectType == ObjectType.SlgCreepTumor then
--        if KingdomMapUtils.InMapHighLod(lod) then
--            return "ui3d_building_lod"
--        end
--        return string.Empty
--    end
--    return string.Empty
--
--end
--
--function KingdomBuildingAsset:OnConstructionSetup()
--    local asset = self:GetAsset()
--    if Utils.IsNull(asset) then
--        return
--    end
--
--    self.behaviour = asset:GetLuaBehaviour("KingdomBuildingAssetBehaviour").Instance
--    self.behaviour.facingCamera = KingdomMapUtils.GetBasicCamera().mainCamera
--    g_Game.SpriteManager:LoadSprite(self.icon, self.behaviour.p_icon_building)
--    self.behaviour.p_text_name.text = self.name
--    self.behaviour.p_text_lv.text = self.level
--    self.behaviour:SetTrigger(Delegate.GetOrCreate(self, self.OnIconClick))
--    self:OnConstructionUpdate(KingdomMapUtils.GetLOD())
--    ModuleRefer.MapHUDModule:InitHUDFade(self.behaviour.iconMaterialSetter, true)
--
--end
--
--function KingdomBuildingAsset:OnConstructionShutdown()
--    self.behaviour = nil
--end
--
--function KingdomBuildingAsset:OnConstructionUpdate(lod)
--    if not self.behaviour then return end
--
--    if KingdomMapUtils.InMapVeryHighLod(lod) then
--        self.behaviour.p_group_name:SetVisible(false)
--    else
--        self.behaviour.p_group_name:SetVisible(true)
--    end
--end
--
--function KingdomBuildingAsset:FadeOut()
--    if self.behaviour then
--        ModuleRefer.MapHUDModule:UpdateHUDFade(self.behaviour.iconMaterialSetter, MapHUDFadeDefine.FadeOut)
--    end
--end
--
--function KingdomBuildingAsset:OnIconClick()
--    local touchData = KingdomTouchInfoFactory.CreateEntityHighLod(self.x, self.z, self.name, self.level)
--    ModuleRefer.KingdomTouchInfoModule:Hide()
--    ModuleRefer.KingdomTouchInfoModule:Show(touchData)
--end
--
--function KingdomBuildingAsset:OnFeedData()
--    if self.objectType == ObjectType.SlgVillage then
--        self:FeedVillageData(self.data)
--    elseif self.objectType == ObjectType.SlgCreepTumor then
--        self:FeedCreepTumorData(self.data)
--    elseif self.objectType == ObjectType.SlgCastle then
--        self:FeedCastleData(self.data)
--    end
--end
--
-----@param data wds.MapEntityBrief
--function KingdomBuildingAsset:FeedVillageData(data)
--    local config = ConfigRefer.Territory:Find(data.CfgId)
--    if not config then
--        g_Logger.Error("can't find village config! id=%s", data.CfgId)
--        return
--    end
--    local template = ConfigRefer.FixedMapBuilding:Find(config:VillageId())
--    if not template then
--        g_Logger.Error("can't find village template config! id=%s", config:VillageId())
--        return
--    end
--
--
--    if ModuleRefer.PlayerModule:IsFriendlyById(data.AllianceId, data.PlayerId) then
--        self.icon = ArtResourceUtils.GetUIItem(ArtResourceUIConsts.sp_icon_slg_village_3)
--    elseif ModuleRefer.PlayerModule:IsNeutral(data.AllianceId) then
--        self.icon = ArtResourceUtils.GetUIItem(ArtResourceUIConsts.sp_icon_slg_village_4)
--    else
--        self.icon = ArtResourceUtils.GetUIItem(ArtResourceUIConsts.sp_icon_slg_village_2)
--    end
--    self.name = template and template:Name() or string.Empty
--    self.level = template and tostring(template:Level()) or string.Empty
--end
--
-----@param data wds.MapEntityBrief
--function KingdomBuildingAsset:FeedCreepTumorData(data)
--    local config = ConfigRefer.SlgCreepTumorInstance:Find(data.CfgId)
--    if not config then
--        g_Logger.Error("can't find tumor config! id=%s", data.CfgId)
--        return
--    end
--    local template = ConfigRefer.SlgCreepTumor:Find(config:Template())
--    if not template then
--        g_Logger.Error("can't find tumor template config! id=%s", config:Template())
--        return
--    end
--
--    self.icon = ArtResourceUtils.GetUIItem(ArtResourceUIConsts.sp_icon_lod_leida_juntan)
--    self.name = template and template:CenterName() or string.Empty
--    self.level = template and tostring(template:Level()) or string.Empty
--end
--
-----@param data wds.AllianceMember
--function KingdomBuildingAsset:FeedCastleData(data)
--    if ModuleRefer.PlayerModule:IsMineById(data.PlayerID) then
--        self.icon = ArtResourceUtils.GetUIItem(ArtResourceUIConsts.sp_icon_slg_home_1)
--    else
--        self.icon = ArtResourceUtils.GetUIItem(ArtResourceUIConsts.sp_icon_slg_home_3)
--    end
--    self.name = data.Name
--    self.level = tostring(data.Rank)
--end
--
--return KingdomBuildingAsset