---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/6/8 15:26
---
local BaseUIComponent = require('BaseUIComponent')
local Delegate = require('Delegate')
local EventConst = require('EventConst')
local I18N = require('I18N')
local ModuleRefer = require('ModuleRefer')
local NotificationType = require("NotificationType")
local AllianceModuleDefine = require("AllianceModuleDefine")
local ConfigRefer = require('ConfigRefer')
local UIMediatorNames = require('UIMediatorNames')
local DBEntityPath = require("DBEntityPath")

---@class HUDBRButton : BaseUIComponent
---@field _button CS.UnityEngine.UI.Button
---@field _icon CS.UnityEngine.UI.Image
---@field _name CS.UnityEngine.UI.Text
---@field _clickEvent string
local HUDBRButton = class('HUDBRButton',BaseUIComponent)

---@protected
function HUDBRButton:ctor(...)
    BaseUIComponent.ctor(self, ...)
    self._isAllianceEntry = false
end

function HUDBRButton:OnCreate(param)
    self.selfGo = self:GameObject('')
    self._button = self:Button('p_button',Delegate.GetOrCreate(self,self.OnButtonClick))
    self._icon = self:Image('p_icon')
    self._name = self:Text('p_name')
    ---@type NotificationNode
    self.notifyNode = self:LuaObject('child_reddot_default')
    self._p_league_help = self:GameObject("p_league_help")
    self._p_league_construction = self:GameObject("p_league_construction")
    self._p_btn_help = self:Button("p_btn_help", Delegate.GetOrCreate(self, self.OnHelpButtonClick))
    self._p_text_num = self:Text("p_text_num")
end

function HUDBRButton:OnShow(param)
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerAlliance.NumHelps.MsgPath, Delegate.GetOrCreate(self, self.OnAllianceHelpNumChanged))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Alliance.AllianceWrapper.BuilderRuinRebuild.Buildings.MsgPath, Delegate.GetOrCreate(self, self.OnAllianceRebuildChanged))
    g_Game.EventManager:AddListener(EventConst.ON_UIMEDIATOR_OPENED, Delegate.GetOrCreate(self, self.OnUIMediatorOpen))
    g_Game.EventManager:AddListener(EventConst.ON_UIMEDIATOR_CLOSEED, Delegate.GetOrCreate(self, self.OnUIMediatorClose))
end

function HUDBRButton:OnHide(param)
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerAlliance.NumHelps.MsgPath, Delegate.GetOrCreate(self, self.OnAllianceHelpNumChanged))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Alliance.AllianceWrapper.BuilderRuinRebuild.Buildings.MsgPath, Delegate.GetOrCreate(self, self.OnAllianceRebuildChanged))
    g_Game.EventManager:RemoveListener(EventConst.ON_UIMEDIATOR_OPENED, Delegate.GetOrCreate(self, self.OnUIMediatorOpen))
    g_Game.EventManager:RemoveListener(EventConst.ON_UIMEDIATOR_CLOSEED, Delegate.GetOrCreate(self, self.OnUIMediatorClose))
end

function HUDBRButton:OnClose(param)
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerAlliance.NumHelps.MsgPath, Delegate.GetOrCreate(self, self.OnAllianceHelpNumChanged))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Alliance.AllianceWrapper.BuilderRuinRebuild.Buildings.MsgPath, Delegate.GetOrCreate(self, self.OnAllianceRebuildChanged))
    g_Game.EventManager:RemoveListener(EventConst.ON_UIMEDIATOR_OPENED, Delegate.GetOrCreate(self, self.OnUIMediatorOpen))
    g_Game.EventManager:RemoveListener(EventConst.ON_UIMEDIATOR_CLOSEED, Delegate.GetOrCreate(self, self.OnUIMediatorClose))
end

---OnFeedData
---@param param HudRightdownConfigCell
function HUDBRButton:OnFeedData(param)
    self._isAllianceEntry = false
    if not param then return end
    self.param = param
    local iconName = param:Icon()
    if string.IsNullOrEmpty(iconName) then
        g_Game.SpriteManager:LoadSprite('sp_hud_icon_hero',self._icon)
    else
        g_Game.SpriteManager:LoadSprite(iconName,self._icon)
    end
    self._name.text = I18N.Get(param:Name())
    self._clickEvent = param:ClickThrough()
    self._packup = param:PackUp()
    if not self.notifyNode then
        return
    end
    if self._clickEvent == "UIHeroMainUIMediator" then
        ModuleRefer.HeroModule:RefreshHeroRedPoint()
        self.notifyNode.go:SetVisible(true)
        local hudHeroNode = ModuleRefer.NotificationModule:GetDynamicNode("HudHeroNode", NotificationType.HERO_ENTRANCE)
        ModuleRefer.NotificationModule:AttachToGameObject(hudHeroNode, self.notifyNode.go, self.notifyNode.redDot)
    elseif self._clickEvent == "ALLIANCE_HUD_ENTRY_CLICK" then
        self.notifyNode.go:SetVisible(true)
        local hudAllianceNode = ModuleRefer.NotificationModule:GetDynamicNode(AllianceModuleDefine.NotifyNodeType.Main, NotificationType.ALLIANCE_ENTRANCE)
        ModuleRefer.NotificationModule:AttachToGameObject(hudAllianceNode, self.notifyNode.go, self.notifyNode.redDot)
        self._isAllianceEntry = true
        self:OnAllianceHelpNumChanged(ModuleRefer.PlayerModule:GetPlayer())
        self:OnAllianceRebuildChanged()
    elseif self._clickEvent == "UIFactionMainMediator" then
        ModuleRefer.FactionModule:RefreshRedDot()
        self.notifyNode.go:SetVisible(true)
        local factionNode = ModuleRefer.NotificationModule:GetDynamicNode("FactionBtnNode", NotificationType.FACTON_BTN)
        ModuleRefer.NotificationModule:AttachToGameObject(factionNode, self.notifyNode.go, self.notifyNode.redDot)
	elseif (self._clickEvent == UIMediatorNames.UITroopMediator) then
		ModuleRefer.TroopModule:RefreshRedDotStatus()
		self.notifyNode.go:SetVisible(true)
		ModuleRefer.NotificationModule:AttachToGameObject(ModuleRefer.TroopModule:GetRedDotCityHud(), self.notifyNode.go, self.notifyNode.redDot)
    elseif self._clickEvent == "UIShopMeidator" then
        ModuleRefer.ShopModule:RefreshRedPoint()
        self.notifyNode.go:SetVisible(true)
        local redNode = ModuleRefer.NotificationModule:GetDynamicNode("HudShopNode", NotificationType.SHOP_FREE_DOT)
		ModuleRefer.NotificationModule:AttachToGameObject(redNode, self.notifyNode.go, self.notifyNode.redDot)
    -- elseif self._clickEvent == "EarthRevivalMediator" then
    --     ModuleRefer.EarthRevivalModule:RefreshRedDot()
    --     self.notifyNode.go:SetVisible(true)
    --     local redNode = ModuleRefer.NotificationModule:GetDynamicNode("EarthRevivalBtnNode", NotificationType.EARTHREVIVAL_BTN)
	-- 	ModuleRefer.NotificationModule:AttachToGameObject(redNode, self.notifyNode.go, self.notifyNode.redDot)
	elseif self._clickEvent == UIMediatorNames.UIPetMediator then
        self.notifyNode.go:SetVisible(true)
        ModuleRefer.PetCollectionModule:InitStoryRedPoint()
        local redNode = ModuleRefer.PetModule:GetRedDotMain()
        ModuleRefer.NotificationModule:AttachToGameObject(redNode, self.notifyNode.go, self.notifyNode.redDot)
    elseif self._clickEvent == "HuntingMainMediator" or self._clickEvent =="HuntingMainMediator_hud" then
        ModuleRefer.HuntingModule:UpdateRedDot()
        self.notifyNode.go:SetVisible(true)
        local redNode = ModuleRefer.NotificationModule:GetDynamicNode("HUNTING_HUD", NotificationType.HUNTING_HUD)
        ModuleRefer.NotificationModule:AttachToGameObject(redNode, self.notifyNode.go, self.notifyNode.redDot)
    elseif self._clickEvent == "BattleEntryMediator" then
        self.notifyNode.go:SetVisible(true)
        local node = ModuleRefer.BattleEntryModule:GetHUDNotifyNode()
        ModuleRefer.NotificationModule:AttachToGameObject(node, self.notifyNode.go, self.notifyNode.redDot)
    elseif self._clickEvent == "BagMediator" then
        self.notifyNode.go:SetVisible(true)
        local redNode = ModuleRefer.NotificationModule:GetDynamicNode("WORLD_EVENT_USEITEM", NotificationType.WORLD_EVENT_USEITEM)
        ModuleRefer.NotificationModule:AttachToGameObject(redNode, self.notifyNode.go, self.notifyNode.redDot)
    else
        self.notifyNode.go:SetVisible(false)
    end
end

function HUDBRButton:RefreshEnable(isPackHide)
    if not self.param then return end
    local sysIndex = self.param:SystemSwitch()
    if sysIndex and sysIndex > 0 then
        local isOpen = ModuleRefer.NewFunctionUnlockModule:CheckNewFunctionIsUnlocked(sysIndex)
        self:SetVisible(isOpen and not isPackHide)
    else
        self:SetVisible(not isPackHide)
    end
end

function HUDBRButton:CheckIsTarget(eventParam)
    if self._clickEvent == eventParam then
        return true
    end
end

function HUDBRButton:OnButtonClick()
    if self._clickEvent then
        g_Game.EventManager:TriggerEvent(EventConst.HUD_BOTTOM_RIGHT_EVENT,self._clickEvent)
    end
end

function HUDBRButton:OnButtonPackup(packup)
    local isPackHide = self:IsPackHide() and packup
    self:RefreshEnable(isPackHide)
end

function HUDBRButton:IsPackHide()
    return self._packup and self._packup > 0 and self:GetShowNum() > 4
end

function HUDBRButton:GetShowNum()
    local showNum = 0
    for _, v in ConfigRefer.HudRightdown:ipairs() do
        local sysIndex = v:SystemSwitch()
        if sysIndex and sysIndex > 0 then
            local isOpen = ModuleRefer.NewFunctionUnlockModule:CheckNewFunctionIsUnlocked(sysIndex)
            if isOpen then
                showNum = showNum + 1
            end
        end
    end
    return showNum
end

---@param entity wds.Player
function HUDBRButton:OnAllianceHelpNumChanged(entity)
    if not self._isAllianceEntry or ModuleRefer.PlayerModule:GetPlayerId() ~= entity.ID then
        return
    end
    if g_Game.UIManager:FindUIMediatorByName(UIMediatorNames.AllianceVillageWarInfoTipMediator) then
        return
    end
    local count = ModuleRefer.AllianceModule:IsInAlliance() and entity.PlayerAlliance.NumHelps or 0
    self._p_league_help:SetVisible(count > 0)
    if count > 0 then
        self._p_text_num.text = tostring(count)
    end
end

function HUDBRButton:OnAllianceRebuildChanged(entity)
    if self._isAllianceEntry then
        local hasRebuild = ModuleRefer.VillageModule:HasRebuildVillage()
        self._p_league_construction:SetVisible(hasRebuild)
    end
end

---@param uiName string
function HUDBRButton:OnUIMediatorOpen(uiName)
    if not self._isAllianceEntry or uiName ~= UIMediatorNames.AllianceVillageWarInfoTipMediator then
        return
    end
    self._p_league_help:SetVisible(false)
end

function HUDBRButton:OnUIMediatorClose(uiName)
    if not self._isAllianceEntry or uiName ~= UIMediatorNames.AllianceVillageWarInfoTipMediator then
        return
    end
    self:OnAllianceHelpNumChanged(ModuleRefer.PlayerModule:GetPlayer())
end

function HUDBRButton:OnHelpButtonClick()
    self._p_league_help:SetVisible(false)
	g_Game.SoundManager:Play("sfx_se_world_helpbubble")
    ModuleRefer.AllianceModule:SendAllianceHelps(self._p_btn_help.transform)
    ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("alliance_help_helpall_toast"))
end

return HUDBRButton
