---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/5/12 14:58
---
local BaseModule = require ('BaseModule')
local Utils = require('Utils')
local Delegate = require('Delegate')
local DBEntityType = require('DBEntityType')
local DBEntityPath = require('DBEntityPath')
local ModuleRefer = require('ModuleRefer')
local MoveMobileFortress = require('MoveMobileFortressParameter')
local KingdomMapUtils = require('KingdomMapUtils')
local SlgPoolManager = require("SlgPoolManager")
local SLGConst_Manual = require("SLGConst_Manual")
local UIMediatorNames = require('UIMediatorNames')
local ConfigRefer = require('ConfigRefer')
local SlgLocalConfig = require('SlgLocalConfig')
local BackToCityParameter = require('BackToCityParameter')
local BackToCityImmediatelyParameter = require('BackToCityImmediatelyParameter')
local EventConst = require("EventConst")
local TroopLineManager = CS.TroopLineManager
--Network parameter
local CreateTroopParameter = require('CreateTroopParameter')
local MoveTroopToParameter = require('MoveTroopToParameter')
local SetAutoBackParameter = require('SetAutoBackParameter')
local SetAutoBackAfterClearExpeditionParameter = require('SetAutoBackAfterClearExpeditionParameter')
local TroopSetAutoBattleParameter = require('TroopSetAutoBattleParameter')
--TeamTrusteeship Parameters
local CreateTeamTrusteeshipParameter = require('CreateTeamTrusteeshipParameter')
local JoinTeamTrusteeshipParameter = require('JoinTeamTrusteeshipParameter')
local LeaveTeamTrusteeshipParameter = require('LeaveTeamTrusteeshipParameter')
local CancelTeamTrusteeshipParameter = require('CancelTeamTrusteeshipParameter')
local CreateAllianceAssembleTroopParameter = require("CreateAllianceAssembleTroopParameter")
local SlgUtils = require('SlgUtils')
local MonsterClassType = require('MonsterClassType')
local UIHelper = require('UIHelper')
local CommonItemDetailsDefine = require('CommonItemDetailsDefine')
local CommonConfirmPopupMediatorDefine = require('CommonConfirmPopupMediatorDefine')
local I18N = require('I18N')
local ManualResourceConst = require('ManualResourceConst')
local QueuedTask = require('QueuedTask')

---@class TroopCreateData
---@param index number
---@param coordX number
---@param coordY number
---@param target number
---@param purpose number @wrpc.MovePurpose
---
---@class Float3
---@field x number
---@field y number
---@field z number

---@class SlgModule
---@field troopCreateList table<number,TroopCreateData>
---@field focusBoss TroopCtrl
local SlgModule = class('SlgModule',BaseModule)

local Vector3 = CS.UnityEngine.Vector3
local Vector2 = CS.UnityEngine.Vector2

local ATTR_DISP_ID_POWER = 100

local REDDOT_ENTRANCE_TYPE = 77801
local REDDOT_ENTRANCE_NAME = "__troop_entrance"

function SlgModule:ctor()
    self._isInCity = false  
    self.DebugMode = true
    self._managersCount = 0
	---@type CS.Notification.NotificationDynamicNode
	self._redDotEntrance = nil
    ---@type SlgDataCacheModule
    self.dataCache = ModuleRefer.SlgDataCacheModule

    self.unitsPerTileX = 25
    self.unitsPerTileZ = 25
end

function SlgModule:OnRegister()
end

function SlgModule:OnRemove()
    self:Clear()
end


function SlgModule:AddManager(manager)
    table.insert(self._managers, manager)
    return manager
end

function SlgModule:UpdateSlgScale(isInCity)
    if not self.curScene then return end
    self._isInCity = (isInCity == nil) and false or isInCity
    local mapDataScale = self.curScene.staticMapData.UnitsPerTileX
    self.unitsPerTerrainX = self.curScene.staticMapData.TilesPerTerrainX * self.curScene.staticMapData.UnitsPerTileX
    self.unitsPerTerrainZ = self.curScene.staticMapData.TilesPerTerrainZ * self.curScene.staticMapData.UnitsPerTileZ
    if isInCity and  ModuleRefer.CityModule.myCity then
        local cityScale = ModuleRefer.CityModule.myCity.scale
        self.unitsPerTileX = cityScale
        self.unitsPerTileZ = cityScale

        self.BaseConfig = {}
        self.BaseConfig.TroopSizeScale = ConfigRefer.ConstMain:TroopBodySizeBase()
        -- self.BaseConfig.TroopRadius = math.sqrt(self.unitsPerTileX * self.unitsPerTileX + self.unitsPerTileZ * self.unitsPerTileZ)
        self.BaseConfig.TroopRadius = math.max(self.unitsPerTileX ,self.unitsPerTileZ)
    else
        self.unitsPerTileX = self.curScene.staticMapData.UnitsPerTileX
        self.unitsPerTileZ = self.curScene.staticMapData.UnitsPerTileZ
        self.BaseConfig = {}
        self.BaseConfig.TroopSizeScale = ConfigRefer.ConstMain:TroopBodySizeBase() --* SlgLocalConfig.TroopUniScale
        -- self.BaseConfig.TroopRadius = math.sqrt(self.unitsPerTileX * self.unitsPerTileX + self.unitsPerTileZ * self.unitsPerTileZ)
        self.BaseConfig.TroopRadius = math.max(self.unitsPerTileX ,self.unitsPerTileZ)
    end
    self.slgScale = self.unitsPerTileX / mapDataScale
    self.slgScaleSqure = self.slgScale * self.slgScale
    if self.touchManager then
        self.touchManager:UpdateInteractionScale()
    end
    local rvoSize = self.BaseConfig.TroopSizeScale * SlgLocalConfig.TroopUniScale * self.unitsPerTileX * self.slgScale * 6 --一格中放3x3支部队
    if isInCity then
        g_Game.TroopViewManager:SetupRVO(rvoSize,60,0.01)
    else
        g_Game.TroopViewManager:SetupRVO(rvoSize,30,0.05)
    end
    g_Game.TroopViewManager:SetWorldScale(self.slgScale)
    g_Game.TroopViewManager:SetSkillVfxScale(self.slgScale * 50)

end

function SlgModule:Init()
    --Init Data
    self.curScene = g_Game.SceneManager.current
    self.staticMapData = self.curScene.staticMapData
    self:MySelf()
    self.running = false
    self:UpdateSlgScale()
    self:InitLocalConfig()
    self:SetupSkillMaxVfxAndPriority(0)
    --Init Logic    
    g_Game.TroopViewManager:OnSceneStart(self.curScene.mapSystem)
    CS.U2DFacingCameraECS.FacingCamera = self:GetCamera()
    self:AddRoot()
    self:InitTroopLineManager()

    ---@type AbstractManager[]
    self._managers = {}

    ---@type SlgPoolManager

    self.pool = SlgPoolManager.GetInstance()
    if self.pool == nil then
        self.pool = SlgPoolManager.CreateInstance()
    end
    ---@type SlgBattleManager
    self.battleManager = self:AddManager(require("SlgBattleManager").new(self))
    ---@type SLGTouchManager
    self.touchManager       = self:AddManager(require("SLGTouchManager").new(self))
    ---@type SLGSelectManager
    self.selectManager   = self:AddManager(require("SLGSelectManager").new(self))
    ---@type TroopManager
    self.troopManager        = self:AddManager(require("TroopManager").new(self))
    ---@type SlgBattleSignalManager
    self.signalManager = self:AddManager(require("SlgBattleSignalManager").new(self))

    self._managersCount = table.nums(self._managers)
    for i = 1, self._managersCount do
        self._managers[i]:DoAwake()
    end

    self.DebugMode = g_Game.PlayerPrefsEx:GetInt('SLGDebugMode',0) > 0
    if self.DebugMode then
        self:SetupDebugMode(true)
    end

    self._curCamSize = self.curScene:GetCamSize()
    self._lodCur = -1
    self:OnLodChanged(self._lodCur,self.curScene:GetLod())
    for i = 1, self._managersCount do
        self._managers[i]:DoStart()
    end
    self.curScene:AddLodChangeListener(Delegate.GetOrCreate(self,self.OnLodChanged))
    self.curScene:AddSizeChangeListener(Delegate.GetOrCreate(self,self.OnCamSizeChanged))
    self.troopCreateList = nil
    
    g_Game:AddFrameTicker(Delegate.GetOrCreate(self,self.Tick))    
    self.battleMinHpPct = ConfigRefer.ConstMain:PresetBattleHeroHpPercentThreshold() / 100
    g_Game.EventManager:AddListener(EventConst.CLEAR_SLG_SELECT,Delegate.GetOrCreate(self,self.OnMSG_ClearSelect))
    g_Game.EventManager:AddListener(EventConst.RELOGIN_START,Delegate.GetOrCreate(self,self.OnMSG_ReLoginStart))  
    g_Game.EventManager:AddListener(EventConst.RELOGIN_SUCCESS,Delegate.GetOrCreate(self,self.OnMSG_ReLoginSuccess))
    -- MinRecommendPowerParam = ConfigRefer.ConstMain:BattlePowerParamMin()
end

function SlgModule:MySelf()
    if not self._myself then
        self._myself = ModuleRefer.PlayerModule:GetPlayer()
    end
    return self._myself
end

function SlgModule:OnMapStaticDataLoaded()
    g_Game.TroopViewManager:OnStaticMapDataLoaded()
end

function SlgModule:Clear()
    --g_Logger.LogChannel('SlgModule TEST ' .. g_Game.Time.frameCount)
    if not self._managersCount or self._managersCount < 1 then
        return
    end
    self:CloseTroopMenu()
    if self.curScene then
        self.curScene:RemoveLodChangeListener(Delegate.GetOrCreate(self,self.OnLodChanged))
        self.curScene:RemoveSizeChangeListener(Delegate.GetOrCreate(self,self.OnCamSizeChanged))
    end
    g_Game:RemoveFrameTicker(Delegate.GetOrCreate(self,self.Tick))
    -- self.btManager:Destroy()
    for i = 1, self._managersCount do
        self._managers[i]:DoOnDestroy()
    end
    self._managersCount = 0
    table.clear(self._managers)

    self:DisposeTroopLineManager()
    g_Game.TroopViewManager:OnSceneEnd()
    CS.U2DFacingCameraECS.FacingCamera = nil
    self:RemoveRoot()
    if self.pool then
        SlgPoolManager.DestroyInstance()
        self.pool = nil
    end
    self.curScene = nil
    g_Game.EventManager:RemoveListener(EventConst.CLEAR_SLG_SELECT,Delegate.GetOrCreate(self,self.OnMSG_ClearSelect))
    g_Game.EventManager:RemoveListener(EventConst.RELOGIN_START,Delegate.GetOrCreate(self,self.OnMSG_ReLoginStart))
    g_Game.EventManager:RemoveListener(EventConst.RELOGIN_SUCCESS,Delegate.GetOrCreate(self,self.OnMSG_ReLoginSuccess))

    if self.myCityTask then
        self.myCityTask:Release()
    end

    if self.waitTroopTask then
        self.waitTroopTask:Release()
    end
end

function SlgModule:OnSpaceChanged()
    if not self.curScene then return end
    self.unitsPerTileX = self.curScene.staticMapData.UnitsPerTileX
    self.unitsPerTileZ = self.curScene.staticMapData.UnitsPerTileZ
end

function SlgModule:EnableTouch(enable)
    if self.touchManager then
        self.touchManager.enable = enable
    end
end

function SlgModule:Tick()
    if not self.running then
        return
    end

    self.troopManager:Tick()
    self.troopLineManager:DoUpdateAllLines()

    if self.troopCreateList then
        local firstKey = table.KeyOfIndex(self.troopCreateList,1)
        local value = self.troopCreateList[firstKey]
        self.troopCreateList[firstKey] = nil
        self:CreateTroop(value.index,value.coordX,value.coordY,value.target,value.purpose)
        if table.isNilOrZeroNums(self.troopCreateList) then
            self.troopCreateList = nil
        end
    end
    self.battleManager:Tick()
end

function SlgModule:Pause()
    self.running = false
    self:CloseTroopMenu()
    self.troopManager:DestroyAllEntity()
end

function SlgModule:StartRunning()
    self.running = true
    self.troopManager:UpdateMyTroopCtrl()
end

function SlgModule:IsRunning()
    return self.running or false
end

---@param preset wds.TroopPreset
---@return boolean
function SlgModule:IsPresetCanCreated(preset,ignoreTeamTrusteeship)
    local enoughHp = not SlgUtils.PresetAllHeroInjured(preset,self.battleMinHpPct)
    local state = preset.Status
    local isIdle = state == wds.TroopPresetStatus.TroopPresetIdle 
        or state == wds.TroopPresetStatus.TroopPresetInBigWorld 
        or state == wds.TroopPresetStatus.TroopPresetInHome
        or state == wds.TroopPresetStatus.TroopPresetInSlgInstance 
    if ignoreTeamTrusteeship then
        if state == wds.TroopPresetStatus.TroopPresetTeamInTrusteeship then
            isIdle = true
        end
    end
    return isIdle and enoughHp
end

function SlgModule:IsPresetInGve(preset)
    local state = preset.Status
    return state == wds.TroopPresetStatus.TroopPresetInSignUp
end

---@param index number @Preset index
---@param coordX number
---@param coordY number
---@param targetEntityId number
---@param purpose number @wrpc.MovePurpose
---@return boolean
function SlgModule:CreateTroop(index, coordX, coordY, targetEntityId, purpose)
    --Check preset data
    local troopPresets = ModuleRefer.PlayerModule:GetCastle().TroopPresets
    local preset = troopPresets.Presets[index]
    if not self:IsPresetCanCreated(preset) then
        return false
    end

    purpose = (purpose~=nil) and purpose or wrpc.MovePurpose.MovePurpose_Move
    local req = CreateTroopParameter.new()
    req.args.QueueIdx = index-1
    req.args.ArmyCampID = 0
    req.args.Dest.X = coordX
    req.args.Dest.Y = coordY
    if targetEntityId then
        req.args.TargetID = targetEntityId
    end
    req.args.Flag = wds.enum.CreateTroopFlag.CreateTroopFlag_None
    req.args.Purpose = purpose
    req:SendOnceCallback(nil,nil,nil,function()
        -- ModuleRefer.ToastModule:AddSimpleToast("#部队已出征")
    end, function(msgId,errorCode,errorMsg)
        local error = g_Game:GetErrMsgWithCode(errorCode)
        ModuleRefer.ToastModule:AddSimpleToast(error .. " (" .. errorCode .. ")")
        return true
    end)
    return true
end

---@private
---@param troopData wds.MapMob | wds.Troop | wds.MobileFortress
function SlgModule:SendMoveTroopEvent(troopId,IsFortress,targetId, coordX, coordY, purpose, petCompId)
    if IsFortress then
        local parameter = MoveMobileFortress.new()
        parameter.args.FortID = troopId
        parameter.args.TargetEntityUID = targetId
        parameter.args.Dest.X = coordX
        parameter.args.Dest.Y = coordY
        parameter:Send()
    else
        local parameter = MoveTroopToParameter.new()
        parameter.args.TroopUIDs:Add(troopId)
        parameter.args.TargetEntityUID = targetId
        parameter.args.Dest.X = coordX
        parameter.args.Dest.Y = coordY
        parameter.args.Purpose = (purpose~=nil) and purpose or wrpc.MovePurpose.MovePurpose_Move
		if (petCompId) then
			parameter.args.PetCompId = petCompId
		end
        
        parameter:SendOnceCallback(nil, nil, nil, function(_, isSuccess, _)
            if not isSuccess then
                local errorType = 0
                local targetEntities = g_Game.DatabaseManager:GetEntitiesById(targetId)
                if #targetEntities > 0 then
                    local targetEntity = targetEntities[1]
                    if targetEntity.TypeHash == DBEntityType.CastleBrief then
                        if ModuleRefer.PlayerModule:IsMine(targetEntity.Owner) then
                            errorType = 1
                        end
                    end
                end

                if errorType == 1 then
                    self:BackToCityUseItemPanel(troopId)
                end
            else
                -- ModuleRefer.ToastModule:AddSimpleToast("#部队已出征")
            end
        end
        ,function(msgId,errorCode,errorMsg)
            local error = g_Game:GetErrMsgWithCode(errorCode)
            ModuleRefer.ToastModule:AddSimpleToast(error .. " (" .. errorCode .. ")")
            return true
        end
        )
    end

end

---@param troop TroopCtrl | VirtualTroopCtrl
---@param presetIndex number
---@param targetId number
---@param purpose number @wrpc.MovePurpose
function SlgModule:MoveTroopToEntity(troop,presetIndex,targetId,purpose)
    if not troop and presetIndex < 1 then return end
    ---@type wds.MapMob | wds.Troop | wds.MobileFortress
    local troopData = nil
    if troop and not troop.isVirtual then
        troopData = troop._data
    end

    self:MoveTroopToEntityViaData(troopData,presetIndex,targetId,purpose,0,0)
end

function SlgModule:SetTroopAutoBack(presetIndex,autoBack)
    if (autoBack ~= nil) then
        local msg = SetAutoBackParameter.new()
        msg.args.QueueIndex = presetIndex - 1
        msg.args.AutoBack = autoBack
        msg:Send()
    end
end

function SlgModule:SetTroopAutoFinishBattle(presetIndex, autoFinish)
    if (autoFinish ~= nil) then
        local msg = SetAutoBackAfterClearExpeditionParameter.new()
        msg.args.QueueIndex = presetIndex - 1
        msg.args.AutoBack = autoFinish
        msg:Send()
    end
end

function SlgModule:SetupTroopAutoBattleState(troopId,state,callback)
    local msg = TroopSetAutoBattleParameter.new()
    msg.args.TroopId = troopId
    msg.args.Auto = state
    msg:SendOnceCallback(nil,nil,nil,callback)
end

---@param troopData wds.MapMob | wds.Troop | wds.MobileFortress
---@param presetIndex number
---@param targetId number
---@param purpose wrpc.MovePurpose
function SlgModule:MoveTroopToEntityViaData(troopData, presetIndex, targetId, purpose, coordX, coordY)
    if not troopData and presetIndex < 1 then return end
    if troopData then
        self:SendMoveTroopEvent(troopData.ID,troopData.TypeHash == wds.MobileFortress.TypeHash,targetId,coordX,coordY,purpose)
    else
        if self:IsInCity() and (not purpose or purpose == wrpc.MovePurpose.MovePurpose_Move) then
            purpose = wrpc.MovePurpose.MovePurpose_InHomeAttack
        end
        self:CreateTroop(presetIndex, 0, 0, targetId, purpose)
    end
end

function SlgModule.DoTroopEscrowToEntityViaData(lockable, userData, targetId, attackType, presetIndexArray, callback)
    local sendCme = CreateAllianceAssembleTroopParameter.new()
    sendCme.args.TargetId = targetId
    sendCme.args.Type = attackType
    for i = 1, #presetIndexArray do
        sendCme.args.QueueIndexes:Add(presetIndexArray[i] - 1)
    end
    if lockable then
        sendCme:SendOnceCallback(lockable, userData, nil, callback)
    else
        sendCme:SendWithFullScreenLockAndOnceCallback(userData, nil, callback)
    end
end

---@param lockable CS.UnityEngine.Transform|CS.UnityEngine.Transform[]
---@param userData any
---@param targetId number
---@param attackType wds.CreateAllianceAssembleType
---@param presetIndexArray number[]
---@param callback fun(cmd:BaseParameter, isSuccess:boolean, rsp:any)
function SlgModule:TroopEscrowToEntityViaData(lockable, userData, targetId, attackType, presetIndexArray, callback)
    SlgModule.DoTroopEscrowToEntityViaData(lockable, userData, targetId, attackType, presetIndexArray, callback)
end

---@param troop TroopCtrl | VirtualTroopCtrl
---@param presetIndex number
---@param worldPos CS.UnityEngine.Vector3
---@param purpose number @wrpc.MovePurpose
---@param petCompId number
function SlgModule:MoveTroopToPosition(troop, presetIndex, worldPos, purpose, petCompId)
    if not troop and presetIndex < 1 then return end
    local troopData = nil
    if troop and not troop.isVirtual then
        troopData = troop._data
    end
    self:MoveTroopToPositionViaData(troopData, presetIndex, worldPos, purpose, petCompId)
end

---@param troopData wds.MapMob | wds.Troop | wds.MobileFortress
---@param presetIndex number
---@param worldPos CS.UnityEngine.Vector3
---@param purpose number @wrpc.MovePurpose
---@param petCompId number
function SlgModule:MoveTroopToPositionViaData(troopData, presetIndex, worldPos, purpose, petCompId)
    if not troopData and presetIndex < 1 then return end
    if troopData then
        self:SendMoveTroopEvent(troopData.ID,troopData.TypeHash == wds.MobileFortress.TypeHash,0,worldPos.x / self.unitsPerTileX,worldPos.z / self.unitsPerTileZ,purpose, petCompId)
    else
        self:CreateTroop(presetIndex,worldPos.x / self.unitsPerTileX,worldPos.z / self.unitsPerTileZ,0,purpose)
    end
end

---@param troop TroopCtrl | VirtualTroopCtrl
---@param presetIndex number
---@param coord CS.DragonReborn.Vector2Short
---@param purpose number @wrpc.MovePurpose
function SlgModule:MoveTroopToCoord(troop,presetIndex,coord,purpose)
    if not troop and presetIndex < 1 then return end
    local troopData = nil
    if troop and not troop.isVirtual then
        troopData = troop._data
    end
    self:MoveTroopToCoordViaData(troopData,presetIndex,coord,purpose)
end

---@param troopData wds.MapMob | wds.Troop | wds.MobileFortress
---@param presetIndex number
---@param coord CS.DragonReborn.Vector2Short
---@param purpose number @wrpc.MovePurpose
function SlgModule:MoveTroopToCoordViaData(troopData,presetIndex,coord,purpose)
    if not troopData and presetIndex < 1 then return end
    if troopData then
        self:SendMoveTroopEvent(troopData.ID,troopData.TypeHash == wds.MobileFortress.TypeHash,0,coord.X,coord.Y,purpose)
    else
        self:CreateTroop(presetIndex,coord.X,coord.Y,0,purpose)
    end
end

-----------------------------------------------
---Mulit troop
---@class TroopData
---@field troop TroopCtrl | VirtualTroopCtrl
---@field presetIndex number

---@param troopdatas TroopData[]
---@param targetId number
---@param coordX number
---@param coordY number
---@param purpose number @wrpc.MovePurpose
---@param petCompId number
function SlgModule:SendMoveTroopsEvent(troopdatas, targetId, coordX, coordY, purpose, petCompId)
    local parameter = nil
    for key, data in pairs(troopdatas) do
        if data.troop and not data.troop.isVirtual then
            if not parameter then
                parameter = MoveTroopToParameter.new()
                parameter.args.TargetEntityUID = targetId
                parameter.args.Dest.X = coordX
                parameter.args.Dest.Y = coordY
                parameter.args.Purpose = (purpose~=nil) and purpose or wrpc.MovePurpose.MovePurpose_Move
				if (petCompId) then
					parameter.args.PetCompId = petCompId
				end
            end
            parameter.args.TroopUIDs:Add(data.troop.ID)
        elseif data.presetIndex and data.presetIndex > 0 then
            if not self.troopCreateList then
                self.troopCreateList = {}
            end
            local troopInfo = self.troopManager:GetTroopInfoByPresetIndex(data.presetIndex)
            if troopInfo == nil then
                goto continue
            end
            self.troopCreateList[data.presetIndex] = {
                index = data.presetIndex,
                coordX = coordX,
                coordY = coordY,
                target = targetId,
                purpose = purpose,
            }
        end
        ::continue::
    end
    if parameter then
        parameter:Send()
    end
end

---@param troopdatas TroopData[]
---@param targetId number
---@param purpose number @wrpc.MovePurpose
function SlgModule:MoveTroopsToEntity(troopdatas,targetId,purpose)
    if not troopdatas or #troopdatas < 1 then return end
    self:SendMoveTroopsEvent(troopdatas,targetId,0,0,purpose)
end

---@param troopdatas TroopData[]
---@param worldPos CS.UnityEngine.Vector3
---@param purpose number @wrpc.MovePurpose
---@param petCompId number
function SlgModule:MoveTroopsToPosition(troopdatas, worldPos, purpose, petCompId)
    if not troopdatas or #troopdatas < 1 then return end
    self:SendMoveTroopsEvent(troopdatas, 0, worldPos.x / self.unitsPerTileX, worldPos.z / self.unitsPerTileZ, purpose, petCompId)
end

---@param troopdatas TroopData[]
---@param coord CS.DragonReborn.Vector2Short
---@param purpose number @wrpc.MovePurpose
function SlgModule:MoveTroopsToCoord(troopdatas,coord,purpose)
    if not troopdatas or #troopdatas < 1 then return end
    self:SendMoveTroopsEvent(troopdatas,0,coord.X,coord.Y,purpose)
end

---@param entityID number
---@param troopID number
function SlgModule:LeaveReinforce(entityID, troopID)
    local message = require("DismissReinforceTroopParameter").new()
    message.args.ArmyEntityId = entityID
    message.args.TroopId = troopID
    message:Send()
end

---@param entityID number
---@param troopID number
function SlgModule:LeaveStrengthen(entityID, troopID)
    local message = require("RetreatStrengthenTroopParameter").new()
    message.args.EntityId = entityID
    message.args.TroopId = troopID
    message:Send()
end


---@type wds.Troop | wds.MapBuilding | wds.TroopChariot
function SlgModule:IsMyTroop(troop)
    if troop == nil or troop.Owner == nil or self:MySelf() == nil then
        return false
    end

    if troop.TypeHash == DBEntityType.Troop and self:MySelf().ID == troop.Owner.PlayerID then
        return true
    end

    return false
end

function SlgModule:IsTroopRelatedToMe(troop)
    if troop == nil or troop.Owner == nil or self:MySelf() == nil then
        return false
    end

    local myPlayerId = self:MySelf().ID
    if troop.TypeHash == DBEntityType.Troop and myPlayerId == troop.Owner.PlayerID then
        return true
    end

    local myAllianceId = self:MySelf().Owner.AllianceID
    if troop.TypeHash == DBEntityType.TroopChariot and
       troop.Owner.AllianceID > 0 and
       troop.Owner.AllianceID == myAllianceId
    then
        ---@type wds.TroopChariot
        local chariot = troop
        for _, member in pairs(chariot.Army.PlayerTroopIDs) do
            if member.PlayerId == myPlayerId then
                return true
            end
        end
    end

    return false
end

---GetMyTroops
---@param forceUpdate boolean
---@return table<number,TroopInfo>,TroopInfo[]
function SlgModule:GetMyTroops(forceUpdate)
	if (not self.troopManager) then return end
    return self.troopManager:GetMyTroops(forceUpdate)
end

function SlgModule:GetMyTroopCtrls()
    local ctrls = {}
    if not self.troopManager then return ctrls end

    local myTroops, gmTroops = self.troopManager:GetMyTroops()
    for _, troop in pairs(myTroops) do
        if not troop.locked and troop.preset then
            local ctrl = self.troopManager:FindTroopCtrl(troop.troopId)
            if ctrl then
                table.insert(ctrls, ctrl)
            end
        end
    end

    for _, troop in ipairs(gmTroops) do
        if troop.entityData then
            local ctrl = self.troopManager:FindTroopCtrl(troop.entityData.ID)
            if ctrl then
                table.insert(ctrls, ctrl)
            end
        end
    end

    return ctrls
end

---@param troopInfo TroopInfo
function SlgModule:IsTroopIdle(troopInfo)
    return self.troopManager:IsTroopIdle(troopInfo)
end

---@return wds.MapMob[]
function SlgModule:GetMobTroops()
    local mobTroops = {}
    ---@type wds.MapMob
    local troops = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.MapMob)
    for _, troop in pairs(troops) do
        mobTroops[troop.ID] = troop
    end
    return mobTroops
end

---@return wds.MapMob[]
function SlgModule:GetBehemothMobByCage(cageEntityId)
    ---@type wds.MapMob
    local troops = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.MapMob)
    for _, troop in pairs(troops) do
        if troop.MobInfo.BehemothCageId == cageEntityId then
        return  troop
        end
    end
    return nil
end

---@param mapMob wds.MapMob
---@return PlayerDamageInfo[], number, number, number, number @damageList, allDamage, maxPlayerDamage, allTakeDmg, maxPlayerTakeDmg
function SlgModule:GetMobDamageData(mapMob)
    local allDamage = 0
    local maxPlayerDamage = 0

    local allTakeDmg = 0
    local maxPlayerTakeDmg = 0

    if not mapMob then
        return {}, allDamage, maxPlayerDamage, allTakeDmg, maxPlayerTakeDmg
    end

    ---@type table<number,PlayerDamageInfo>
    local dataMap = {}
    for troopId, value in pairs(mapMob.DamageStatistic.TakeDamage) do
        local playerId = value.PlayerId
        local damage = value.Damage
        local takeDamage = value.TakeDamage
        local playerName = value.Name
        local playerProtrait = value.Portrait
        if not dataMap[playerId] then
            dataMap[playerId] = {
                playerId = playerId,
                playerName = playerName,
                protrait = playerProtrait,
                protraitInfo = value.PortraitInfo,
                damage = 0,
                takeDamage = 0,
                detail = {}
            }
        end
       dataMap[playerId].detail[troopId] = damage
       dataMap[playerId].damage = dataMap[playerId].damage + damage
       dataMap[playerId].takeDamage = dataMap[playerId].takeDamage + takeDamage
    end

   ---@type PlayerDamageInfo[]
    local dataList = {}
    for _, value in pairs(dataMap) do
        local playerDamage  = value.damage
        local playerTakeDamage = value.takeDamage
        allDamage = allDamage + playerDamage
        allTakeDmg = allTakeDmg + playerTakeDamage
        if maxPlayerDamage < playerDamage then
            maxPlayerDamage = playerDamage
        end
        if maxPlayerTakeDmg < playerTakeDamage then
            maxPlayerTakeDmg = playerTakeDamage
        end
        table.insert(dataList,value)
    end

    table.sort(dataList,function(a,b)
        return a.damage > b.damage
    end)

    return dataList, allDamage, maxPlayerDamage, allTakeDmg, maxPlayerTakeDmg
end

---@return wds.Troop | wds.MapMob | wds.MobileFortress | wds.SlgPuppet
function SlgModule:FindTroop(id)
    local entities = g_Game.DatabaseManager:GetEntitiesById(id)
    if not entities then
        return nil
    end

    for _, entity in pairs(entities) do
        if entity.TypeHash == DBEntityType.Troop or 
           entity.TypeHash == DBEntityType.MapMob or 
           entity.TypeHash == DBEntityType.SlgPuppet or
           entity.TypeHash == DBEntityType.MobileFortress or
           entity.TypeHash == DBEntityType.TroopChariot
        then
            return entity
        end
    end
end

---@return wds.MobileFortress
function SlgModule:FindFriendlyMobileFortress()
    ---@type wds.MobileFortress
    local troops = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.MobileFortress)
    for _, entity in pairs(troops) do
        if self:IsMyAlliance(entity) then
            return entity
        end
    end
    return nil
end

---@return wds.MapBuilding
function SlgModule:FindMapBuildingByBuildingId(id)
    ---@type wds.MapBuilding[]
    local entities = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.MapBuilding)
    for key, entity in pairs(entities) do
        if entity.Base.CityBrief.EntityCityId == id then
            return entity
        end
    end
end
-------------------------------------
---Utils

function SlgModule:GetServerSpeedScale()
    return math.max( self.unitsPerTileX , self.unitsPerTileZ)
end

function SlgModule:GetServerCoordinateScale()
    return self.unitsPerTileX,self.unitsPerTileZ
end

---@field coord wds.Vector3F
---@return CS.UnityEngine.Vector3
function SlgModule:ServerCoordinate2Vector3(coord)
    return Vector3(coord.X * self.unitsPerTileX, 0, coord.Y * self.unitsPerTileZ)
end

---@field coord wds.Vector3F
---@return Float3
function SlgModule:ServerCoordinate2Float3(coord)
    return {x = coord.X * self.unitsPerTileX, y = 0, z = coord.Y * self.unitsPerTileZ}
end
---@field coord wds.Vector3F
---@return CS.UnityEngine.Vector2
function SlgModule:ServerCoordinate2Vector2(coord)
    return Vector2(coord.X * self.unitsPerTileX, coord.Y * self.unitsPerTileZ)
end

---@field coord wds.Vector3F
---@return Float3
function SlgModule:ServerCoordinate2Float2(coord)
    return {x = coord.X * self.unitsPerTileX, y = coord.Y * self.unitsPerTileZ}
end

---@return wds.Vector3F
function SlgModule:ServerCoordinate2WorldPosition(coord)
    return {X = coord.X * self.unitsPerTileX, Y = 0, Z = coord.Y * self.unitsPerTileZ}
end

function SlgModule:ServerSpeed2MapSpeed(speed)
    return speed * self:GetServerSpeedScale()
end

---@return wds.ViewCastleBriefForMap | wds.CastleBrief ...
function SlgModule:GetKingdomEntityByPosWS(posWS)
    local coord = CS.Grid.MapUtils.CalculateWorldPositionToCoord(posWS, self.staticMapData)
    local tile = KingdomMapUtils.RetrieveMap(coord.X, coord.Y)
    return tile and tile.entity or nil
end



---@param troopId number
function SlgModule:ReturnToHome(troopId)
    if not troopId or troopId < 1 then
        return
    end

    local troop = self:GetTroopCtrl(troopId)
    if troop then
        if not troop:IsSelf() then return end
        if ModuleRefer.VillageModule:HasAnyDeclareWarOnCage() then
            --Check is In Cage
            local isInCage = troop._data.MapStates.StateWrapper2.InBehemothCage
            if isInCage then
                ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("behemoth_nocity"))
                return
            end
        end
    end
  
    local pram = BackToCityParameter.new()
    pram.args.TroopUID = troopId
    pram:SendOnceCallback(nil, nil, nil, nil, function(msgID,errorCode,errorMsg)
        if errorCode == 30075 then
            ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("behemoth_nocity"))
        else
            self:BackToCityUseItemPanel(troopId)
        end
    end)
end

function SlgModule:ReturnToHomeImmediately(troopId)
    if not troopId or troopId < 1 then
        return
    end
    local pram = BackToCityImmediatelyParameter.new()
    pram.args.TroopID = troopId
    pram:Send()
end

function SlgModule:BackToCityUseItemPanel(troopId)
    ---@type CommonConfirmPopupMediatorParameter
    local param = {}
    param.title = I18N.Get("energy_btn_use")
    local itemId, itemNeed = self.dataCache:GetBackCityItem()
    if itemId and itemId > 0 then
        local itemIcon, itemBack = self.dataCache:GetBackCityItemIcon()
        local itemAmount = ModuleRefer.InventoryModule:GetAmountByConfigId(itemId)
        local isEnough = itemAmount >= itemNeed
        param.content = isEnough and I18N.GetWithParams("bw_doublecheck_cannot_back_city",1) or I18N.Get("activity_turn_table_goto_content")
        ---@type CommonPairsQuantityParameter
        local iconInfo = {}
        iconInfo.customQuality = 0
        iconInfo.itemIcon = UIHelper.IconOrMissing(itemIcon)
        iconInfo.num2 = itemNeed
        iconInfo.num1 = itemAmount
        iconInfo.compareType = CommonItemDetailsDefine.COMPARE_TYPE.LEFT_OWN_RIGHT_COST
        param.items = {iconInfo}
        param.styleBitMask = CommonConfirmPopupMediatorDefine.Style.ConfirmAndCancel | CommonConfirmPopupMediatorDefine.Style.ExitBtn | CommonConfirmPopupMediatorDefine.Style.WithItems

        if isEnough then
            param.onConfirm = function()
                self:ReturnToHomeImmediately(troopId)
                return true
            end
        else
            param.onConfirm = function()
                local list = {}
                table.insert(list, {id = itemId, num = 1})
                ModuleRefer.InventoryModule:OpenExchangePanel(list)
                return true
            end
        end
        g_Game.UIManager:Open(UIMediatorNames.CommonConfirmPopupMediator, param)
    end
end
--#############################################################################################################################################


function SlgModule:GetLodValue()
    return self._lodCur
end
function SlgModule:GetCamSize()
    return self._curCamSize
end

function SlgModule:SetupDebugMode(inDebug)
    self.DebugMode = inDebug
    g_Game.PlayerPrefsEx:SetInt('SLGDebugMode', self.DebugMode and 1 or 0)
end


function SlgModule:OnLodChanged(oldLod,newLod)
    if newLod ~= self._lodCur then
       local lastLod = self._lodCur or 0
       self._lodCur = newLod
       if self._lodCur < 1 and self.slgScale > 0.999 then
            self:UpdateSlgScale(true)
       elseif self._lodCur >= 1 and self.slgScale < 0.999 then
            self:UpdateSlgScale(false)
       end
       for i = 1, self._managersCount do
           self._managers[i]:OnLodChange(newLod, lastLod)
       end
       if self._onLodChange then
           for i, v in pairs(self._onLodChange) do
               i(newLod, lastLod)
           end
       end
       self:CloseTroopMenu()
       self.selectManager:ClearAllSelect()
       --GpuSkinning目前只支持两层LOD
       g_Game.TroopViewManager:SetLodLevel(self._lodCur > 1 and 1 or 0)
    end

end

function SlgModule:OnCamSizeChanged(oldSize,newSize)
    if math.abs(newSize - self._curCamSize) > SLGConst_Manual.CameraSizeThreshold then
        local lastSize = self._curCamSize
        self._curCamSize = newSize
        for i = 1, self._managersCount do
            self._managers[i]:OnCamSizeChange(newSize, lastSize)
        end
    end
end

---@return TroopCtrl
function SlgModule:GetTroopCtrl(id)
    return self.troopManager:FindTroopCtrl(id)
end

function SlgModule:GetBuildingCtrl(id)
    return self.troopManager:FindBuildingCtrl(id)
end

function SlgModule:GetCtrl(id)
    return self.troopManager:GetCtrl(id)
end

function SlgModule:GetAssembleTroopMasterMember(troopId)
    ---@type wds.Troop
    local troop = g_Game.DatabaseManager:GetEntity(troopId, DBEntityType.Troop)
    if not SlgUtils.IsTroopInRally(troop) then
        return
    end

    local alliance = ModuleRefer.AllianceModule:GetMyAllianceData()
    if not alliance then
        return
    end

    local teamInfo = alliance.AllianceTeamInfos.Infos[troop.TrusteeshipInfo.TeamId]
    if not teamInfo then
        return
    end

    for _, member in pairs(alliance.AllianceMembers.Members) do
        if member.PlayerID == teamInfo.CaptainId then
            return member
        end
    end
end

function SlgModule:AddRoot()
    local worldHolderGo = CS.UnityEngine.GameObject("WorldHolder")
    worldHolderGo.layer = CS.UnityEngine.LayerMask.NameToLayer('Kingdom')
    self.worldHolder = worldHolderGo.transform

    local createHelper = CS.DragonReborn.AssetTool.GameObjectCreateHelper.Create();
    createHelper:Create(ManualResourceConst.slg_world_config, worldHolderGo.transform,nil)
end

function SlgModule:InitTroopLineManager()
    self.troopLineManager = TroopLineManager()
    self.troopLineManager:InitManager(self.worldHolder.gameObject,SLGConst_Manual.troopLineWidth,KingdomMapUtils.GetMapSystem())

    local HashSetString = CS.System.Collections.Generic.HashSet(typeof(CS.System.String))
        local set = HashSetString()
        set:Add(SLGConst_Manual.troopLineMatPath)
        set:Add(SLGConst_Manual.troopLineArrowMatPath)
        g_Game.AssetManager:EnsureSyncLoadAssets(set, true, function(success)
            local lineMat = g_Game.MaterialManager.manager:LoadMaterial(SLGConst_Manual.troopLineMatPath)
            local arrowMat = g_Game.MaterialManager.manager:LoadMaterial(SLGConst_Manual.troopLineArrowMatPath)
            self.troopLineManager:SetupMaterial(lineMat,arrowMat)
        end)
end

function SlgModule:DisposeTroopLineManager()
    if self.troopLineManager then
        self.troopLineManager:Dispose()
    end
end

function SlgModule:RemoveRoot()
    if Utils.IsNotNull(self.worldHolder) then
        CS.UnityEngine.GameObject.Destroy(self.worldHolder.gameObject)
    end
end

function SlgModule:GetCamera()
    if not self.curScene then
        return CS.UnityEngine.Camera.main
    end
    return self.curScene.camera
end
---@return BasicCamera
function SlgModule:GetBasicCamera()
    if not self.curScene then
        return nil
    end
    return self.curScene.basicCamera
end
local CityBaseTypeCfgId = 1001
---@return CS.UnityEngine.Vector3
function SlgModule:GetCityBasePosition()
    local city = ModuleRefer.CityModule.myCity
    if not city then return CS.UnityEngine.Vector3.zero end
    local furnitureManager = city.furnitureManager
    if furnitureManager then
        local furniture = furnitureManager:GetFurnitureByTypeCfgId(CityBaseTypeCfgId)
        if furniture then
            return furniture:CenterPos()
        end
    end
    return CS.UnityEngine.Vector3.zero
end

function SlgModule:LookAtMyCity()
    local city = ModuleRefer.CityModule.myCity
    if not city then return end
    if self:IsInCity() then
        self.curScene.basicCamera:LookAt(self:GetCityBasePosition(),0.5,nil)
    else
        self.curScene.basicCamera:LookAt({x = city.mapX, y = 0, z = city.mapY},0.5,nil)
    end
end

function SlgModule:LookAtTroop(ctrl, speed, callback)
    if not self.curScene or ctrl == nil then
        return
    end

    speed = speed or 0.5

    local function GetPosition()
        if ctrl:IsValid() then
            local position = ctrl:GetCSView().transform.position
            return true, position
        end
        return false, nil
    end

    local valid, position = GetPosition()
    if valid then
        ---@type BasicCamera
        local camera = self.curScene.basicCamera
        camera:LookAt(position, speed, function()
            camera:SetFollowCallback(GetPosition)
            if callback then
                callback()
            end
        end)
    end
end

function SlgModule:LookAtPosition(position, speed, callback)
    if not self.curScene then
        return
    end

    speed = speed or 0.5

    if position then
        ---@type BasicCamera
        local camera = self.curScene.basicCamera
        camera:LookAt(position, speed, callback)
    end
end

function SlgModule:LookAtTroopDest(troopId)
    if not self.curScene then return end
    local path = nil
    local troopData = self:FindTroop(troopId)
    if troopData and troopData.MovePathInfo then
        path = troopData.MovePathInfo.Path
    end
    if not path or #path < 1 then
        return
    end

    local troopPos = self:ServerCoordinate2Vector3(path[1])
    if troopPos then
        self.curScene.basicCamera:LookAt(troopPos)
    end
end

---@param ctrl TroopCtrl
function SlgModule:SelectAndOpenTroopMenu(ctrl)
    if not ctrl then
        self:CloseTroopMenu()
        self.selectManager:SetSelect(nil)
        return
    end

    if not KingdomMapUtils.IsMapState() and not KingdomMapUtils.IsCityState() then
        return
    end

    if KingdomMapUtils.InMapKingdomLod(self._lodCur) then
        if self.selectManager:GetSelectCount() > 0 then
            self:CloseTroopMenu()
            self.selectManager:SetSelect(nil)
        end
        return
    end

    self:CloseTroopMenu()

    if ctrl:IsSelf() and  self:IsInCity() then
        return
    end

    if ctrl:CanSelect() then
        if not SlgUtils.IsTroopHideOnMap(ctrl:GetData()) then
            if ModuleRefer.KingdomTouchInfoModule:IsShow() then
                ModuleRefer.KingdomTouchInfoModule:Hide()
            end
    
            if ctrl:IsMonster() then
                local mobConfig = ConfigRefer.KmonsterData:Find(ctrl._data.MobInfo.MobID)                
                local canAtt = SlgUtils.IsMobCanAttack(mobConfig)
                if canAtt then
                    g_Game.EventManager:TriggerEvent(EventConst.MAP_CLICK_MONSTER, ctrl)
    
                    local monsterClass = mobConfig:MonsterClass()
                    local menuParam = nil
                    if monsterClass == MonsterClassType.Behemoth then
                        menuParam = require("SlgTouchMenuInfoFactory").CreateBehemothTouchMenuParam(ctrl,self.troopManager:CalcTroopRadius(ctrl._data))                        
                    else
                        menuParam = require("SlgTouchMenuInfoFactory").CreateMobTouchMenuParam(ctrl,self.troopManager:CalcTroopRadius(ctrl._data))                        
                    end
    
                    require("TouchMenuUIMediator").OpenSingleton(menuParam)
                end                
            else
                g_Game.UIManager:Open(UIMediatorNames.TroopCircleMenuMediator,{troopCtrl = ctrl})
            end

            ctrl:SetFocus(true)
            g_Game.EventManager:TriggerEvent(EventConst.MAP_SET_SELECTION, ctrl.TypeHash, ctrl.ID)
        end
        
        self.selectManager:SetSelect(ctrl)
    else
        self.selectManager:SetSelect(nil)
    end
end

function SlgModule:OnMSG_ClearSelect()
    self:SelectAndOpenTroopMenu(nil)
end

function SlgModule:OnMSG_ReLoginStart()
    self.troopManager:DestroyAllEntity()
    self._myself = nil
end

function SlgModule:OnMSG_ReLoginSuccess()
    if self:IsInCity() then
        if self.myCityTask ~= nil then
            self.myCityTask:Release()
        end

        self.myCityTask = QueuedTask.new()
        local myCity = ModuleRefer.CityModule:GetMyCity()
        if myCity then
            self.myCityTask:WaitTrue(function()
                --wait for City is Ready
                return myCity:AllLoadFinished()
            end)
            :DoAction(function()
                require("PvPRequestService").InvalidateMapAOI()            
            end):Start()
        end
    end
end

function SlgModule:CloseTroopMenu()

    g_Game.UIManager:CloseAllByName(UIMediatorNames.TroopCircleMenuMediator)
    if self.selectManager ~= nil then
        -- if ids.Count > 0 then

        local all = self.selectManager:GetAllSelected()
        if all  then
            for _, data in pairs(all) do
                if data and data.ctrl then
                    data.ctrl:SetFocus(false)
                    if data.ctrl:IsMonster() then
                        g_Game.UIManager:CloseAllByName(UIMediatorNames.TouchMenuUIMediator)
                    end
                end
            end
        end
        -- end
    end
end

---@param entity wds.Troop | wds.MapMob | wds.CastleBrief | wds.Village | wds.MobileFortress | wds.MapFortress | ...
function SlgModule:IsMyEntity(entity)
    if not entity or entity.TypeHash == DBEntityType.MapMob then
        return false
    end
    if entity.Owner and entity.Owner.PlayerID == self:MySelf().ID then
        return true
    end
    return false
end
---@param entity wds.Troop | wds.MapMob | wds.CastleBrief | wds.Village | wds.MobileFortress | wds.MapFortress | ...
function SlgModule:IsMyAlliance(entity)
    if not entity or entity.TypeHash == DBEntityType.MapMob then
        return false
    end
    if ModuleRefer.PlayerModule:IsFriendly(entity.Owner) then
        return true
    end
    return false
end

function SlgModule:IsMonster(entity)
    if not entity then
        return false
    end
    return entity.TypeHash == DBEntityType.MapMob
end

---@param entity wds.Troop | wds.MapMob | wds.CastleBrief | wds.Village | wds.MobileFortress | wds.MapFortress | ...
function SlgModule:IsEnemy(entity)
    if not entity then
        return false
    end
     return not self:IsMyEntity(entity) and not self:IsMyAlliance(entity)
end

---@param tile MapRetrieveResult
---@param targetId number
---@param type number @AllianceMapLabelType
---@param content string
---@param configId number
---@param btnTrans CS.UnityEngine.Transform
---@param userData any
---@param callback fun(cmd:BaseParameter, isSuccess:boolean, rsp:any)
function SlgModule:AddSignal(type,tile,targetId,content, configId, btnTrans, userData, callback)
    if self.signalManager then
        local coordX = tile and tile.X or 0
        local coordY = tile and tile.Z or 0
        self.signalManager:AddSignal(coordX,coordY,targetId,type,content,configId, btnTrans, userData, callback)
    end
end

---@param id number
---@param targetId number
---@param type number @AllianceMapLabelType
---@param content string
---@param configId number
---@param btnTrans CS.UnityEngine.Transform
---@param userData any
---@param callback fun(cmd:BaseParameter, isSuccess:boolean, rsp:any)
function SlgModule:ModifySignal(id,coordX, coordY, targetId, type, content, configId, btnTrans, userData, callback)
    if self.signalManager then
        self.signalManager:ModifySignal(id, coordX,coordY,targetId,type,content,configId, btnTrans, userData, callback)
    end
end

---@param id number
function SlgModule:RemoveSignal(id, btnTrans, userData, callback)
    if self.signalManager then
        self.signalManager:DelSignal(id, btnTrans, userData, callback)
    end
end

---@param tile MapRetrieveResult
function SlgModule:HasSignalOnTile(tile)
    if self.signalManager then
        if tile.entity then
            if self.signalManager:HasSignalOnEntity(tile.entity.ID) then
                return true
            end
        end
        return self.signalManager:HasSignalOnTile(tile.X,tile.Z)
    end
    return false
end

---@param tile MapRetrieveResult
---@return number,wds.AllianceMapLabel
function SlgModule:GetSignalOnTile(tile)
    if self.signalManager then
        if tile.entity then
            local id,data = self.signalManager:GetSignalOnEntity(tile.entity.ID)
            if id then
                return id, data
            end
        end
        return self.signalManager:GetSignalOnTile(tile.X,tile.Z)
    end
end

---@param entityId number
function SlgModule:HasSignalOnEntity(entityId)
    if self.signalManager then
        return self.signalManager:HasSignalOnEntity(entityId)
    end
    return false
end

---@param entity number
---@return number|nil,wds.AllianceMapLabel
function SlgModule:GetSignalOnEntity(entity)
    if self.signalManager then
        return self.signalManager:GetSignalOnEntity(entity)
    end
    return nil,nil
end

SlgModule.EntityType2EntityPath = {
    [DBEntityType.Troop] = DBEntityPath.Troop,
    [DBEntityType.MapMob] = DBEntityPath.MapMob,
    [DBEntityType.MobileFortress] = DBEntityPath.MobileFortress,
}

function SlgModule:GetDBEntityTypeByWdsType(typeHash)
    return SlgModule.EntityType2EntityPath[typeHash]
end

---@param entity wds.MobileFortress
function SlgModule:IsMobileFortressBuilding(entity)
    if not entity then
        return
    end
    return ModuleRefer.KingdomConstructionModule:IsBuildingConstructing(entity)
end

function SlgModule:GetTerrainPos(pos,heightOffset)
    -- if self.curScene and self.curScene.IsInCity and self.curScene:IsInCity() then
    if self:IsInCity() then
        ---@type City
        local curCity = self.curScene:GetCurrentViewedCity()
        if curCity then
            local retPos = curCity:FixHeightWorldPosition(pos)
            retPos.y = retPos.y + (heightOffset or 0)
            return retPos
        end
    else
        local height = KingdomMapUtils.SampleHeight(pos.x,pos.z)
        if height < 0 then
            height = 0
        end
        height = height + (heightOffset or 0)
        return Vector3(pos.x,height,pos.z)
    end
    return pos
end

function SlgModule:GetCityGroundLayerMask()
    if not self.cityLayerMask then
        self.cityLayerMask = CS.UnityEngine.LayerMask.GetMask("CityStatic")
    end
    return self.cityLayerMask
end

function SlgModule:GetLineHeightOffset()
    if self.curScene and self.curScene.IsInCity and self.curScene:IsInCity() then
        return 0.1
    end
    return 10
end

function SlgModule:GetTerrainBlock(pos)
    if self.curScene and self.curScene.IsInCity and self.curScene:IsInCity() then
        return {0,0}
    else
        return math.floor(pos.x / self.unitsPerTerrainX), math.floor(pos.z/self.unitsPerTerrainZ)
    end
end


function SlgModule:IsInCity()
    return self._isInCity
end

function SlgModule:IsInMyCity()
    if not self.curScene or not self._isInCity then
        return false
    end
    return self.curScene:IsInMyCity()
end

function SlgModule:IsInKingdom()
    if self.curScene and self.curScene:GetName() == require('KingdomScene').Name and self._lodCur > 0 then
        return true
    else
        return false
    end
end

---@param data wds.Troop
function SlgModule:GetTroopMoveSpeed(data)
    return self.dataCache.defaultSpeed
end

function SlgModule:IsTroopVisible(troopId)
    local ctrl = self:GetTroopCtrl(troopId)
    if not ctrl then return false end
    local view = ctrl:GetTroopView()
    if not view then return false end
    return view:InsideViewFrustum()
end

-- --- 获取士兵战力
-- ---@param self SlgModule
-- ---@param soldierId number
-- function SlgModule:GetSoldierPower(soldierId)
--     return self.dataCache:GetSoldierPower(soldierId)
-- end
local ATTR_DISP_POWER = 100

function SlgModule.DoGetTroopPowerByPreset(preset)
    if (not preset) then return 0 end
    local power = 0
    local heroList = preset.Heroes
    for i = 1, #heroList do
        local heroId = heroList[i].HeroCfgID
        if heroId and heroId > 0 then
            power = power + ModuleRefer.HeroModule:GetHeroAttrDisplayValue(heroId,ATTR_DISP_POWER)
            local petId = ModuleRefer.HeroModule:GetHeroLinkPet(heroId)
            if (petId and petId > 0) then
                power = power + ModuleRefer.PetModule:GetPetAttrDisplayValue(petId, ATTR_DISP_POWER)
            end
        end
    end
    return power
end

---@param self SlgModule
---@param preset wds.TroopPreset
function SlgModule:GetTroopPowerByPreset(preset)
	return SlgModule.DoGetTroopPowerByPreset(preset)
end

function SlgModule:GetTroopInfoByPresetIndex(presetIndex, forceUpdate)
    return self.troopManager:GetTroopInfoByPresetIndex(presetIndex, forceUpdate)
end

function SlgModule:GetTroopPowerByPresetIndex(presetIndex)
    local troopInfo = self.troopManager:GetTroopInfoByPresetIndex(presetIndex)
    if troopInfo.locked or not troopInfo.preset then
        return 0
    end
    return self:GetTroopPowerByPreset(troopInfo.preset)
end

--- 获取部队总战力
---@param data wds.Troop | wds.MapMob | wds.MobileFortress
---@return number @recommendPower
function SlgModule:GetTroopPowerByDBData(data)
    if not data then return 0 end
    local totalPower = 0

    -- 英雄战力
    local heroList = data.Battle.Group.Heros
    if heroList and heroList:Count() > 0 then
        for key, value in pairs(heroList) do
            local heroId = value.HeroID
            if heroId and heroId > 0 then            
                totalPower = totalPower + ModuleRefer.HeroModule:GetHeroAttrDisplayValue(heroId,ATTR_DISP_POWER)
                local petId = ModuleRefer.HeroModule:GetHeroLinkPet(heroId)
                if (petId and petId > 0) then
                    totalPower = totalPower + ModuleRefer.PetModule:GetPetAttrDisplayValue(petId, ATTR_DISP_POWER)
                end
            end
        end
    end
    return totalPower
end

--- 获取部队总战力
---@param self SlgModule
---@param troopId number
function SlgModule:GetTroopPowerByTroopId(troopId)
	if (not troopId) then return 0 end
    local troop = self:FindTroop(troopId)
    if troop then
        return self:GetTroopPowerByDBData(troop)
    else
        return 0
    end
end

---@param preset wds.TroopPreset | TroopPresetCache
---@return number,number @hp,maxHp
function SlgModule.DoGetTroopHpByPreset(preset)
    if not preset or not preset.Heroes or preset.Heroes:Count() < 1 then return 0,0 end

    if preset.TroopId > 0 then
        return preset.BasicInfo.Hp,preset.BasicInfo.MaxHp
    end

    local hpSum = 0
    local hpMax = 0
    local pct = ModuleRefer.TroopModule:GetHerosRelationValue(preset)
    local heroIds = {}
    for _, value in pairs(preset.Heroes) do
        local heroId = value.HeroCfgID
        table.insert(heroIds, heroId)
    end

    for _, value in pairs(preset.Heroes) do
        if value.HeroCfgID > 0 then
            hpSum = hpSum + value.HP + value.PetHP
            local heroMaxHp,petMaxHp = ModuleRefer.TroopModule:GetTroopHeroAndPetHPMax(value.HeroCfgID, value.PetCompId, pct)
            hpMax = hpMax + heroMaxHp + petMaxHp
        end
    end
    return hpSum,hpMax
end

---@param preset wds.TroopPreset | TroopPresetCache
---@return number,number @hp,maxHp
function SlgModule:GetTroopHpByPreset(preset)
    return SlgModule.DoGetTroopHpByPreset(preset)
end

function SlgModule:GetTroopHpByPresetIndex(presetIndex)
    local troopInfo = self.troopManager:GetTroopInfoByPresetIndex(presetIndex)
    if troopInfo.locked or not troopInfo.preset then
        return 0
    end
    return self:GetTroopHpByPreset(troopInfo.preset)
end

---@param self SlgModule
---@param preset wds.TroopPreset
function SlgModule:GetTroopCollectLoadByPreset(preset)
    if (not preset) then return 0 end
    local load = 0
    local heroList = preset.Heroes
    for i = 1, #heroList do
        local heroId = heroList[i].HeroCfgID
        if heroId and heroId > 0 then
            load = load + ModuleRefer.TroopModule:GetTroopHeroCollectLoad(heroId)
            local petId = ModuleRefer.HeroModule:GetHeroLinkPet(heroId)
            if (petId and petId > 0) then
                load = load + ModuleRefer.TroopModule:GetTroopPetCollectLoad(petId)
            end
        end
    end
    return load
end

---@param self SlgModule
---@param preset wds.TroopPreset
function SlgModule:GetTroopCollectSpeedByPreset(preset)
    if (not preset) then return 0 end
    local speed = 0
    local heroList = preset.Heroes
    for i = 1, #heroList do
        local heroId = heroList[i].HeroCfgID
        if heroId and heroId > 0 then
            speed = speed + ModuleRefer.TroopModule:GetTroopHeroCollectSpeed(heroId)
            local petId = ModuleRefer.HeroModule:GetHeroLinkPet(heroId)
            if (petId and petId > 0) then
                speed = speed + ModuleRefer.TroopModule:GetTroopPetCollectSpeed(petId)
            end
        end
    end
    return speed
end

---@param slgModule SlgModule|SlgInterfaceModule
---@param presetIndex number
---@return number|nil
function SlgModule.DoGetTroopEscrowStartTimeByPresetIndex(slgModule, presetIndex)
    local troopInfo = slgModule:GetTroopInfoByPresetIndex(presetIndex)
    if troopInfo.locked or not troopInfo.preset then
        return nil
    end
    return SlgModule.DoGetTroopEscrowStartTime(troopInfo.preset)
end

---@param presetIndex number
---@return number|nil
function SlgModule:GetTroopEscrowStartTimeByPresetIndex(presetIndex)
    local troopInfo = self:GetTroopInfoByPresetIndex(presetIndex)
    if troopInfo.locked or not troopInfo.preset then
        return nil
    end
    return self:GetTroopEscrowStartTime(troopInfo.preset)
end

function SlgModule.DoGetTroopEscrowStartTime(preset)
    if not preset then return nil end
    if (preset.TrusteeshipInfo and preset.TrusteeshipInfo.TrusteeshipStatus == wds.TrusteeshipStatus.TrusteeshipStatus_Preparing) and (preset.Status == wds.TroopPresetStatus.TroopPresetAssembleInTrusteeship
            or ((preset.WaitingStateMask & wds.TroopPresetWaitingMask.TroopPresetWaitingMaskAssembleTrusteeship) ~= 0)) then
        return preset.TrusteeshipInfo.StartTime
    end
    return nil
end

---@param preset wds.TroopPreset
---@return number|nil
function SlgModule:GetTroopEscrowStartTime(preset)
    return SlgModule.DoGetTroopEscrowStartTime(preset)
end

--- 获取编队入口红点对象
---@param self SlgModule
function SlgModule:GetEntranceRedDot()
	if (not self._redDotEntrance) then
		self._redDotEntrance = ModuleRefer.NotificationModule:GetOrCreateDynamicNode(REDDOT_ENTRANCE_NAME, REDDOT_ENTRANCE_TYPE)
	end
	return self._redDotEntrance
end

--- 刷新编队入口红点状态
---@param self SlgModule
function SlgModule:RefreshEntranceRedDotStatus()
	if (not self._redDotEntrance) then
		self:GetEntranceRedDot()
	end

	local myTroops = self:GetMyTroops()
	if (not myTroops) then return end

	local availablePresetCount = ModuleRefer.TroopEditModule:GetMaxPresetCount()
	local availableHeroCount = ModuleRefer.TroopEditModule:GetMaxPresetHeroCount()

	local usedHeroList = {}
	local usedHeroCount = 0
	local usedPetList = {}
	local usedPetCount = 0
	local hasFreeHeroSlot = false
	local hasFreePetSlot = false

	-- 统计空位信息
	for i = 1, availablePresetCount do
		---@type TroopInfo
		local troop = myTroops[i]
		if (troop.preset) then
			-- 统计英雄
			if (troop.preset.Heroes) then
				for j = 1, #troop.preset.Heroes do
					local id = troop.preset.Heroes[j].HeroCfgID
					if (id > 0 and not usedHeroList[id]) then
						usedHeroList[id] = true
						usedHeroCount = usedHeroCount + 1
					end
				end
				hasFreeHeroSlot = hasFreeHeroSlot or troop.preset.Heroes:Count() < availableHeroCount
			end

			-- 统计宠物
			-- local availablePetCount = ModuleRefer.TroopEditModule:GetMaxPresetPetCount(#troop.preset.Heroes)
			-- if (troop.preset.PetObjID) then
			-- 	local presetPetCount = 0
			-- 	for j = 1, #troop.preset.PetObjID do
			-- 		local id = troop.preset.PetObjID[j]
			-- 		if (id > 0 and not usedPetList[id]) then
			-- 			usedPetList[id] = true
			-- 			usedPetCount = usedPetCount + 1
			-- 			presetPetCount = presetPetCount + 1
			-- 		end
			-- 	end
			-- 	hasFreePetSlot = hasFreePetSlot or presetPetCount < availablePetCount
			-- end
		end
	end

	-- 是否有红点
	-- ---@type table<HeroConfigCache>
	-- local heroList = ModuleRefer.HeroModule:GetSortHeroList(HeroType.Heros)
	-- local hasFreeHero = #heroList > usedHeroCount
	local hasFreePet = hasFreePetSlot and ModuleRefer.PetModule:GetPetCount() > usedPetCount
	local value = 0
	--if (hasFreeHero or hasFreePet) then value = 1 end
	if (hasFreePet) then value = 1 end

	ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(self._redDotEntrance, value)
end

---@param image CS.UnityEngine.UI.Image | CS.U2DSpriteMesh
function SlgModule:LoadTroopStateIconSprite(spName,image)
    if not self.iconCache then self.iconCache = {} end
    local lastStateIcon = nil
    if image and image.sprite then
        lastStateIcon = image.sprite.name
    end
    if not string.IsNullOrEmpty(lastStateIcon) and not self.iconCache[lastStateIcon] then
        self.iconCache[lastStateIcon] = image.sprite
    end

    if not self.iconCache[spName] then
        g_Game.SpriteManager:LoadSprite(spName, image)
    else
        image.sprite = self.iconCache[spName]
    end
end


function SlgModule:CalcAllTroopPower(troopDatas,presets)
    if (not troopDatas and not presets)
        or (troopDatas and #troopDatas < 1 and presets and #presets < 1)
    then
        return 0
    end
    local power = 0
    if troopDatas and #troopDatas > 0 then
        for key, data in pairs(troopDatas) do
            power = power + self:GetTroopPowerByDBData(data)
        end
    end
    if presets and #presets > 0 then
        for key, presetIndex in pairs(presets) do
            power = power + self:GetTroopPowerByPresetIndex(presetIndex)
        end
    end
    return power
end

---@param module SlgModule|SlgInterfaceModule
function SlgModule.DoGetStrongestTroopPower(module)
    local infos = module:GetMyTroops()--ModuleRefer.TroopEditModule:GetPresets()
    local maxPower = 0
    for _, info in pairs(infos) do
        local power = SlgModule.DoGetTroopPowerByPreset(info.preset)
        if power > maxPower then
            maxPower = power
        end
    end
    return maxPower
end

function SlgModule:GetStrongestTroopPower()
	return SlgModule.DoGetStrongestTroopPower(self)
end

function SlgModule:GetFirstSelectType()
    local selectInfo = self.selectManager:GetFirstSelected()
    if not selectInfo or not selectInfo.entityData then return 0 end
    return selectInfo.entityData.TypeHash
end


function SlgModule:GetFirstSelectPower(isSE)
    local selectInfo = self.selectManager:GetFirstSelected()
    if not selectInfo then
        return 0
    end
    local troopPower = 0
    if selectInfo.entityData then
            troopPower = self:GetTroopPowerByDBData(selectInfo.entityData)
    elseif selectInfo.presetIndex then
        troopPower = self:GetTroopPowerByPresetIndex(selectInfo.presetIndex)
    end
    return troopPower,selectInfo.presetIndex
end

function SlgModule:GetAllSelectPower()
    local selectDatas = self.selectManager:GetAllSelected()
    local troopPower = 0
    if selectDatas and #selectDatas > 0 then
    local troopData = {}
    local presets = {}
        for i = 1, #selectDatas do
            local data = selectDatas[i]
            if data.presetIndex and data.presetIndex > 0 then
                table.insert(presets,data.presetIndex)
            else
                table.insert(troopData,data.entityData)
            end
        end
        troopPower = self:CalcAllTroopPower(troopData,presets)
    end
    return troopPower
end


function SlgModule:GetMostTroopPreset()
    local myTroops = self:GetMyTroops()
    local troopCount = 0
    local presetIndex = -1
    for index, info in pairs(myTroops) do
        if info.preset and info.preset.BasicInfo and info.preset.BasicInfo.MaxHp > troopCount then
            troopCount = info.preset.BasicInfo.MaxHp
            presetIndex = index
        end
    end
    return presetIndex, troopCount
end

---@param targetEntity wds.MapMob | wds.CastleBrief
function SlgModule:CreateAllianceTeam(targetEntity, presetIndex,waitTime)
    if not ModuleRefer.AllianceModule:IsInAlliance() or not waitTime or waitTime < 1 then
        return
    end
    local parameter = CreateTeamTrusteeshipParameter.new()

    parameter.args.QueueIndex = presetIndex
    parameter.args.TargetId = targetEntity.ID
    parameter.args.DelayTime = waitTime

    parameter:Send()
end

function SlgModule:JoinAllianceTeam(teamID,presetIndex)
    if not teamID or not presetIndex then return end

    local presetData = self.troopManager:GetTroopInfoByPresetIndex(presetIndex)
    if not presetData or presetData.locked or not presetData.preset then
        g_Logger.Error("JoinAllianceTeam,presetIndex is Invalied, presetIndex:"..tostring(presetIndex).." teamID:"..tostring(teamID))
        return
    end

    if presetData.preset.TrusteeshipInfo and presetData.preset.TrusteeshipInfo.TrusteeshipStatus ~= wds.TrusteeshipStatus.TrusteeshipStatus_None then
        g_Logger.Error("JoinAllianceTeam, presetIndex is in Trusteeship State, presetIndex:"..tostring(presetIndex).." teamID:"..tostring(teamID))
        return
    end


    if not presetIndex or presetIndex < 0 then return end
    local param = JoinTeamTrusteeshipParameter.new()
    param.args.TeamId = teamID
    param.args.QueueIndex = presetIndex - 1
    param:Send()
end

---@param presetIndex number
---@param callback fun(cmd:BaseParameter, isSuccess:boolean, rsp:any)
function SlgModule:LeaveAllianceTeam(presetIndex, callback)

    local presetData = self.troopManager:GetTroopInfoByPresetIndex(presetIndex)
    if not presetData or presetData.locked or not presetData.preset then
        g_Logger.Error("JoinAllianceTeam,presetIndex is Invalied, presetIndex:"..tostring(presetIndex))
        if callback then callback(nil, false) end
        return
    end

    if presetData.preset.TrusteeshipInfo and presetData.preset.TrusteeshipInfo.TrusteeshipStatus == wds.TrusteeshipStatus.TrusteeshipStatus_None then
        g_Logger.Error("JoinAllianceTeam, presetIndex is Not In Trusteeship State, presetIndex:"..tostring(presetIndex))
        if callback then callback(nil, false) end
        return
    end

    local teamId = presetData.preset.TrusteeshipInfo.TeamId
    local captainId = presetData.preset.TrusteeshipInfo.CaptainId
    if captainId == self:MySelf().ID then
        local param = CancelTeamTrusteeshipParameter.new()
        param.args.QueueIndex = presetIndex - 1
        param:SendOnceCallback(nil, nil, nil, callback)
    else
        local param = LeaveTeamTrusteeshipParameter.new()
        param.args.TeamId = teamId
        param:SendOnceCallback(nil, nil, nil, callback)
    end
end

--部队退化逻辑
function SlgModule:InitLocalConfig()
    self.LowMode = g_Game.PerformanceLevelManager:IsLowLevel()
    
    self.FallbackConfig = {}
    self.FallbackConfig.HideMoveVfxCount = 50
    self.FallbackConfig.HideBuffVfxCount = 40
    self.FallbackConfig.HideOtherVfxCount = 50
    self.FallbackConfig.MaxSkillVfxCount = 500
    self.FallbackConfig.MaxSkillAudio = 100    
end

function SlgModule:SetupSkillMaxVfxAndPriority(priority)
    g_Game.TroopViewManager:SetSkillVfxLimit(self.FallbackConfig.MaxSkillVfxCount,self.FallbackConfig.MaxSkillAudio,0,priority)
end

function SlgModule:CanShowMovingSmoke()
    return self.troopManager:GetTroopCtrlCount() < self.FallbackConfig.HideMoveVfxCount
end

function SlgModule:CanShowBuffVfx()
    return self.troopManager:GetTroopCtrlCount() < self.FallbackConfig.HideBuffVfxCount
end

function SlgModule:CanShowOtherSkillVfx()
    return self.troopManager:GetTroopCtrlCount() < self.FallbackConfig.HideOtherVfxCount
end

---@param trans CS.UnityEngine.Transform
function SlgModule:IsMyTroopView(trans)
    if Utils.IsNull(trans) then
        return false
    end
    local troopProxy = trans.gameObject:GetComponent(typeof(CS.DragonReborn.SLG.Troop.TroopViewProxy))
    if troopProxy and troopProxy.ID then
        local c = self.troopManager:FindTroopCtrl(troopProxy.ID)
        if c and c:IsSelf() then
            return true
        end
    end
    return false
end

---@param ctrl TroopCtrl
function SlgModule:IsTroopInFog(ctrl)
    if self:IsInCity() or not ModuleRefer.MapFogModule.staticMapData then
        return false
    end
    if not ctrl then
        return false
    end
    local pos = ctrl:GetPosition()
    local mapData = KingdomMapUtils.GetStaticMapData()
    if pos and mapData then
        local coord = CS.Grid.MapUtils.CalculateWorldPositionToCoord(pos, mapData)
        return not ModuleRefer.MapFogModule:IsFogUnlocked(coord.X, coord.Y)
    else
        return false
    end
end

function SlgModule:OnFocusBossChange()
    g_Game.EventManager:TriggerEvent(EventConst.MAP_FOCUS_BOSS_CHANGED, self.focusBoss)
end

---@param troopCtrl TroopCtrl
function SlgModule:SetupFocusBossTroop(troopCtrl)
    if self.focusBoss ~= troopCtrl then        
        troopCtrl:SetAsFocusBoss()
        if not self.focusBoss 
            and troopCtrl and troopCtrl._data
            and troopCtrl._data.MobInfo and troopCtrl._data.MobInfo.BehemothCageId > 0 
        then
            g_Game.DatabaseManager:AddChanged(DBEntityPath.BehemothCage.MsgPath,Delegate.GetOrCreate(self,self.OnFocusBossCageChanged))
        end
        self.focusBoss = troopCtrl
        self:OnFocusBossChange()
    end
end
---@param troopCtrl TroopCtrl
function SlgModule:BossTroopLoseFocus(troopCtrl)
    if self.focusBoss == troopCtrl then
        self.focusBoss = nil
        if troopCtrl and troopCtrl._data
            and troopCtrl._data.MobInfo and troopCtrl._data.MobInfo.BehemothCageId > 0 
        then
            g_Game.DatabaseManager:RemoveChanged(DBEntityPath.BehemothCage.MsgPath,Delegate.GetOrCreate(self,self.OnFocusBossCageChanged))
        end
        self:OnFocusBossChange()
    end
end

---@param data wds.BehemothCage
function SlgModule:OnFocusBossCageChanged(data,changed)
    if self.focusBoss and self.focusBoss._data.MobInfo and self.focusBoss._data.MobInfo.BehemothCageId == data.ID then
        self:OnFocusBossChange()
    end
end

---@return TroopCtrl
function SlgModule:GetFocusBoss()
    return self.focusBoss
end

function SlgModule:OnBossExeSkill(id,skillConfigIds)
    if not self.focusBoss or self.focusBoss._data.ID ~= id then return end
    g_Game.EventManager:TriggerEvent(EventConst.FOCUS_BOSS_EXECUTE_SKILL, skillConfigIds)
end

function SlgModule:TroopRageMax()
    if not self._troopRageMax then
        self._troopRageMax = ConfigRefer.ConstMain:SlgRageValueMax()
        if self._troopRageMax < 1 then
            self._troopRageMax = 100
        end
    end
    return self._troopRageMax
end

---@param kmonsterId number
---@return number,number,number @itemId,itemNeed, itemHas
function SlgModule:GetSlgTeamTrusteeshipItemCostInfo(kmonsterId)
    local rule = self:GetTrusteeshipRule(kmonsterId)
    local itemId, itemNeed = self:GetAssembleItemCost(rule, false)
    local itemHas = 0
    if itemId > 0 then
        itemHas = ModuleRefer.InventoryModule:GetAmountByConfigId(itemId)
    end
    return itemId, itemNeed, itemHas
end

function SlgModule:GetSlgTeamTrusteeshipStaminaCostInfo(kmonsterId)
    local rule = self:GetTrusteeshipRule(kmonsterId)
    local costPPP = self:GetAssembleStaminaCost(rule, false)
    local currPPP = ModuleRefer.PlayerModule:GetCurPPP()
    return costPPP, currPPP
end

function SlgModule:GetTrusteeshipRule(kmonsterId)
    local monsterCfg = ConfigRefer.KmonsterData:Find(kmonsterId)
    if monsterCfg then
        local ruleId = monsterCfg:TrusteeshipRule()
        return ConfigRefer.TeamTrusteeshipRule:Find(ruleId)
    end
end

---@param ruleCfg TeamTrusteeshipRuleConfigCell
function SlgModule:GetCustomAssembleWaitTimes(ruleCfg)
    local assembleWaitTimes = {}
    
    if ruleCfg then
        local ruleBase = ConfigRefer.TeamTrusteeshipRuleBase:Find(ruleCfg:RuleBase())
        if ruleBase then
            for i = 1, ruleBase:AssembleWaitTimeLength() do
                table.insert(assembleWaitTimes, ruleBase:AssembleWaitTime(i) * 60) -- AssembleWaitTime的单位：分钟
            end

            return assembleWaitTimes
        end
    end

    for i = 1, ConfigRefer.ConstMain:SlgAssembleWaitTimeLength() do
        table.insert(assembleWaitTimes, ConfigRefer.ConstMain:SlgAssembleWaitTime(i))
    end

    return assembleWaitTimes
end

---@param ruleCfg TeamTrusteeshipRuleConfigCell
---@param isJoinTeam boolean
---@return boolean, number
function SlgModule:GetAssembleStaminaCost(ruleCfg, isJoinTeam)
    if ruleCfg then
        local ruleBase = ConfigRefer.TeamTrusteeshipRuleBase:Find(ruleCfg:RuleBase())
        if ruleBase then
            if isJoinTeam then
                return ruleBase:MemberCostPPPCount()
            else
                return ruleBase:LeaderCostPPPCount()
            end
        end
    end
    return 0
end

---@param ruleCfg TeamTrusteeshipRuleConfigCell
---@param isJoinTeam boolean
function SlgModule:GetAssembleItemCost(ruleCfg, isJoinTeam)
    if ruleCfg then
        local ruleBase = ConfigRefer.TeamTrusteeshipRuleBase:Find(ruleCfg:RuleBase())
        if ruleBase then
            if isJoinTeam then
                return ruleBase:MemberCostItem(), ruleBase:MemberCostItemCount()
            else
                return ruleBase:LeaderCostItem(), ruleBase:LeaderCostItemCount()
            end
        end
        
    else
        local needItem = ConfigRefer.ConstMain:SlgTeamTrusteeshipCostItem()
        return needItem:ItemX(), needItem:CountX()
    end
    return 0, 0
end

function SlgModule:InSimpleMode()
    return self.troopManager:InSimpleMode()
end

return SlgModule;
