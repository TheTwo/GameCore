---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/5/16 17:10

local BaseUIComponent = require('BaseUIComponent')
local Delegate = require('Delegate')
local DBEntityPath = require("DBEntityPath")
local ModuleRefer = require("ModuleRefer")
local DBEntityType = require("DBEntityType")
local EventConst = require("EventConst")

---@class HUDWarWarningComponent : BaseUIMediator
local HUDWarWarningComponent = class("HUDWarWarningComponent",BaseUIComponent)

HUDWarWarningComponent.UnderAttack = false

function HUDWarWarningComponent:OnCreate(param)
    self.baseRed = self:Transform('p_base_red')
    self.iconInjured = self:Transform('p_icon_injured')
    
    self.baseRed:SetVisible(false)
    self.iconInjured:SetVisible(false)

    ---@type CS.FpAnimation.FpAnimationCommonTrigger
    self.warningVfx = self.baseRed:GetComponent(typeof(CS.FpAnimation.FpAnimationCommonTrigger))
end

function HUDWarWarningComponent:OnShow(param)
    self.refCount = 0
    g_Game.DatabaseManager:AddChanged(DBEntityPath.CastleBrief.MapStates.Battling.MsgPath, Delegate.GetOrCreate(self, self.OnCastleBriefBattlingChanged))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Troop.Warning.MsgPath, Delegate.GetOrCreate(self,self.OnTroopWaringChanged))
    self:UpdateExistingData()
end

function HUDWarWarningComponent:OnHide(param)
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.CastleBrief.MapStates.Battling.MsgPath, Delegate.GetOrCreate(self, self.OnCastleBriefBattlingChanged))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Troop.Warning.MsgPath, Delegate.GetOrCreate(self,self.OnTroopWaringChanged))
    self:CloseWarning()
    self.refCount = 0
end

---@param data wds.CastleBrief
function HUDWarWarningComponent:OnCastleBriefBattlingChanged(data)
    local myCastle = ModuleRefer.PlayerModule:GetCastle()
    if myCastle ~= nil and data.ID ~= myCastle.ID then
        return
    end

    self:WarningAttacked(data.MapStates.Battling)
end

function HUDWarWarningComponent:OnTroopWaringChanged(data)
    if not ModuleRefer.SlgModule:IsMyTroop(data) then
        return
    end

    self:WarningAttacked(data.Warning.Mask > 0)
end

function HUDWarWarningComponent:WarningAttacked(enable)
    if enable then
        self.refCount = self.refCount + 1
        self:ShowWarning()
    else
        if self.refCount > 0 then
            self.refCount = self.refCount - 1
            if self.refCount <= 0 then
                self:CloseWarning()
            end
        end
    end
end

function HUDWarWarningComponent:ShowWarning()
    self.baseRed:SetVisible(true)
    self.warningVfx:PlayAll(CS.FpAnimation.CommonTriggerType.OnShow)
    HUDWarWarningComponent.UnderAttack = true
    g_Game.EventManager:TriggerEvent(EventConst.SLG_UNDER_ATTACK_WARNING, true)
end

function HUDWarWarningComponent:CloseWarning()
    self.baseRed:SetVisible(false)
    self.warningVfx:ResetAll(CS.FpAnimation.CommonTriggerType.OnShow)
    HUDWarWarningComponent.UnderAttack = false
    g_Game.EventManager:TriggerEvent(EventConst.SLG_UNDER_ATTACK_WARNING, false)
end

function HUDWarWarningComponent:UpdateExistingData()
    --自己的主堡被打
    local myCastle = ModuleRefer.PlayerModule:GetCastle()
    if myCastle ~= nil then
        self:WarningAttacked(myCastle.MapStates.Battling)
    end

    --自己的部队被打
    local myPlayerId = ModuleRefer.PlayerModule:GetPlayerId()
    local troops = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.Troop)
    for _, troop in pairs(troops) do
        if troop.Owner.PlayerID == myPlayerId then
            self:WarningAttacked(troop.Warning.Mask > 0)
        end
    end
end

return HUDWarWarningComponent