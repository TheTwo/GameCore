-- local BaseUIMediator = require('BaseUIMediator')
-- local ModuleRefer = require('ModuleRefer')
-- local Delegate = require('Delegate')
-- local EventConst = require('EventConst')
-- local ConfigRefer = require('ConfigRefer')
-- local TimerUtility = require('TimerUtility')
-- local I18N = require('I18N')
-- local UIMediatorNames = require('UIMediatorNames')
-- local PetCollectionMediator = class('PetCollectionMediator', BaseUIMediator)
-- function PetCollectionMediator:ctor()
--     self._rewardList = {}
-- end
-- function PetCollectionMediator:OnCreate()
--     self.overview = self:GameObject('p_pet_book_overview')
--     self.overviewTitle = self:Text('p_text_title')
--     self.overviewIcon = self:Image('icon_study')
--     self.overviewTxtNum = self:Text('p_text_study_num')
--     self.overviewTxtName = self:Text('p_text_study_name')
--     self.backButton = self:LuaObject('child_common_btn_back')
--     self.overviewAreas = self:TableViewPro('p_table_type')
--     self.overviewRewards = self:TableViewPro('p_table_reward')
--     self.rewardRect = self:RectTransform('Content_Reward')
-- end
-- function PetCollectionMediator:OnShow(param)
--     self.backButton:FeedData({title = I18N.Get(ConfigRefer.PetConsts:PetHandbookName())})
--     self.overviewTitle.text = I18N.Get(ConfigRefer.PetConsts:PetHandbookName())
--     g_Game.EventManager:AddListener(EventConst.PET_COLLECTION_CLAIM_REWARDS, Delegate.GetOrCreate(self, self.OnClickReward))
--     self:Init()
-- end
-- function PetCollectionMediator:OnHide(param)
--     g_Game.EventManager:RemoveListener(EventConst.PET_COLLECTION_CLAIM_REWARDS, Delegate.GetOrCreate(self, self.OnClickReward))
-- end
-- function PetCollectionMediator:Init()
--     local curPlayerProgress = ModuleRefer.PetCollectionModule:GetCollectionRewardCurrentProgress()
--     self.overviewTxtNum.text = curPlayerProgress
--     self.overviewTxtName.text = I18N.Get(ConfigRefer.PetConsts:PetHandbookResearchPointName())
--     self.overviewRewards:Clear()
--     self.overviewAreas:Clear()
--     self:RefreshArea()
--     self:RefreshReward()
-- end
-- function PetCollectionMediator:OnClickReward()
--     local res = {}
--     local IDs = {}
--     for k, v in pairs(self._rewardList) do
--         if v.canClaim then
--             table.insert(res, {id = v.iconData.configCell:Id(), count = v.iconData.count})
--             table.insert(IDs, k)
--         end
--     end
--     ModuleRefer.PetCollectionModule:ClaimReward(IDs, function()
--         self:RefreshReward()
--         g_Game.UIManager:Open(UIMediatorNames.UIRewardMediator, {itemInfo = res})
--     end)
-- end
-- -- 区域
-- function PetCollectionMediator:RefreshArea()
--     local list = ModuleRefer.PetCollectionModule:GetAreaList()
--     for i = 1, #list do
--         self.overviewAreas:AppendData(list[i])
--     end
--     self.overviewAreas:RefreshAllShownItem()
-- end
-- -- 奖励
-- function PetCollectionMediator:RefreshReward()
--     self._rewardList = {}
--     local add = self.overviewRewards.DataCount == 0
--     local list = ModuleRefer.PetCollectionModule:GetCollectionRewardList()
--     local curPlayerProgress = ModuleRefer.PetCollectionModule:GetCollectionRewardCurrentProgress()
--     local lastNeedPoint = 0
--     local curIndex = 0 -- 当前可领的第一个奖励
--     for k, v in pairs(list) do
--         v.canClaim = false
--         if curPlayerProgress >= v:NeedPoint() then
--             if not v.isClaim then
--                 v.canClaim = true
--             end
--             curIndex = curIndex + 1
--         end
--         v.Index = k
--         v.lastNeedPoint = lastNeedPoint
--         local iconData = {}
--         local itemGroupConfig = ConfigRefer.ItemGroup:Find(v:Reward())
--         if itemGroupConfig then
--             -- 奖励物品个数 目前只能为1
--             for i = 1, 1 do
--                 local itemGroup = itemGroupConfig:ItemGroupInfoList(i)
--                 iconData.configCell = ConfigRefer.Item:Find(itemGroup:Items())
--                 iconData.count = itemGroup:Nums()
--             end
--         end
--         v.iconData = iconData
--         if add then
--             self.overviewRewards:AppendData(v)
--         end
--         table.insert(self._rewardList, v)
--         lastNeedPoint = v:NeedPoint()
--     end
--     self:RefreshRewardPosition(curIndex)
--     self.overviewRewards:RefreshAllShownItem()
--     -- TimerUtility.DelayExecute(function()
--     --     self:RefreshRewardPosition(curIndex)
--     -- end, 1.5)
-- end
-- function PetCollectionMediator:RefreshRewardPosition(curIndex)
--     local index = curIndex - 4
--     if index > 0 then
--         local slotWidth = self.overviewRewards.cellPrefab[0]:GetComponent(typeof(CS.CellSizeComponent)).Width
--         self.rewardRect.localPosition = CS.UnityEngine.Vector3(self.rewardRect.localPosition.x - (index * (slotWidth + self.overviewRewards.spacing.x)), self.rewardRect.localPosition.y, 0)
--         -- else
--         -- self.rewardRect.localPosition = CS.UnityEngine.Vector3(self.rewardRect.localPosition.x, self.rewardRect.localPosition.y, 0)
--     end
-- end
-- return PetCollectionMediator
