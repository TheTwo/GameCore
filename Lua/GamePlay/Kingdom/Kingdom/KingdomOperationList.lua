-----@class KingdomEntityOperation
-----@field id number
-----@field operationType number
-----@field lod number
-----@field brief wds.MapEntityBrief
-----@field x number
-----@field z number
-----@field asset KingdomBaseAsset
--
-----@class KingdomOperationList
-----@field centerX number
-----@field centerZ number
-----@field map table<number, KingdomEntityOperation>
-----@field list table<KingdomEntityOperation>
--local KingdomOperationList = class("KingdomOperationList")
--
--KingdomOperationList.OperationNone = 0
--KingdomOperationList.OperationShow = 1
--KingdomOperationList.OperationHide = 1 << 2
--KingdomOperationList.OperationLodChange = 1 << 3
--KingdomOperationList.OperationRefresh = 1 << 4
--
--function KingdomOperationList:ctor()
--    self.map = {}
--    self.list = {}
--    self.pool = {}
--end
--
--function KingdomOperationList:IsEmpty()
--    return table.nums(self.map) == 0
--end
--
--function KingdomOperationList:Clear()
--    table.clear(self.map)
--    table.clear(self.list)
--    table.clear(self.pool)
--end
--
--function KingdomOperationList:SetCenter(x, z)
--    self.centerX = x
--    self.centerZ = z
--end
--
-----@param brief wds.MapEntityBrief
--function KingdomOperationList:Add(id, operationType, lod, x, z, brief)
--
--    local count = #self.pool
--    ---@type KingdomEntityOperation
--    local operation
--    if count > 0 then
--        operation = self.pool[count]
--        table.remove(self.pool)
--    else
--        operation = {}
--    end
--    operation.id = id
--    operation.operationType = operationType
--    operation.lod = lod
--    operation.x = x
--    operation.z = z
--    operation.brief = brief
--    
--    local exist = self.map[operation.id]
--    if exist then
--        self:Merge(exist, operation)
--    else
--        self.map[operation.id] = operation
--    end
--end
--
-----@return table<KingdomEntityOperation>
--function KingdomOperationList:Sort()
--    table.clear(self.list)
--    for _, operation in pairs(self.map) do
--        table.insert(self.list, operation)
--    end
--    ---@param a KingdomEntityOperation
--    ---@param b KingdomEntityOperation
--    table.sort(self.list, function(a, b)
--        if not a or not b then
--            return false
--        end
--
--        local aDistX = a.x - self.centerX
--        local aDistZ = a.z - self.centerZ
--        local bDistX = b.x - self.centerX
--        local bDistZ = b.z - self.centerZ
--        return aDistX * aDistX + aDistZ * aDistZ < bDistX * bDistX + bDistZ * bDistZ
--    end)
--    return self.list
--end
--
-----@param operation KingdomEntityOperation
--function KingdomOperationList:Remove(operation)
--    table.insert(self.pool, operation)
--    self.map[operation.id] = nil
--end
--
-----@param exist KingdomEntityOperation
-----@param operation KingdomEntityOperation
--function KingdomOperationList:Merge(exist, operation)
--    if exist.id ~= operation.id then
--        return
--    end
--
--    if exist.operationType & KingdomOperationList.OperationShow ~= 0 and operation.operationType == KingdomOperationList.OperationHide or
--            exist.operationType & KingdomOperationList.OperationHide ~= 0 and operation.operationType == KingdomOperationList.OperationShow then
--        exist.operationType = KingdomOperationList.OperationNone
--        return
--    end
--
--    if exist.operationType & KingdomOperationList.OperationLodChange ~= 0 and operation.operationType == KingdomOperationList.OperationLodChange then
--        exist.lod = operation.lod
--        return
--    end
--    
--    exist.operationType = exist.operationType | operation.operationType
--end
--
--
--return KingdomOperationList