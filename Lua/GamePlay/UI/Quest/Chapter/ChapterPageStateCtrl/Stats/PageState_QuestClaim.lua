---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/2/17 21:08
---
local PageBaseState = require('PageBaseState')
local ModuleRefer = require('ModuleRefer')
local EventConst = require('EventConst')
local QuestStateConstant = require('QuestStateConstant')
local Delegate = require('Delegate')
local TimerUtility = require('TimerUtility')
---@class PageState_QuestClaim : PageBaseState
local PageState_QuestClaim = class('PageState_QuestClaim',PageBaseState)
function PageState_QuestClaim:ctor(module,viewer,stateMachine)
    PageBaseState.ctor(self,module,viewer,stateMachine)
end

function PageState_QuestClaim.GetName()
    return 'PageState_QuestClaim'
end

function PageState_QuestClaim:In()
    --if data == nil then return end

    ---@type ChapterQuestItem
    self.tableCell = self.fsm:ReadBlackboard('tableCell',true)
    local iQuest = self.fsm:ReadBlackboard('iQuest',true)
    local lockable = self.fsm:ReadBlackboard('lockable',true)
    self.module:RequestChapterQuestReward(iQuest,lockable)
end


function PageState_QuestClaim:Out()
    
end


function PageState_QuestClaim:TryPlaySwitchAnim()
    if self.tableCell ~= nil
            and self.tableCell.PlaySwitch ~= nil
            and self.tableCell:PlaySwitch()
    then
        -- self.fsm:WriteBlackboard('cmd',QuestStateConstant.StateCmd.NextState)  
        -- self.fsm:GoNext()               
        return true
    else
        return false
    end
end

function PageState_QuestClaim:Next()
    --if data == nil or data.cmd == nil then return end
    -- local cmd = self.fsm:ReadBlackboard('cmd',true) 
    -- if cmd ==  QuestStateConstant.StateCmd.QuestReward then
        if self:TryPlaySwitchAnim() then
        end    
        --return self:GotoPartNormalState()
    -- elseif cmd == QuestStateConstant.StateCmd.NextState then 
    --     --self.module:UpdateQuestCache(true)
    --     return self:GotoPartNormalState()
    -- end
    return QuestStateConstant.StateName.PartNormal
end

function PageState_QuestClaim:GotoPartNormalState()
    --self.module:UpdateQuestCache(true)
    return QuestStateConstant.StateName.PartNormal
end




return PageState_QuestClaim