---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hao.wu.ss
--- DateTime: 2022/8/29 14:18
---

local BaseModule = require('BaseModule')
local ModuleRefer = require('ModuleRefer')
local DBEntityPath = require('DBEntityPath')
local ConfigRefer = require('ConfigRefer')
local Delegate = require('Delegate')
local MailBoxType = require("MailBoxType")
local I18N = require("I18N")
---@type NotificationModule
local NM = ModuleRefer.NotificationModule
local UIHelper = require("UIHelper")
local ColorConsts = require("ColorConsts")
local EventConst = require("EventConst")
local NotificationType = require("NotificationType")
local ObjectType = require("ObjectType")
local Utils = require("Utils")

local ALPHA_SELECTED_READ = ConfigRefer.ConstMain.MailSelectedReadOpacity and ConfigRefer.ConstMain:MailSelectedReadOpacity() or 1
local ALPHA_SELECTED_UNREAD = ConfigRefer.ConstMain.MailSelectedUnreadOpacity and ConfigRefer.ConstMain:MailSelectedUnreadOpacity() or 1
local ALPHA_UNSELECTED_READ = ConfigRefer.ConstMain.MailUnselectedReadOpacity and ConfigRefer.ConstMain:MailUnselectedReadOpacity() or 0.2
local ALPHA_UNSELECTED_UNREAD = ConfigRefer.ConstMain.MailUnselectedUnreadOpacity and ConfigRefer.ConstMain:MailUnselectedUnreadOpacity() or 1

local COLOR_SELECTED_READ_TITLE = UIHelper.TryParseHtmlString(ColorConsts.black or "#242630")
local COLOR_SELECTED_READ_SENDER = UIHelper.TryParseHtmlString(ColorConsts.dark_grey or "#626364")
local COLOR_SELECTED_READ_TIME = UIHelper.TryParseHtmlString(ColorConsts.dark_grey or "#626364")
local COLOR_SELECTED_UNREAD_TITLE = UIHelper.TryParseHtmlString(ColorConsts.black or "#242630")
local COLOR_SELECTED_UNREAD_SENDER = UIHelper.TryParseHtmlString(ColorConsts.dark_grey or "#626364")
local COLOR_SELECTED_UNREAD_TIME = UIHelper.TryParseHtmlString(ColorConsts.dark_grey or "#626364")
local COLOR_UNSELECTED_UNREAD_TITLE = UIHelper.TryParseHtmlString(ColorConsts.off_white or "#f1e6e0")
local COLOR_UNSELECTED_UNREAD_SENDER = UIHelper.TryParseHtmlString(ColorConsts.off_white or "#f1e6e0")
local COLOR_UNSELECTED_UNREAD_TIME = UIHelper.TryParseHtmlString(ColorConsts.light_grey or "#828793")
local COLOR_UNSELECTED_READ_TITLE = UIHelper.TryParseHtmlString(ColorConsts.off_white or "#f1e6e0")
local COLOR_UNSELECTED_READ_SENDER = UIHelper.TryParseHtmlString(ColorConsts.off_white or "#f1e6e0")
local COLOR_UNSELECTED_READ_TIME = UIHelper.TryParseHtmlString(ColorConsts.light_grey or "#828793")

local SP_BATTLE_REPORT_TITLE_BG_VICTORY = "sp_mail_base_victory"
local SP_BATTLE_REPORT_TITLE_BG_DEFEAT = "sp_mail_base_defeat"
local SP_BATTLE_REPORT_TITLE_BG_ESCAPE = "sp_mail_base_escape"

local COLOR_BATTLE_REPORT_TITLE_VICTORY = ColorConsts.army_green
local COLOR_BATTLE_REPORT_TITLE_DEFEAT = ColorConsts.army_red
local COLOR_BATTLE_REPORT_TITLE_ESCAPE = ColorConsts.quality_white

local COLOR_BATTLE_REPORT_TITLE_VICTORY_SLECTED = ColorConsts.quality_green
local COLOR_BATTLE_REPORT_TITLE_DEFEAT_SLECTED = ColorConsts.warning
local COLOR_BATTLE_REPORT_TITLE_ESCAPE_SLECTED = ColorConsts.black

local I18N_BATTLE_REPORT_TITLE_VICTORY = "battlemessage_victoryoutside"
local I18N_BATTLE_REPORT_TITLE_DEFEAT = "battlemessage_defeatoutside"
local I18N_BATTLE_REPORT_TITLE_ESCAPE = "battlemessage_battleoutside"
local I18N_BATTLE_REPORT_NOTIFICATION_VICTORY = "battlemessage_victoryinside"
local I18N_BATTLE_REPORT_NOTIFICATION_DEFEAT = "battlemessage_defeatinside"
local I18N_BATTLE_REPORT_BATTLE_AGAINST_TARGET = "battlemessage_battleinside"


---@class MailModule
local MailModule = class('MailModule', BaseModule)

function MailModule:ctor()
    self._player = nil
    self._favoriteSortedList = {}
    self._idSortedList = {}
    self._idMap = {}
    self._idTypeMap = {}
    self._totalMailCount = 0
	---@type CS.Notification.NotificationDynamicNode
	self._redDotMain = nil
	---@type CS.Notification.NotificationDynamicNode
	self._redDotSystem = nil
	---@type CS.Notification.NotificationDynamicNode
	self._redDotGamePlay = nil
	---@type CS.Notification.NotificationDynamicNode
	self._redDotBattleReport = nil
    ---@type CS.Notification.NotificationDynamicNode
    self._redDotGatherReport = nil
    
	self._lastReportMailIDs = {}
end

---@param self MailModule
---@param selected boolean
---@param read boolean
function MailModule:GetTitleContentAlpha(selected, read)
	if (selected) then
		if (read) then
			return ALPHA_SELECTED_READ
		else
			return ALPHA_SELECTED_UNREAD
		end
	else
		if (read) then
			return ALPHA_UNSELECTED_READ
		else
			return ALPHA_UNSELECTED_UNREAD
		end
	end
end

---@param self MailModule
---@param selected boolean
---@param read boolean
function MailModule:GetTitleTextColor(selected, read)
	if (selected) then
		if (read) then
			return COLOR_SELECTED_READ_TITLE
		else
			return COLOR_SELECTED_UNREAD_TITLE
		end
	else
		if (read) then
			return COLOR_UNSELECTED_READ_TITLE
		else
			return COLOR_UNSELECTED_UNREAD_TITLE
		end
	end
end

---@param self MailModule
---@param selected boolean
---@param read boolean
function MailModule:GetTitleSenderNameColor(selected, read)
	if (selected) then
		if (read) then
			return COLOR_SELECTED_READ_SENDER
		else
			return COLOR_SELECTED_UNREAD_SENDER
		end
	else
		if (read) then
			return COLOR_UNSELECTED_READ_SENDER
		else
			return COLOR_UNSELECTED_UNREAD_SENDER
		end
	end
end

---@param self MailModule
---@param selected boolean
---@param read boolean
function MailModule:GetTitleSendTimeColor(selected, read)
	if (selected) then
		if (read) then
			return COLOR_SELECTED_READ_TIME
		else
			return COLOR_SELECTED_UNREAD_TIME
		end
	else
		if (read) then
			return COLOR_UNSELECTED_READ_TIME
		else
			return COLOR_UNSELECTED_UNREAD_TIME
		end
	end
end

function MailModule:OnRegister()
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper.MailBox.MsgPath, Delegate.GetOrCreate(self, self.OnPlayerMailChange))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.RewardVideos.Videos.MsgPath, Delegate.GetOrCreate(self, self.OnVideoRewardMailChanged))
    g_Game.EventManager:AddListener(EventConst.RELOGIN_SUCCESS, Delegate.GetOrCreate(self, self.OnReloginSuccess))
	self:UpdateMailData()
end

function MailModule:OnRemove()
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.RewardVideos.Videos.MsgPath, Delegate.GetOrCreate(self, self.OnVideoRewardMailChanged))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper.MailBox.MsgPath, Delegate.GetOrCreate(self, self.OnPlayerMailChange))
    g_Game.EventManager:RemoveListener(EventConst.RELOGIN_SUCCESS, Delegate.GetOrCreate(self, self.OnReloginSuccess))
end

---@param self MailModule
---@return wds.Player
function MailModule:GetPlayer()
    if (not self._player) then
        self._player = ModuleRefer.PlayerModule:GetPlayer()
    end
    return self._player
end

function MailModule:OnReloginSuccess()
    self:UpdateMailData()
end

---@param self MailModule
function MailModule:OnPlayerMailChange(data, changedTable)
    self:UpdateMailData(changedTable)
end

---@param entity wds.Player
function MailModule:OnVideoRewardMailChanged(entity)
    if not entity or entity ~= ModuleRefer.PlayerModule:GetPlayer() then return end
    -- 刷新
	g_Game.EventManager:TriggerEvent(EventConst.MAIL_REFRESH)
end

--- 刷新邮件数据
---@param self MailModule
function MailModule:UpdateMailData(data)
    local player = self:GetPlayer()
    if (not player) then return end
    
    self._idMap = {}
    self._idTypeMap = {}
    self._totalMailCount = 0

    self:UpdateMailDataByType(player, MailBoxType.System)
    self:UpdateMailDataByType(player, MailBoxType.GamePlay)
    self:UpdateMailDataByType(player, MailBoxType.BattleReport)
    self:UpdateMailDataByType(player, MailBoxType.GatherResource)

    -- 刷新红点
    self:RefreshMailRedDotData()

    -- 排序
    self:SortMails()

	-- 战报通知检查
	self:CheckBattleReportNotification()

	-- 刷新
	g_Game.EventManager:TriggerEvent(EventConst.MAIL_REFRESH)
end

---@param player wds.Player
function MailModule:UpdateMailDataByType(player, mailBoxType)
    self._idTypeMap[mailBoxType] = {}
    local mails = player.PlayerWrapper.MailBox.Mails[mailBoxType]
    if mails and mails.Mails then
        for id, mail in pairs(mails.Mails) do
            self._idMap[id] = mail
            self._idTypeMap[mailBoxType][id] = mail
            self._totalMailCount = self._totalMailCount + 1
        end
    end
end

--- 获取战报目标名称
---@param self MailModule
---@param report wds.MailBattleReport
---@return string
function MailModule:GetBattleReportTargetName(report)
	local targetName = "???"
	local record = report and report.Records and report.Records[1]
	if (record and record.Target and record.Target.BasicInfo) then
		local targetInfo = record.Target.BasicInfo

		-- 怪物
		if (targetInfo.ObjectType == ObjectType.SlgMob) then
			local monsterCfg = ConfigRefer.KmonsterData:Find(targetInfo.ConfId)
			if (not monsterCfg) then return end
			targetName = I18N.Get(monsterCfg:Name())
	
		-- 部队
		else
			local prefix = ""
			if (not Utils.IsNullOrEmpty(targetInfo.AllianceName)) then
				prefix = "[" .. targetInfo.AllianceName .. "]"
			end
			targetName = prefix .. targetInfo.Name
		end
	end
	return targetName
end

function MailModule:CheckBattleReportNotification()
    self:CheckReportNotificationByType(MailBoxType.BattleReport)
    self:CheckReportNotificationByType(MailBoxType.GatherResource)
end

function MailModule:CheckReportNotificationByType(mailBoxType)
    local id = self._idSortedList
            and self._idSortedList[mailBoxType]
            and self._idSortedList[mailBoxType][1]
            and self._idSortedList[mailBoxType][1].id
    if (id and (self._lastReportMailIDs[id] ~= id)) then
        self._lastReportMailIDs[id] = id
        local mail = self:GetMail(id)
        if (mail) then

            local notifyText
            if mailBoxType == MailBoxType.BattleReport then
                notifyText = self:GetBattleReportNotificationTip(mail)
            elseif mailBoxType == MailBoxType.GatherResource then
                notifyText = self:GetGatherReportNotificationTip(mail)
            end

            if (not Utils.IsNullOrEmpty(notifyText)) then
                g_Game.EventManager:TriggerEvent(EventConst.MAIL_REPORT_RECEIVED, notifyText)
            end
        end
    end
end

function MailModule:GetBattleReportNotificationTip(mail)
    local record = mail.BattleReport.Records and mail.BattleReport.Records[1]
    if (record and record.Target and record.Target.BasicInfo) then
        local targetName = self:GetBattleReportTargetName(mail.BattleReport)
        local notifyText
        if (record.Result == wds.BattleResult.BattleResult_Win) then
            notifyText = I18N.GetWithParams(I18N_BATTLE_REPORT_NOTIFICATION_VICTORY, targetName)
        elseif (record.Result == wds.BattleResult.BattleResult_Loss) then
            notifyText = I18N.GetWithParams(I18N_BATTLE_REPORT_NOTIFICATION_DEFEAT, targetName)
        else
            notifyText = I18N.GetWithParams(I18N_BATTLE_REPORT_BATTLE_AGAINST_TARGET, targetName)
        end
        return notifyText
    end
end

function MailModule:GetGatherReportNotificationTip(mail)
    return I18N.Get("mining_tips_new_report")
end

--- 排序邮件
---@param self MailModule
function MailModule:SortMails()
    self._favoriteSortedList = {}
    self._idSortedList = {}

    self:SortMailsByType(MailBoxType.System)
    self:SortMailsByType(MailBoxType.GamePlay)
    self:SortMailsByType(MailBoxType.BattleReport)
    self:SortMailsByType(MailBoxType.GatherResource)
    
    -- 收藏邮件排序
    table.sort(self._favoriteSortedList, self.MailSortFunc)
end

function MailModule:SortMailsByType(mailBoxType)
    self._idSortedList[mailBoxType] = {}
    -- 系统邮件排序
    for id, mail in pairs(self._idTypeMap[mailBoxType]) do
        local data = {
            id = id,
            sendTime = mail.SendTime.Seconds,
        }
        if (mail.Favourite) then
            table.insert(self._favoriteSortedList, data)
        end
        table.insert(self._idSortedList[mailBoxType], data)
    end
    if (#self._idSortedList[mailBoxType] > 0) then
        table.sort(self._idSortedList[mailBoxType], self.MailSortFunc)
    end
end

--- 获取总邮件数量
---@param self MailModule
---@return number
function MailModule:GetTotalMailCount()
    return self._totalMailCount
end

--- 获取有序邮件列表
---@param self MailModule
---@param type number 邮件类型
---@return table<number, wds.Mail>
function MailModule:GetSortedMailIdList(type)
    return self._idSortedList[type]
end

--- 获取收藏邮件列表
---@param self MailModule
---@return table<number, wds.Mail>
function MailModule:GetFavoriteMailList()
    return self._favoriteSortedList
end

--- 获取收藏邮件数量
---@param self MailModule
---@return number
function MailModule:GetFavoriteMailCount()
    return #self._favoriteSortedList
end

--- 获取邮件数据
---@param self MailModule
---@param id number 邮件ID
---@return wds.Mail
function MailModule:GetMail(id)
    if (not id or not self._idMap) then return nil end
    return self._idMap[id]
end

--- 邮件是否有附件
---@param self MailModule
---@param id number
function MailModule:HasAttachment(id)
    local mail = self:GetMail(id)
    return (mail and mail.Attachments and #mail.Attachments > 0)
end

--- 是否已收藏
---@param self MailModule
---@param id number 邮件ID
---@return boolean
function MailModule:IsFavorite(id)
    local mail = self:GetMail(id)
    return (mail and mail.Favourite == true)
end

function MailModule.MailSortFunc(a, b)
    return a.sendTime > b.sendTime
end

--- 获取红点节点
---@param self MailModule
---@param type number 邮件类型
---@param id number 邮件ID
---@param autoCreate boolean 自动创建
---@return CS.Notification.NotificationDynamicNode
function MailModule:GetRedDotNode(type, id, autoCreate)
    if (not type or not id) then return nil end
    if (autoCreate == nil) then autoCreate = true end
    local prefix, nmType
    if (type == MailBoxType.System) then
        prefix = "mail_system_"
        nmType = NotificationType.MAIL_SYSTEM_ITEM
    elseif (type == MailBoxType.GamePlay) then
        prefix = "mail_gameplay_"
        nmType = NotificationType.MAIL_GAMEPLAY_ITEM
	elseif (type == MailBoxType.BattleReport) then
		prefix = "mail_battle_report_"
		nmType = NotificationType.MAIL_BATTLE_REPORT_ITEM
    elseif (type == MailBoxType.GatherResource) then
        prefix = "mail_gather_report_"
        nmType = NotificationType.MAIL_GATHER_REPORT_ITEM
    else
        return nil
    end
    if (autoCreate) then
        return NM:GetOrCreateDynamicNode(prefix .. id, nmType)
    else
        return NM:GetDynamicNode(prefix .. id, nmType)
    end
end

--- 刷新邮件红点数据
---@param self MailModule
function MailModule:RefreshMailRedDotData()
    -- 初始化
    if (not self._redDotData) then
        self._redDotData = {}
    end
    if (not self._redDotData[MailBoxType.System]) then
        self._redDotData[MailBoxType.System] = {}
    end
    if (not self._redDotData[MailBoxType.GamePlay]) then
        self._redDotData[MailBoxType.GamePlay] = {}
    end

    -- 入口红点
    if (not self._redDotMain) then
        self._redDotMain = NM:GetOrCreateDynamicNode("mail_main", NotificationType.MAIL_MAIN)
    end

	-- 战报红点
    self._redDotSystem = self:RefreshMailRedDotSingleData(self._redDotSystem, "mail_system", NotificationType.MAIL_SYSTEM, MailBoxType.System)
    self._redDotGamePlay = self:RefreshMailRedDotSingleData(self._redDotGamePlay, "mail_gameplay", NotificationType.MAIL_GAMEPLAY, MailBoxType.GamePlay)
    self._redDotBattleReport = self:RefreshMailRedDotSingleData(self._redDotBattleReport, "mail_battle_report", NotificationType.MAIL_BATTLE_REPORT, MailBoxType.BattleReport)
    self._redDotGatherReport = self:RefreshMailRedDotSingleData(self._redDotGatherReport, "mail_gather_report", NotificationType.MAIL_GATHER_REPORT, MailBoxType.GatherResource)

end

function MailModule:RefreshMailRedDotSingleData(redDot, redDotName, notificationType, mailBoxType)
    if (not redDot) then
        redDot = NM:GetOrCreateDynamicNode(redDotName, notificationType)
        NM:AddToParent(redDot, self._redDotMain)
    end
    NM:RemoveAllChildren(redDot)
    for id, mail in pairs(self._idTypeMap[mailBoxType]) do
        if (mail and (not mail.Read or mail.Read == false)) then
            local node = self:GetRedDotNode(mailBoxType, id)
            NM:AddToParent(node, redDot)
            NM:SetDynamicNodeNotificationCount(node, 1)
        end
    end
    return redDot
end

--- 获取主红点
---@param self MailModule
---@return CS.Notification.NotificationDynamicNode
function MailModule:GetRedDotMain()
    return self._redDotMain
end

--- 获取系统红点
---@param self MailModule
---@return CS.Notification.NotificationDynamicNode
function MailModule:GetRedDotSystem()
    return self._redDotSystem
end

--- 获取玩法红点
---@param self MailModule
---@return CS.Notification.NotificationDynamicNode
function MailModule:GetRedDotGamePlay()
    return self._redDotGamePlay
end

--- 获取战报红点
---@param self MailModule
---@return CS.Notification.NotificationDynamicNode
function MailModule:GetRedDotBattleReport()
	return self._redDotBattleReport
end

--- 获取采集报告红点
---@param self MailModule
---@return CS.Notification.NotificationDynamicNode
function MailModule:GetRedDotGatherReport()
    return self._redDotGatherReport
end

--- 是否过期
---@param self MailModule
---@param id number 邮件ID
---@return boolean, number, string, number, string, number, string, number, string
function MailModule:IsExpired(id)
    local mail = self:GetMail(id)
	local mailCfg = ConfigRefer.Mail:Find(mail.mailTid)
	if (mailCfg and mailCfg:AdVideo() > 0) then return false end
    if (not mail or not mail.AttachmentExpireTime or mail.AttachmentExpireTime.Seconds <= 0) then return true, 0, 0, 0, 0 end
	CS.TimeUtils.UseServerTime(g_Game.ServerTime:GetServerTimestampInMilliseconds())
    local day, dayStr, hour, hourStr, min, minStr, sec, secStr =
        CS.TimeUtils.GetRemainTimeWithFormatStrFromTimestampSeconds(mail.AttachmentExpireTime.Seconds, "#0", "00", "00", "00")
    return day < 0 or hour < 0 or min < 0 or sec < 0, day, dayStr, hour, hourStr, min, minStr, sec, secStr
end

--- 获取过期时间字串
---@param self MailModule
---@param mail wds.Mail
---@return string, boolean
function MailModule:GetExpireTimeString(mail)
    if (not mail) then return end
    if (mail.Claimed) then
        return I18N.Get("mail_btn_claimed"), true
    end
    local expired, day, dayStr, hour, hourStr, min, minStr, sec, secStr = self:IsExpired(mail.ID)
    if (expired) then
        return I18N.Get("mail_tips_reward_expires"), expired
    end
    return I18N.GetWithParams("mail_tips_expiration_prompt", dayStr, hourStr, minStr, secStr), expired
end

--- 获取经过时间字串
---@param self MailModule
---@param id number 邮件ID
function MailModule:GetElapsedTimeString(id)
    local mail = self:GetMail(id)
    if (not mail) then return nil end
	CS.TimeUtils.UseServerTime(g_Game.ServerTime:GetServerTimestampInMilliseconds())
    local day, hour, min, sec = CS.TimeUtils.GetElapsedTimeFromTimestampSeconds(mail.SendTime.Seconds)
    if (day > 0) then
        return CS.TimeUtils.GetDateStringFromTimestampSeconds(mail.SendTime.Seconds, ModuleRefer.GameSettingModule:GetLanguageCode())
    end
    if (hour > 0) then
        return I18N.GetWithParams("mail_tips_hour", hour)
    end
    if (min > 0) then
        return I18N.GetWithParams("mail_tips_minute", min)
    end
    return I18N.Get("mail_just")
end

---@param self MailModule
---@param id number 邮件ID
function MailModule:SetAsRead(id)
    local mail = self:GetMail(id)
    if (not mail or mail.Read == true) then return false end

    local msg = require("MarkMailsAsReadParameter").new()
    msg.args.MailIDs:Add(id)
    msg:Send()

    mail.Read = true

    local redDotNode = self:GetRedDotNode(mail.MailBoxType, id)
    if (redDotNode) then
        redDotNode:Dispose()
    end
    
    return true
end

--- 切换邮件收藏
---@param self MailModule
---@param id number 邮件ID
function MailModule:ToggleFavorite(id)
    local mail = self:GetMail(id)
    if (not mail) then return end

    if (not mail.Favourite or mail.Favourite == false) then
        self:Favorite(id)
    else
        self:UnFavorite(id)
    end
end

--- 取消邮件收藏
---@param self MailModule
---@param id number 邮件ID
function MailModule:UnFavorite(id)
    local mail = self:GetMail(id)
    if (not mail or not mail.Favourite or mail.Favourite == false) then return end

    local msg = require("UnFavourMailsParameter").new()
    msg.args.MailIDs:Add(id)
    msg:Send()

    mail.Favourite = false

    for i = #self._favoriteSortedList, 1, -1 do
        if (self._favoriteSortedList[i].id == id) then
            table.remove(self._favoriteSortedList, i)
            return
        end
    end
end

--- 收藏邮件
---@param self MailModule
---@param id number 邮件ID
function MailModule:Favorite(id)
    local mail = self:GetMail(id)
    if (not mail or mail.Favourite == true) then return end

    local msg = require("FavourMailsParameter").new()
    msg.args.MailIDs:Add(id)
    msg:Send()

    mail.Favourite = true

    table.insert(self._favoriteSortedList, {
        id = id,
        sendTime = mail.SendTime.Seconds,
    })
    table.sort(self._favoriteSortedList, self.MailSortFunc)
end

--- 领取附件
---@param self MailModule
---@param id number 邮件ID
function MailModule:ClaimAttachment(id, callback)
    local mail = self:GetMail(id)
    if (not mail or mail.Claimed == true) then return end
    local msg = require("ClaimMailAttachmentParameter").new()
    msg.args.MailID = id
    --msg:Send()
	msg:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, suc, resp)
		if (suc) then
			mail.Claimed = true
		end
		if (callback) then
			callback()
		end
	end)
end

--- 是否可以收藏
---@param self MailModule
---@param id number 邮件ID
---@return boolean
function MailModule:CanFavorite(id)
    local mail = self:GetMail(id)
    if (not mail) then return false end
    local mailCfg = ConfigRefer.Mail:Find(mail.mailTid)
    local cannotFavorite = mailCfg and not mailCfg:CanFavour()
    if (cannotFavorite or (self:HasAttachment(id) and not self:IsExpired(id))) then return false end
    return true
end

--- 是否可以删除
---@param self MailModule
---@param id number 邮件ID
function MailModule:CanDelete(id)
    local mail = self:GetMail(id)
    if (not mail) then return false end
    local mailCfg = ConfigRefer.Mail:Find(mail.mailTid)
    local cannotDelete = mailCfg and not mailCfg:CanDelete()
    if (cannotDelete or (self:HasAttachment(id) and not self:IsExpired(id) and not mail.Claimed) or mail.Favourite == true) then return false end
    return true
end

--- 删除邮件
---@param self MailModule
---@param id number 邮件ID
---@return boolean
function MailModule:Delete(id)
    if (not self:CanDelete(id)) then return false end
    local mail = self:GetMail(id)
    local msg = require("DeleteMailsParameter").new()
    msg.args.MailIDs:Add(id)
    msg:Send()

    -- 移除红点
    local redDotNode = self:GetRedDotNode(mail.MailBoxType, id, false)
    if (redDotNode) then
        redDotNode:Dispose()
    end

    -- 数据清理
    self._idMap[id] = nil
    self._idTypeMap[mail.MailBoxType][id] = nil
    self:SortMails()

    return true
end

---@param self MailModule
---@param type number 邮件类型
---@param callback fun()
function MailModule:ReadAndClaimAll(type, callback)
    if (not type) then return false end
    local msg = require("ReadMailsAndClaimAllParameter").new()
    msg.args.MailType = type
    --msg:Send()
	msg:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, suc, resp)
		if (suc) then
			if (callback) then callback() end
		end
	end)

    -- -- 数据清理
    -- for id, mail in pairs(self._idTypeMap[type]) do
    --     if (mail) then
    --         mail.Read = true
    --         mail.Claimed = true
    --         local redDotNode = self:GetRedDotNode(type, id, false)
    --         if (redDotNode) then
    --             redDotNode:Dispose()
    --         end
    --     end
    -- end

    --return true
end

--- 删除所有已读邮件
---@param self MailModule
---@param type number 邮件类型
---@return boolean
function MailModule:DeleteAllRead(type)
    if (not type) then return false end
    local msg = require("DeleteAllMailsParameter").new()
    msg.args.MailType = type
    msg:Send()

    -- 数据清理
    for id, mail in pairs(self._idTypeMap[type]) do
        if (self:CanDelete(id)) then
            self._idTypeMap[type][id] = nil
            self._idMap[id] = nil
            local redDotNode = self:GetRedDotNode(type, id, false)
            if (redDotNode) then
                redDotNode:Dispose()
            end
        end
    end

    return true
end

---@param self MailModule
---@param reportData wds.MailBattleReport
---@return string, string, string, string @标题, 背景图, 颜色代码, 选中颜色代码
function MailModule:GetBattleReportTitle(reportData)
	if (reportData.Result == wds.BattleResult.BattleResult_Win) then
		return I18N_BATTLE_REPORT_TITLE_VICTORY, SP_BATTLE_REPORT_TITLE_BG_VICTORY,
            COLOR_BATTLE_REPORT_TITLE_VICTORY, COLOR_BATTLE_REPORT_TITLE_VICTORY_SLECTED
	elseif (reportData.Result == wds.BattleResult.BattleResult_Loss) then
		return I18N_BATTLE_REPORT_TITLE_DEFEAT, SP_BATTLE_REPORT_TITLE_BG_DEFEAT,
            COLOR_BATTLE_REPORT_TITLE_DEFEAT, COLOR_BATTLE_REPORT_TITLE_DEFEAT_SLECTED
	else
		return I18N_BATTLE_REPORT_TITLE_ESCAPE, SP_BATTLE_REPORT_TITLE_BG_ESCAPE,
            COLOR_BATTLE_REPORT_TITLE_ESCAPE, COLOR_BATTLE_REPORT_TITLE_ESCAPE_SLECTED
	end
end

--- 获取战报胜利文本
---@param self MailModule
---@param i18n boolean 是否国际化
function MailModule:GetBattleReportVictoryText(i18n)
	if (i18n) then
		return I18N.Get(I18N_BATTLE_REPORT_TITLE_VICTORY)
	else
		return I18N_BATTLE_REPORT_TITLE_VICTORY
	end
end

--- 获取战报失败文本
---@param self MailModule
------@param i18n boolean 是否国际化
function MailModule:GetBattleReportDefeatText(i18n)
	if (i18n) then
		return I18N.Get(I18N_BATTLE_REPORT_TITLE_DEFEAT)
	else
		return I18N_BATTLE_REPORT_TITLE_DEFEAT
	end
end

--- 获取战报逃跑文本
---@param self MailModule
------@param i18n boolean 是否国际化
function MailModule:GetBattleReportEscapeText(i18n)
	if (i18n) then
		return I18N.Get(I18N_BATTLE_REPORT_TITLE_ESCAPE)
	else
		return I18N_BATTLE_REPORT_TITLE_ESCAPE
	end
end

--- 获取战报与目标对战文本
---@param self MailModule
---@param target string 目标
function MailModule:GetBattleReportBattleAgainstTargetText(target)
	return I18N.GetWithParams(I18N_BATTLE_REPORT_BATTLE_AGAINST_TARGET, target)
end

return MailModule
