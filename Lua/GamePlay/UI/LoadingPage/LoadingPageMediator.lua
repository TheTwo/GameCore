---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/4/15 17:27
---
local BaseUIMediator = require('BaseUIMediator')
local NumberFormatter = require('NumberFormatter')
local I18N = require('I18N')
local Delegate = require('Delegate')
local TimerUtility = require('TimerUtility')
local LoadingType = require('LoadingType')
local EventConst = require('EventConst')
local ModuleRefer = require('ModuleRefer')
local LoadingUtility = require('LoadingUtility')
local NativeLoadingOverlay = require('NativeLoadingOverlay')

---@class LoadingPageParam
---@field loadingType number @LoadingType
---@field onProgress fun() : number

---@class LoadingPageMediator : BaseUIMediator
---@field cfgCells LoadingConfigConfigCell[]
---@field cfgIndex number
---@field tipIndex number
---@field tipIndexList number[]
---@field tipTimer number
---@field waitingImageLoaded boolean
---@field onProgress fun():number
local LoadingPageMediator = class('LoadingPageMediator',BaseUIMediator)


local Color_Black = CS.UnityEngine.Color.black
local Color_White = CS.UnityEngine.Color.white
local Color_Clear = CS.UnityEngine.Color.clear
local ConfigCount = 3

function LoadingPageMediator:ctor()
    self.cfgCells = {}
    self.cfgIndex = 0
    self.curImage = 1
    self.tipIndex = 0
    self.tipIndexList = {}
    self.tipTimer = 0
    self.waitingImageLoaded = false
    self.onProgress = nil
    self.curProgress = 0
    self.triggerDelayClose = false
end

---@param param LoadingPageParam
function LoadingPageMediator:OnCreate(param)

    self.imgLoadingImage1 = self:Image('p_loading_image')
    
    self.sliderProgressBarLoading = self:Slider('p_progress_bar_loading')
    self.sliderProgressBarLoadingRect = self:RectTransform('p_progress_bar_loading')
    self.textTip = self:Text('p_text_tip')
    self.btnTips = self:Button('p_btn_tips',Delegate.GetOrCreate(self,self.OnBtnTipsClicked))

    self.textHint = self:Text('p_text_hint','beta_test_reminder')
    self.textProgress = self:Text('p_text_progress')

    self.sliderProgressBarLoading.value = 0
    
    self.cfgIndex = 0
    self.curImage = 1
    self.imgLoadingImage1.color = Color_White
    -- self.imgLoadingImage2.color = Color_Clear
        

    if param then
        self.onProgress = param.onProgress
        self.loadingType = param.loadingType or LoadingType.CommonLoading
    else
        self.loadingType = LoadingType.CommonLoading
        self.onProgress = nil
    end
    local lvl = LoadingUtility.GetLevel()
    self:LoadBackGround(lvl)
    self:InitTips(lvl)
end

function LoadingPageMediator:OnShow(param)
    g_Game:AddFrameTicker( Delegate.GetOrCreate(self, self.Tick))

    g_Game.EventManager:AddListener(EventConst.SCENE_LOADED, Delegate.GetOrCreate(self, self.OnSceneLoadFinish))
    g_Game.EventManager:AddListener(EventConst.SCENE_LOAD_STAGE_CHANGED, Delegate.GetOrCreate(self, self.OnSceneLoadStageChanged))
    local lb,tr = self.sliderProgressBarLoadingRect:GetViewPortCorners(g_Game.UIManager:GetUICamera())
    local pos = CS.UnityEngine.Vector2(lb.x, (tr.y + lb.y) * 0.5)
    NativeLoadingOverlay.Show(pos)
end

function LoadingPageMediator:OnHide(param)
    g_Game:RemoveFrameTicker(Delegate.GetOrCreate(self, self.Tick))

    g_Game.EventManager:RemoveListener(EventConst.SCENE_LOADED, Delegate.GetOrCreate(self, self.OnSceneLoadFinish))
    g_Game.EventManager:RemoveListener(EventConst.SCENE_LOAD_STAGE_CHANGED, Delegate.GetOrCreate(self, self.OnSceneLoadStageChanged))

    self.sceneLoaded = false
    NativeLoadingOverlay.Close()
end

function LoadingPageMediator:OnOpened(param)
    ModuleRefer.PerformanceModule:SetLoadingFinish(false)
    g_Game.PerformanceLevelManager:SetLoadingFinish(false)
end

function LoadingPageMediator:OnClose(param)
    ModuleRefer.PerformanceModule:SetLoadingFinish(true)
    g_Game.PerformanceLevelManager:SetLoadingFinish(true)
end

function LoadingPageMediator:OnSceneLoadFinish()
    g_Logger.Log('LoadingPageMediator:OnSceneLoadFinish')
    self.sceneLoaded = true
end

---@param progress number
---正常是0~100. 传-1表示失败
function LoadingPageMediator:OnSceneLoadStageChanged(stage)
    if stage < 0 then
        self:CloseSelf()
        return
    end
end

function LoadingPageMediator:Tick(delta)
    self:UpdateProgress()   
    self:TickTip()
    local lb,tr = self.sliderProgressBarLoadingRect:GetViewPortCorners(g_Game.UIManager:GetUICamera())
    local pos = CS.UnityEngine.Vector2(lb.x, (tr.y + lb.y) * 0.5)
    NativeLoadingOverlay.UpdatePos(pos)
end

function LoadingPageMediator:UpdateProgress()
    if self.sceneLoaded then
        self.curProgress = self.curProgress + 20
    else
        self.curProgress = self.curProgress + 1
    end

    if self.onProgress then
        local maxProgress, description = self:onProgress()
        if maxProgress > 0 then
            local progress = math.clamp01(self.curProgress / 100)
            progress = math.clamp(progress, 0, maxProgress)
            self.sliderProgressBarLoading.value = progress
            self.textProgress.text = NumberFormatter.Percent(progress)
        end

        if description and not string.IsNullOrEmpty(description) then          
            if UNITY_DEBUG then
                g_Logger.LogChannel('LoadingPage',description)
            end
        end
    else
        local progress = math.clamp01(self.curProgress / 100)
        self.sliderProgressBarLoading.value = progress
        self.textProgress.text = NumberFormatter.Percent(progress)
    end

    if self.curProgress >= 100 then
        if self.sceneLoaded then
            self:CloseSelf()
        else
            -- 进度条满了，3s后一定关闭loading界面
            if not self.triggerDelayClose then
                self.triggerDelayClose = true
                TimerUtility.DelayExecute(function()
                    self:CloseSelf()
                end, 3)
            end
        end
    end
end


function LoadingPageMediator:LoadBackGround(lvl)    
    local bgName = LoadingUtility.GetBackGroundImage(lvl,self.loadingType)
    g_Game.SpriteManager:LoadSprite(bgName, self.imgLoadingImage1)
    require('UIHelper').CalcFullFitImageSize(self.imgLoadingImage1)
end

function LoadingPageMediator:OnBtnTipsClicked(args)    
    self:UpdateTips()
end

function LoadingPageMediator:InitTips(lvl)
    self.tips = LoadingUtility.GetTips(lvl,self.loadingType)
    if not self.tips or #self.tips < 1 then
        self.textTip:SetVisible(false)
        self.tips = nil
        return
    end
    self.tipsIndex = math.random(1,#self.tips)
    self.tipTimer = g_Game.Time.realtimeSinceStartup - 0.5
    self:UpdateTips()
end

function LoadingPageMediator:UpdateTips()
    if not self.tips then
        return
    end
    if g_Game.Time.realtimeSinceStartup - self.tipTimer < 0.5 then
        return
    end
    self.textTip.text = I18N.Get(self.tips[self.tipsIndex].tip)
    self.tipsIndex = self.tipsIndex + 1
    if self.tipsIndex > #self.tips then
        self.tipsIndex = 1
    end
    self.tipTimer = g_Game.Time.realtimeSinceStartup
end

function LoadingPageMediator:TickTip()
    if not self.tips then
        return
    end
    if g_Game.Time.realtimeSinceStartup - self.tipTimer < self.tips[self.tipsIndex].duration then
        return
    end
    self:UpdateTips()
end



return LoadingPageMediator