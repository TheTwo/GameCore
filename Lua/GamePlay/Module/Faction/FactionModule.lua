---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hao.wu.ss
--- DateTime: 2022/9/15 11:59
---

local BaseModule = require('BaseModule')
local ModuleRefer = require("ModuleRefer")
local ConfigRefer = require("ConfigRefer")
local NotificationType = require('NotificationType')
local DBEntityPath = require('DBEntityPath')
local Delegate = require('Delegate')

---@class FactionModule
local FactionModule = class('FactionModule', BaseModule)

function FactionModule:ctor()

end

function FactionModule:OnRegister()
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper.Task.MsgPath, Delegate.GetOrCreate(self, self.RefreshRedDot))
end

function FactionModule:OnRemove()
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper.Task.MsgPath, Delegate.GetOrCreate(self, self.RefreshRedDot))
end

function FactionModule:GetFactionCells()
    local player = ModuleRefer.PlayerModule:GetPlayer()
    local misCell = player.MisCell
    return misCell.Cells
end

function FactionModule:CheckFactionIsUnlock(factionId)
    local cells = self:GetFactionCells()
    local unlockInfos = cells[wds.enum.MCFuncIndex.MCFuncSovereignInRelation].Values
    return unlockInfos[factionId] and unlockInfos[factionId] > 0
end

function FactionModule:GetSeason()
    return 1 --现在只有第一赛季的第一个组织
end

function FactionModule:GetCurSeasonOrgId(factionId)
    local factionCfg = ConfigRefer.Sovereign:Find(factionId)
    local seasonOrgCfg = ConfigRefer.SovereignSeasonOrg:Find(factionCfg:SeasonInfo())
    return seasonOrgCfg:SeasonOrg(self:GetSeason()):Org()
end

function FactionModule:GetFactionPrestigeValue(factionId)
    local cells = self:GetFactionCells()
    local factionLists = cells[wds.enum.MCFuncIndex.MCFuncSovereignReputation].Values
    local factionValue = factionLists[factionId] or 0
    local orgLists = cells[wds.enum.MCFuncIndex.MCFuncSovereignOrgReputation].Values
    local orgId = self:GetCurSeasonOrgId(factionId)
    local orgValue = orgLists[orgId] or 0
    return math.max(factionValue, orgValue)
end

function FactionModule:GetMaxPrestigeValue(factionId)
    local factionCfg = ConfigRefer.Sovereign:Find(factionId)
    local rewards = factionCfg:ReputationReward()
    local rewardCfg = ConfigRefer.SovereignReputation:Find(rewards)
    local stageReward = rewardCfg:StageReward(rewardCfg:StageRewardLength())
    return stageReward:Value()
end

function FactionModule:GetOrgReputation(factionId, season)
    local cells = self:GetFactionCells()
    local factionCfg = ConfigRefer.Sovereign:Find(factionId)
    local seasonOrgCfg = ConfigRefer.SovereignSeasonOrg:Find(factionCfg:SeasonInfo())
    local orgId = seasonOrgCfg:SeasonOrg(season):Org()
    local orgLists = cells[wds.enum.MCFuncIndex.MCFuncSovereignOrgReputation].Values
    local orgValue = orgLists[orgId] or 0
    local rewards = factionCfg:ReputationReward()
    local rewardCfg = ConfigRefer.SovereignReputation:Find(rewards)
    local stage = 1
    local stageReward = rewardCfg:StageReward(1)
    for i = 1, rewardCfg:StageRewardLength() do
        if orgValue >= rewardCfg:StageReward(i):Value() then
            stage = i
            stageReward = rewardCfg:StageReward(i)
        end
    end
    return stage, stageReward
end

function FactionModule:InitRedDot()
    if self.createRedDot then
        return
    end
    ModuleRefer.NotificationModule:GetOrCreateDynamicNode("FactionBtnNode", NotificationType.FACTON_BTN)
    self.createRedDot = true
end

function FactionModule:RefreshRedDot()
    if not self.createRedDot then
        self:InitRedDot()
    end
    local isHasTaskFinish = false
    for _, v in ConfigRefer.Sovereign:ipairs() do
        for i = 1, v:DiplomaticTasksLength() do
            local taskId = v:DiplomaticTasks(i)
            local taskState = ModuleRefer.QuestModule:GetQuestFinishedStateLocalCache(taskId)
            if taskState == wds.TaskState.TaskStateCanFinish then
                isHasTaskFinish = true
            end
        end
    end
    local factionRedDot = ModuleRefer.NotificationModule:GetDynamicNode("FactionBtnNode", NotificationType.FACTON_BTN)
    ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(factionRedDot, isHasTaskFinish and 1 or 0)
end


return FactionModule