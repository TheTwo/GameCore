---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shuo.cheng.
--- DateTime: 2021/8/3 14:14
---

local StoryDialogUIMediatorParameter = require("StoryDialogUIMediatorParameter")
local Delegate = require("Delegate")
local StoryDialogType = require("StoryDialogType")
local UIMediatorNames = require("UIMediatorNames")
local EventConst = require("EventConst")
local ModuleRefer = require("ModuleRefer")

local BaseBehaviour = require('BaseBehaviour')

---@class ShowDialogue:BaseBehaviour
local ShowDialogue = class("ShowDialogue", BaseBehaviour)
---@type ShowDialogue
local m_Instance = nil

function ShowDialogue:ctor()
    self._mediatorRuntimeId = nil
    self._isContinuous = false
    self._continuousWithAutoPlayEnd = false
end

---@return ShowDialogue
function ShowDialogue.Instance()
    if m_Instance == nil then
        m_Instance = ShowDialogue.new()
    end
    return m_Instance
end

---@param args any
---@return void
function ShowDialogue:OnStart(args)
    if self._mediatorRuntimeId then
        g_Game.UIManager:Close(self._mediatorRuntimeId)
        self._mediatorRuntimeId = nil
    end
    local dialogueId = args[1]
    self._isContinuous = args[2]
    local param = StoryDialogUIMediatorParameter.new();
    local dialogType = param:SetDialogGroup(dialogueId, Delegate.GetOrCreate(self, self.OnEnd))
    if not dialogType then
        return
    end
    self._continuousWithAutoPlayEnd = ((not param._dialogGroupConfig:AutoPlay()) and self._isContinuous)
    self._mediatorRuntimeId = ModuleRefer.StoryModule:OpenDialogMediatorByType(dialogType, param, true)
    if not self._isContinuous then
        g_Game.EventManager:TriggerEvent(EventConst.STORY_TIMELINE_DIALOG_NEED_PAUSE, true)
    end
end

function ShowDialogue:OnDialogEnd()
    if self._continuousWithAutoPlayEnd then
        return
    end
    self:OnEnd()
end

function ShowDialogue:OnEnd(args)
    if not self._isContinuous then
        g_Game.EventManager:TriggerEvent(EventConst.STORY_TIMELINE_DIALOG_NEED_PAUSE, false)
    end
    if self._mediatorRuntimeId then
        g_Game.UIManager:Close(self._mediatorRuntimeId)
    end
    self._mediatorRuntimeId = nil
end

function ShowDialogue:OnCurrentTimelineExit()
    if not self._mediatorRuntimeId then return end
    if self._mediatorRuntimeId then
        g_Game.UIManager:Close(self._mediatorRuntimeId)
    end
    self._mediatorRuntimeId = nil
end

return ShowDialogue