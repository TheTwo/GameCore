---
--- SE单位管理器
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by BE.Tenner.
--- DateTime: 2021/9/17 14:11
---

local SEUnitData = require("SEUnitData")
local SEUnitType = require("SEUnitType")
local SEFactionType = require("SEFactionType")
local ConfigRefer = require("ConfigRefer")
local SEUnitCategory = require('SEUnitCategory')
local DBEntityPath = require("DBEntityPath")
local DBEntityType = require("DBEntityType")
local Delegate = require("Delegate")
local SELogger = require("SELogger")
local I18N = require("I18N")
local Utils = require("Utils")
local ArtResourceConsts = require("ArtResourceConsts")
local ArtResourceUtils = require("ArtResourceUtils")
local SEEnvironmentModeType = require("SEEnvironmentModeType")
local EventConst = require("EventConst")

---@class SEUnitManager
---@field new fun(env:SEEnvironment):SEUnitManager
local SEUnitManager = class("SEUnitManager");

local MAX_BOSS_COUNT = 3
local HP_BLINK_COLOR = CS.UnityEngine.Color.white
local HP_BLINK_TIME = 0.2

local SKILL_FILTER_ENEMY = 1
local SKILL_FILTER_SELF = 2
local SKILL_FILTER_FRIEND = 3

-- local BATTLE_TYPE_NORMAL = 0
-- local BATTLE_TYPE_BOSS = 1
-- local BATTLE_TYPE_PET = 2
-- local BATTLE_TYPE_NPC = 3
-- local BATTLE_TYPE_ELITE = 4

---@return SEEnvironment
function SEUnitManager:GetEnvironment()
    return self._env
end

---@param env SEEnvironment
---@return void
function SEUnitManager:ctor(env)
	---@type SEEnvironment
    self._env = env
    self._captainId = 0
    ---@type table<number, SEHero> @key:heroEntityId @value SEHero
    self._heroList = {}
    ---@type table<number, SEPet> @key:petEntityId @value SEPet
    self._petMap = {}
	self._heroOrderedList = {}
	---@type table<number, SEUnit>
    self._deadUnits = {}
	---@type table<number, SEUnit>
    self._units = {}
	---@type table<number, SEUnit>
    self._dummyUnits = {}
    self._unitTypes = {}
    self._dialogElapsedTimes = {}
    self._dialogLastTimes = {}
    self._curPlayingSoundId = 0
    self._hiddenUnitTypes = 0
    self._lootTable = {}
    self._heroActiveSkills = {}
	self._bossIds = {}
	---@type CS.UnityEngine.GameObject
	self._waypointCenterGo = nil
	self._waypointCenterPending = false
	self._hostileUnitCountByType = {}
	self._friendlyUnitCountByType = {}
	self._hostileUnitCount = 0
	self._friendlyUnitCount = 0
    self._extraScaleValue = 1
    if env:GetEnvMode() == SEEnvironmentModeType.CityScene then
        self._extraScaleValue = ConfigRefer.ConstSe:CitySeExtraScale()
        if self._extraScaleValue <= 0 then
            self._extraScaleValue = 1
        end
    end

    -- Captain change
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Hero.BasicInfo.Captain.MsgPath, Delegate.GetOrCreate(self, self.OnCaptainChange))
end

---@param callback fun()
function SEUnitManager:PrecacheWaypointCenterGo(callback)
	if (Utils.IsNotNull(self._waypointCenterGo) or self._waypointCenterPending) then return end
	self._waypointCenterPending = true
    local helper = self._env:GetCreateHelper()
    helper:Create(ArtResourceUtils.GetItem(ArtResourceConsts.se_waypoint_center), require("SESceneRoot").GetSceneRoot(), function(go)
        self._waypointCenterGo = go
        self._waypointCenterGo.transform:SetParent(self._env:GetMapRoot())
        self._waypointCenterGo:SetActive(false)
		self._waypointCenterPending = false
        if (callback) then
            callback()
        end
    end)
end

function SEUnitManager:HideWaypointCenter()
	if (Utils.IsNotNull(self._waypointCenterGo)) then
		self._waypointCenterGo:SetActive(false)
	end
end

---@param pos CS.UnityEngine.Vector3
function SEUnitManager:ShowWaypointCenter(pos)
	-- local captain = self:GetCaptain()
	-- if (not captain) then return end
	-- ---@type wds.Hero
	-- local entity = captain.m_entity
	-- if (not entity) then return end
	-- local wpos = entity.BasicInfo.FormationPos
	-- if (not wpos) then return end
	-- local pos = CS.UnityEngine.Vector3(wpos.X, wpos.Z, wpos.Y)
	if (Utils.IsNull(self._waypointCenterGo)) then
        self:PrecacheWaypointCenterGo(function()
            if (Utils.IsNotNull(self._waypointCenterGo)) then
                self._waypointCenterGo.transform.position = pos
                self._waypointCenterGo:SetActive(false)
                self._waypointCenterGo:SetActive(true)
            end
        end)
    else
        self._waypointCenterGo.transform.position = pos
        self._waypointCenterGo:SetActive(false)
        self._waypointCenterGo:SetActive(true)
    end
end

---@param entity table
---@param changedData table
function SEUnitManager:OnCaptainChange(entity, changedData)
    if (not entity.BasicInfo.Captain) then return end
    self:ChangeCaptain(entity.ID)
end

---@param delta number
---@return void
function SEUnitManager:Update(delta, nowTime)
    -- Units Update
    for _, v in pairs(self._units) do
        v:Update(delta, nowTime)
    end

    -- Dead units update
    for _, v in pairs(self._deadUnits) do
        v:Update(delta, nowTime)
    end

    -- Dialog update
    for k, v in pairs(self._dialogElapsedTimes) do
        if (self._dialogLastTimes[k]) then
            self._dialogElapsedTimes[k] = v + delta
            if (self._dialogElapsedTimes[k] >= self._dialogLastTimes[k]) then
                self:HideBubbleDialog(k)
            end
        end
    end
end

---@return void
function SEUnitManager:Dispose()
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Hero.BasicInfo.Captain.MsgPath, Delegate.GetOrCreate(self, self.OnCaptainChange))
    for _, v in pairs(self._units) do
        if v:IsHero() then
            g_Game.EventManager:TriggerEvent(EventConst.SE_UNIT_HERO_DESTORY, v:GetID())
        elseif v:IsPet() then
            local actor = v:GetActor()
            g_Game.EventManager:TriggerEvent(EventConst.SE_UNIT_PET_DESTORY, v:GetID(), actor and actor:GetPosition(), actor and actor:GetForward())
        end
        v:Release(true)
    end
    for _, v in pairs(self._dummyUnits) do
        v:Release(true)
    end
    for _, v in pairs(self._deadUnits) do
        v:Release(true)
    end
    self._unitTypes = {}
    self._units = {}
    self._dummyUnits = {}
    self._deadUnits = {}
    self._dialogElapsedTimes = {}
    self._dialogLastTimes = {}
    self._lootTable = {}
    self._heroActiveSkills = {}
end

-- ---获取玩家
-- ---@param self SEUnitManager
-- ---@return SEPlayer
-- function SEUnitManager:GetPlayer()
--     return self._player
-- end

---获取英雄列表
---@return table<number, SEHero>
function SEUnitManager:GetHeroList()
    return self._heroList
end

---获取宠物列表
---@return table<number, SEPet>
function SEUnitManager:GetPetMap()
    return self._petMap
end

---获取队长
---@return SEHero
function SEUnitManager:GetCaptain()
    return self._heroList[self._captainId]
end

---@return number
function SEUnitManager:GetCaptainId()
    return self._captainId
end

---设置队长ID
---@param id number
function SEUnitManager:SetCaptainId(id)
	local oldCaptain = self._heroList[self._captainId]
	if (oldCaptain) then
		oldCaptain._isCaptain = false
	end
	self._captainId = id
	local newCaptain = self._heroList[id]
	if (newCaptain) then
		newCaptain._isCaptain = true
	end
end

---获取单位
---@param id number
---@return SEUnit
function SEUnitManager:GetUnit(id)
    return self._units[id]
end

---获取虚拟单位
---@param id number
---@return SEDummy
function SEUnitManager:GetDummyUnit(id)
    return self._dummyUnits[id]
end

---获取死亡单位
---@param id number
---@return SEUnit
function SEUnitManager:GetDeadUnit(id)
    return self._deadUnits[id]
end

---@param unit SEUnit
function SEUnitManager:RefreshBossHud(unit, index)
    local bossConf = unit:GetData():GetConfig()
    local extraLevel = self._env._instConfig:LVAddon() or 0
	self:GetEnvironment():SetTargetName(I18N.Get(bossConf:Name()))
	self:GetEnvironment():GetUiBattlePanel():ShowBossHPBar(I18N.Get(bossConf:Name()), bossConf:Level() + extraLevel, bossConf:BossIcon(), index)
	local p1 = nil
	local p2 = nil
	local p3 = nil
	local plen = unit:GetData():GetConfig():BossHPNodeLength()
	if (plen and plen > 0) then
		p1 = unit:GetData():GetConfig():BossHPNode(1)
	end
	if (plen and plen > 1) then
		p2 = unit:GetData():GetConfig():BossHPNode(2)
	end
	if (plen and plen > 2) then
		p3 = unit:GetData():GetConfig():BossHPNode(3)
	end
	self:GetEnvironment():GetUiBattlePanel():ShowBossPhases(p1, p2, p3, index)
end

---创建单位
---@param unit SEUnit
---@param entity wds.Puppet|wds.SePet|wds.Monster|wds.Hero
---@return SEUnit
function SEUnitManager:CreateUnit(unit, entity)
    SELogger.LogLow("Creating unit id [%s], type [%s]", unit._id, unit:GetType())
    self._units[unit._id] = unit
    local type = unit:GetType()
    if (not self._unitTypes[type]) then
        self._unitTypes[type] = {}
    end
    self._unitTypes[type][unit._id] = unit
    unit:SetEntity(entity)
    unit:Init()

    -- BOSS
	local unitCfg = unit:GetData():GetConfig()
	local category = unitCfg:Category()
    SELogger.LogLow("*** create unit %s category %s", unit._id, category)
    if (category == SEUnitCategory.Boss) then
		local bossSpawned = false
		local index
		for i = 1, MAX_BOSS_COUNT do
			if (not self._bossIds[i]) then
				self._bossIds[i] = unit._id
				bossSpawned = true
				index = i
				SELogger.Trace("Boss %s spawned %s", i, unit._id)
				break
			end
		end
		if (bossSpawned) then
            if self:GetEnvironment():GetEnvMode() ~= SEEnvironmentModeType.CityScene then
                self:RefreshBossHud(unit, index)
            end
		end
	-- Elite
	elseif (category == SEUnitCategory.Elite) then
		self:GetEnvironment():SetTargetName(I18N.Get(unitCfg:Name()))
		self:GetEnvironment():GetUiBattlePanel():ShowLevelTarget()
    elseif (category == SEUnitCategory.HeroLongDis or category == SEUnitCategory.HeroShortDis) then
        g_Game.EventManager:TriggerEvent(EventConst.SE_UNIT_HERO_CREATE, unit)
    elseif unit:IsPet() then
        g_Game.EventManager:TriggerEvent(EventConst.SE_UNIT_PET_CREATE, unit)
    end
end

---变更队长
---@param newId number
---@return boolean
function SEUnitManager:ChangeCaptain(newId)
    -- 无需变更
    if (self._captainId == newId) then
        return false
    end

    self:SetCaptainId(newId)
end

---销毁单位
---@param entity any
---@return void
function SEUnitManager:DestroyUnit(entity)
    if (self._dummyUnits[entity.ID]) then
        self._dummyUnits[entity.ID]:Release(true)
        self._dummyUnits[entity.ID] = nil
        return
    end

    SELogger.Trace("Destroy unit: %s", entity.ID)
    ---@type SEUnit
    local unit = self._units[entity.ID]
    if (not unit) then
        unit = self._deadUnits[entity.ID]
        if (not unit) then
            SELogger.LogError("Unit entity [%s] not found!", entity.ID)
            return
        end
    end
    if unit:IsHero() then
        g_Game.EventManager:TriggerEvent(EventConst.SE_UNIT_HERO_DESTORY, entity.ID)
    elseif unit:IsPet() then
        g_Game.EventManager:TriggerEvent(EventConst.SE_UNIT_PET_DESTORY, entity.ID, unit:GetActor():GetPosition(), unit:GetActor():GetForward())
    end
    self:GetEnvironment():GetSkillManager():CancelSkill(unit)
    self:GetEnvironment():GetSkillManager():ManualLocalCancelSkillToTarget(unit)
    self._heroList[entity.ID] = nil
    self._petMap[entity.ID] = nil
	-- if (entity.BasicInfo and entity.BasicInfo.ConfID) then
	-- 	self._heroIdList[entity.BasicInfo.ConfID] = nil
	-- end
	self:RemoveFromHeroOrderedList(entity.ID)

    -- Stop functions
    -- if (unit == self._player) then
    --     self._player:ClearPendingInteractor()
    --     self._player:ClearInteractingInteractor()
    -- end
    if (unit:GetController()) then
        unit:GetController():StopMove()
    end

    local ar = unit:GetAlertRange()
    if (ar) then
        ar.gameObject:SetActive(false)
    end
    local type = unit:GetType()

    unit:Release()

    -- SELogger.LogError('Remove unit entityId [%s] by DestroyUnit', entity.ID)
    self._units[entity.ID] = nil
    self._deadUnits[entity.ID] = nil
    if (self._unitTypes[type]) then
        self._unitTypes[type][entity.ID] = nil
    end
end

---添加死亡单位
---@param unit SEUnit
---@return void
function SEUnitManager:AddDeadUnit(unit)
    self._deadUnits[unit._id] = unit

    -- SELogger.LogError('Remove unit entityId [%s] by AddDeadUnit', unit._id)
    self._units[unit._id] = nil
end

---创建虚拟单位
---@param entity any
---@return void
function SEUnitManager:CreateDummyUnit(entity)
    local SEDummy = require("SEDummy")
    local dummy = SEDummy.new(self, entity.ID, entity)
    self._dummyUnits[entity.ID] = dummy
end

---获取单位类型
---@param types number
---@return table
function SEUnitManager:GetUnitTypes(types)
    return self._unitTypes[types]
end

---创建傀儡
---@param entity wds.Puppet
---@return void
function SEUnitManager:CreatePuppet(entity)
    -- SELogger.LogError("Try Create Puppet, entityId [%s]", entity.ID)

    -- 判断是否需要创建傀儡
    if (not entity or not entity.MapBasics or not entity.MapStates or not entity.MapStates.StateWrapper) then
        SELogger.LogError("Puppet id [%s] doesn't have a state!", entity.ID)
        return
    end

    if (entity.MapStates.StateWrapper.Invisible) then
        SELogger.LogLow("Puppet id [%s] is invisible, ignored", entity.ID)
        self:CreateDummyUnit(entity)
        return
    end

    local SEPuppet = require("SEPuppet")
    local seNpcId = ConfigRefer.Puppet:Find(entity.BasicInfo.ConfID):SeNpcConf()
    local seNpcConf = ConfigRefer.SeNpc:Find(seNpcId)
    local puppetData = SEUnitData.new(entity, seNpcConf)
    puppetData:SetExtraScale(self._extraScaleValue)
    SELogger.LogLow("Creating puppet ID: %s", entity.ID)
    local unit = SEPuppet.new(self, entity.ID, puppetData)
    self:CreateUnit(unit, entity)
end

---@param entity wds.SePet
function SEUnitManager:CreatePet(entity)
    -- SELogger.LogError("Try Create Pet, entityId [%s]", entity.ID)

    -- 判断是否需要创建宠物
    if (not entity or not entity.MapBasics or not entity.MapStates or not entity.MapStates.StateWrapper) then
        SELogger.Trace("Pet id [%s] doesn't have a state!", entity.ID)
        return
    end

    if (entity.MapStates.StateWrapper.Invisible) then
        SELogger.Trace("Pet id [%s] is invisible, ignored", entity.ID)
        self:CreateDummyUnit(entity)
        return
    end

    local SEPet = require("SEPet")
    local seNpcConf = ConfigRefer.SeNpc:Find(entity.BasicInfo.SeNpcId)
    local petData = SEUnitData.new(entity, seNpcConf)
    petData:SetExtraScale(self._extraScaleValue)
    SELogger.Trace("Creating pet ID: %s", entity.ID)
    local unit = SEPet.new(self, entity.ID, petData)
    self:CreateUnit(unit, entity)
    self._petMap[entity.ID] = unit
    self:OnCreatePet(entity)
end

--- 宠物已创建
---@param entity wds.SePet
function SEUnitManager:OnCreatePet(entity)
    local selfLevelCampIndex = self:GetEnvironment():GetWdsManager():GetSelfLevelCampIndex()
    local unitLevelCampIndex = entity.Owner.LevelCampIndex
    if selfLevelCampIndex > 0 and unitLevelCampIndex > 0 then
        local petConfigId = entity.BasicInfo.ConfigId
        local petConfig = ConfigRefer.Pet:Find(petConfigId)
        if petConfig then
            if selfLevelCampIndex == unitLevelCampIndex then
                self:GetEnvironment():GetUiBattlePanel():ShowPet(petConfig:ShowPortrait())
            else
                self:GetEnvironment():GetUiBattlePanel():ShowPetEnemy(petConfig:ShowPortrait())
            end
        end
    end
end

---创建怪物
---@param entity wds.Monster
---@return void
function SEUnitManager:CreateMonster(entity)
    -- SELogger.LogError("Try Create Monster, entityId [%s]", entity.ID)

    local SEMonster = require("SEMonster")
    local monsterCfg = ConfigRefer.SeNpc:Find(entity.BasicInfo.ConfID)
    local monsterData = SEUnitData.new(entity, monsterCfg)
    monsterData:SetExtraScale(self._extraScaleValue)
    SELogger.LogLow("Creating monster ID: %s, ConfID: %s", entity.ID, entity.BasicInfo.ConfID)
    local unit = SEMonster.new(self, entity.ID, monsterData)
    self:CreateUnit(unit, entity)
end

---创建英雄
---@param entity wds.Hero
---@return void
function SEUnitManager:CreateHero(entity)
    SELogger.Log("Try Create Hero, entityId [%s]", entity.ID)

    local SEHero = require("SEHero")
    local heroCfg = ConfigRefer.Heroes:Find(entity.BasicInfo.ConfID)
    if (not heroCfg) then
        SELogger.LogError("Hero config %s not found!", entity.BasicInfo.ConfID)
        return
    end

    -- SELogger.LogError('Create hero entityId [%s] HeroName [%s]', entity.ID, I18N.Get(heroCfg:Name()))

    local seNpcCfg = ConfigRefer.SeNpc:Find(heroCfg:SeNpcCfgId())
    if (not seNpcCfg) then
        SELogger.LogError("SeNpc config %s not found!", heroCfg:SeNpcCfgId())
        return
    end

    local heroData = SEUnitData.new(entity, seNpcCfg)
    heroData:SetExtraScale(self._extraScaleValue)
    SELogger.LogLow("Creating hero ID: %s", entity.ID)
    local hero = SEHero.new(self, entity.ID, heroData)
	hero:SetHeroConfig(heroCfg)
    self._heroList[entity.ID] = hero

    -- 仅管理为己方阵营的英雄
    if entity.Owner.LevelCampIndex > 0 and entity.Owner.LevelCampIndex == self:GetEnvironment():GetWdsManager():GetSelfLevelCampIndex() then
        self:AddToHeroOrderedList(entity.ID, hero)
    end
	
    -- 队长
    if (entity.BasicInfo.Captain) then
		hero._isCaptain = true
		self._captainId = entity.ID
    end
    self:CreateUnit(hero, entity)
    -- 预载路点
    hero:PrecacheWaypointGo()
    self:OnHeroSkillChange(hero, entity.Skill.SeSkillCds)

	self:GetEnvironment():GetUiBattlePanel():RefreshHeroStatus(true)
end

---英雄技能变更
---@param hero SEHero
---@param skillCds table
---@return void
function SEUnitManager:OnHeroSkillChange(hero, skillCds)
    if (not hero) then
        return
    end

    local skill, cd = self:GetEnvironment():GetSkillManager():GetSkillByDef(skillCds, require("SkillDef").ActiveSkill)
    self._heroActiveSkills[hero._id] =
    {
        skill = skill,
        cd = cd,
    }

    -- if (hero == self._hero1) then
    --     self:GetEnvironment():GetUI():SetHero1Skill(skill, cd)
    -- elseif (hero == self._hero2) then
    --     self:GetEnvironment():GetUI():SetHero2Skill(skill, cd)
    -- else
    --     SELogger.LogLow("Unknown hero, maybe a guest?   ")
    -- end
end

---@param hero SEHero
---@return KheroSkillLogicalSeConfigCell, number
function SEUnitManager:GetHeroActiveSkill(hero)
    local skill = self._heroActiveSkills[hero._id]
    if (not skill) then
        return nil, 0
    end
    return skill.skill, skill.cd
end

---通过英雄配置ID获取英雄
---仅限获取己方的英雄
---@param heroCfgId number
---@return SEHero
function SEUnitManager:GetHeroByHeroCfgId(heroCfgId)
    local scenePlayer = self:GetEnvironment():GetWdsManager():GetScenePlayer()
    ---@type wds.SceneHeroInfo
    local sceneHeroInfo = nil
    for _, value in pairs(scenePlayer.ScenePlayerHero.Infos) do
        sceneHeroInfo = value.SceneHeroInfos[heroCfgId]
        if sceneHeroInfo then
            break
        end
    end
	if sceneHeroInfo == nil then
        SELogger.LogHigh('GetHeroByHeroCfgId %s, 己方没有此英雄', heroCfgId)
        return nil
    end

    return self:GetHero(sceneHeroInfo.Eid)
end

---获取英雄
---@param id number
---@return SEHero
function SEUnitManager:GetHero(id)
    return self._heroList[id]
end

---获取英雄数量
---@return number
function SEUnitManager:GetHeroCount()
    return table.nums(self._heroList)
end

---移除死亡单位
---@param id number
---@return void
function SEUnitManager:RemoveDeadUnit(id)
    local unit = self._deadUnits[id]
    if (unit) then
        unit:Release()
        self._deadUnits[id] = nil
    end
end

---单位速度变更
---@param unit SEUnit
---@return void
function SEUnitManager:OnUnitSpeedChange(unit)
    if (not unit) then
        return
    end

    local entity = unit:GetEntity()
    if (not entity or not entity.MovePathInfo) then
        return
    end

    unit:SetMoveSpeed(entity.MovePathInfo.Speed)
end

--- 是否永远显示HP
---@param unit SEUnit
---@return boolean
function SEUnitManager:AlwaysShowHP(unit)
	if (not unit) then return false end
	local cfg = unit:GetData():GetConfig()
	if (not cfg) then return false end
	return cfg:HPPerm() or (self:GetEnvironment():IsInBattle() and cfg:HPPermInBattle())
end

---@param unit SEUnit
function SEUnitManager:IsShowHP(unit)
	if (not unit) then return false end
	local cfg = unit:GetData():GetConfig()
	if (not cfg) then return false end
    local env = self:GetEnvironment()
    local inBattle = env:IsInBattle()
	if (cfg:HPPerm() or (inBattle and cfg:HPPermInBattle())) then return true end
    if self:Debug_IsShowEntityId() then return true end
    local envMode = env:GetEnvMode()
	if (not inBattle and envMode ~= SEEnvironmentModeType.CityScene) then return false end
    if envMode == SEEnvironmentModeType.CityScene then
        local entity = unit:GetEntity()
        if entity and not entity.MapStates.StateWrapper.Battle then
            return false
        end
    end
	local hp = unit:GetHP()
	local hpMax = unit:GetHPMax()
	return hp < hpMax
end

--- 强制所有单位Fight信息
function SEUnitManager:ForceRefreshFightForAll()
	for _, unit in pairs(self._units) do
		self:OnUnitFightChange(unit)
	end
end

---单位状态变更
---@param unit SEUnit
---@return void
function SEUnitManager:OnUnitFightChange(unit)
    if (not self:IsUnitValid(unit)) then
        return
    end

    -- HP
    local hp = unit:GetHP()
	local lastHp = unit:GetLastHP()
	local hpReduced = lastHp and hp < lastHp
	unit:SetLastHP(hp)
    local hpmax = unit:GetHPMax()
    local hpProgress = hpmax > 0 and math.clamp01(hp / hpmax) or 0
    local hud = unit:GetHud()

    -- BOSS
    if (unit:GetData():GetConfig():Category() == SEUnitCategory.Boss) then
		local bossIndex = self:GetBossIndex(unit)
        self:GetEnvironment():GetUiBattlePanel():SetBossHP(hpProgress, bossIndex)
        if (hud) then
            hud:HideHP()
        end
        return
    end

    if (not hud or Utils.IsNull(hud.gameObject)) then
        SELogger.Log("Unit [%s] doesn't have a hud or has been destroyed!", unit._id)
        return
    end

	-- 秒杀效果
	if (lastHp >= unit:GetHPMax() and hp <= 0) then
		g_Logger.Trace("*** Pwned for unit %s", unit._id)
		--hud.gameObject:SetActive(true)
		hud.PwnedNode:SetActive(true)
	end

	if (not self:IsShowHP(unit)) then
        hud:HideHP()
    else
		local hpText = nil
		-- if (self:IsHero(unit) or unit._type == SEUnitType.Pet) then
		-- 	hpText = tostring(hp)
		-- end

        if self:Debug_IsShowEntityId() then
            if (self:IsHero(unit) or unit._type == SEUnitType.Pet) then
                hpText = tostring(hp)
            end
            hpText = string.format('%s Eid:[%s]', hpText, unit:GetEntity().ID)
        end

        hud:ShowHP(hpProgress, hpText)
		if (hpReduced) then
			hud:StartHPBlink(HP_BLINK_COLOR, HP_BLINK_TIME)
		end
    end
    if (unit:GetMP() ~= unit:GetLastMP()) then
        unit:SetLastMP(unit:GetMP())
    end

	if (self:IsHero(unit)) then
		self:GetEnvironment():GetUiBattlePanel():RefreshHeroStatus()
	end
end

function SEUnitManager:Debug_IsShowEntityId()
    if not UNITY_DEBUG then return false end
    return g_Game.PlayerPrefsEx:GetInt("GM_SE_ShowEntityId") == 1
end

---获取类型
---@param type number
---@return table
function SEUnitManager:GetTypes(type)
    local result = {}
    if ((type & SEUnitType.Player) == SEUnitType.Player) then
        table.insert(result, SEUnitType.Player)
    end
    if ((type & SEUnitType.Hero) == SEUnitType.Hero) then
        table.insert(result, SEUnitType.Hero)
    end
    if ((type & SEUnitType.Puppet) == SEUnitType.Puppet) then
        table.insert(result, SEUnitType.Puppet)
    end
    if ((type & SEUnitType.Monster) == SEUnitType.Monster) then
        table.insert(result, SEUnitType.Monster)
    end
    if ((type & SEUnitType.NPC) == SEUnitType.NPC) then
        table.insert(result, SEUnitType.NPC)
    end
    if ((type & SEUnitType.Dummy) == SEUnitType.Dummy) then
        table.insert(result, SEUnitType.Dummy)
    end
    return result
end

---弹出对话气泡
---@param id number
---@param confId number
---@return void
function SEUnitManager:ShowBubbleDialog(id, confId)
    local unit = self:GetUnit(id)
    if (not unit) then
        SELogger.LogError("Unit ID [%s] not exist!!", id)
        return
    end
    local conf = ConfigRefer.PopUp:Find(confId)
    if (not conf) then
        SELogger.LogError("PopUp config ID [%s] not exist!!", confId)
        return
    end
    local dialog = unit:GetDialog()
    if (not dialog) then
        SELogger.LogError("Unit id [%s] doesn't have a dialog!!", id)
        return
    end
    dialog.Text.text = I18N.Get(conf:Content())
    dialog.gameObject:SetActive(true)
    self._dialogElapsedTimes[id] = 0
    self._dialogLastTimes[id] = conf:Time() / 1000

    -- -- 播放音频, 如果配置了的话.
    -- if self._curPlayingSoundId and self._curPlayingSoundId > 0 then
    --     --TODO: KWwise.StopEvent(self._curPlayingSoundId, 0)
    --     self._curPlayingSoundId = 0
    -- end
    -- if string.IsNullOrEmpty(conf.PopBank) == false and string.IsNullOrEmpty(conf.PopEvent) == false then
    --     --TODO: self._curPlayingSoundId = KWwise.PlayEvent(conf.PopBank, conf.PopEvent)
    -- end
end

---隐藏对话气泡
---@param id number
---@return void
function SEUnitManager:HideBubbleDialog(id)
    local unit = self:GetUnit(id)
    if (unit) then
        local dialog = unit:GetDialog()
        if (dialog) then
            dialog.gameObject:SetActive(false)
        end
    end
    if (self._dialogLastTimes) then
        self._dialogLastTimes[id] = nil
    end
    if (self._dialogElapsedTimes) then
        self._dialogElapsedTimes[id] = nil
    end
end

---设置隐藏单位类型
---@param hiddenTypes number
---@return void
function SEUnitManager:SetHiddenUnitTypes(hiddenTypes)
    if (self._hiddenUnitTypes == hiddenTypes) then
        return
    end
    self._hiddenUnitTypes = hiddenTypes
    for _, unit in pairs(self._units) do
        unit:SetHidden(self:IsUnitTypeHidden(unit:GetType()))
    end
end

---指定类型单位是否隐藏
---@param type any
---@return boolean
function SEUnitManager:IsUnitTypeHidden(type)
    return (type & self._hiddenUnitTypes) == type
end

---清除隐藏单位类型
---@return void
function SEUnitManager:ClearHiddenUnitTypes()
    self:SetHiddenUnitTypes(0)
end

---添加到掉落表
---@param mineId number
---@param unitId number
---@return void
function SEUnitManager:AddToLootTable(mineId, unitId)
    self._lootTable[mineId] = unitId
end

---拾取完成
---@param mineId number
---@return void
function SEUnitManager:LootComplete(mineId)
    if (self._lootTable[mineId]) then
        local unit = self:GetUnit(self._lootTable[mineId])
        if (unit and unit:IsDead() and unit:IsWaitingForLoot()) then
            unit:ClearWaitingForLoot()
        end
        self._lootTable[mineId] = nil
    end
end

---是否为英雄
---@param unit SEUnit
function SEUnitManager:IsHero(unit)
	return unit._type == SEUnitType.Hero
    --return self._heroList[unit._id] ~= nil
end

--- 复活单位
---@param unit SEUnit
function SEUnitManager:Revive(unit)
    if (not unit:IsDead()) then return end
    self._deadUnits[unit._id] = nil
    self._units[unit._id] = unit
end

--- 设置英雄显隐
---@param hidden boolean
function SEUnitManager:SetHeroesHidden(hidden)
	if (not self._heroList) then return end
	for _, hero in pairs(self._heroList) do
		hero:SetHidden(hidden)
	end
end

--- 设置傀儡显隐
---@param hidden boolean
function SEUnitManager:SetPuppetsHidden(hidden)
	if (not self._unitTypes[SEUnitType.Puppet]) then return end
	for _, puppet in pairs(self._unitTypes[SEUnitType.Puppet]) do
		puppet:SetHidden(hidden)
	end
end

---@param unit SEUnit
---@return number
function SEUnitManager:GetBossIndex(unit)
	if (not unit) then return 0 end
	for index, id in pairs(self._bossIds) do
		if (unit._id == id) then return index end
	end
	return 0
end

---@return SEUnit|nil, number|nil
function SEUnitManager:GetFirstBossBySpawnerId(spawnerId)
    local unit, retIdx
    for index = 1, MAX_BOSS_COUNT do
        local id = self._bossIds[index]
        if not id then
            goto continue
        end
        unit = self:GetUnit(id)
        if not unit then
            goto continue
        end
        if not spawnerId then
            retIdx = index
            break
        end
        local entity = unit:GetEntity()
        if not entity or not entity.LevelEntityInfo then
            goto continue
        end
        local expeditionId = entity.LevelEntityInfo.LevelEntityId
        if expeditionId == 0 then
            goto continue
        end
        ---@type wds.Expedition
        local expedition = g_Game.DatabaseManager:GetEntity(expeditionId, DBEntityType.Expedition)
        if not expedition or not expedition.ExpeditionInfo or expedition.ExpeditionInfo.SpawnerId ~= spawnerId then
            goto continue
        end
        retIdx = index
        break
        ::continue::
    end
    return unit,retIdx
end

---@param index number
function SEUnitManager:IsBossAvailable(index)
	if (not index) then index = 1 end
	return self._bossIds[index] and self._bossIds[index] > 0
end

---@param index number
function SEUnitManager:ClearBossIndex(index)
	self._bossIds[index] = nil
end

--- 设置所有单位HUD显隐
---@param show boolean
function SEUnitManager:SetUnitHudShow(show)
	for _, unit in pairs(self._units) do
		---@type CS.SEUnitHud
		local hud = unit:GetHud()
		if (hud) then
			hud:SetActive(show)
		end
	end
end

function SEUnitManager:RefreshAllGetPetCatchHud()
    for i, v in pairs(self._units) do
        v:OnStateWrapper3Change()
    end
    for i, v in pairs(self._deadUnits) do
        v:OnStateWrapper3Change()
    end
end

--- 销毁所有英雄的HUD (不可恢复)
function SEUnitManager:DestroyAllHeroHuds()
	for _, hero in pairs(self._heroList) do
		local hud, hudHandle = hero:GetHud()
        if hudHandle then
            hudHandle:Delete()
        elseif (hud) then
			CS.UnityEngine.Object.Destroy(hud.gameObject)
		end
        hero:SetHud(nil, nil)
        local catchPetUnit,catchPetHudHandle  = hero:GetPetCatchHud()
        if catchPetUnit then
            catchPetUnit:SetShowIcon(false)
            catchPetUnit:ShowAsCatchTarget(nil)
            catchPetUnit:SetShowProgress(false)
        end
        if catchPetHudHandle then
            catchPetHudHandle:Delete()
        else
            local petCatchHudGo = hero:GetPetCatchHudGo()
            if Utils.IsNotNull(petCatchHudGo) then
                CS.UnityEngine.Object.Destroy(petCatchHudGo)
            end
        end
        hero:SetPetCatchHud(nil, nil)
	end
end

--- 销毁所有单位的HUD (不可恢复)
function SEUnitManager:DestroyAllUnitHuds()
	for _, unit in pairs(self._units) do
		local hud, hudHandle = unit:GetHud()
        if hudHandle then
            hudHandle:Delete()
        elseif (hud) then
			CS.UnityEngine.Object.Destroy(hud.gameObject)
		end
        unit:SetHud(nil, nil)
	end
end

---@return table<number, SEHero>
function SEUnitManager:GetHeroOrderedList()
	return self._heroOrderedList
end

function SEUnitManager:AddToHeroOrderedList(heroId, hero)
	for _, h in ipairs(self._heroOrderedList) do
		if (h._id == heroId) then return end
	end
	table.insert(self._heroOrderedList, hero)
end

function SEUnitManager:RemoveFromHeroOrderedList(heroId)
	for i = #self._heroOrderedList, 1, -1 do
		local hero = self._heroOrderedList[i]
		if (hero and hero._id == heroId) then
			table.remove(self._heroOrderedList, i)
			return
		end
	end
end

---@param unit SEUnit
function SEUnitManager:IsUnitValid(unit)
	if (not unit) then return false end
	if (not self._units[unit:GetID()] and not self._deadUnits[unit:GetID()]) then return false end
	return true
end

---@param center CS.UnityEngine.Vector3
---@param radius number
---@param filter number
---@param skillUser SEUnit
function SEUnitManager:CalcSkillCoverageCircle(center, radius, filter, skillUser)
	for _, unit in pairs(self._units) do
		local actor = unit:GetActor()
		if (self:IsSkillFiltered(unit, filter, skillUser)) then
			actor:SetSkillCovered(CS.TransformHelper.IsIntersectCircleAndCircle(center,
					radius,
					actor:GetPosition(),
					unit:GetBodySize()), filter ~= SKILL_FILTER_ENEMY)
		end
	end
end

---@param v1 CS.UnityEngine.Vector3
---@param v2 CS.UnityEngine.Vector3
---@param v3 CS.UnityEngine.Vector3
---@param center CS.UnityEngine.Vector3
---@param radius number
---@param filter number
---@param skillUser SEUnit
function SEUnitManager:CalcSkillCoverageRect(v1, v2, v3, filter, skillUser)
	for _, unit in pairs(self._units) do
		local actor = unit:GetActor()
		if (self:IsSkillFiltered(unit, filter, skillUser)) then
			actor:SetSkillCovered(CS.TransformHelper.IsIntersectRectangleWithCircle(
					v1, v2, v3,
					actor:GetPosition(),
					unit:GetBodySize()), filter ~= SKILL_FILTER_ENEMY)
		end
	end
end

---@param center CS.UnityEngine.Vector3
---@param dir CS.UnityEngine.Vector3
---@param radius number
---@param angle number
---@param filter number
---@param skillUser SEUnit
function SEUnitManager:CalcSkillCoverageFan(center, dir, angle, radius, filter, skillUser)
	for _, unit in pairs(self._units) do
		local actor = unit:GetActor()
		if (self:IsSkillFiltered(unit, filter, skillUser)) then
			actor:SetSkillCovered(CS.TransformHelper.IsIntersectSectorWithCircle(
					center, dir, angle, radius,
					actor:GetPosition(),
					unit:GetBodySize()), filter ~= SKILL_FILTER_ENEMY)
		end
	end
end

function SEUnitManager:ResetAllSkillCoverage()
	for _, unit in pairs(self._units) do
		unit:GetActor():SetSkillCovered(false)
	end
end

---@param unit SEUnit
---@param filter number
---@param skillUser SEUnit
function SEUnitManager:IsSkillFiltered(unit, filter, skillUser)
	if (not unit or unit:IsDead()) then return false end
	if (filter == SKILL_FILTER_ENEMY) then
		return unit:IsHostile()
	elseif (filter == SKILL_FILTER_FRIEND) then
		return unit:IsFriendly()
	elseif (filter == SKILL_FILTER_SELF) then
		return skillUser and unit._id == skillUser._id
	end
	return false
end

function SEUnitManager:UpdateUnitsFaction()
	for _, unit in pairs(self._units) do
		unit:UpdateFaction()
	end
end

--- 隐藏所有单位
---@param hidden boolean
function SEUnitManager:SetAllUnitsHidden(hidden)
	for _, unit in pairs(self._units) do
		unit:SetHidden(hidden)
	end
end

function SEUnitManager:AddHostileUnitCount(type)
	if (not self._hostileUnitCountByType[type]) then
		self._hostileUnitCountByType[type] = 0
	end
	self._hostileUnitCountByType[type] = self._hostileUnitCountByType[type] + 1
	self._hostileUnitCount = self._hostileUnitCount + 1
end

function SEUnitManager:RemoveHostileUnitCount(type)
	if (self._hostileUnitCountByType[type] and self._hostileUnitCountByType[type] > 0) then
		self._hostileUnitCountByType[type] = self._hostileUnitCountByType[type] - 1
	end
	if (self._hostileUnitCount > 0) then
		self._hostileUnitCount = self._hostileUnitCount - 1
	end
end

function SEUnitManager:GetHostileUnitCount(type)
	return self._hostileUnitCountByType[type] or self._hostileUnitCount
end

function SEUnitManager:AddFriendlyUnitCount(type)
	if (not self._friendlyUnitCountByType[type]) then
		self._friendlyUnitCountByType[type] = 0
	end
	self._friendlyUnitCountByType[type] = self._friendlyUnitCountByType[type] + 1
	self._friendlyUnitCount = self._friendlyUnitCount + 1
end

function SEUnitManager:RemoveFriendlyUnitCount(type)
	if (self._friendlyUnitCountByType[type] and self._friendlyUnitCountByType[type] > 0) then
		self._friendlyUnitCountByType[type] = self._friendlyUnitCountByType[type] - 1
	end
	if (self._friendlyUnitCount > 0) then
		self._friendlyUnitCount = self._friendlyUnitCount - 1
	end
end

function SEUnitManager:GetFriendlyUnitCount(type)
	return self._friendlyUnitCountByType[type] or self._friendlyUnitCount
end

--- 查找第一个敌对单位
---@return SEUnit
function SEUnitManager:GetFirstHostileUnit()
	for _, unit in pairs(self._units) do
		if (unit and not unit:IsDead() and unit:IsHostile()) then
			return unit
		end
	end
end

--- 获取指定点指定半径内最近的单位
---@param pos CS.UnityEngine.Vector3
---@param radius number
---@param hostile boolean
---@return SEUnit, number
function SEUnitManager:GetNearestUnit(pos, radius, hostile)
	local minDistSqr = 99999999
	local result = nil
	for _, unit in pairs(self._units) do
		if (unit and not unit:IsDead() and unit:IsHostile() == hostile) then
			---@type CS.UnityEngine.Vector3
			local vec = pos - unit:GetActor():GetPosition()
			local distSqr = vec.sqrMagnitude
			if (distSqr < minDistSqr and distSqr < radius * radius) then
				minDistSqr = distSqr
				result = unit
			end
		end
	end
	return result, minDistSqr
end

function SEUnitManager:GetExtraScaleValue()
    return self._extraScaleValue or 1
end

function SEUnitManager:NotInCityModeOrAllowShowCatchHud()
    if self:GetEnvironment():GetEnvMode() ~= SEEnvironmentModeType.CityScene then return true end
    return self:GetEnvironment():CityModeInExploring()
end

return SEUnitManager
