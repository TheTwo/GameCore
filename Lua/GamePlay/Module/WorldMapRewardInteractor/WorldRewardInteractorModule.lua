---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hao.wu.ss
--- DateTime: 2023/6/27 14:06
---
local BaseModule = require('BaseModule')
local ModuleRefer = require('ModuleRefer')
local DBEntityPath = require('DBEntityPath')
local ConfigRefer = require('ConfigRefer')
local Delegate = require('Delegate')
local KingdomMapUtils = require("KingdomMapUtils")
local PooledGameObjectCreateHelper = CS.DragonReborn.AssetTool.PooledGameObjectCreateHelper
local Utils = require("Utils")
local MapUtils = CS.Grid.MapUtils
local Vector2Short = CS.DragonReborn.Vector2Short
local TouchMenuBasicInfoDatum = require("TouchMenuBasicInfoDatum")
local TouchMenuBasicInfoDatumSe = require("TouchMenuBasicInfoDatumSe")
local TouchMenuMainBtnDatum = require("TouchMenuMainBtnDatum")
local TouchMenuHelper = require("TouchMenuHelper")
local I18N = require("I18N")
local TimerUtility = require("TimerUtility")
local UIMediatorNames = require("UIMediatorNames")
local OnChangeHelperRTBox = require("OnChangeHelperRTBox")
local ManualResourceConst = require("ManualResourceConst")

local LAYER_KINGDOM = 13
local INT_DATA = 111
local SHOW_NEXT_DELAY = 1
local NEXT_GOTO_TIME = 0.3
local NEXT_ZOOM_TIME = 0.3
local NEXT_POPUP_DELAY = 0.5
local BRANCH_SELECT_DEFAULT_ID = 1099

---@class WorldRewardInteractorModule
local WorldRewardInteractorModule = class('WorldRewardInteractorModule', BaseModule)
function WorldRewardInteractorModule:OnRegister()
    ---@type CS.UnityEngine.GameObject
    self._vfxGo = nil
    self:LoadConfig()
end

function WorldRewardInteractorModule:OnRemove()
    if (Utils.IsNotNull(self._vfxGo)) then
        CS.UnityEngine.Object.Destroy(self._vfxGo)
        self._vfxGo = nil
    end
    self:ShutDown()
end

function WorldRewardInteractorModule:LoadConfig()
    SHOW_NEXT_DELAY = ConfigRefer.ConstMain.RadarWorldRewardNextTipDelay and ConfigRefer.ConstMain:RadarWorldRewardNextTipDelay() or SHOW_NEXT_DELAY
    NEXT_GOTO_TIME = ConfigRefer.ConstMain.RadarWorldRewardNextGotoTime and ConfigRefer.ConstMain:RadarWorldRewardNextGotoTime() or NEXT_GOTO_TIME
    NEXT_ZOOM_TIME = ConfigRefer.ConstMain.RadarWorldRewardNextZoomTime and ConfigRefer.ConstMain:RadarWorldRewardNextZoomTime() or NEXT_ZOOM_TIME
    NEXT_POPUP_DELAY = ConfigRefer.ConstMain.RadarWorldRewardNextPopupDelay and ConfigRefer.ConstMain:RadarWorldRewardNextPopupDelay() or NEXT_POPUP_DELAY
end

function WorldRewardInteractorModule:Setup()
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.PlayerRtBox.MsgPath, Delegate.GetOrCreate(self, self.OnUpdateInteractor))
    self:InitAllInteractor()
    self:VfxWarmUp()
end

function WorldRewardInteractorModule:ShutDown()
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.PlayerRtBox.MsgPath, Delegate.GetOrCreate(self, self.OnUpdateInteractor))
    if self._createHelper then
        self._createHelper:DeleteAll()
        self._createHelper = nil
    end
end

function WorldRewardInteractorModule:RestoreAllUnits()
    -- self:InitAllInteractor()
end

function WorldRewardInteractorModule:VfxWarmUp()
    if (Utils.IsNull(self._vfxGo)) then
        self._createHelper = PooledGameObjectCreateHelper.Create("WorldRewardInteractor")
        self._createHelper:Create(ManualResourceConst.vfx_w_bigmap_cai_ji, KingdomMapUtils.GetMapSystem().Parent, function(go)
            self._vfxGo = go
            go:SetLayerRecursive(LAYER_KINGDOM)
            go:SetActive(false)
        end)
    end
end

function WorldRewardInteractorModule:InitAllInteractor()
    self:RemoveAllInteractors()
    self:AddAllInteractors()
end

function WorldRewardInteractorModule:AddAllInteractors()
    local table = self:GetAllInteractors()
    for k, v in pairs(table) do
        self:AddInteractor(v)
    end
end

function WorldRewardInteractorModule:RemoveAllInteractors()
    local table = self:GetAllInteractors()
    for _, v in pairs(table) do
        self:RemoveInteractor(v)
    end
end

function WorldRewardInteractorModule:CanShowInteractor(lod)
    return KingdomMapUtils.InMapNormalLod(lod) or KingdomMapUtils.InMapLowLod(lod)
end

function WorldRewardInteractorModule:OnUpdateInteractor(entity, changedData)
    local addMap, removeMap = OnChangeHelperRTBox.GenerateMapFieldChangeMap(changedData.RtBoxes)
    if addMap or removeMap then
        if removeMap then
            for k, v in pairs(removeMap) do
                self:RemoveInteractor(v)
            end
        end

        if addMap then
            for k, v in pairs(addMap) do
                self:AddInteractor(v)
            end
        end
    end
end

function WorldRewardInteractorModule:GetWorldPos(tilePosX, tilePosY)
    local x = math.floor(tilePosX)
    local z = math.floor(tilePosY)
    return MapUtils.CalculateCoordToTerrainPosition(x, z, KingdomMapUtils.GetMapSystem()), Vector2Short(x, z)
end

---@param data wds.PlayerRtBox
function WorldRewardInteractorModule:AddInteractor(data)
    -- 添加所有data相关的数据
    local cfg = ConfigRefer.MistEvent:Find(data.ConfigId)
    if (cfg) then
        local artUiConf = ConfigRefer.ArtResourceUI:Find(cfg:PopupIcon())
        if (artUiConf) then
            data.popupIcon = artUiConf:Path()
        end
    end

    local artResConf = ConfigRefer.ArtResource:Find(cfg:Model())
    local model = artResConf:Path()
    local modelScale = artResConf:ModelScale()

    -- -- 如果是选择宝箱则读BranchSelect中配置的模型
    -- if cfg:IsBranchSelect() then
    --     if not data.branchSelectID or data.branchSelectID <= 0 then
    --         data.branchSelectID = ModuleRefer.WorldTrendModule:GetRandomBranchSelectID()
    --     end
    --     -- 保底措施，如果当前返回的branchSelectID为0，则显示保底配置1099
    --     if data.branchSelectID == 0 then
    --         data.branchSelectID = BRANCH_SELECT_DEFAULT_ID
    --     end
    --     local branchSelectConfig = ConfigRefer.BranchSelect:Find(data.branchSelectID)
    --     if branchSelectConfig then
    --         artResConf = ConfigRefer.ArtResource:Find(branchSelectConfig:Model())
    --         if artResConf then
    --             model = artResConf:Path()
    --             modelScale = artResConf:ModelScale()
    --         end
    --     end
    -- else
    --     artResConf = ConfigRefer.ArtResource:Find(cfg:Model())
    --     model = artResConf:Path()
    --     modelScale = artResConf:ModelScale()
    -- end
    data.model = model
    data.modelScale = modelScale
    data.ID = data.RtBoxId

    local buildingPosX, buildingPosY = KingdomMapUtils.ParseCoordinate(data.Pos.X, data.Pos.Y)
    local affectX = buildingPosX
    local affectY = buildingPosY

    -- TODO: 确认宝箱sizeXY affectSizeXY
    local sizeX = 2
    local sizeY = 2

    ModuleRefer.MapUnitModule:AddUnit(wds.PlayerRtBox.TypeHash, data.ID, buildingPosX, buildingPosY, sizeX, sizeY, affectX, affectY, sizeX, sizeY, true)
end

---@param data wds.PlayerRtBox
function WorldRewardInteractorModule:RemoveInteractor(data)
    data.ID = data.RtBoxId
    ModuleRefer.MapUnitModule:RemoveUnit(wds.PlayerRtBox.TypeHash, data.ID, true)
end

function WorldRewardInteractorModule:GetInteractorData(id)
    local res = self:GetAllInteractors()
    return res[id]
end

function WorldRewardInteractorModule:GetAllInteractors()
    local player = ModuleRefer.PlayerModule:GetPlayer()
    if not player then
        return {}
    end
    local res = ModuleRefer.PlayerModule:GetPlayer().PlayerWrapper2.PlayerRtBox
    return res and res.RtBoxes or {}
end

---@param self WorldRewardInteractorModule
function WorldRewardInteractorModule:GetIntData()
    return INT_DATA
end

-- 点击事件
function WorldRewardInteractorModule:ShowMenu(data)
    if (not data) then
        return
    end
    -- g_Game.EventManager:TriggerEvent(EventConst.MAP_CLICK_REWARD_INTERACTOR, data.objectData)
    ---@type wds.MistTaskInfo
    local cfg = ConfigRefer.MistEvent:Find(data.ConfigId)

    local name = I18N.Get(cfg:Name())

    local image = data.popupIcon
    local coord = KingdomMapUtils.CoordToXYString(math.floor(data.Pos.X), math.floor(data.Pos.Y))
    local basicInfo = nil

    local btn = TouchMenuMainBtnDatum.new()
    if string.IsNullOrEmpty(cfg:ButtonText()) then
        btn.label = I18N.Get("Radar_mist_pickup")
    else
        btn.label = I18N.Get(cfg:ButtonText())
    end
    if cfg:IsBranchSelect() then
        basicInfo = TouchMenuBasicInfoDatum.new(name, image, {x = math.floor(data.Pos.X), y = math.floor(data.Pos.Y)})
        btn.onClick = function()
            local param = ModuleRefer.StoryModule:CreateStoryChoiceProviderParam(data, self._vfxGo)
            g_Game.UIManager:Open(UIMediatorNames.StoryDialogUIMediator, param)
        end
    else
        basicInfo = TouchMenuBasicInfoDatum.new(name, image, coord)
        btn.onClick = function()
            local msg = require("ReceiveMistEventRewardParameter").new()
            msg.args.MistId = data.RtBoxId
            msg:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, suc, resp)
                if (suc) then
                    if (Utils.IsNotNull(self._vfxGo)) then
                        self._vfxGo:SetActive(false)
                        self._vfxGo.transform.position = self:GetWorldPos(data.Pos.X, data.Pos.Y)
                        self._vfxGo:SetActive(true)
                    end
                    TimerUtility.DelayExecute(function()
                        self:CheckNext(data)
                    end, SHOW_NEXT_DELAY)
                end
            end)
        end
    end

    local btnGroup = TouchMenuHelper.GetRecommendButtonGroupDataArray({btn})
    local uiDatum = TouchMenuHelper.GetSinglePageUIDatum(basicInfo, nil, btnGroup):SetPos(self:GetWorldPos(data.Pos.X, data.Pos.Y), 20):SetClickEmptyClose(true)
    ModuleRefer.KingdomTouchInfoModule:Show(uiDatum)
end

function WorldRewardInteractorModule:GetNextInteractorData()
    local table = self:GetAllInteractors()

    -- 返回第一个元素
    for k, v in pairs(table) do
        return v
    end
    return nil
end

-- 去找下一个宝箱
function WorldRewardInteractorModule:CheckNext(data)
    if (not KingdomMapUtils.IsMapState()) then
        return
    end
    local nextData = WorldRewardInteractorModule:GetNextInteractorData()

    if (nextData) then
        ---@type wds.MistTaskInfo
        local info = nextData
        local cfg = ConfigRefer.MistEvent:Find(info.ConfigId)

        if (cfg) then
            local name = I18N.Get(cfg:Name())
            local image = nextData.popupIcon
            local desc = I18N.Get("Radar_mist_goto")
            local basicInfo = TouchMenuBasicInfoDatumSe.new(image, name, desc)
            local btn = TouchMenuMainBtnDatum.new()
            btn.label = I18N.Get("world_qianwang")
            btn.onClick = function()
                if nextData then
                    KingdomMapUtils.MoveAndZoomCamera(self:GetWorldPos(nextData.Pos.X, nextData.Pos.Y), KingdomMapUtils.GetCameraLodData().mapCameraEnterSize, NEXT_GOTO_TIME, NEXT_ZOOM_TIME, nil,
                                                      function()
                        TimerUtility.DelayExecute(function()
                            self:ShowMenu(nextData)
                        end, NEXT_POPUP_DELAY)
                    end)
                else
                    ModuleRefer.KingdomTouchInfoModule:Hide()
                end
            end
            local btnGroup = TouchMenuHelper.GetRecommendButtonGroupDataArray({btn})
            local uiDatum = TouchMenuHelper.GetSinglePageUIDatum(basicInfo, nil, btnGroup):SetPos(self:GetWorldPos(data.Pos.X, data.Pos.Y), -20):SetClickEmptyClose(true)
            ModuleRefer.KingdomTouchInfoModule:Show(uiDatum)
        end
    end
end

return WorldRewardInteractorModule
