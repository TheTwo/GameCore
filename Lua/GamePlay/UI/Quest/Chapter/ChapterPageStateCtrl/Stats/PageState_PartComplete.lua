---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/2/17 21:08
---
local PageBaseState = require('PageBaseState')
local QuestStateConstant = require('QuestStateConstant')
local ModuleRefer = require('ModuleRefer')
local Delegate = require('Delegate')
local TimerUtility = require('TimerUtility')
local QueuedTask = require('QueuedTask')
local UIMediatorNames = require('UIMediatorNames')
local EventConst = require('EventConst')
---@class PageState_PartComplete : PageBaseState
local PageState_PartComplete = class('PageState_PartComplete',PageBaseState)

function PageState_PartComplete:ctor(module,viewer,stateMachine)
    PageBaseState.ctor(self,module,viewer,stateMachine)
end

function PageState_PartComplete.GetName()
    return 'PageState_PartComplete'
end


function PageState_PartComplete:In()
    --if data == nil then return end
    local lockable = self.fsm:ReadBlackboard('lockable',true)
    if lockable ~= nil then        
        self.module:RequestChapterReward(lockable)
    end
end

function PageState_PartComplete:Out()
    
end


function PageState_PartComplete:Next()
    --if data == nil or data.cmd == nil then return nil end
    local cmd = self.fsm:ReadBlackboard('cmd',true)
    if cmd == QuestStateConstant.StateCmd.PartReward then
        if self:PlayEndStory( function() 
            if self.fsm.curState and self.fsm.curState.GetName() == self.GetName() then
                self.fsm:WriteBlackboard('cmd',QuestStateConstant.StateCmd.PartEndStory)
                self.fsm:Next(true)
            else
                if self.module:HasChapterGroupReward() then
                    g_Game.UIManager:SetInputEnabled(false)
                    TimerUtility.DelayExecuteInFrame(function()
                        g_Game.UIManager:SetInputEnabled(true)
                        self.module.parentModule:OpenMissionWindow()
                    end,2)
                end
            end
        end) then
            return nil
        else
            return self:GetNextState()
        end
    elseif cmd == QuestStateConstant.StateCmd.PartEndStory then
        return self:GetNextState()
    end
    return nil
end

function PageState_PartComplete:GetNextState()
    if self.module:HasChapterGroupReward() then
        return QuestStateConstant.StateName.GroupComplete
    else
        self.fsm:WriteBlackboard('RefreshPart',true)
        return QuestStateConstant.StateName.PartNormal
    end
end


--播放剧情
function PageState_PartComplete:PlayEndStory(callback)
    local config = self.module:LastChapterConfig()
    if not config then
        config = self.module:CurrentChapterConfig()
    end
    local storyId = (config ~= nil) and config:EndStory() or nil
    if storyId and storyId > 0 then
        g_Game.UIManager:CloseByName(require('UIMediatorNames').QuestUIMediator)
        ModuleRefer.StoryModule:StoryStart(storyId ,function(id,result)
            --if id ~= storyId then return end
            --if result == require('StartStoryCallbackResult').Success then
                if callback then callback() end
            --end
        end)
        return true
    end

    return false
end

return PageState_PartComplete