---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Admin.
--- DateTime: 2022/10/26 14:12
---
local ConfigRefer = require("ConfigRefer")
local AllianceAuthorityItem = require("AllianceAuthorityItem")
local Color = CS.UnityEngine.Color
local I18N = require("I18N")
local ArtResourceUtils = require("ArtResourceUtils")

---@class AllianceModuleDefine
local AllianceModuleDefine = {}

AllianceModuleDefine.UIEntry = {
    ALLIANCE_HUD_ENTRY_CLICK = "ALLIANCE_HUD_ENTRY_CLICK"
}

AllianceModuleDefine.LeaderRank = 5
AllianceModuleDefine.OfficerRank = 4
AllianceModuleDefine.R3Rank = 3
AllianceModuleDefine.R2lRank = 2
AllianceModuleDefine.R1Rank = 1
AllianceModuleDefine.JoinWithoutApply = wds.AllianceJoinType.AllianceJoinTypeEvery
AllianceModuleDefine.JoinNeedApply = wds.AllianceJoinType.AllianceJoinTypeVerify
AllianceModuleDefine.RKeys = {
    [1] = "R1",
    [2] = "R2",
    [3] = "R3",
    [4] = "R4",
    [5] = "R5",
}
AllianceModuleDefine.DefaultRColor = Color(0.741,0.725,0.714,1)
AllianceModuleDefine.RColor = {
    [1] = AllianceModuleDefine.DefaultRColor,
    [2] = AllianceModuleDefine.DefaultRColor,
    [3] = AllianceModuleDefine.DefaultRColor,
    [4] = Color(0.847,0.667,0.914,1),
    [5] = Color(1.0,0.812,0.443,1),
}

AllianceModuleDefine.NotifyNodeType = {
    Main = "AllianceNotifyNode_main",
    War = "AllianceNotifyNode_war",
    Member = "AllianceNotifyNode_member",
    Other = "AllianceNotifyNode_other",
    Shop = "AllianceNotifyNode_shop",
    Territory = "AllianceNotifyNode_territory",
    Tech = "AllianceNotifyNode_tech",
    TechUpdate = "AllianceNotifyNode_tech_update",
    LabelEntry = "AllianceNotifyNode_Label_Entry",
    ImpeachmentEntry = "AllianceNotifyNode_Impeachment_Entry",
    GiftEntry = "AllianceNotifyNode_Gift_Entry",
    HelpEntry = "AllianceNotifyNode_Help_Entry",
    BehemothEntry = "AllianceNotifyNode_Behemoth_Entry",
    TerritoryDailyGift = "AllianceNotifyNode_Territory_Gift",

    MemberApplies = "AllianceNotifyNode_member_applies",
    
    NeedJoin = "AllianceNotifyNode_need_join",
    
    Notice = "AllianceNotifyNode_notice",
    
    WarTabRally = "AllianceNotifyNode_war_tab_rally",
    WarTabWar = "AllianceNotifyNode_war_tab_war",
    WarTabSiege = "AllianceNotifyNode_war_tab_siege",
    
    TechTabAlliance = "AllianceNotifyNode_tech_tab_alliance",
    TechTabProduction = "AllianceNotifyNode_tech_tab_production",
    TechTabFight = "AllianceNotifyNode_tech_tab_fight",

    LabelUnread = "AllianceNotifyNode_Label_Unread_%s",

    BehemothListEntry = "AllianceNotifyNode_Behemoth_List_Entry",

    TerritoryMoveCity = "AllianceNotifyNode_Territory_MoveCity",
}

AllianceModuleDefine.AllianceRankIcons = {
    'sp_league_icon_r1',
    'sp_league_icon_r2',
    'sp_league_icon_r3',
    'sp_league_icon_r4',
    'sp_league_icon_r5',
}

AllianceModuleDefine.BehemothCageJumpCoordEnterCameraSize = 2000

AllianceModuleDefine.AllianceAuthorityName = nil

---@param title AllianceTitleConfigCell
function AllianceModuleDefine.GetAllianceTitleIcon(title)
    if title then
        local icon = ArtResourceUtils.GetUIItem(title:Icon())
        if not string.IsNullOrEmpty(icon) then
            return icon
        end
    end
    return "sp_icon_missing"
end

---@param flag wrpc.AllianceFlag
---@return string,string,CS.UnityEngine.Color
function AllianceModuleDefine.GetAllianceFlagDetail(flag)
    return AllianceModuleDefine.GetAllianceFlagDetailByValue(flag.BadgeAppearance, flag.BadgePattern, flag.TerritoryColor)
end

---@param appearance number
---@param pattern number
---@param territoryColor number
function AllianceModuleDefine.GetAllianceFlagDetailByValue(appearance, pattern, territoryColor)
    local badgeAppearanceConfigCell = ConfigRefer.AllianceBadgeAppearance:Find(appearance)
    local badgePatternConfigCell = ConfigRefer.AllianceBadgePattern:Find(pattern)
    local allianceTerritoryColorConfigCell = ConfigRefer.AllianceTerritoryColor:Find(territoryColor)
    local badgeAppearance = badgeAppearanceConfigCell and ArtResourceUtils.GetUIItem(badgeAppearanceConfigCell:Asset()) or "sp_icon_missing"
    local badgePattern = badgePatternConfigCell and ArtResourceUtils.GetUIItem(badgePatternConfigCell:Asset()) or "sp_icon_missing"
    local parseSuccess
    local color
    if allianceTerritoryColorConfigCell then
        parseSuccess,color = CS.UnityEngine.ColorUtility.TryParseHtmlString(allianceTerritoryColorConfigCell:Color())
    end
    if not parseSuccess then
        color = CS.UnityEngine.Color.white
    end
    return badgeAppearance,badgePattern,color
end

---@param authorityItemEnum number @from AllianceAuthorityItem
function AllianceModuleDefine.GetAuthorityName(authorityItemEnum)
    if not AllianceModuleDefine.AllianceAuthorityName then
        AllianceModuleDefine.AllianceAuthorityName = {}
        for _, v in ConfigRefer.AllianceAuthority:ipairs() do
            AllianceModuleDefine.AllianceAuthorityName[v:KeyString()] = v:KeyId()
        end
    end
    local RI18NKey = AllianceModuleDefine.AllianceAuthorityName[authorityItemEnum]
    if not string.IsNullOrEmpty(RI18NKey) then
        return I18N.Get(RI18NKey)
    end
    for i, v in pairs(AllianceAuthorityItem) do
        if v == authorityItemEnum then
            return string.format("#%s", i)
        end
    end
    return string.Empty
end

---@param rank number @rang[1,5]
function AllianceModuleDefine.GetRankName(rank)
    return I18N.Get(ConfigRefer.AllianceRank:Find(rank):KeyId())
end

---@param rank number @rang[1,5]
function AllianceModuleDefine.GetRankIcon(rank)
    local rankConfig = ConfigRefer.AllianceRank:Find(rank)
    if rankConfig then
        local icon = ArtResourceUtils.GetUIItem(rankConfig:Icon())
        if not string.IsNullOrEmpty(icon) then
            return icon
        end
    end
    return "sp_icon_missing"
end

function AllianceModuleDefine.GetNotifyKeyForNotice(id)
    return string.format("Alliance_Notice_id:%s", id)
end

---@param behemoth AllianceBehemoth
function AllianceModuleDefine.GetNotifyKeyForBehemoth(behemoth)
    return string.format("Alliance_behemoth_id:%s", behemoth:GetBuildingEntityId())
end

function AllianceModuleDefine.GetLastNoticeSaveTime()
    local t = g_Game.PlayerPrefsEx:GetStringByUid("Alliance_Notice_Last_READ_TIME", "")
    if string.IsNullOrEmpty(t) then
        return 0
    end
    return tonumber(t)
end

---@param rank number
---@return string
function AllianceModuleDefine.GetAllianceRankIconName(rank)
    return AllianceModuleDefine.AllianceRankIcons[rank]
end

---@param count number
---@param label CS.UnityEngine.UI.Text
function AllianceModuleDefine.NotifyCountAsNew(count, label)
    label.text = "NEW"
end

function AllianceModuleDefine.SetLastNoticeSaveTime(nowTime)
    g_Game.PlayerPrefsEx:SetStringByUid("Alliance_Notice_Last_READ_TIME", tostring(nowTime))
end

function AllianceModuleDefine.ClearLastNoticeSaveTime()
    g_Game.PlayerPrefsEx:DeleteKeyByUid("Alliance_Notice_Last_READ_TIME")
end


---@param langId number @Language.csv id
---@return string
function AllianceModuleDefine.GetConfigLangaugeStr(langId)
    if langId == 0 then
        return I18N.Get("alliance_create_language_type")
    end
    local lang = ConfigRefer.Language:Find(langId);
    return I18N.Get(lang:LanguageKey())
end

---@return AllianceActiveConfigCell
function AllianceModuleDefine.GetAllianceActiveScoreLevelConfig(sumScore)
    local config = ConfigRefer.AllianceActive
    ---@type AllianceActiveConfigCell
    local matchOne
    for _, value in config:ipairs() do
        if not matchOne or sumScore >= value:Value() then
            matchOne = value
        else
            break
        end
    end
    return matchOne
end

AllianceModuleDefine.AllianceCurrencyItemId = 12
AllianceModuleDefine.AllianceTechExpItemId = 14
AllianceModuleDefine.AllianceCurrencyConfigCurrencyId = 1
AllianceModuleDefine.AllianceDeclaration = 51031 --宣战令道具ID
return AllianceModuleDefine