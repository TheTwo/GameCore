---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hao.wu.ss
--- DateTime: 2023/3/3 16:03
---
--- 文档:
---	https://funplus.yuque.com/akvoyw/aq7gys/gs598sz0d840wdlt
---	https://funplus.yuque.com/akvoyw/aq7gys/pz3eq1dc22kpobrf
--- https://funplus.yuque.com/akvoyw/aq7gys/isagdhwy2ytsygyg
---

local DEBUG = true

local BaseModule = require('BaseModule')
local ModuleRefer = require('ModuleRefer')
local Delegate = require('Delegate')
local EventConst = require('EventConst')

--- 聊天SDK模块
---@class ChatSDKModule
local ChatSDKModule = class('ChatSDKModule', BaseModule)

local ChatSdk = CS.FunPlusChat.FPChatSdk
local ChatSdkWrapper = CS.ChatSdkWrapper
local ChatErrorCode = CS.FunPlusChat.Models.ChatErrorCode

function ChatSDKModule:OnRegister()
	if (not USE_CHATSDK) then
		g_Logger.TraceChannel("Chat", "未开启聊天功能")
		return
	end
	g_Game.EventManager:AddListener(EventConst.RELOGIN_SUCCESS, Delegate.GetOrCreate(self,self.ReconnectChatSDK))
end

function ChatSDKModule:OnRemove()
	if (not USE_CHATSDK) then return end

	self:Logout()
	g_Game.EventManager:RemoveListener(EventConst.RELOGIN_SUCCESS, Delegate.GetOrCreate(self,self.ReconnectChatSDK))
end

function ChatSDKModule:ReconnectChatSDK()
	self:Logout()
	self:InitSdk()
	ModuleRefer.ChatModule:RefreshHud()
end

--- 初始化SDK
---@param self ChatSDKModule
function ChatSDKModule:InitSdk()
	g_Logger.TraceChannel("Chat", "初始化聊天SDK...")
	if (not USE_CHATSDK) then return end

	-- 全局回调
	---@type CS.ChatMessageReceiver
	self._messageReceiver = CS.ChatSdkWrapper.Receiver
	self._messageReceiver.onConnectChanged = Delegate.GetOrCreate(self, self.OnConnectChanged)
	self._messageReceiver.onLogout = Delegate.GetOrCreate(self, self.OnLogout)
	self._messageReceiver.onMessageChanged = Delegate.GetOrCreate(self, self.OnMessageChanged)
	self._messageReceiver.onSessionChanged = Delegate.GetOrCreate(self, self.OnSessionChanged)
	self._messageReceiver.onSessionListChanged = Delegate.GetOrCreate(self, self.OnSessionListChanged)
	ChatSdk.RegisterMessageReceiver(self._messageReceiver)

	-- 登录
	local player = ModuleRefer.PlayerModule:GetPlayer()
	if not player then
		return
	end
	local chatInfo = player.PlayerWrapper2.ChatInfo
	local config = CS.FunPlusChat.Models.SdkConfig()
	config.AutoConnect = false
	config.LogEnable = DEBUG
	config.ChatProjectId = chatInfo.ProjectID
	config.ChatSecretKey = chatInfo.ClientSecretKey
	config.ChatServerUrl = chatInfo.ChatServerUrl
	config.GroupCanEmpty = DEBUG
	config.UserInfo = self:GetUserInfo()
	config.TranslateConfig = self:GetTranslateConfig()
	ChatSdkWrapper.InitHandler = Delegate.GetOrCreate(self, self.InitCallback)
	g_Logger.TraceChannel("Chat", "发送聊天初始化请求...")
	ChatSdkWrapper.Start(config, g_Game.ServerTime:GetServerTimestampInMilliseconds())
end

--- 获取: 玩家登录信息
---@param self ChatSDKModule
---@return CS.FunPlusChat.Models.GameUser
function ChatSDKModule:GetUserInfo()
	local player = ModuleRefer.PlayerModule:GetPlayer()
	local chatInfo = player.PlayerWrapper2.ChatInfo
	local gameUser = CS.FunPlusChat.Models.GameUser()
	gameUser.GameToken = chatInfo.UserToken
	gameUser.Uid = player.ID
	gameUser.Avatar = tostring(player.Basics.PortraitInfo.PlayerPortrait)
	local extInfoStr, extInfo = ModuleRefer.ChatModule:EncodePlayerExtInfo(player)
	gameUser.ExtInfo = extInfoStr
	gameUser.Nickname = ModuleRefer.ChatModule:GetNicknameFromExtInfo(extInfo, player.ID)
	g_Logger.TraceChannel("Chat", "玩家昵称: %s", gameUser.Nickname)
	gameUser.Lang = self:GetUserLanguage()
	g_Logger.TraceChannel("Chat", "玩家语种: %s", gameUser.Lang)
	return gameUser
end

--- 更新: 玩家登录信息
---@param self ChatSDKModule
---@return CS.FunPlusChat.Models.GameUser
function ChatSDKModule:UpdateUserInfo()
	local gameUser = self:GetUserInfo()
	ChatSdk.UpdateUserInfo(gameUser, function()
		g_Game.EventManager:TriggerEvent(EventConst.CHAT_SESSION_LIST_UPDATED)
	end)
end

function ChatSDKModule:GetUserLanguage()
	local languageCode = ModuleRefer.GameSettingModule:GetLanguageCode()
	return self:GetLanguageEnumFromCode(languageCode)
end

function ChatSDKModule:RecordTranslationSdkInfo(url, secretKey)
	self.url = url
	self.secretKey = secretKey
end

function ChatSDKModule:GetTranslateConfigUrl()
	if string.IsNullOrEmpty(self.url) then
		return "http://ssr-dev-translate.kingsgroupgames.com:8080"
	else
		return self.url
	end
end

function ChatSDKModule:GetTranslateConfigSecretKey()
	if string.IsNullOrEmpty(self.secretKey) then
		return "GEELa4nC5y8UeVR9FHfS9sodkQhUtfPV"
	else
		return self.secretKey
	end
end

function ChatSDKModule:GetTranslateConfig()
	local translateConfig = CS.FunPlusChat.Models.TranslateConfig()
	translateConfig.Url = self:GetTranslateConfigUrl()
	translateConfig.SecretKey = self:GetTranslateConfigSecretKey()
	return translateConfig
end

--- 注销
---@param self ChatSDKModule
---@param reconnect boolean
function ChatSDKModule:Logout(reconnect)
	if (not USE_CHATSDK) then return end

	ChatSdk.Logout()

	if self._messageReceiver then
		self._messageReceiver.onConnectChanged = nil
		self._messageReceiver.onLogout = nil
		self._messageReceiver.onMessageChanged = nil
		self._messageReceiver.onSessionChanged = nil
		self._messageReceiver.onSessionListChanged = nil
	end
	ChatSdkWrapper.Dispose()

	-- 退出
	if (not reconnect) then
		ChatSdk.Destory()
		---TODO: 重登录逻辑
	end
end

---@param self ChatSdkModule
---@return boolean
function ChatSDKModule:Enabled()
	return USE_CHATSDK
end

--- 聊天是否可用
---@param self ChatSDKModule
---@return boolean
function ChatSDKModule:Available()
	return (USE_CHATSDK and self._loggedIn)
end

--- 是否已登录
---@param self ChatSDKModule
---@return boolean
function ChatSDKModule:IsLogin()
	return self._loggedIn
end

--- 网络连接变化时回调，用于网络异常状态提示
---@param self ChatSDKModule
---@param isConnected boolean 是否连接
---@param errCode number 错误码
function ChatSDKModule:OnConnectChanged(isConnected, errCode)
	g_Logger.TraceChannel("Chat", "OnConnectChanged, isConnected: %s, errCode: %s", isConnected, errCode)
end

--- 登出回调，当始终无法登录成功时回调，需要重新初始化
---@param self ChatSDKModule
function ChatSDKModule:OnLogout()
	self._loggedIn = false
	---TODO: 重连机制
end

--- 当消息状态改变时回调，发送消息也会回调
---@param self ChatSDKModule
---@param message CS.FunPlusChat.Models.FPMessage 消息
function ChatSDKModule:OnMessageChanged(message)
	ModuleRefer.ChatModule:UpdateMessage(message)
end

--- 当会话数据改变时回调，最后一条消息变化时回调
---@param self ChatSDKModule
---@param session CS.FunPlusChat.Models.FPSession 会话
function ChatSDKModule:OnSessionChanged(session)
	ModuleRefer.ChatModule:UpdateSession(session)
end

--- 当会话列表变化时回调，会话新增或被删除时回调
---@param self ChatSDKModule
---@param sessionList CS.System.Collections.Generic.List<CS.FunPlusChat.Models.FPSession> 会话列表
function ChatSDKModule:OnSessionListChanged(sessionList)
	ModuleRefer.ChatModule:UpdateSessionList(sessionList)
end

--- 初始化回调
---@param self ChatSDKModule
---@param code number 返回代码
---@param messageList CS.System.Collections.Generic.List<CS.FunPlusChat.Models.FPMessage> 消息列表
function ChatSDKModule:InitCallback(code, messageList)
	if (code == ChatErrorCode.Ok) then
		self._loggedIn = true
		ModuleRefer.ChatModule:RefreshHud()
	else
		self._loggedIn = false
		ModuleRefer.ChatModule:RefreshHud()
		g_Logger.Error("聊天登录失败! 错误: %s", code)
		-- 尝试重连
		g_Logger.Trace("聊天: 尝试重连...")
		require("OpenChatWindowParameter").new():Send()
	end
end

--- 发送消息
---@param self ChatSDKModule
---@param msg CS.FunPlusChat.Models.FPMessage
function ChatSDKModule:Send(msg)
	if (not msg) then return end
	CS.FunPlusChat.FPChatSdk.SendMsg(msg)
end

function ChatSDKModule:GetLanguageEnumFromCode(code)
	if code == "zh-CN" then
		return CS.FunPlusChat.FunLang.zh_cn
	elseif code == "zh-TW" then
		return CS.FunPlusChat.FunLang.zh_tw
	elseif code == "zh-HK" then
		return CS.FunPlusChat.FunLang.zh_hk
	elseif string.StartWith(code, "en") then
		return CS.FunPlusChat.FunLang.en
	elseif string.StartWith(code, "ar") then
		return CS.FunPlusChat.FunLang.ar
	elseif string.StartWith(code, "de") then
		return CS.FunPlusChat.FunLang.de
	elseif string.StartWith(code, "es") then
		return CS.FunPlusChat.FunLang.es
	elseif string.StartWith(code, "fr") then
		return CS.FunPlusChat.FunLang.fr
	elseif string.StartWith(code, "id") then
		return CS.FunPlusChat.FunLang.id
	elseif string.StartWith(code, "it") then
		return CS.FunPlusChat.FunLang.it
	elseif string.StartWith(code, "ja") then
		return CS.FunPlusChat.FunLang.ja
	elseif string.StartWith(code, "ko") then
		return CS.FunPlusChat.FunLang.ko
	elseif string.StartWith(code, "nl") then
		return CS.FunPlusChat.FunLang.nl
	elseif string.StartWith(code, "pl") then
		return CS.FunPlusChat.FunLang.pl
	elseif string.StartWith(code, "pt") then
		return CS.FunPlusChat.FunLang.pt
	elseif string.StartWith(code, "ru") then
		return CS.FunPlusChat.FunLang.ru
	elseif string.StartWith(code, "sv") then
		return CS.FunPlusChat.FunLang.sv
	elseif string.StartWith(code, "th") then
		return CS.FunPlusChat.FunLang.th
	elseif string.StartWith(code, "tr") then
		return CS.FunPlusChat.FunLang.tr
	elseif string.StartWith(code, "vi") then
		return CS.FunPlusChat.FunLang.vi
	elseif string.StartWith(code, "my") then
		return CS.FunPlusChat.FunLang.my
	elseif string.StartWith(code, "tl") then
		return CS.FunPlusChat.FunLang.tl
	else
		return CS.FunPlusChat.FunLang.unknown
	end
end

---@param message CS.FunPlusChat.Models.FPMessage
---@param callback fun(imId:number, code:number, msg:string, info:CS.FunPlusChat.Models.FPTranslatedInfo)
---@param channel string @Livedata, Google
function ChatSDKModule:Translate(message, callback, channel)
	if (not message) then return end
	if channel == nil then
		channel = "Livedata"
	end

	local imId = message.ImId
	-- local srcLang =
	ChatSdk.Translate(message.MsgStr, message.SdkAttrs.Lang, self:GetUserLanguage(), function(result)
		message.TranslatedInfo = result.data
		if callback then
			callback(imId, result.code, result.msg, result.data)
		end
	end, channel)
end

return ChatSDKModule
