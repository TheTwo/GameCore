---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/6/13 10:42
---
local BaseModule = require('BaseModule')
local ModuleRefer = require('ModuleRefer')
local DBEntityPath = require('DBEntityPath')
local ArtResourceUtils = require('ArtResourceUtils')
local ConfigRefer = require('ConfigRefer')
local OnChangeHelper = require("OnChangeHelper")
local I18N = require('I18N')
local TimerUtility = require('TimerUtility')
local Delegate = require('Delegate')
local NotificationType = require("NotificationType")
local UIHeroLocalData = require('UIHeroLocalData')
local HeroEquipType = require("HeroEquipType")
local HeroConfigCache = require('HeroConfigCache')
local HeroAttribute = require('HeroAttribute')
local Utils = require('Utils')
local HeroStrengthenParameter = require('HeroStrengthenParameter')
local HeroBreakParameter = require('HeroBreakThroughParameter')
local NewFunctionUnlockIdDefine = require('NewFunctionUnlockIdDefine')
local HeroAddHeroExpParameter = require('HeroAddHeroExpParameter')
local SyncHeroRedDotParameter = require("SyncHeroRedDotParameter")
local ProtocolId = require("ProtocolId")
local UIMediatorNames = require("UIMediatorNames")
local EventConst = require('EventConst')
local ItemType = require('ItemType')
local HeroType = require('HeroType')
local UIAsyncDataProvider = require('UIAsyncDataProvider')
local HeroListSorters = require('HeroListSorters')
local CityAttrType = require('CityAttrType')
local PooledGameObjectCreateHelper = CS.DragonReborn.AssetTool.PooledGameObjectCreateHelper
local EQUIP_SHOW_TYPE = {HeroEquipType.Head, HeroEquipType.Clothes, HeroEquipType.Belt, HeroEquipType.Shoes, HeroEquipType.Weapon}

local POWER_ATTR_DISPLAY = 100

---@class HeroModule:BaseModule
---@field super  BaseModule
---@field myself wds.Player
---@field heroDBSet table<number, wds.HeroInfo>
---@field configCacheSet table<number,HeroConfigCache>
---@field configCacheSetAll table<number,HeroConfigCache>
---@field dbId2CfgId table<number,number>
local HeroModule = class('HeroModule',BaseModule)

HeroModule.HERO_LEVEL_MAT = {
    "mat_beijing_s_new1",
    "mat_level_hero_shengji_fresnel_01",
    "mat_beijing_s_new2",
    "mat_level_hero_shengji_fresnel_02",
    "mat_beijing_s_new3",
}

HeroModule.STRENGTH_COUNT = 6

function HeroModule:ctor()
    HeroModule.super.ctor(self)
    ---@type table<number, CitizenConfigCell>
    self._linkHeroConfigId2CitizenConfig = {}
end

---@return wds.Player
function HeroModule:get_Myself()
    return ModuleRefer.PlayerModule:GetPlayer()
end

function HeroModule:OnRegister()
    table.clear(self._linkHeroConfigId2CitizenConfig)
    for _, value in ConfigRefer.Citizen:ipairs() do
        self._linkHeroConfigId2CitizenConfig[value:HeroId()] = value
    end
    self.isShowBuffKey = true
    self.createHelper = PooledGameObjectCreateHelper.Create("HeroLoad")
    self._itemHeroPopupCheckers = {}
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.Hero.HeroInfos.MsgPath,Delegate.GetOrCreate(self,self.UpdateHeroSet))
    ModuleRefer.InventoryModule:AddCountChangeByTypeListener(ItemType.Cultivate, Delegate.GetOrCreate(self, self.SetRedPointDirty))
    ModuleRefer.InventoryModule:AddCountChangeByTypeListener(ItemType.HeroPiece, Delegate.GetOrCreate(self, self.SetRedPointDirty))
    ModuleRefer.InventoryModule:AddCountChangeByTypeListener(ItemType.HeroEquip, Delegate.GetOrCreate(self, self.SetRedPointDirty))
    g_Game.ServiceManager:AddResponseCallback(HeroBreakParameter.GetMsgId(), Delegate.GetOrCreate(self,self.OnHeroBreakThrough))
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.ReceiveOptReward, Delegate.GetOrCreate(self, self.OpenGetHero))
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.ItemAddHero, Delegate.GetOrCreate(self,self.ItemAddHero))
    g_Game.EventManager:AddListener(EventConst.RELOGIN_SUCCESS, Delegate.GetOrCreate(self,self.UpdateHeroSet))
    g_Game:AddSecondTicker(Delegate.GetOrCreate(self, self.TickSecond))
    self:UpdateHeroSet()
end

function HeroModule:OnRemove()
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.Hero.HeroInfos.MsgPath,Delegate.GetOrCreate(self,self.UpdateHeroSet))
    ModuleRefer.InventoryModule:RemoveCountChangeByTypeListener(ItemType.Cultivate, Delegate.GetOrCreate(self, self.SetRedPointDirty))
    ModuleRefer.InventoryModule:RemoveCountChangeByTypeListener(ItemType.HeroPiece, Delegate.GetOrCreate(self, self.SetRedPointDirty))
    ModuleRefer.InventoryModule:RemoveCountChangeByTypeListener(ItemType.HeroEquip, Delegate.GetOrCreate(self, self.SetRedPointDirty))
    g_Game.ServiceManager:RemoveResponseCallback(HeroBreakParameter.GetMsgId(), Delegate.GetOrCreate(self,self.OnHeroBreakThrough))
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.ReceiveOptReward, Delegate.GetOrCreate(self, self.OpenGetHero))
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.ItemAddHero, Delegate.GetOrCreate(self,self.ItemAddHero))
    g_Game.EventManager:RemoveListener(EventConst.RELOGIN_SUCCESS, Delegate.GetOrCreate(self,self.UpdateHeroSet))

    g_Game:RemoveSecondTicker(Delegate.GetOrCreate(self, self.TickSecond))
end

function HeroModule:SetRedPointDirty()
    self.isRedPointDirty = true
end

function HeroModule:TickSecond()
    if self.isRedPointDirty then
        self:RefreshHeroRedPoint()
        self.isRedPointDirty = false
    end
end

function HeroModule:RecordHeroRedDotOpenState(show, heroId)
    g_Game.PlayerPrefsEx:SetIntByUid("RecordHeroRedDotOpenState" .. heroId, show)
    self:RefreshHeroRedPoint()
end

function HeroModule:HeroRedDotIsOpen(heroId)
    local cache = self:GetHeroByCfgId(heroId)
    local default = 1
    if cache.configCell:Type() == HeroType.Citizen then
        default = 0
    end
    return g_Game.PlayerPrefsEx:GetIntByUid("RecordHeroRedDotOpenState" .. heroId, default) == 1
end

function HeroModule:RecordEquipSelectRecord(equipQaulity, isSelect)
    g_Game.PlayerPrefsEx:SetIntByUid("RecordEquipSelectRecord" .. equipQaulity, isSelect)
end

function HeroModule:GetEquipSelectRecord(equipQaulity)
    return g_Game.PlayerPrefsEx:GetIntByUid("RecordEquipSelectRecord" .. equipQaulity, 1) == 1
end

function HeroModule:RecordEquipStrengthenRecord(equipQaulity, isSelect)
    g_Game.PlayerPrefsEx:SetIntByUid("RecordEquipStrengthenRecord" .. equipQaulity, isSelect)
end

function HeroModule:GetEquipStrengthenRecord(equipQaulity)
    return g_Game.PlayerPrefsEx:GetIntByUid("RecordEquipStrengthenRecord" .. equipQaulity, 1) == 1
end

---@param data wrpc.ReceiveOptRewardReply
function HeroModule:OpenGetHero(isSucc, data)
    if isSucc then
        -- g_Game.UIManager:Open(UIMediatorNames.UIOneDaySuccessMediator)
        ---@type UIAsyncDataProvider
        local provider = UIAsyncDataProvider.new()
        provider:Init(
            UIMediatorNames.UIOneDaySuccessMediator,
            UIAsyncDataProvider.PopupTimings.AnyTime,
            UIAsyncDataProvider.CheckTypes.DoNotShowInSE | UIAsyncDataProvider.CheckTypes.DoNotShowOnOtherMediator | UIAsyncDataProvider.CheckTypes.DoNotShowInCityZoneRecoverState,
            UIAsyncDataProvider.StrategyOnCheckFailed.DelayToAnyTimeAvailable,
            false, nil)
        provider:SetOtherMediatorCheckType(0)
        provider:AddOtherMediatorBlackList(UIMediatorNames.LoadingPageMediator)
        provider:AddOtherMediatorBlackList(UIMediatorNames.PetCaptureMediator)
        provider:AddOtherMediatorBlackList(UIMediatorNames.StoryDialogUIMediator)
        provider:AddOtherMediatorBlackList(UIMediatorNames.StoryDialogChatUIMediator)
        provider:AddOtherMediatorBlackList(UIMediatorNames.StoryDialogRecordUIMediator)
        provider:AddOtherMediatorBlackList(UIMediatorNames.StoryDialogSkipPopupUIMediator)
        g_Game.UIAsyncManager:AddAsyncMediator(provider)
    end
end

function HeroModule:UpdateHeroSet(_, changedTable)
    local addMap, removeMap, changedMap = OnChangeHelper.GenerateMapFieldChangeMap(changedTable)
    if self.configCacheSet == nil or self.configCacheSetAll == nil then
        self.configCacheSet = {}
        self.configCacheSetAll = {}
        for _, config in ConfigRefer.Heroes:ipairs() do
            local configID = config:Id()
            local cacheItem = HeroConfigCache.New(config)
            if not config:Hide() then
                self.configCacheSet[configID] = cacheItem
            end
            self.configCacheSetAll[configID] = cacheItem
        end
    end

    if self:get_Myself() then
        self.heroDBSet = self:get_Myself().Hero.HeroInfos
        self.dbId2CfgId = {}
        if self.heroDBSet then
            for _, v in pairs(self.heroDBSet) do
                local CfgId = v.CfgId
                if self.configCacheSetAll[CfgId] then
                    self.configCacheSetAll[CfgId].dbData = v
                    self.dbId2CfgId[v.ID] = CfgId
                end
            end
        end
    end
    g_Game.EventManager:TriggerEvent(EventConst.HERO_DATA_UPDATE, changedTable)
    for _, v in pairs(addMap or {}) do
        g_Game.EventManager:TriggerEvent(EventConst.HERO_GET_NEW, v.CfgId)
    end
    self:RefreshHeroRedPoint()
end

function HeroModule:GetHeroConfigByType(type)
    local allHeroConfig = self:GetAllHeroConfig()
    local heroType = type or self:GetHeroSelectType()
    local result = {}
    for heroId, cacheItem in pairs(allHeroConfig) do
        if cacheItem.configCell:Type() == heroType then
            result[heroId] = cacheItem
        end
    end
    return result
end

function HeroModule:SetHeroSelectType(heroType)
    self.heroType = heroType
end

function HeroModule:GetHeroSelectType()
    if not self.heroType then
        return HeroType.Heros
    end
    return self.heroType
end

---@return table<number,HeroConfigCache>
function HeroModule:GetAllHeroConfig()
    if self.configCacheSet == nil  then
        self:UpdateHeroSet()
    end
    return self.configCacheSet
end
---@return table<number, wds.HeroInfo>
function HeroModule:GetAllHeroDB()
    if self.heroDBSet == nil then
        self:UpdateHeroSet()
    end
    return self.heroDBSet
end

function HeroModule:GetHeroByCfgId(heroCfgId)
    return self.configCacheSetAll[heroCfgId]
end

function HeroModule:SetHeroOutList(list)
    self.outList = list
end

function HeroModule:GetHeroOutList()
    return self.outList
end

function HeroModule:SetIsShowBuffKey(state)
    g_Game.PlayerPrefsEx:SetIntByUid("IsShowBuffKey", state and 1 or 0)
end

function HeroModule:GetIsShowBuffKey()
    return g_Game.PlayerPrefsEx:GetIntByUid("IsShowBuffKey", 1) == 1
end

function HeroModule:GetSortHeroList(type, sortType)
    local sortList = {}
    for _, cacheItem in pairs(self:GetHeroConfigByType(type)) do
        sortList[#sortList + 1] = cacheItem
    end

    local sortFunction = HeroListSorters.GetSorter(sortType or 1)

    table.sort(sortList, sortFunction)
    return sortList
end

---@param n number
---@return HeroConfigCache[]
function HeroModule:GetTopNHeroesByLevel(n)
    local ret = {}
    local sortedList = self:GetSortHeroList(HeroType.Heros, HeroListSorters.SortType.Level)
    for i = 1, (n or #sortedList) do
        if sortedList[i] then
            table.insert(ret, sortedList[i])
        end
    end
    return ret
end

---@param dbId number wds.HeroInfo.ID
function HeroModule:GetHeroConfig(dbId)
    local id = self.dbId2CfgId[dbId]
    if id and self.configCacheSetAll[id] then
        return self.configCacheSetAll[id].configCell
    else
        return nil
    end
end

---@param dbId number wds.HeroInfo.ID
---@return HeroClientResConfigCell
function HeroModule:GetHeroRes(dbId)
    local id = self.dbId2CfgId[dbId]
    if id and self.configCacheSetAll[id] then
        return self.configCacheSetAll[id].resCell
    else
        return nil
    end
end

function HeroModule:FindHeroDB(dbId)
    return self.heroDBSet[dbId]
end

function HeroModule:GetAttrDiaplayRelativeAttrType(displayKey)
    local displayCfg = ConfigRefer.AttrDisplay:Find(displayKey)
    local baseType = displayCfg:BaseAttrTypeId()
    if baseType and baseType > 0 then
        return baseType
    end
    local multiType = displayCfg:MultiAttrTypeId()
    if multiType and multiType > 0 then
        return multiType
    end
    local pointType = displayCfg:PointAttrTypeId()
    if pointType and pointType > 0 then
        return pointType
    end
end

---@param attriList HeroAttribute
function HeroModule:GetHeroDisplayAttribute(attriList)
    if not attriList then
        return
    end
    local attrInfo = {}
    for i = 1, ConfigRefer.ConstMain:HeroSESubAttrTypeLength() do
        local displayKey = ConfigRefer.ConstMain:HeroSESubAttrType(i)
        local displayCfg = ConfigRefer.AttrDisplay:Find(displayKey)
        local baseType = displayCfg:BaseAttrTypeId()
        local multiType = displayCfg:MultiAttrTypeId()
        local pointType = displayCfg:PointAttrTypeId()
        local baseValue = (attriList:Get(baseType) or {}).value or 0
        local multiValue = ModuleRefer.AttrModule:GetAttrValueById(multiType, (attriList:Get(multiType) or {}).value or 0)
        local pointValue = (attriList:Get(pointType) or {}).value or 0
        local value = baseValue * (1 + multiValue) + pointValue
        attrInfo[displayKey] = value
    end

    return attrInfo
end

---@param attriList HeroAttribute
function HeroModule:GetCityHeroDisplayAttribute(attriList)
    if not attriList then
        return
    end
    local attrInfo = {}
    for i = 1, ConfigRefer.ConstMain:HeroCitySubAttrTypeLength() do
        local showType = ConfigRefer.ConstMain:HeroCitySubAttrType(i)
        local displayCfg = ConfigRefer.AttrDisplay:Find(showType)
        local baseType = displayCfg:BaseAttrTypeId()
        local multiType = displayCfg:MultiAttrTypeId()
        local pointType = displayCfg:PointAttrTypeId()
        local baseValue = (attriList:Get(baseType) or {}).value or 0
        local multiValue = ModuleRefer.AttrModule:GetAttrValueById(multiType, (attriList:Get(multiType) or {}).value or 0)
        local pointValue =(attriList:Get(pointType) or {}).value or 0
        local value = baseValue * (1 + multiValue) + pointValue
        attrInfo[showType] = value
    end
    return attrInfo
end

---@return HeroAttribute
function HeroModule:GetHeroBaseAttribute(cfgId,lvl)
    local cache = self.configCacheSetAll[cfgId]
    if(cache == nil or cache.configCell == nil) then return nil end

    local level = lvl
    if not level then
        if cache:HasHero() then
            level = cache.dbData.Level
        else
            level = 1
        end
    end
    local attTemId = cache.configCell:AttrTemplateCfg()
    if(attTemId <= 0)then return nil end
    local attTemp = ConfigRefer.AttrTemplate:Find(attTemId)
    if(attTemp == nil) then return nil end
    local groupIdListLength = attTemp:AttrGroupIdListLength()
    local min = attTemp:MinLv()
    min = min and min or 1
    local max = attTemp:MaxLv()
    max = max and max or (min + 1)
    level = math.clamp(level,min,max)
    level = math.min(level,groupIdListLength)
    local groupId = attTemp:AttrGroupIdList(level)

    local attrGroup = ConfigRefer.AttrGroup:Find(groupId)
    if(attrGroup == nil)then return nil end
    return HeroAttribute.new(attrGroup)
end

---@return HeroAttribute
function HeroModule:GetHeroStarAttribute(cfgId)
    local cache = self.configCacheSetAll[cfgId]
    if not (cache ~= nil and cache.configCell ~= nil)then return nil end
    if not cache:HasHero() then return nil end

    local starLvl = cache.dbData.StarLevel
    if starLvl < 1 then return nil end
    local strengthenConfig = ConfigRefer.HeroStrengthen:Find(cache.configCell:StrengthenCfg())
    local maxStarLvl = strengthenConfig:StrengthenInfoListLength()
    local strengthenConfigCell = strengthenConfig:StrengthenInfoList(math.clamp(starLvl,1,maxStarLvl))
    local attrTemplateId = strengthenConfig:AttrTemplateCfg()
    local attrTemplateCfg = ConfigRefer.AttrTemplate:Find(attrTemplateId)
    local groupId = attrTemplateCfg:AttrGroupIdList(strengthenConfigCell:StarLevel())
    local attrGroup = ConfigRefer.AttrGroup:Find(groupId)
    if (attrGroup == nil) then return nil end
    return HeroAttribute.new(attrGroup)
end

---@return HeroAttribute
function HeroModule:GetHeroStarAttributeByLevel(cfgId, level)
    local cache = self.configCacheSetAll[cfgId]
    if not (cache ~= nil and cache.configCell ~= nil)then return nil end
    local starLvl = level
    if starLvl < 1 then return nil end
    local strengthenConfig = ConfigRefer.HeroStrengthen:Find(cache.configCell:StrengthenCfg())
    local maxStarLvl = strengthenConfig:StrengthenInfoListLength()
    local strengthenConfigCell = strengthenConfig:StrengthenInfoList(math.clamp(starLvl,1,maxStarLvl))
    local attrTemplateId = strengthenConfig:AttrTemplateCfg()
    local attrTemplateCfg = ConfigRefer.AttrTemplate:Find(attrTemplateId)
    local groupId = attrTemplateCfg:AttrGroupIdList(strengthenConfigCell:StarLevel())
    local attrGroup = ConfigRefer.AttrGroup:Find(groupId)
    if (attrGroup == nil) then return nil end
    return HeroAttribute.new(attrGroup)
end

function HeroModule:GetHeroStarAttributePowerByLevel(cfgId, level)
    local cache = self.configCacheSetAll[cfgId]
    if not (cache ~= nil and cache.configCell ~= nil)then return nil end
    local starLvl = level
    if starLvl < 1 then return nil end
    local strengthenConfig = ConfigRefer.HeroStrengthen:Find(cache.configCell:StrengthenCfg())
    local maxStarLvl = strengthenConfig:StrengthenInfoListLength()
    local curLv = math.clamp(starLvl,1,maxStarLvl)
    local totalPower = 0
    local strengthenConfigCell = strengthenConfig:StrengthenInfoList(curLv)
    local attrTemplateId = strengthenConfig:AttrTemplateCfg()
    local attrTemplateCfg = ConfigRefer.AttrTemplate:Find(attrTemplateId)
    local groupId = attrTemplateCfg:AttrGroupIdList(strengthenConfigCell:StarLevel())
    local attrGroup = ConfigRefer.AttrGroup:Find(groupId)
    if attrGroup then
        local attrs = HeroAttribute.new(attrGroup)
        if attrs.attributes[1] and attrs.attributes[1].value > 0 then
            totalPower = attrs.attributes[1].value
        end
    end
    return totalPower
end

function HeroModule:GetLimitedLevel()
    local limitedLevel = ModuleRefer.CastleAttrModule:SimpleGetValue(CityAttrType.HeroMaxLevel)
    return limitedLevel
end

--region Exp and LevelUP
function HeroModule:CheckHasEnoughExpUpgrade(cfgId)
    local upgradeItems = self:GetUpgradeItems(cfgId) or {}
    local curHasItemNums = {}
    for _, itemId in pairs(upgradeItems) do
        curHasItemNums[itemId] = ModuleRefer.InventoryModule:GetAmountByConfigId(itemId)
    end
    local totleExp = 0
    for itemId, count in pairs(curHasItemNums) do
        local itemExp = self:GetUpgradeItemExp(itemId)
        totleExp = totleExp + itemExp * count
    end
    local _, curExp, maxExp = self:GetExpPercent(cfgId)
    if not maxExp then
        return false
    end
    if self:IsMaxLevel(cfgId) then
        return false
    end
    local needExp = maxExp - curExp
    return totleExp >= needExp
end

function HeroModule:GetUpgradeItems(cfgId)
    local data = self.configCacheSetAll[cfgId]
    if data:HasHero() then
        local breakConfig = self:FindBreakConfig(data.configCell, data.dbData.RealLevel + 1)
        if not breakConfig then
            return nil
        end
        return {breakConfig:ExpItems(1)}
    else
        local breakConfig = self:FindBreakConfig(data.configCell, 1)
        if breakConfig then
            return {breakConfig:ExpItems(1)}
        else
            return nil
        end
    end
end

function HeroModule:GetUpgradeItemExp(id)
    if self.upgradeItemExp == nil then
        self.upgradeItemExp = {}
    end
    if self.upgradeItemExp[id] == nil then
        self.upgradeItemExp[id] = 0
        local config = ConfigRefer.Item:Find(id)
        if config and config:Type() == ItemType.Cultivate then
            if config:UseParamLength() > 0 then
                local strV = config:UseParam(1)
                if not string.IsNullOrEmpty(strV) then
                    self.upgradeItemExp[id] = tonumber(strV)
                end
            end
        end
    end

    return self.upgradeItemExp[id]
end

---@param cfgId number HeroesConfigCell:Id()
---@param lvl number
---@return ExpTemplateConfigCell
function HeroModule:GetExpTempAndLevel(cfgId,lvl)
    local cache = self.configCacheSetAll[cfgId]
    if (cache == nil or cache.configCell == nil) then return nil end
    local expTempId = cache.configCell:ExpTemplateCfg()
    local expTemp = ConfigRefer.ExpTemplate:Find(expTempId)
    if (expTemp == nil ) then return nil end
    local level = 1
    if lvl then
        level = lvl
    elseif cache.dbData then
        level = cache.dbData.RealLevel
    end
    level = (level and level > 0) and level or 1
    level = math.min(level,expTemp:ExpLvLength(),expTemp:MaxLv())
    return expTemp,level,cache
end

---升级需要的总经验
---@param cfgId number HeroesConfigCell:Id()
---@param lvl number
---@return number
function HeroModule:GetLevelUpExp(cfgId,lvl)
    local expTemp,level = self:GetExpTempAndLevel(cfgId,lvl)
    if not expTemp then return 0 end
    local maxExp = 0
    for i = 1, level do
        maxExp = maxExp + expTemp:ExpLv(i)
    end
    return maxExp
end

---x级的经验
---@param cfgId number HeroesConfigCell:Id()
---@param lvl number
---@return number
function HeroModule:GetExpInLevel(cfgId,lvl)
    local expTemp,level = self:GetExpTempAndLevel(cfgId,lvl)
    if not expTemp then return 0 end
    return expTemp:ExpLv(level)
end

---得到英雄当前等级的经验百分
---@param cfgId number HeroesConfigCell:Id()
---@return number,number,number 经验百分,当前经验值,当前等级最大经验值
function HeroModule:GetExpPercent(cfgId)
    local cache = self.configCacheSetAll[cfgId]
    if (cache == nil or cache.configCell == nil or cache.dbData == nil ) then return 0 end
    local expTemp = ConfigRefer.ExpTemplate:Find(cache.configCell:ExpTemplateCfg())
    if (expTemp == nil ) then return 0 end
    local level = cache.dbData.RealLevel
    level = (level and level > 0) and level or 1
    level = math.min(level,expTemp:ExpLvLength(),expTemp:MaxLv())
    local curExp = cache.dbData.Exp
    local lastLevel = level - 1
    if lastLevel > 0 then
        for i = 1, lastLevel do
            curExp = curExp - expTemp:ExpLv(i)
        end
    end
    local maxExp = expTemp:ExpLv(level)
    return curExp / maxExp, curExp,maxExp
end

---检查英雄是否可升级
---@param cfgId number HeroesConfigCell:Id()
---@return boolean
function HeroModule:CanLevelUpgrade(cfgId, lv)
    local cache = self.configCacheSetAll[cfgId]
    if (cache == nil or cache.configCell == nil) then return false end
    if not cache:HasHero() then
        return false
    end
    if lv then
        if lv < cache.dbData.LevelUpperLimit then
            return true
        end
    else
        local level = cache.dbData.RealLevel
        if level and level < cache.dbData.LevelUpperLimit then
            return true
        end
    end
    return false
end

---检查英雄是否到最大等级
function HeroModule:IsMaxLevel(cfgId, lv)
    local cache = self.configCacheSetAll[cfgId]
    if (cache == nil or cache.configCell == nil)then return false end
    local attTemId = cache.configCell:AttrTemplateCfg()
    if(attTemId <= 0)then return nil end
    local attTemp = ConfigRefer.AttrTemplate:Find(attTemId)
    if(attTemp == nil) then return nil end
    if lv then
        return lv == attTemp:MaxLv()
    else
        return cache:HasHero() and cache.dbData.Level == attTemp:MaxLv()
    end
end

---检查英雄是否需要突破
---@param cfgId number HeroesConfigCell:Id()
---@return boolean
function HeroModule:NeedBreak(cfgId)
    local cache = self.configCacheSetAll[cfgId]
    if (cache == nil or cache.configCell == nil)then return false end
    if not cache:HasHero() then
        return false
    end
    if self:IsMaxLevel(cfgId) then
        return false
    end
    local level = cache.dbData.RealLevel
    if level and level >= cache.dbData.LevelUpperLimit then
        return true
    end
    return false
end

---检查英雄是否可突破
---@param cfgId number HeroesConfigCell:Id()
---@return boolean
function HeroModule:CanBreak(cfgId)
    local cache = self.configCacheSetAll[cfgId]
    if (cache == nil or cache.configCell == nil) then return false end
    if not cache:HasHero() then
        return false
    end
    local level = cache.dbData.RealLevel
    level = (level and level > 0) and level or 1
    level = level + 1
    if self:IsMaxLevel(cfgId) then
        return false
    end
    if level < cache.dbData.LevelUpperLimit then
        return false
    end

    local breakId = cache.configCell:BreakThroughCfg()
    local breakConfig = ConfigRefer.HeroBreakThrough:Find(breakId)
    if (breakConfig == nil ) then return false end
    --Check Cost
    ---@type HeroBreakThroughInfo
    local breakInfo = nil
    for i = 1, breakConfig:BreakThroughInfoListLength() do
        breakInfo = breakConfig:BreakThroughInfoList(i)
        if breakInfo:LevelUpperLimit() >= level then
            break;
        end
    end
    if not breakInfo then
        return false
    end
    return self:HasEnoughItems(breakInfo:CostItemGroupCfgId())
end

---得到英雄突破需要的物品GroupId
---@param cfgId number HeroesConfigCell:Id()
---@return number ItemGroupConfig:Id()
function HeroModule:GetBreakCostItemGroupId(cfgId)
    local cache = self.configCacheSetAll[cfgId]
    if (cache == nil or cache.configCell == nil) then return nil end
    if not cache:HasHero() then
        return nil
    end

    local breakConfig = ConfigRefer.HeroBreakThrough:Find(cache.configCell:BreakThroughCfg())
    if (breakConfig == nil ) then return nil end
    --Check Cost
    ---@type HeroBreakThroughInfo
    local breakInfo = nil
    local level = cache.dbData.LevelUpperLimit
    for i = 1, breakConfig:BreakThroughInfoListLength() do
        breakInfo = breakConfig:BreakThroughInfoList(i)
        if breakInfo:LevelUpperLimit() >= level then
            break;
        end
    end
    if not breakInfo then
        return nil
    end
    return breakInfo:CostItemGroupCfgId()
end

---@param config HeroesConfigCell
---@return HeroBreakThroughInfo
function HeroModule:FindBreakConfig(config,level)
    if config == nil then return nil end
    local breakConfig = ConfigRefer.HeroBreakThrough:Find(config:BreakThroughCfg())
    if (breakConfig == nil ) then return nil end
    --Check Cost
    ---@type HeroBreakThroughInfo
    local breakInfo = nil
    for i = 1, breakConfig:BreakThroughInfoListLength() do
        breakInfo = breakConfig:BreakThroughInfoList(i)
        if breakInfo:LevelUpperLimit() >= level then
            break;
        end
    end
    return breakInfo
end

function HeroModule:CalcTargetLevel(cfgId,exp)
    local cache = self.configCacheSetAll[cfgId]
    if (cache == nil or cache.configCell == nil)then return 1 end
    if not cache:HasHero() then return 1 end
    local expTempId = cache.configCell:ExpTemplateCfg()
    local expTemp = ConfigRefer.ExpTemplate:Find(expTempId)
    local expLength = expTemp:ExpLvLength()
    for i = 1, expLength do
        exp = exp - expTemp:ExpLv(i)
        if exp < 0 then
            local lastExp = exp + expTemp:ExpLv(i)
            return i, lastExp, lastExp / expTemp:ExpLv(i)
        end
    end
    return expLength, 0, 1
end

--endregion

--region Star LevelUp
---英雄是否可以升星
---@param cfgId number HeroesConfigCell:Id()
---@return boolean
function HeroModule:CanStrengthen(cfgId)
    local cache = self.configCacheSetAll[cfgId]
    if (cache == nil or cache.configCell == nil) then return nil end
    if not cache:HasHero() then
        return nil
    end
    local starLevelUpCost = self:GetStrengthenCostItemGroupId(cache.configCell,cache.dbData.StarLevel)
    if not starLevelUpCost then return false end
    return self:HasEnoughItems(starLevelUpCost)
end
---得到英雄升星需要的物品GroupId
---@param config HeroesConfigCell
---@param lvl number
---@return number ItemGroupConfig:Id()
function HeroModule:GetStrengthenCostItemGroupId(config,lvl)
    local starLvl = lvl or 0
    local nextLevel = starLvl + 1

    local strengthenConfig = ConfigRefer.HeroStrengthen:Find(config:StrengthenCfg())
    if not strengthenConfig then
        return nil
    end
    local maxStarLvl = strengthenConfig:StrengthenInfoListLength()
    if nextLevel > maxStarLvl then
        return nil
    end
    local strengthenConfigCell = strengthenConfig:StrengthenInfoList(nextLevel)
    if not strengthenConfigCell then return nil end
    return strengthenConfigCell:CostItemGroupCfgId()
end

--endregion

--region Utilities
function HeroModule:CalcHeroPower(cfgId)
    local cache = self.configCacheSetAll[cfgId]
    if (cache == nil or cache.configCell == nil)then return 0 end
    if not cache:HasHero() then return 0 end
    return cache.dbData.Props[POWER_ATTR_DISPLAY] or 0
end


function HeroModule:HasEnoughItems(itemGroupId)
    if not itemGroupId or itemGroupId < 1 then return true end
    local itemGroup = ConfigRefer.ItemGroup:Find(itemGroupId)
    for i = 1, itemGroup:ItemGroupInfoListLength() do
        local itemNeed = itemGroup:ItemGroupInfoList(i)
        local itemHasCount = ModuleRefer.InventoryModule:GetAmountByConfigId(itemNeed:Items())
        if itemHasCount < itemNeed:Nums() then
            return false
        end
    end
    return true
end
--endregion

--region network interface
---@param cfgId number HeroesConfigCell:Id()
function HeroModule:StartUp(cfgId)
    local data = self.configCacheSetAll[cfgId]
    if not data or not data:HasHero() then return end
end

---@param cfgId number HeroesConfigCell:Id()
function HeroModule:BreakThrough(cfgId)
    local data = self.configCacheSetAll[cfgId]
    if not data or not data:HasHero() then return end
    local breakConfig = self:FindBreakConfig(data.configCell,data.dbData.RealLevel + 1)
    local param = HeroBreakParameter.new()
    param.args.HeroCfgId = cfgId
    param.args.LevelUpperLimit = breakConfig:LevelUpperLimit()
    param:Send()
end

function HeroModule:OnHeroBreakThrough(ret, response)
    if ret then
        g_Game.EventManager:TriggerEvent(EventConst.HERO_BREAK_THROUGH)
    end
end

---@param cfgId number HeroesConfigCell:Id()
function HeroModule:StrengthenHero(cfgId)
    if not self:CanStrengthen(cfgId) then
        return
    end
    local data = self.configCacheSetAll[cfgId]

    local param = HeroStrengthenParameter.new()
    ---@typeof param.args wrpc.HeroStrengthenRequest
    ---@field public HeroCfgId number
    ---@field public StarLevel number
    param.args.HeroCfgId = cfgId
    param.args.StarLevel = data.dbData.StarLevel + 1
    param:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, isSuccess, rsp)
        if isSuccess then
           -- self:StrengthenHeroSuccess(cfgId)
        end
    end)
end

function HeroModule:GetStrengthStageLevel(strengthLv)
    local stageLevel = math.floor(strengthLv / self.STRENGTH_COUNT)
    local showIndex = strengthLv % ModuleRefer.HeroModule.STRENGTH_COUNT
    if strengthLv == 0 or showIndex ~= 0 then
        stageLevel = stageLevel + 1
    else
        showIndex = ModuleRefer.HeroModule.STRENGTH_COUNT
    end
    return stageLevel, showIndex
end

function HeroModule:StrengthenHeroSuccess(cfgId)
    local cache = self.configCacheSetAll[cfgId]
    local strengthLv = cache.dbData.StarLevel
    local stageLevel, showIndex = self:GetStrengthStageLevel(strengthLv)
    local scfg = ConfigRefer.HeroStrengthenLvInfo:Find(stageLevel)
    ModuleRefer.ToastModule:AddJumpToast(I18N.GetWithParams(scfg:Name(), showIndex))
    local powerIndexs = {1, 2, 3}
    local index = 1
    local curStarAttr = self:GetHeroStarAttributeByLevel(cfgId, strengthLv)
    local lastAttr = nil
    if strengthLv > 1 then
        lastAttr = self:GetHeroStarAttributeByLevel(cfgId, strengthLv - 1)
    end
    if curStarAttr then
        for _, data in pairs(curStarAttr.attributes) do
            if not table.ContainsValue(powerIndexs, data.typeInfo:Id()) then
                local addNum = data.value
                if strengthLv > 1 then
                    if lastAttr.attributes[data.type] then
                        addNum = addNum - lastAttr.attributes[data.type].value
                    end
                end
                local showAddNum = ModuleRefer.AttrModule:GetAttrValueShowTextByType(data.typeInfo, addNum)
                local delayTime = index * 0.5
                index = index + 1
                TimerUtility.DelayExecute(function()
                    ModuleRefer.ToastModule:AddJumpToast(I18N.Get(data.typeInfo:Name()) .. "+" .. showAddNum)
                end, delayTime)
            end
        end
    end
end

---@param _ number @HeroesConfigCell:Id()
---@param lockable CS.UnityEngine.RectTransform
---@param itemInfo table<number,number> @map<itemId,count>
function HeroModule:AddExp(_, lockable, itemInfo)
    local player = ModuleRefer.PlayerModule:GetPlayer()
    if not player then
        return
    end
    local cfgId = player.Hero.SystemLevelHero[1] -- 英雄共鸣改为所有英雄公用一个等级
    local upgradeItems = self:GetUpgradeItems(cfgId)
    local costItems, delta = self:GetHeroUpgradeCost(cfgId)
    if delta > 0 then
        ModuleRefer.InventoryModule:OpenExchangePanel({{id = upgradeItems[1], num = delta}})
        return
    end

    local parameter = HeroAddHeroExpParameter.new()
    ---@field public HeroCfgId number
    ---@field public ExpItemCfgIds number[] | RepeatedField
    ---@field public ExpItemNums number[] | RepeatedField
    ---@field public AddExp number
    parameter.args.HeroCfgId = cfgId
    if itemInfo and table.nums(itemInfo) > 0 then
        for key, value in pairs(itemInfo) do
            if value > 0 then
                parameter.args.ExpItemCfgIds:Add(key)
                parameter.args.ExpItemNums:Add(value)
            end
        end
    end
    parameter:SendWithFullScreenLockAndOnceCallback(nil, nil, function(cmd, isSuccess, rsp)
        if isSuccess then
            self:LevelUpHeroSuccess(cfgId)
        end
        g_Game.EventManager:TriggerEvent(EventConst.SE_EXPLORER_HERO_CAN_UPGRADE_CHECK)
    end)
end

function HeroModule:LevelUpHeroSuccess(cfgId)
    local cache = self.configCacheSetAll[cfgId]
    local level = cache.dbData.RealLevel
    local isHero = cache.configCell:Type() == HeroType.Heros
    local curProps = {}
    if isHero then
        curProps = ModuleRefer.HeroModule:GetHeroDisplayAttribute(self:GetHeroBaseAttribute(cfgId, level) or {})
    else
        curProps = ModuleRefer.HeroModule:GetCityHeroDisplayAttribute(self:GetHeroBaseAttribute(cfgId, level) or {})
    end
    local lastProps = {}
    if level > 1 then
        if isHero then
            lastProps = ModuleRefer.HeroModule:GetHeroDisplayAttribute(self:GetHeroBaseAttribute(cfgId, level - 1) or {})
        else
            lastProps = ModuleRefer.HeroModule:GetCityHeroDisplayAttribute(self:GetHeroBaseAttribute(cfgId, level - 1) or {})
        end
    end
    ModuleRefer.ToastModule:AddJumpToast(I18N.Get("playerinfo_levelup"))
    local index = 1
    if isHero then
        for i = 1, ConfigRefer.ConstMain:HeroSESubAttrTypeLength() do
            local displayKey = ConfigRefer.ConstMain:HeroSESubAttrType(i)
            local clientKey = self:GetAttrDiaplayRelativeAttrType(displayKey)
            local attrCell = ConfigRefer.AttrElement:Find(clientKey)
            local value = curProps[displayKey] or 0
            if value > 0 then
                local lastValue = lastProps[displayKey] or 0
                local addValue = value - lastValue
                if addValue > 0 then
                    local name = I18N.Get(attrCell:Name())
                    local delayTime = index * 0.5
                    index = index + 1
                    TimerUtility.DelayExecute(function()
                        ModuleRefer.ToastModule:AddJumpToast(name .. "+" .. ModuleRefer.AttrModule:GetAttrValueShowTextByType(attrCell, addValue))
                    end, delayTime)
                end
            end
        end
    else
        for i = 1, ConfigRefer.ConstMain:HeroCitySubAttrTypeLength() do
            local displayKey = ConfigRefer.ConstMain:HeroCitySubAttrType(i)
            local clientKey = self:GetAttrDiaplayRelativeAttrType(displayKey)
            local attrCell = ConfigRefer.AttrElement:Find(clientKey)
            local value = curProps[displayKey] or 0
            if value > 0 then
                local lastValue = lastProps[displayKey] or 0
                local addValue = value - lastValue
                if addValue > 0 then
                    local name = I18N.Get(attrCell:Name())
                    local delayTime = index * 0.5
                    index = index + 1
                    TimerUtility.DelayExecute(function()
                        ModuleRefer.ToastModule:AddJumpToast(name .. "+" .. ModuleRefer.AttrModule:GetAttrValueShowTextByType(attrCell, addValue))
                    end, delayTime)
                end
            end
        end
    end

end

function HeroModule:CheckCardUnlock(heroCfgId, cardId)
    local cacheSet = self.configCacheSetAll[heroCfgId]
    if not cacheSet then
        return false
    end
    local dbData = cacheSet.dbData
    if not dbData then
        return false
    end
    local cardSlots = dbData.SeCardSlots or {}
    for _, cardSlot in pairs(cardSlots) do
        if cardSlot.CardId == cardId and cardSlot.IsUnlock then
            return true
        end
    end
    return false
end

--endregion

--region redPoint
function HeroModule:CreateRedPointLogicTree()
    --创建主界面的英雄入口红点逻辑节点，不需要传后面的两个go参数
    local hudHeroNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HudHeroNode", NotificationType.HERO_ENTRANCE)
    --给每个英雄都提前创建一颗逻辑节点树
    for cfgId, cacheItem in pairs(self:GetAllHeroConfig()) do
        --创建英雄头像的逻辑节点，并且设置父节点为主界面的英雄入口
        local heroHeadIconNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroHeadIcon" .. cfgId, NotificationType.HERO_HEAD_ICON)
        if cacheItem.configCell:Type() == HeroType.Citizen then
            local heroCitizenNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroCitizenNode", NotificationType.HERO_CITIZEN)
            ModuleRefer.NotificationModule:AddToParent(heroHeadIconNode, heroCitizenNode)
            ModuleRefer.NotificationModule:AddToParent(heroCitizenNode, hudHeroNode)
        else
            ModuleRefer.NotificationModule:AddToParent(heroHeadIconNode, hudHeroNode)
        end
        --因为每个英雄都会收到下面的四个页签影响，所以每个都要创建四个逻辑节点，并将这些节点父节点设置为英雄头像
        local infoTabNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroToggleButton" .. UIHeroLocalData.MainUITabType.INFO .. cfgId, NotificationType.HERO_UPGRADE_TAB)
        --local strengthTabNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroToggleButton" .. UIHeroLocalData.MainUITabType.STRENGTH .. cfgId, NotificationType.HERO_STRENGTH_TAB)
        local skillTabNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroToggleButton" .. UIHeroLocalData.MainUITabType.SKILL .. cfgId, NotificationType.HERO_SKILL_TAB)
        local seSkillTabNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroToggleButton" .. UIHeroLocalData.MainUITabType.SE_SKILL .. cfgId, NotificationType.HERO_SE_TAB)
        local equipTabNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroEquipTab"  .. cfgId, NotificationType.EQUIP_TAB)
        ModuleRefer.NotificationModule:AddToParent(infoTabNode, heroHeadIconNode)
        --ModuleRefer.NotificationModule:AddToParent(strengthTabNode, heroHeadIconNode)
        ModuleRefer.NotificationModule:AddToParent(skillTabNode, heroHeadIconNode)
        ModuleRefer.NotificationModule:AddToParent(seSkillTabNode, heroHeadIconNode)
        ModuleRefer.NotificationModule:AddToParent(equipTabNode, heroHeadIconNode)
        --升级和突破影响的是信息页签，所以父节点设置为信息页签
        local upgradeNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroUpgradeNode" .. cfgId, NotificationType.HERO_UPGRADE_BTN)
        local breakNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroBreakNode" .. cfgId, NotificationType.HERO_BREAK_BTN)
        ModuleRefer.NotificationModule:AddToParent(upgradeNode, infoTabNode)
        ModuleRefer.NotificationModule:AddToParent(breakNode, infoTabNode)
        --强化按钮对应强化页签
        local strengthNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroStrengthNode" .. cfgId, NotificationType.HERO_STRENGTH_BTN)
        --ModuleRefer.NotificationModule:AddToParent(strengthNode, strengthTabNode)
        ModuleRefer.NotificationModule:AddToParent(strengthNode, heroHeadIconNode)
        --招募按钮对应强化页签
        local getNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroGetNode" .. cfgId, NotificationType.HERO_GET)
        --ModuleRefer.NotificationModule:AddToParent(strengthNode, strengthTabNode)
        ModuleRefer.NotificationModule:AddToParent(getNode, heroHeadIconNode)
        --技能槽解锁对应技能页签
        -- local slgSkillNode = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroSlgSkillNode" .. cfgId, NotificationType.HERO_SKILL_SLOT)
        -- ModuleRefer.NotificationModule:AddToParent(slgSkillNode, skillTabNode)
        --se卡组两个卡片解锁提示对应的是卡组页签
        --local seSkillNodeOne = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroSeSkillNodeOne" .. cfgId, NotificationType.HERO_NEW_CARD1)
        local seSkillNodeTwo = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("HeroSeSkillNodeTwo" .. cfgId, NotificationType.HERO_NEW_CARD2)
        --ModuleRefer.NotificationModule:AddToParent(seSkillNodeOne, seSkillTabNode)
        ModuleRefer.NotificationModule:AddToParent(seSkillNodeTwo, seSkillTabNode)
        local equipWeaponMain = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("EquipWeaponMain" .. cfgId, NotificationType.EQUIP_WEAPON_MAIN)
        local equipHeadMain = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("EquipHeadMain" .. cfgId, NotificationType.EQUIP_HEAD_MAIN)
        local equipClothMain = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("EquipClothMain" .. cfgId, NotificationType.EQUIP_CLOTH_MAIN)
        local equipBeltMain = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("EquipBeltMain" .. cfgId, NotificationType.EQUIP_BELT_MAIN)
        local equipShoeMain = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("EquipShoeMain" .. cfgId, NotificationType.EQUIP_SHOE_MAIN)
        ModuleRefer.NotificationModule:AddToParent(equipWeaponMain, equipTabNode)
        ModuleRefer.NotificationModule:AddToParent(equipHeadMain, equipTabNode)
        ModuleRefer.NotificationModule:AddToParent(equipClothMain, equipTabNode)
        ModuleRefer.NotificationModule:AddToParent(equipBeltMain, equipTabNode)
        ModuleRefer.NotificationModule:AddToParent(equipShoeMain, equipTabNode)
        local equipWeaponSub = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("EquipWeaponSub" .. cfgId, NotificationType.EQUIP_WEAPON_SUB)
        local equipHeadSub = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("EquipHeadSub" .. cfgId, NotificationType.EQUIP_HEAD_SUB)
        local equipClothSub = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("EquipClothSub" .. cfgId, NotificationType.EQUIP_CLOTH_SUB)
        local equipBeltSub = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("EquipBeltSub" .. cfgId, NotificationType.EQUIP_BELT_SUB)
        local equipShoeSub = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("EquipShoeSub" .. cfgId, NotificationType.EQUIP_SHOE_SUB)
        ModuleRefer.NotificationModule:AddToParent(equipWeaponSub, equipWeaponMain)
        ModuleRefer.NotificationModule:AddToParent(equipHeadSub, equipHeadMain)
        ModuleRefer.NotificationModule:AddToParent(equipClothSub, equipClothMain)
        ModuleRefer.NotificationModule:AddToParent(equipBeltSub, equipBeltMain)
        ModuleRefer.NotificationModule:AddToParent(equipShoeSub, equipShoeMain)
    end
    self.createRedLogicTree = true
end

HeroModule.HeroRedDotMask = {
    IsNew = 0x01,
    SkillSlot = 0x02,
    SeCard1 = 0x04,
    SeCard2 = 0x08,
}

function HeroModule:RefreshHeroRedPoint()
    if not self.createRedLogicTree then
        self:CreateRedPointLogicTree()
    end
    local hasCanUpgrade = false
    --依旧是需要遍历所有英雄来刷新对应红点
    local heroCitizenNode = ModuleRefer.NotificationModule:GetDynamicNode("HeroCitizenNode", NotificationType.HERO_CITIZEN)
    local limitedLevel = self:GetLimitedLevel()
    local resonateLevel = ModuleRefer.PlayerModule:GetPlayer().Hero.SystemLevel.SystemLevel
    for cfgId, _ in pairs(self:GetAllHeroConfig()) do
        local cache = self.configCacheSetAll[cfgId]
        local isOpenHeroRed = self:HeroRedDotIsOpen(cfgId)
        local heroHeadIconNode = ModuleRefer.NotificationModule:GetDynamicNode("HeroHeadIcon" .. cfgId, NotificationType.HERO_HEAD_ICON)
        if cache:HasHero() then
            local curLevel = cache.dbData.RealLevel
            local isHero = cache.configCell:Type() == HeroType.Heros
            local isNewHero = self:CheckHeroHeadIconNew(cfgId)   --是否为新英雄
            -- local isNewSKill = self:CheckHeroSkillSlot(cfgId)    --是否为新技能卡槽
            -- local isNewCard1 = self:CheckHeroSeCard1(cfgId)      --是否为新卡片1解锁
            local isNewCard2 = self:CheckHeroSeCard2(cfgId)      --是否为新卡片2解锁
            local isCanStrength = self:CanStrengthen(cfgId)      --是否可以强化
            local isCanUpgrade = self:CheckHasEnoughExpUpgrade(cfgId) and not self:NeedBreak(cfgId) and curLevel < limitedLevel  --是否可以升级

            if resonateLevel > 0 then
                isCanUpgrade = isCanUpgrade and resonateLevel == curLevel
            end

            if isCanUpgrade then
                hasCanUpgrade = true
            end

            --local isCanBreak = self:CanBreak(cfgId) and self:NeedBreak(cfgId)  --是否可以突破
            -- 突破关掉
            local isCanBreak = false
            --可强化，获得新英雄或者新技能的时候才需要在主界面显示红点，其余情况不需要所以需要设置穿透为false
            -- heroHeadIconNode.PreventUpPassing = not (isCanStrength or isNewHero or isNewSKill)
            if not isHero then
                heroCitizenNode.PreventUpPassing = true
            else
                heroHeadIconNode.PreventUpPassing = not (isCanStrength or isNewHero or isCanUpgrade or isCanBreak)
            end
            --新英雄获取需要显示的是New节点，同时因为在显示New节点的时候，英雄头像红点为根节点，其他情况则是叶子节点，所以使用优先判断条件显示
            if isNewHero and isOpenHeroRed then
                heroHeadIconNode.PriorityCondition = true
            else
                heroHeadIconNode.PriorityCondition = false
            end
            --可升级或者可突破时设置为升级或突破红点，会往上一层一层的显示父节点直到遇到PreventUpPassing为true或者根节点为止
            local upgradeNode = ModuleRefer.NotificationModule:GetDynamicNode("HeroUpgradeNode" .. cfgId, NotificationType.HERO_UPGRADE_BTN)
            local breakNode = ModuleRefer.NotificationModule:GetDynamicNode("HeroBreakNode" .. cfgId, NotificationType.HERO_BREAK_BTN)
            upgradeNode.PreventUpPassing = not isOpenHeroRed
            breakNode.PreventUpPassing = not isOpenHeroRed
            ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(upgradeNode, isCanUpgrade and 1 or 0)
            ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(breakNode, isCanBreak and 1 or 0)
            --可强化时设置强化节点
            local strengthNode = ModuleRefer.NotificationModule:GetDynamicNode("HeroStrengthNode" .. cfgId, NotificationType.HERO_STRENGTH_BTN)
            strengthNode.PreventUpPassing = not isOpenHeroRed
            g_Game.EventManager:TriggerEvent(EventConst.HERO_CAN_STRENGTH, {isCanStrength = isCanStrength, heroId = cfgId})
            ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(strengthNode, isCanStrength and 1 or 0)
            --有新技能槽时设置技能槽节点
            -- local slgSkillNode = ModuleRefer.NotificationModule:GetDynamicNode("HeroSlgSkillNode" .. cfgId, NotificationType.HERO_SKILL_SLOT)
            -- ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(slgSkillNode, isNewSKill and 1 or 0)
            --有新卡片时设置卡片节点
            --local seSkillNodeOne = ModuleRefer.NotificationModule:GetDynamicNode("HeroSeSkillNodeOne" .. cfgId, NotificationType.HERO_NEW_CARD1)
            local seSkillNodeTwo = ModuleRefer.NotificationModule:GetDynamicNode("HeroSeSkillNodeTwo" .. cfgId, NotificationType.HERO_NEW_CARD2)
            --ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(seSkillNodeOne, isNewCard1 and 1 or 0)
            ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(seSkillNodeTwo, isNewCard2 and 1 or 0)
            --当前部位没有装备但是有可以装备的装备时
            local isEmptyEquipSlot = self:CheckIsEmptyEquipSlot(cfgId, HeroEquipType.Weapon)
            local isHasEquipUse = self:CheckHasEquipUseByEquipType(HeroEquipType.Weapon)
            local isShowEquipRedDot = isEmptyEquipSlot and isHasEquipUse and isHero
            local equipWeaponSub = ModuleRefer.NotificationModule:GetDynamicNode("EquipWeaponSub" .. cfgId, NotificationType.EQUIP_WEAPON_SUB)
            ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(equipWeaponSub, isShowEquipRedDot and 1 or 0)
            equipWeaponSub.PreventUpPassing = not isOpenHeroRed
            isEmptyEquipSlot = self:CheckIsEmptyEquipSlot(cfgId, HeroEquipType.Head)
            isHasEquipUse = self:CheckHasEquipUseByEquipType(HeroEquipType.Head)
            isShowEquipRedDot = isEmptyEquipSlot and isHasEquipUse and isHero
            local equipHeadSub = ModuleRefer.NotificationModule:GetDynamicNode("EquipHeadSub" .. cfgId, NotificationType.EQUIP_HEAD_SUB)
            ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(equipHeadSub, isShowEquipRedDot and 1 or 0)
            equipHeadSub.PreventUpPassing = not isOpenHeroRed
            isEmptyEquipSlot = self:CheckIsEmptyEquipSlot(cfgId, HeroEquipType.Clothes)
            isHasEquipUse = self:CheckHasEquipUseByEquipType(HeroEquipType.Clothes)
            isShowEquipRedDot = isEmptyEquipSlot and isHasEquipUse and isHero
            local equipClothSub = ModuleRefer.NotificationModule:GetDynamicNode("EquipClothSub" .. cfgId, NotificationType.EQUIP_CLOTH_SUB)
            ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(equipClothSub, isShowEquipRedDot and 1 or 0)
            equipClothSub.PreventUpPassing = not isOpenHeroRed
            isEmptyEquipSlot = self:CheckIsEmptyEquipSlot(cfgId, HeroEquipType.Belt)
            isHasEquipUse = self:CheckHasEquipUseByEquipType(HeroEquipType.Belt)
            isShowEquipRedDot = isEmptyEquipSlot and isHasEquipUse and isHero
            local equipBeltSub = ModuleRefer.NotificationModule:GetDynamicNode("EquipBeltSub" .. cfgId, NotificationType.EQUIP_BELT_SUB)
            ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(equipBeltSub, isShowEquipRedDot and 1 or 0)
            equipBeltSub.PreventUpPassing = not isOpenHeroRed
            isEmptyEquipSlot = self:CheckIsEmptyEquipSlot(cfgId, HeroEquipType.Shoes)
            isHasEquipUse = self:CheckHasEquipUseByEquipType(HeroEquipType.Shoes)
            isShowEquipRedDot = isEmptyEquipSlot and isHasEquipUse and isHero
            local equipShoeSub = ModuleRefer.NotificationModule:GetDynamicNode("EquipShoeSub" .. cfgId, NotificationType.EQUIP_SHOE_SUB)
            ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(equipShoeSub, isShowEquipRedDot and 1 or 0)
            equipShoeSub.PreventUpPassing = not isOpenHeroRed
            local getNode = ModuleRefer.NotificationModule:GetDynamicNode("HeroGetNode" .. cfgId, NotificationType.HERO_GET)
            ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(getNode, 0)
        else
            if isOpenHeroRed then
                local isCanGetHero = self:CheckHeroCanGet(cfgId)   --是否可以合成英雄
                local getNode = ModuleRefer.NotificationModule:GetDynamicNode("HeroGetNode" .. cfgId, NotificationType.HERO_GET)
                ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(getNode, isCanGetHero and 1 or 0)
            end
        end
    end
    if hasCanUpgrade then
        g_Game.EventManager:TriggerEvent(EventConst.SE_EXPLORER_HERO_CAN_UPGRADE_CHECK)
    end
end

function HeroModule:CheckHeroHeadIconNew(cfgId)
    local cacheItem = self.configCacheSetAll[cfgId]
    if not cacheItem:HasHero() then
        return false
    end
    return HeroModule.HeroRedDotMask.IsNew & cacheItem.dbData.RedDotMask == 0
end

function HeroModule:CheckHeroCanGet(cfgId)
    local cacheItem = self.configCacheSetAll[cfgId]
    local curHave = ModuleRefer.InventoryModule:GetAmountByConfigId(cacheItem.configCell:PieceId())
    local cost = cacheItem.configCell:ComposeNeedPiece()
    return curHave >= cost
end

function HeroModule:CheckHeroSkillSlot(cfgId)
    local cacheItem = self.configCacheSetAll[cfgId]
    if not cacheItem:HasHero() then
        return false
    end
    local slgSkills = cacheItem.dbData.SlgSkillSlots or {}
    local thirdSkill = slgSkills[3] or {}
    local isUnlockLastSkill = thirdSkill.IsUnlock
    if not isUnlockLastSkill then
        return false
    end
    return HeroModule.HeroRedDotMask.SkillSlot & cacheItem.dbData.RedDotMask == 0
end

function HeroModule:CheckHeroSeCard1(cfgId)
    local cacheItem = self.configCacheSetAll[cfgId]
    if not cacheItem:HasHero() then
        return false
    end
    local cardId = cacheItem.configCell:Cards(3)
    return self:CheckCardUnlock(cacheItem.id, cardId) and HeroModule.HeroRedDotMask.SeCard1 & cacheItem.dbData.RedDotMask == 0
end

function HeroModule:CheckHeroSeCard2(cfgId)
    local cacheItem = self.configCacheSetAll[cfgId]
    if not cacheItem:HasHero() then
        return false
    end
    local cardId = cacheItem.configCell:Cards(4)
    return self:CheckCardUnlock(cacheItem.id, cardId) and HeroModule.HeroRedDotMask.SeCard2 & cacheItem.dbData.RedDotMask == 0
end

function HeroModule:SyncHeroRedDot(cfgId, mask)
    local cacheItem = self.configCacheSetAll[cfgId]
    if not cacheItem.dbData then
        return
    end
    if mask & cacheItem.dbData.RedDotMask > 0 then
        return
    end
    local parameter = SyncHeroRedDotParameter.new()
    parameter.args.HeroCfgId = cfgId
    parameter.args.RedDotMask = mask | cacheItem.dbData.RedDotMask
    parameter:Send()
end

--endregion

--region Equip
function HeroModule:GetEquipItemByType(heroCfgId, equipType)
    local cacheItem = self.configCacheSetAll[heroCfgId]
    if not cacheItem.dbData then
        return
    end
    local itemComponentId = cacheItem.dbData.Equips[equipType]
    if not itemComponentId then
        return
    end
    local itemInfo = ModuleRefer.InventoryModule:GetItemInfoByUid(itemComponentId)
    if not itemInfo then
        return
    end
    return itemInfo
end

---@return wds.HeroEquipInfo
function HeroModule:GetEquipByType(heroCfgId, equipType)
    return (self:GetEquipItemByType(heroCfgId, equipType) or {}).EquipInfo
end

function HeroModule:CheckIsHasEquip(heroCfgId, equipType)
    local cacheItem = self.configCacheSetAll[heroCfgId]
    if not cacheItem.dbData then
        return
    end
    local itemComponentId = cacheItem.dbData.Equips[equipType]
    return itemComponentId and itemComponentId > 0
end

function HeroModule:CheckIsEmptyEquipSlot(heroCfgId, equipType)
    local cacheItem = self.configCacheSetAll[heroCfgId]
    if not cacheItem.dbData then
        return false
    end
    local itemComponentId = cacheItem.dbData.Equips[equipType]
    return not (itemComponentId and itemComponentId > 0)
end

function HeroModule:GetEquipAttrInfoByIndex(itemComponentId, index, strengthenLevel)
    local itemInfo = ModuleRefer.InventoryModule:GetItemInfoByUid(itemComponentId)
    if not itemInfo then
        return
    end
    local propTempId = itemInfo.EquipInfo.PropTemplateIds[index]
    if not propTempId then
        return
    end
    local useLevel = itemInfo.EquipInfo.StrengthenLevel
    if strengthenLevel then
        useLevel = strengthenLevel
    end
    local attribute = self:GetEquipAttributeValue(propTempId, useLevel, itemInfo.EquipInfo.EquipLevel)
    if not attribute then
        return
    end
    local showAttr = self:GetShowAttribute(attribute.attributes)
    for _, attr in pairs(showAttr) do
        if attr.value > 0.00001 then --策划承诺主属性或者每条副属性只会加一条
            return attr
        end
    end
    return
end

function HeroModule:GetAllEquipAttributeList(heroCfgId)
    local attributeLists = nil
    for _, equipType in ipairs(EQUIP_SHOW_TYPE) do
        local equipInfo = self:GetEquipByType(heroCfgId, equipType)
        local isHasEquip = equipInfo and next(equipInfo)
        if isHasEquip then
            if not attributeLists then
                attributeLists = self:GetEquipAttributeTotal(heroCfgId, equipType)
            else
                attributeLists:Add(self:GetEquipAttributeTotal(heroCfgId, equipType))
            end
        end
    end
    local suitAttributeList = self:GetSuitAttributeList(heroCfgId) or {}
    for _, attri in ipairs(suitAttributeList) do
        attributeLists:Add(attri)
    end
    return attributeLists
end

---@return HeroAttribute
function HeroModule:GetEquipAttributeTotal(heroCfgId, equipType)
    local attributeList = self:GetEquipAttributeList(heroCfgId, equipType)
    local mainAttri = attributeList[1]
    for index, attri in ipairs(attributeList) do
        if index > 1 then
            mainAttri:Add(attri)
        end
    end
    return mainAttri
end

---@return HeroAttribute[]
function HeroModule:GetEquipAttributeList(heroCfgId, equipType)
    local equipInfo = self:GetEquipByType(heroCfgId, equipType)
    if not equipInfo then
        return
    end
    local attributeList = {}
    local propTemplateIds = equipInfo.PropTemplateIds or {}
    for _, propTemplateId in ipairs(propTemplateIds) do
        local attribute = self:GetEquipAttributeValue(propTemplateId, equipInfo.StrengthenLevel, equipInfo.EquipLevel)
        attributeList[#attributeList + 1] = attribute
    end
    return attributeList
end

function HeroModule:GetSuitAttributeList(heroCfgId)
    local cacheItem = self.configCacheSetAll[heroCfgId]
    if not cacheItem.dbData then
        return
    end
    local suitAttributeList = {}
    for suitId, index in pairs(cacheItem.dbData.Suits) do
        for i = 1, index + 1 do
            local attrGroup = ConfigRefer.Suit:Find(suitId):SuitEffect(i):Attr()
            if attrGroup ~= nil then
                suitAttributeList[#suitAttributeList + 1] = HeroAttribute.new( ConfigRefer.AttrGroup:Find(attrGroup))
            end
        end
    end
    return suitAttributeList
end

function HeroModule:CheckIsOpenEquip()
    return ModuleRefer.NewFunctionUnlockModule:CheckNewFunctionIsUnlocked(NewFunctionUnlockIdDefine.Global_equip)
end

---@param attriList HeroAttributeInfo[]
function HeroModule:GetShowAttribute(attriList)
    if not attriList then
        return
    end
    local attrInfo = {}
    for i = 1, ConfigRefer.ConstMain:HeroSESubAttrTypeLength() do
        local displayKey = ConfigRefer.ConstMain:HeroSESubAttrType(i)
        local displayCfg = ConfigRefer.AttrDisplay:Find(displayKey)
        local singleAttr = {}
        local baseType = displayCfg:BaseAttrTypeId()
        local multiType = displayCfg:MultiAttrTypeId()
        local pointType = displayCfg:PointAttrTypeId()
        local baseValue = (attriList[baseType] or {}).value or 0
        local multiValue = ModuleRefer.AttrModule:GetAttrValueById(multiType, ((attriList[multiType] or {}).value or 0))
        local pointValue = (attriList[pointType] or {}).value or 0
        local value = baseValue * (1 + multiValue) + pointValue
        singleAttr.value = value
        singleAttr.type = self:GetAttrDiaplayRelativeAttrType(displayKey)
        singleAttr.name = displayCfg:DisplayAttr()
        attrInfo[singleAttr.type] = singleAttr
    end
    return attrInfo
end

---@return HeroAttribute
function HeroModule:GetEquipAttributeValue(attTemId, level, equipLevel)
    if(attTemId <= 0)then return nil end
    local attTemp = ConfigRefer.AttrTemplate:Find(attTemId)
    if(attTemp == nil) then return nil end
    local curLevel = level + equipLevel
    if curLevel > attTemp:AttrGroupIdListLength() then
        curLevel = attTemp:AttrGroupIdListLength()
    end
    local groupId = attTemp:AttrGroupIdList(curLevel)
    local attrGroup = ConfigRefer.AttrGroup:Find(groupId)
    if(attrGroup == nil)then return nil end
    return HeroAttribute.new(attrGroup)
end

function HeroModule:GetSuitList(heroCfgId)
    local cacheItem = self.configCacheSetAll[heroCfgId]
    if not cacheItem.dbData then
        return
    end
    local suitList = {}
    for _, type in pairs(HeroEquipType) do
        if type > 0 then
            local equipInfo = self:GetEquipByType(heroCfgId, type)
            if equipInfo then
                local equipCfg = ConfigRefer.HeroEquip:Find(equipInfo.ConfigId)
                local suitId = equipCfg:SuitId()
                if not suitList[suitId] then
                    suitList[suitId] = 1
                else
                    suitList[suitId] = suitList[suitId] + 1
                end
            end
        end
    end
    return suitList
end

--获取一个装备替换上去之后的套装效果
function HeroModule:GetPreviewSuitList(heroCfgId, equipCfgId)
    local cacheItem = self.configCacheSetAll[heroCfgId]
    if not cacheItem.dbData then
        return
    end
    local replaceEquipCfg = ConfigRefer.HeroEquip:Find(equipCfgId)
    local replaceSuitId = replaceEquipCfg:SuitId()
    local replaceEquipType = replaceEquipCfg:Type()
    local suitList = {[replaceSuitId] = 1}
    for _, type in pairs(HeroEquipType) do
        if type > 0 then
            if type ~= replaceEquipType then
                local equipInfo = self:GetEquipByType(heroCfgId, type)
                if equipInfo then
                    local equipCfg = ConfigRefer.HeroEquip:Find(equipInfo.ConfigId)
                    local suitId = equipCfg:SuitId()
                    if not suitList[suitId] then
                        suitList[suitId] = 1
                    else
                        suitList[suitId] = suitList[suitId] + 1
                    end
                end
            end
        end
    end
    return suitList
end

function HeroModule:GetStrengthenConditionList(equipCfgId)
    local strengthenId = ConfigRefer.HeroEquip:Find(equipCfgId):Strengthen()
    local strengthenCfg = ConfigRefer.HeroEquipStrengthen:Find(strengthenId)
    local list = {}
    for i = 1, strengthenCfg:ViceAttrUnlockCondsLength() do
        if strengthenCfg:ViceAttrUnlockConds(i):UnlockViceAttr() > 0 then
            list[#list + 1] = strengthenCfg:ViceAttrUnlockConds(i):StrengthenLevel()
        end
    end
    return list
end

function HeroModule:GetAllEquipsByEquipType(equipType)
    local equips = ModuleRefer.InventoryModule:GetAllEquips()
    local results = {}
    for _, equip in ipairs(equips) do
        local item = equip.item
        if item.EquipInfo.ConfigId > 0 and equipType == ConfigRefer.HeroEquip:Find(item.EquipInfo.ConfigId):Type() then
            results[#results + 1] = equip
        end
    end
    return results
end

function HeroModule:GetCanEquipItemByType(equipType)
    local equips = ModuleRefer.InventoryModule:GetAllEquips()
    local results = {}
    for _, equip in ipairs(equips) do
        local item = equip.item
        if item.EquipInfo.ConfigId > 0 and item.EquipInfo.HeroConfigId <= 0 and equipType == ConfigRefer.HeroEquip:Find(item.EquipInfo.ConfigId):Type() then
            local quality = ConfigRefer.HeroEquip:Find(item.EquipInfo.ConfigId):Quality()
            results[#results + 1] = {item = item, quality = quality, strengthenLv = item.EquipInfo.StrengthenLevel, id = item.ID}
        end
    end
    local sortFunction = function(a, b)
        if a.quality ~= b.quality then
            return a.quality > b.quality
        else
            if a.strengthenLv ~= b.strengthenLv then
                return a.strengthenLv > b.strengthenLv
            else
                return a.id < b.id
            end
        end
    end
    table.sort(results, sortFunction)

    return (results[1] or {}).item
end

function HeroModule:CheckHasEquipUseByEquipType(equipType)
    local equips = ModuleRefer.InventoryModule:GetAllEquips()
    for _, equip in ipairs(equips) do
        local item = equip.item
        if item.EquipInfo.ConfigId > 0 then
            local config = ConfigRefer.HeroEquip:Find(item.EquipInfo.ConfigId)
            if config and item.EquipInfo.ConfigId > 0 and equipType == config:Type() and
                    not (item.EquipInfo.HeroConfigId and item.EquipInfo.HeroConfigId > 0) then
                return true
            end
        end
    end
    return false
end

function HeroModule:GetAllEquipsWithoutEquip()
    local equips = ModuleRefer.InventoryModule:GetAllEquips()
    local results = {}
    for _, equip in ipairs(equips) do
        local item = equip.item
        if item.EquipInfo.ConfigId > 0 and item.EquipInfo.HeroConfigId <= 0 then
            results[#results + 1] = item
        end
    end
    return results
end

function HeroModule:GetAllEquips()
    local equips = ModuleRefer.InventoryModule:GetAllEquips()
    local results = {}
    for _, equip in ipairs(equips) do
        local item = equip.item
        results[#results + 1] = item
    end
    return results
end

function HeroModule:GetAllSuitCfgListInfoByType(equipType)
    local equips = self:GetAllEquipsByEquipType(equipType)
    local totalCount = #equips
    local suits = self:GetEquipsSuitList(equips)
    return totalCount, suits
end

function HeroModule:GetAllSuitCfgListInfoWithoutEquip()
    local equips = self:GetAllEquipsWithoutEquip()
    local totalCount = #equips
    local suits = self:GetEquipsSuitList(equips)
    return totalCount, suits
end

function HeroModule:GetAllSelectEquipsByLimit(suitId, qualityList)
    local isSelectQaulity = false
    for _, isSelect in pairs(qualityList) do
        if isSelect then
            isSelectQaulity = true
        end
    end
    local equips = ModuleRefer.InventoryModule:GetAllEquips()
    local results = {}
    for _, equip in ipairs(equips) do
        local item = equip.item
        if item.EquipInfo.ConfigId > 0 and item.EquipInfo.HeroConfigId <= 0 and not item.EquipInfo.IsLock then
            local equipCfg = ConfigRefer.HeroEquip:Find(item.EquipInfo.ConfigId)
            if (suitId == 0 or (suitId > 0 and equipCfg:SuitId() == suitId)) and
                (not isSelectQaulity or (isSelectQaulity and qualityList[equipCfg:Quality()])) then
                results[#results + 1] = item
            end
        end
    end
    return results
end

function HeroModule:GetEquipsSuitList(equips)
    local suitList = {}
    for _, v in ConfigRefer.Suit:ipairs() do
        suitList[v:Id()] = 0
    end

    for _, equip in ipairs(equips) do
        local item = equip.item
        local suitId = ConfigRefer.HeroEquip:Find(item.EquipInfo.ConfigId):SuitId()
        if not suitList[suitId] then
            suitList[suitId] = 1
        else
            suitList[suitId] = suitList[suitId] + 1
        end
    end
    local suits = {}
    for suitId, count in pairs(suitList) do
        suits[#suits + 1] = {id = suitId, num = count}
    end
    local sourFunction = function(a, b)
        if a.num == b.num then
            return a.id < b.id
        else
            return a.num > b.num
        end
    end
    table.sort(suits, sourFunction)
    return suits
end

function HeroModule:GetStrengthLvTotalExp(equipCfgId, strengthLv)
    local strengthenId = ConfigRefer.HeroEquip:Find(equipCfgId):Strengthen()
    local expTempId = ConfigRefer.HeroEquipStrengthen:Find(strengthenId):StrengthenExp()
    local expTemp = ConfigRefer.ExpTemplate:Find(expTempId)
    if not expTemp then return 0 end
    local totalExp = 0
    for i = 1, strengthLv do
        totalExp = totalExp + expTemp:ExpLv(i)
    end
    return totalExp
end

function HeroModule:GetStrengthMaxNeedItemCount(equipInfo, costId)
    local curExp = equipInfo.StrengthenExp
    local strengthenId = ConfigRefer.HeroEquip:Find(equipInfo.ConfigId):Strengthen()
    local expTempId = ConfigRefer.HeroEquipStrengthen:Find(strengthenId):StrengthenExp()
    local expTemp = ConfigRefer.ExpTemplate:Find(expTempId)
    local maxLv = expTemp:MaxLv()
    local maxTotalExp = self:GetStrengthLvTotalExp(equipInfo.ConfigId, maxLv)
    local needExp = maxTotalExp - curExp
    if needExp <= 0 then
        return 0
    else
        local singleItemExp = tonumber(ConfigRefer.Item:Find(costId):UseParam(1))
        return math.ceil(needExp / singleItemExp)
    end
end

function HeroModule:GetCanStrengthLv(equipInfo, totalAddExp)
    local curExp = equipInfo.StrengthenExp
    local strengthenId = ConfigRefer.HeroEquip:Find(equipInfo.ConfigId):Strengthen()
    local expTempId = ConfigRefer.HeroEquipStrengthen:Find(strengthenId):StrengthenExp()
    local expTemp = ConfigRefer.ExpTemplate:Find(expTempId)
    local maxLv = expTemp:MaxLv()
    local targetExp = curExp + totalAddExp
    local canStrengthLv = 0
    local lastExp = 0
    local strengthLvExp = 0
    for i = 1, maxLv do
        targetExp = targetExp - expTemp:ExpLv(i)
        if targetExp >= 0 then
            canStrengthLv = canStrengthLv + 1
        elseif strengthLvExp == 0 then
            lastExp = expTemp:ExpLv(i) + targetExp
            strengthLvExp = expTemp:ExpLv(i)
        end
    end
    return canStrengthLv, lastExp, canStrengthLv == maxLv, strengthLvExp
end

function HeroModule:GetEquipsBySuit(suitId)
    local equips = {}
    local maxQuality = 0
    for _, v in ConfigRefer.HeroEquip:ipairs() do
        local equipQaulity = v:Quality()
        if equipQaulity > maxQuality then
            maxQuality = equipQaulity
        end
        if v:SuitId() == suitId then
            equips[equipQaulity] = equips[equipQaulity] or {}
            equips[equipQaulity][v:Type()] = v:Id()
        end
    end
    return equips[maxQuality]
end

function HeroModule:GetEquipsBySuitWithLimit(suitId, fixQuality, fixEquipType)
    local equips = {}
    local targetQuality = fixQuality
    for _, v in ConfigRefer.HeroEquip:ipairs() do
        local equipQaulity = v:Quality()
        if targetQuality == 0 then
            targetQuality = equipQaulity
        end
        if v:SuitId() == suitId and (fixEquipType == 0 or fixEquipType == v:Type()) then
            equips[equipQaulity] = equips[equipQaulity] or {}
            equips[equipQaulity][v:Type()] = v:Id()
        end
    end
    return equips[targetQuality]
end

function HeroModule:GetEquipByQualityAndType(fixQuality, fixEquipType)
    for _, v in ConfigRefer.HeroEquip:ipairs() do
        local equipQaulity = v:Quality()
        if fixQuality == equipQaulity and fixEquipType == v:Type() then
           return v
        end
    end
end

function HeroModule:GetAllDrawingItems()
    local drawingItemIds = {}
    local items = ModuleRefer.InventoryModule:GetCastleItems()
    for _, item in pairs(items) do
        local itemCfg = ConfigRefer.Item:Find(item.ConfigId)
        if itemCfg:Type() == ItemType.EquipDrawing then
            drawingItemIds[#drawingItemIds + 1] = {configCell = itemCfg, count = item.Count}
        end
    end
    return drawingItemIds
end

function HeroModule:CheckHeroEquipForgeIsUnlock(level)
    local unlockCfg = ConfigRefer.EquipBuildUnlock:Find(level)
    return ModuleRefer.NewFunctionUnlockModule:CheckNewFunctionIsUnlocked(unlockCfg:SystemSwitch())
end

function HeroModule:SaveSortId(id)
    self.sortId = id
end

function HeroModule:GetSortId()
    return self.sortId or UIHeroLocalData.HeroSortType.DEFAULT
end
--endregion

--region TESTCode Begin
function HeroModule:DoDBTest()
   self:UpdateHeroSet()
end
--endregion

function HeroModule:LoadHeroStarLevelImage(level, image)
    if not level or level == 0 then
        level = 1
    end

    local stageLevel = self:GetStrengthStageLevel(level)
    local scfg = ConfigRefer.HeroStrengthenLvInfo:Find(stageLevel)
    g_Game.SpriteManager:LoadSprite(ArtResourceUtils.GetUIItem(scfg:Icon()), image)
end

function HeroModule:SkipTimeline()
    if Utils.IsNotNull(self.timelineDirector) then
        self.callback = nil
        self.timelineDirector:Stop()
        self:OnTimelineComplete()
    end
end

function HeroModule:LoadTimeline(timelineName, moduleRoot, callback, onCreate)
    self.callback = callback
    self.handle = self.createHelper:Create(timelineName,
    moduleRoot.transform,
    function(go)
        if go then
            if onCreate then
                onCreate(go)
            end
            self.timelineGo = go
            self.timelineGo.transform.localPosition = CS.UnityEngine.Vector3.zero
            go:SetActive(false)
            self.timelineDirector = go:GetComponentInChildren(typeof(CS.UnityEngine.Playables.PlayableDirector))
            self.timelineWrapper = self.timelineDirector.gameObject:AddComponent(typeof(CS.PlayableDirectorListenerWrapper))
            self.timelineWrapper.targetDirector = self.timelineDirector
	        self:ShowTimeline()
        end
    end)
end

function HeroModule:ShowTimeline()
    self.timelineWrapper.stoppedCallback = Delegate.GetOrCreate(self, self.OnTimelineComplete)
    self.timelineWrapper:AddStoppedListener()
    self.timelineGo:SetActive(true)
end

function HeroModule:OnTimelineComplete()
	self.timelineWrapper.stoppedCallback = nil
	self.timelineWrapper:RemoveStoppedListener()
    self.timelineGo:SetActive(false)
    if self.handle then
        self.createHelper:Delete(self.handle)
        self.handle = nil
    end
    if self.callback then
        self.callback()
        self.callback = nil
    end
end

---@return number @ petCompId
function HeroModule:GetHeroLinkPet(heroId, isPvP)
	if (not heroId or heroId <= 0) then return nil end
    if isPvP then
        return ModuleRefer.ReplicaPVPModule:EditGetHeroLinkPet(heroId)
    else
        local heroDb = self:GetHeroByCfgId(heroId)
        if heroDb and heroDb.dbData and heroDb.dbData.BindPetId and heroDb.dbData.BindPetId > 0 then
            return heroDb.dbData.BindPetId
        end
        return nil
    end
end

function HeroModule:GetHeroClimbTowerHp(heroId)
	if (not heroId or heroId <= 0) then return 0 end
	local heroDb = self:GetHeroByCfgId(heroId)
	if (heroDb and heroDb.dbData) then
		return math.floor(heroDb.dbData.ClimbTowerHpPercent * ModuleRefer.TroopModule:GetTroopHeroHPMax(heroId))
	end
	return 0
end

--- 获取英雄服务端显示属性值
---@param self HeroModule
---@param heroId number
---@param attrDispId number
---@return number
function HeroModule:GetHeroAttrDisplayServerValue(heroId, attrDispId)
	if (not heroId or heroId <= 0) then return nil end
	local heroDb = self:GetHeroByCfgId(heroId)
	if (heroDb and heroDb.dbData and heroDb.dbData.Props) then
		return heroDb.dbData.Props[attrDispId]
	end
	return nil
end

--- 获取英雄显示属性值, 优先使用服务端数值, 如果服务端数值不存在, 则使用客户端数值
---@param self HeroModule
---@param heroId number
---@param attrDispId number
---@return number, string
function HeroModule:GetHeroAttrDisplayValue(heroId, attrDispId)
	if (not heroId or heroId <= 0) then return 0, nil end
	local dispAttrHero = ConfigRefer.AttrDisplay:Find(attrDispId)
	local serverValue = self:GetHeroAttrDisplayServerValue(heroId, attrDispId)
	if (serverValue) then
		return serverValue, dispAttrHero and dispAttrHero:DisplayAttr()
	end
	local heroData = self:GetHeroByCfgId(heroId)
    local  heroLevel = 1
    if heroData.dbData then
        heroLevel = heroData.dbData.Level
    end
	local heroAttrList = ModuleRefer.AttrModule:CalcAttrGroupByTemplateId(heroData.configCell:AttrTemplateCfg(), heroLevel)
	return ModuleRefer.AttrModule:GetDisplayValueWithData(dispAttrHero, heroAttrList)
end

---@param heroConfig HeroesConfigCell
---@param heroLevel number
---@param petConfig PetConfigCell|nil
---@param petLevel number
---@param displayAttrHero AttrDisplayConfigCell
---@return number, string, string, boolean, string
function HeroModule:GetHeroAttrDisplayValueConfigOnly(heroConfig, heroLevel, petConfig, petLevel, displayAttrHero)
    local heroAttrList = ModuleRefer.AttrModule:CalcAttrGroupByTemplateId(heroConfig:AttrTemplateCfg(), heroLevel)
    if petConfig then
        local petAttrList = ModuleRefer.AttrModule:CalcAttrGroupByTemplateId(petConfig:AttrTempId(), petLevel)
        ---@type table<number, {type:number, value:number}>
        local merge = {}
        for _, v in ipairs(petAttrList) do
            merge[v.type] = v
        end
        local inHeroAttr = {}
        for _, v in ipairs(heroAttrList) do
            inHeroAttr[v.type] = true
            if merge[v.type] then
                v.value = v.value + merge[v.type].value
            end
        end
        for _, v in ipairs(petAttrList) do
            if not inHeroAttr[v.type] then
                table.insert(heroAttrList, v)
            end
        end
    end
    return ModuleRefer.AttrModule:GetDisplayValueWithData(displayAttrHero, heroAttrList)
end

function HeroModule:ItemAddHero(isSuccess, data)
    if isSuccess and self:ItemHeroPopupChecker() then
        local heroConfigId = data.HeroCfgId
        if heroConfigId then
            local linkCitizenConfig = self._linkHeroConfigId2CitizenConfig[heroConfigId]
            if linkCitizenConfig and linkCitizenConfig:SkipTriggerReceiveUI() then
                return
            end
        end
        if ModuleRefer.CityModule:IsInMyCity() then
            local city = ModuleRefer.CityModule:GetMyCity()
            if not city or city:IsInSingleSeExplorerMode() or city:IsInRecoverZoneEffectMode() then
                return
            end
        end
        ---@type UIAsyncDataProvider
        local provider = UIAsyncDataProvider.new()
        provider:Init(
            UIMediatorNames.UIOneDaySuccessMediator,
            UIAsyncDataProvider.PopupTimings.AnyTime,
            UIAsyncDataProvider.CheckTypes.DoNotShowInSE | UIAsyncDataProvider.CheckTypes.DoNotShowOnOtherMediator | UIAsyncDataProvider.CheckTypes.DoNotShowInCityZoneRecoverState,
            UIAsyncDataProvider.StrategyOnCheckFailed.DelayToAnyTimeAvailable,
            false, {heroId = data.HeroCfgId})
        provider:SetOtherMediatorCheckType(0)
        provider:AddOtherMediatorBlackList(UIMediatorNames.LoadingPageMediator)
        provider:AddOtherMediatorBlackList(UIMediatorNames.PetCaptureMediator)
        provider:AddOtherMediatorBlackList(UIMediatorNames.StoryDialogUIMediator)
        provider:AddOtherMediatorBlackList(UIMediatorNames.StoryDialogChatUIMediator)
        provider:AddOtherMediatorBlackList(UIMediatorNames.StoryDialogRecordUIMediator)
        provider:AddOtherMediatorBlackList(UIMediatorNames.StoryDialogSkipPopupUIMediator)
        g_Game.UIAsyncManager:AddAsyncMediator(provider)
        -- g_Game.UIManager:Open(UIMediatorNames.UIOneDaySuccessMediator, {heroId = data.HeroCfgId})
    end
end

function HeroModule:ItemHeroPopupChecker()
    if not self._itemHeroPopupCheckers or #self._itemHeroPopupCheckers == 0 then
        return true
    end
    for _, checker in pairs(self._itemHeroPopupCheckers) do
        if checker() then return true end
    end
    return false
end

function HeroModule:AddItemHeroPopupChecker(checker)
    table.insert(self._itemHeroPopupCheckers, checker)
end

function HeroModule:RemoveItemHeroPopupChecker(checker)
    for i, v in ipairs(self._itemHeroPopupCheckers) do
        if v == checker then
            table.remove(self._itemHeroPopupCheckers, i)
            break
        end
    end
end

function HeroModule:GetSystemHeroId()
    local player = ModuleRefer.PlayerModule:GetPlayer()
    if not player then
        return 0
    end
    return player.Hero.SystemLevelHero[1]
end

---@param heroId number
---@return table<number, number>, number
function HeroModule:GetHeroUpgradeCost(heroId)
    local _, curExp, maxExp = self:GetExpPercent(heroId)
    local delta = maxExp - curExp
    local addItems = {}
    local upgradeItems = self:GetUpgradeItems(heroId)
    -- 倒序遍历
    for i = #upgradeItems, 1, -1 do
        local id = upgradeItems[i]
        local count = ModuleRefer.InventoryModule:GetAmountByConfigId(id)
        local expValue = self:GetUpgradeItemExp(id)
        if count > 0 then
            if expValue < delta then
                local addCount = math.min(count, math.ceil(delta / expValue))
                delta = delta - addCount * expValue
                addItems[id] = addCount
            elseif expValue >= delta then
                addItems[id] = 1
                delta = delta - expValue
            end
        else
            addItems[id] = 0
        end
    end
    return addItems, delta
end

function HeroModule:IsHeroLevelLimited()
    local limitLvl = self:GetLimitedLevel()

    local player = ModuleRefer.PlayerModule:GetPlayer()
	local heros = player.Hero.SystemLevelHero
    local sysHero = self:GetHeroByCfgId(heros[1])
    local curLvl = sysHero.dbData.Level
    return curLvl >= limitLvl
end

---@param exceptList table<number, any>
---@return boolean
function HeroModule:HasOtherHero(exceptList)
    for key, value in pairs(self.configCacheSetAll) do
        if not exceptList[key] and value:HasHero() then
            return true
        end
    end
    return false
end

return HeroModule
