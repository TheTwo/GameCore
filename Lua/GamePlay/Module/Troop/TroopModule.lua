---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hao.wu.ss
--- DateTime: 2023/8/17 14:18
---

local BaseModule = require('BaseModule')
local ModuleRefer = require('ModuleRefer')
local Delegate = require('Delegate')
local EventConst = require("EventConst")
local NM = ModuleRefer.NotificationModule
local NotificationType = require("NotificationType")
local HeroType = require("HeroType")
local ConfigRefer = require("ConfigRefer")
local UIHeroAssociateHelper = require('UIHeroAssociateHelper')
local TagEffectObject = require('TagEffectObject')
local FPXSDKBIDefine = require("FPXSDKBIDefine")
local Utils = require("Utils")
local HUDTroopUtils = require("HUDTroopUtils")
local CityAttrType = require("CityAttrType")
local ProtocolId = require("ProtocolId")
local I18N = require("I18N")
--- 编队模块
---@class TroopModule
local TroopModule = class('TroopModule', BaseModule)

local ATTR_DISP_POWER = 100

local ATTR_DISP_HERO_HP = 27
local ATTR_DISP_HERO_HPMAX_BASE = 25
local ATTR_DISP_HERO_HPMAX_BASE_MULIT = 58
local ATTR_DISP_HERO_HPMAX_MULIT = 3
local ATTR_DISP_HERO_HPMAX_POINT = 26

local ATTR_DISP_HERO_COLLECT_SPEED_BASE = 60
local ATTR_DISP_HERO_COLLECT_SPEED_BASE_MULIT = 61
local ATTR_DISP_HERO_COLLECT_SPEED_MULIT = 62
local ATTR_DISP_HERO_COLLECT_SPEED_POINT = 63

local ATTR_DISP_HERO_LOAD_BASE = 65
local ATTR_DISP_HERO_LOAD_BASE_MULIT = 66
local ATTR_DISP_HERO_LOAD_MULIT = 67
local ATTR_DISP_HERO_LOAD_POINT = 68

local MAX_TROOP_COUNT = ConfigRefer.ConstMain:TroopPresetMaxCount()
local MAX_HERO_COUNT = ConfigRefer.ConstMain:TroopPresetMaxHeroCount()

function TroopModule:OnRegister()
	---@type CS.Notification.NotificationDynamicNode
	self._redDotCityHud = nil
	---@type table<number, CS.Notification.NotificationDynamicNode>
	self._redDotUiTeams = {}
	---@type table<number, CS.Notification.NotificationDynamicNode>
	self._redDotUiTeamsPet = {}
	---@type table<number, CS.Notification.NotificationDynamicNode>
	self._redDotUiTeamsHero = {}
	self._forceHidePetRedDot = false
	-- self._forceHideHeroRedDot = false
	g_Game.EventManager:AddListener(EventConst.ON_PET_ADD, Delegate.GetOrCreate(self, self.OnPetAdd))
	g_Game.EventManager:AddListener(EventConst.HERO_GET_NEW, Delegate.GetOrCreate(self, self.OnHeroAdd))
	g_Game.ServiceManager:AddResponseCallback(ProtocolId.NotifyTroopPresetBagHpRecover, Delegate.GetOrCreate(self, self.OnNotifyTroopPresetBagHpRecover))
	self:InitRedDots()
end

function TroopModule:OnRemove()
	g_Game.EventManager:RemoveListener(EventConst.ON_PET_ADD, Delegate.GetOrCreate(self, self.OnPetAdd))
	g_Game.EventManager:RemoveListener(EventConst.HERO_GET_NEW, Delegate.GetOrCreate(self, self.OnHeroAdd))
	g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.NotifyTroopPresetBagHpRecover, Delegate.GetOrCreate(self, self.OnNotifyTroopPresetBagHpRecover))
end

--- 获取编队英雄血量
---@param heroId number
---@return number
function TroopModule:GetTroopHeroHp(heroId)
	local troopCtrls = ModuleRefer.SlgModule:GetMyTroopCtrls()
	---@type number, TroopCtrl
	for _, v in pairs(troopCtrls) do
		local troopData = v:GetTroopData()
		if troopData and troopData.Battle then
			for _, hero in pairs(troopData.Battle.Group.Heros) do
				if hero.HeroID == heroId then
					return hero.Hp
				end
			end
		end
	end

	local castle = ModuleRefer.PlayerModule:GetCastle()
	local heroHp = castle and castle.TroopPresets and castle.TroopPresets.HeroHp and castle.TroopPresets.HeroHp[heroId] or nil
	if not heroHp then
		heroHp = ModuleRefer.HeroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_HP) or 0
	end
	return heroHp
end

--- 获取编队宠物血量
---@param petCompId number
---@return number
function TroopModule:GetTroopPetHp(petCompId)
	local troopCtrls = ModuleRefer.SlgModule:GetMyTroopCtrls()
	---@type number, TroopCtrl
	for _, v in pairs(troopCtrls) do
		local troopData = v:GetTroopData()
		if troopData and troopData.Battle then
			for _, hero in pairs(troopData.Battle.Group.Heros) do
				if hero.Pets[0] and hero.Pets[0].PetCompID == petCompId then
					return hero.Pets[0].Hp
				end
			end
		end
	end


	local castle = ModuleRefer.PlayerModule:GetCastle()
	local petHp = castle and castle.TroopPresets and castle.TroopPresets.PetHp and castle.TroopPresets.PetHp[petCompId] or nil
	if not petHp then
		petHp = ModuleRefer.PetModule:GetPetAttrDisplayValue(petCompId, ATTR_DISP_HERO_HP) or 0
	end
	return petHp
end

--- 获取编队宠物最大血量
---@param petCompId number
---@return number
function TroopModule:GetTroopPetHpMax(petCompId)
	return ModuleRefer.PetModule:GetPetAttrDisplayValue(petCompId, ATTR_DISP_HERO_HP) or 1
end

---@param preset wds.TroopPreset
function TroopModule:GetTroopPresetMaxHPAddPct(preset)
	if not preset then return 0 end
	local heroIds = {}
	for i = 1, MAX_HERO_COUNT do
		local heroData = preset and preset.Heroes and preset.Heroes[i]
		if (heroData) then
			heroIds[i] = heroData.HeroCfgID
		end
	end
	---@type HeroAssociateData_RelationCfg
	local relatoinCfg = self:GetHerosRelation(heroIds)
	if relatoinCfg then
		return relatoinCfg.addHpPct / 10000
	else
		return 0
	end
end

--- 获取编队英雄与宠物最大血量
---@param self TroopModule
---@param heroId number
---@param petId number @为空则取英雄绑定宠物
---@param exMulit number @额外乘数
function TroopModule:GetTroopHeroAndPetHPMax(heroId, petId, exMulit)
	if (not heroId or heroId <= 0) then return 0,0 end
	local heroHpMax = self:GetTroopHeroHPMax(heroId, exMulit)
	local petHpMax = 0

	-- 宠物属性
	petId = petId or ModuleRefer.HeroModule:GetHeroLinkPet(heroId)
	if (petId and petId > 0) then
        petHpMax = self:GetTroopPetMaxHp(petId, exMulit)
	end

	return heroHpMax, petHpMax
end

--- 获取编队英雄最大血量
---@param self TroopModule
---@param heroId number
---@param exMulti number @额外乘数
function TroopModule:GetTroopHeroHPMax(heroId,exMulti)
	if (not heroId or heroId <= 0) then return 0 end
	local heroModule = ModuleRefer.HeroModule
	local base = heroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_HPMAX_BASE) or 0
	local baseMulti = heroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_HPMAX_BASE_MULIT) or 0
	local multi = heroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_HPMAX_MULIT) or 0
	local point = heroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_HPMAX_POINT) or 0
    exMulti = exMulti or 0
    return self:AttrFormula(base, baseMulti, multi, exMulti, point)
end


--- 获取编队宠物最大血量
---@param petId number
---@param exMulti number @额外乘数
function TroopModule:GetTroopPetMaxHp(petId, exMulti)
	if (not petId or petId <= 0) then return 0 end
	local petModule = ModuleRefer.PetModule
	local base = petModule:GetPetAttrDisplayValue(petId, ATTR_DISP_HERO_HPMAX_BASE) or 0
	local baseMulti = petModule:GetPetAttrDisplayValue(petId, ATTR_DISP_HERO_HPMAX_BASE_MULIT) or 0
	local multi = petModule:GetPetAttrDisplayValue(petId, ATTR_DISP_HERO_HPMAX_MULIT) or 0
	local point = petModule:GetPetAttrDisplayValue(petId, ATTR_DISP_HERO_HPMAX_POINT) or 0
    exMulti = exMulti or 0
    return self:AttrFormula(base, baseMulti, multi, exMulti, point)
end

--- 获取编队英雄采集速度
---@param self TroopModule
---@param heroId number
---@param exMulti number @额外乘数
function TroopModule:GetTroopHeroCollectSpeed(heroId, exMulti)
    if (not heroId or heroId <= 0) then return 0 end
    local heroModule = ModuleRefer.HeroModule
    local base = heroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_COLLECT_SPEED_BASE) or 0
    local baseMulti = heroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_COLLECT_SPEED_BASE_MULIT) or 0
    local multi = heroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_COLLECT_SPEED_MULIT) or 0
    local point = heroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_COLLECT_SPEED_POINT) or 0
    exMulti = exMulti or 0
    return self:AttrFormula(base, baseMulti, multi, exMulti, point)
end

--- 获取编队英雄采集负载
---@param self TroopModule
---@param heroId number
---@param exMulti number @额外乘数
function TroopModule:GetTroopHeroCollectLoad(heroId, exMulti)
    if (not heroId or heroId <= 0) then return 0 end
    local heroModule = ModuleRefer.HeroModule
    local base = heroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_LOAD_BASE) or 0
    local baseMulti = heroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_LOAD_BASE_MULIT) or 0
    local multi = heroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_LOAD_MULIT) or 0
    local point = heroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_HERO_LOAD_POINT) or 0
    exMulti = exMulti or 0
    return self:AttrFormula(base, baseMulti, multi, exMulti, point)
end

--- 获取编队宠物采集速度
---@param self TroopModule
---@param petId number
---@param exMulti number @额外乘数
function TroopModule:GetTroopPetCollectSpeed(petId, exMulti)
    if (not petId or petId <= 0) then return 0 end
    local petModule = ModuleRefer.PetModule
    local base = petModule:GetPetAttrDisplayValue(petId, ATTR_DISP_HERO_COLLECT_SPEED_BASE) or 0
    local baseMulti = petModule:GetPetAttrDisplayValue(petId, ATTR_DISP_HERO_COLLECT_SPEED_BASE_MULIT) or 0
    local multi = petModule:GetPetAttrDisplayValue(petId, ATTR_DISP_HERO_COLLECT_SPEED_MULIT) or 0
    local point = petModule:GetPetAttrDisplayValue(petId, ATTR_DISP_HERO_COLLECT_SPEED_POINT) or 0
    exMulti = exMulti or 0
    return self:AttrFormula(base, baseMulti, multi, exMulti, point)
end

--- 获取编队宠物采集负载
---@param self TroopModule
---@param petId number
---@param exMulti number @额外乘数
function TroopModule:GetTroopPetCollectLoad(petId, exMulti)
    if (not petId or petId <= 0) then return 0 end
    local petModule = ModuleRefer.PetModule
    local base = petModule:GetPetAttrDisplayValue(petId, ATTR_DISP_HERO_LOAD_BASE) or 0
    local baseMulti = petModule:GetPetAttrDisplayValue(petId, ATTR_DISP_HERO_LOAD_BASE_MULIT) or 0
    local multi = petModule:GetPetAttrDisplayValue(petId, ATTR_DISP_HERO_LOAD_MULIT) or 0
    local point = petModule:GetPetAttrDisplayValue(petId, ATTR_DISP_HERO_LOAD_POINT) or 0
    exMulti = exMulti or 0
    return self:AttrFormula(base, baseMulti, multi, exMulti, point)
end

function TroopModule:AttrFormula(base, baseMulti, multi, exMulti, point)
    return base * (1 + baseMulti / 10000.0) * ( 1 + multi / 10000.0 + exMulti ) + point
end

--- 获取部队血包当前血量
---@param troopIndex number
---@return number
function TroopModule:GetTroopHpBagCurHp(troopIndex)
	if HUDTroopUtils.IsPresetInHomeSe(troopIndex) then
		local teamData = HUDTroopUtils.GetExplorerTeamData(troopIndex)
		if teamData then
			return (teamData:GetScenePlayerPreset() or {}).CurHp or 0
		end
	end
	local castle = ModuleRefer.PlayerModule:GetCastle()
	local ept = {}
	return ((((castle or ept).TroopPresets or ept).Presets[troopIndex] or ept).Bag or ept).CurHp or 0
end

--- 获取部队血包最大血量
---@param troopIndex number
---@return number
function TroopModule:GetTroopHpBagCapacity(troopIndex)
	local castle = ModuleRefer.PlayerModule:GetCastle()
	local ept = {}
	return ((((castle or ept).TroopPresets or ept).Presets[troopIndex] or ept).Bag or ept).Capacity or 0
end

--- 手动补血
---@param troopIndex number
---@param withHpBag boolean
function TroopModule:RecoverTroopPresetHp(troopIndex, withHpBag, clickTransform)
	local neededHpTable = self:GetTroopNeededHpTable(troopIndex + 1)
	local neededHp = self:GetTroopNeededHp(troopIndex + 1)
	local keyMap = FPXSDKBIDefine.ExtraKey.supply_bubble_click
	local extraDict = {}
	extraDict[keyMap.troop_id] = troopIndex
	extraDict[keyMap.hp_recover] = neededHp
    extraDict[keyMap.hero_recover] = {}
    extraDict[keyMap.pet_recover] = {}
    extraDict[keyMap.left_hp] = math.max(ModuleRefer.TroopModule:GetTroopHpBagCurHp(troopIndex + 1) - neededHp, 0)
	for heroId, hp in pairs(neededHpTable.heroNeededHp) do
		extraDict[keyMap.hero_recover][tostring(heroId)] = hp
	end
	for petId, hp in pairs(neededHpTable.petNeededHp) do
		extraDict[keyMap.pet_recover][tostring(petId)] = hp
	end
	if withHpBag then
		extraDict[keyMap.left_hp] = extraDict[keyMap.left_hp] + math.min(neededHp, self:GetStockFoodCount())
	end
	ModuleRefer.FPXSDKModule:TrackCustomBILog(FPXSDKBIDefine.EventName.supply_bubble_click, extraDict)
	if HUDTroopUtils.IsPresetInHomeSe(troopIndex + 1) then
		local msg = require("HomeSeTroopRecoverHpParameter").new()
		msg.args.PresetIndex = troopIndex
		msg:Send()
		g_Game.EventManager:TriggerEvent(EventConst.ON_TROOP_MEDIATOR_ADD_HP, clickTransform)
	else
		local msg = require("RecoverPresetHpParameter").new()
		msg.args.Slot = troopIndex
		msg.args.WithBag = withHpBag
		msg:Send()
		g_Game.EventManager:TriggerEvent(EventConst.ON_TROOP_MEDIATOR_ADD_HP, clickTransform)
	end
end

--- 获取编队需要血量
---@param troopIndex number
---@return number
function TroopModule:GetTroopNeededHp(troopIndex)
	if HUDTroopUtils.IsPresetInHomeSe(troopIndex) then
		local teamData = HUDTroopUtils.GetExplorerTeamData(troopIndex)
		if not teamData then return 0 end
		local ret = 0
		---@type number, SEHero
		for _, unit in pairs(teamData._team._assignSEHeros) do
			ret = ret + unit:GetHPMax() - unit:GetHP()
		end
		return ret
	end

	local troopInfo = ModuleRefer.SlgModule.troopManager:GetTroopInfoByPresetIndex(troopIndex)
	local troop = troopInfo.entityData
	if troop then
		return troop.Battle.MaxHp - troop.Battle.Hp
	end

	local preset = troopInfo.preset
	if preset then
		local ret = 0
		local addPct = self:GetHerosRelationValue(preset)
		local eps = 0.999999
		for _, hero in pairs(preset.Heroes) do
			local hpMax, petHpMax = self:GetTroopHeroAndPetHPMax(hero.HeroCfgID, hero.PetCompId, addPct)
			if math.abs(hpMax - hero.HP) > eps then
				ret = ret + hpMax - hero.HP
			end
			if math.abs(hero.PetHP - petHpMax) > eps then
				ret = ret + petHpMax - hero.PetHP
			end
		end
		return ret
	end

	return 0
end

function TroopModule:GetTroopCanHealHp(index)
	return math.min(self:GetTroopHpBagCurHp(index), self:GetTroopNeededHp(index))
end

function TroopModule:GetTroopNeededHpTable(troopIndex)
	local preset = ModuleRefer.PlayerModule:GetCastle().TroopPresets.Presets[troopIndex]
	if not preset then return 0 end
	local ret = {}
	local addPct = self:GetHerosRelationValue(preset)
    local eps = 0.999999
	ret.heroNeededHp = {}
	ret.petNeededHp = {}
    for _, hero in pairs(preset.Heroes) do
        local hpMax, petHpMax = self:GetTroopHeroAndPetHPMax(hero.HeroCfgID, hero.PetCompId, addPct)
        if math.abs(hpMax - hero.HP) > eps then
            ret.heroNeededHp[hero.HeroCfgID] = hpMax - hero.HP
        end
        if math.abs(petHpMax - hero.PetHP) > eps then
            ret.petNeededHp[hero.PetCompId] = petHpMax - hero.PetHP
        end
    end
    return ret
end

---@return number
function TroopModule:GetStockFoodCount()
	local stockRoomInfo = nil
	local castle = ModuleRefer.PlayerModule:GetCastle()
	if not castle then return 0 end
	for _, v in pairs(castle.Castle.CastleFurniture) do
		local lvCfg = ConfigRefer.CityFurnitureLevel:Find(v.ConfigId)
		if lvCfg:Type() == ConfigRefer.CityConfig:StockRoomFurniture() then
			stockRoomInfo = v.StockRoomInfo
			break
		end
	end
	local foodInfo = (stockRoomInfo or {}).FoodInfo
	local foodCount = 0
	for _, v in pairs(foodInfo or {}) do
		foodCount = foodCount + v
	end
	return foodCount
end

--- 获取所有编队内所有宠物的列表
---@param self TroopModule
---@return table<number, wds.PetInfo>
function TroopModule:GetAllPetsInPresets()
	local result = {}
	local castle = ModuleRefer.PlayerModule:GetCastle()
	if (not castle or not castle.TroopPresets or not castle.TroopPresets.Presets) then return end
	for _, preset in ipairs(castle.TroopPresets.Presets) do
		if (preset and preset.Heroes) then
			for _, hero in ipairs(preset.Heroes) do
				if (hero and hero.HeroCfgID and hero.HeroCfgID > 0) then
					local petId = ModuleRefer.HeroModule:GetHeroLinkPet(hero.HeroCfgID)
					if (petId and petId > 0) then
						result[petId] = ModuleRefer.PetModule:GetPetByID(petId)
					end
				end
			end
		end
	end
	return result
end

function TroopModule:GetHeroTeamIndex(heroId)
    local castle = ModuleRefer.PlayerModule:GetCastle()
    if (not castle or not castle.TroopPresets or not castle.TroopPresets.Presets) then return nil end
    for index, preset in ipairs(castle.TroopPresets.Presets) do
        local heroes = preset.Heroes or {}
        for _, info in ipairs(heroes) do
            if info.HeroCfgID == heroId then
                return index
            end
        end
    end
    return nil
end

function TroopModule:GetHeroListInTroop(troopIndex)
	local list = {}
	local castle = ModuleRefer.PlayerModule:GetCastle()
	if (not castle or not castle.TroopPresets or not castle.TroopPresets.Presets) then return list end
	local preset = castle.TroopPresets.Presets[troopIndex]
	if (preset) then
		local heroes = preset.Heroes or {}
		for _, info in ipairs(heroes) do
			if (info and info.HeroCfgID > 0) then
				list[#list + 1] = info.HeroCfgID
			end
		end
	end
	return list
end

--- 初始化红点
function TroopModule:InitRedDots()
	self._redDotCityHud = NM:GetOrCreateDynamicNode("troop_city_hud", NotificationType.TROOP_CITY_HUD)
	for i = 1, MAX_TROOP_COUNT do
		if (not self._redDotUiTeams[i]) then
			self._redDotUiTeams[i] = NM:GetOrCreateDynamicNode("troop_ui_team_" .. i, NotificationType.TROOP_UI_TEAM)
			self._redDotUiTeamsHero[i] = NM:GetOrCreateDynamicNode("troop_ui_team_hero_" .. i, NotificationType.TROOP_UI_TEAM_HERO)
			self._redDotUiTeamsPet[i] = NM:GetOrCreateDynamicNode("troop_ui_team_pet_" .. i, NotificationType.TROOP_UI_TEAM_PET)
			NM:AddToParent(self._redDotUiTeamsPet[i], self._redDotUiTeams[i])
			NM:AddToParent(self._redDotUiTeamsHero[i], self._redDotUiTeams[i])
			NM:AddToParent(self._redDotUiTeams[i], self._redDotCityHud)
		end
	end
end

--- 获取主HUD编队红点
---@param self TroopModule
---@return CS.Notification.NotificationDynamicNode
function TroopModule:GetRedDotCityHud()
	return self._redDotCityHud
end

--- 获取界面编队宠物红点
---@param self TroopModule
---@param troopIndex number
---@return CS.Notification.NotificationDynamicNode
function TroopModule:GetRedDotUITeamPet(troopIndex)
	return self._redDotUiTeamsPet[troopIndex]
end

--- 获取界面编队红点
---@param self TroopModule
---@param troopIndex number
---@return CS.Notification.NotificationDynamicNode
function TroopModule:GetRedDotUITeam(troopIndex)
	return self._redDotUiTeams[troopIndex]
end

--- 刷新红点状态
---@param self TroopModule
function TroopModule:RefreshRedDotStatus()
	local hasNotify = false
	for i = 1, MAX_TROOP_COUNT do
		NM:SetDynamicNodeNotificationCount(self._redDotUiTeamsPet[i], 0)
		NM:SetDynamicNodeNotificationCount(self._redDotUiTeamsHero[i], 0)
	end
	-- NM:SetDynamicNodeNotificationCount(self._redDotCityHud, 0)

	local castle = ModuleRefer.PlayerModule:GetCastle()
	if not castle then return false end
	-- 宠物 : 有未上阵宠物且有上阵英雄没有宠物时显示红点
	local freePetTypeList = ModuleRefer.PetModule:GetFreePetTypeList()
	if (not self._forceHidePetRedDot) then
		for i, preset in ipairs(castle.TroopPresets.Presets) do
			if (preset) then
				local heroCount, petCount = self:GetPresetHeroAndPetCount(preset)
				if (heroCount == 0 or heroCount == petCount or petCount >= self:GetTroopPetSlotCount(i)) then goto continue end
				local troopPetTypeList = self:GetTroopPetTypeList(i)
				if (table.isNilOrZeroNums(troopPetTypeList) and not table.isNilOrZeroNums(freePetTypeList)) then
					NM:SetDynamicNodeNotificationCount(self._redDotUiTeamsPet[i], 1)
					hasNotify = true
				else
					if (not table.isNilOrZeroNums(freePetTypeList)) then
						for type, _ in pairs(freePetTypeList) do
							if (not troopPetTypeList[type]) then
								NM:SetDynamicNodeNotificationCount(self._redDotUiTeamsPet[i], 1)
								hasNotify = true
								break
							end
						end
					end
				end
			end
			::continue::
		end
	end

	-- 英雄 : 有空位就显示红点，无论是否新英雄
	local hasNewHero = true -- self:HasNewBattleHero()
	if hasNewHero then
		local hasFreeHero = self:HasFreeBattleHero()
		local hasEmptySlot = false
		-- 检查空位
		if hasFreeHero then
			for i = 1, MAX_TROOP_COUNT do
				local preset = castle.TroopPresets.Presets[i]
				if (preset) then
					local heroCount = 0
					for key, value in pairs(preset.Heroes) do
						if (value and value.HeroCfgID and value.HeroCfgID > 0) then
							heroCount = heroCount + 1
						end
					end
					if heroCount < MAX_HERO_COUNT then
						NM:SetDynamicNodeNotificationCount(self._redDotUiTeamsHero[i], 1)
						hasNotify = true
						hasEmptySlot = true
					end
				end
			end
		end
	end
	if castle and castle.TroopPresets and castle.TroopPresets.Presets then
		for _, preset in pairs(castle.TroopPresets.Presets) do
			if (preset) then
				local heroes = preset.Heroes or {}
				for _, info in ipairs(heroes) do
					if (info and info.HeroCfgID and info.HeroCfgID > 0) then
						local heroConfigId = info.HeroCfgID
						if ModuleRefer.HeroModule:CheckHeroHeadIconNew(heroConfigId) then
							ModuleRefer.HeroModule:SyncHeroRedDot(heroConfigId, ModuleRefer.HeroModule.HeroRedDotMask.IsNew)
						end
					end
				end
			end
		end
	end
	return hasNotify
end

---@param self TroopModule
---@param preset wds.TroopPreset
---@return number, number @英雄数量, 宠物数量
function TroopModule:GetPresetHeroAndPetCount(preset)
	if (not preset) then return 0, 0 end
	local heroCount = 0
	local petCount = 0
	for _, heroInfo in ipairs(preset.Heroes) do
		if (heroInfo and heroInfo.HeroCfgID and heroInfo.HeroCfgID > 0) then
			heroCount = heroCount + 1
			local petId = ModuleRefer.HeroModule:GetHeroLinkPet(heroInfo.HeroCfgID)
			if (petId and petId > 0) then
				petCount = petCount + 1
			end
		end
	end
	return heroCount, petCount
end

---@param index number
---@return wds.TroopPreset, number, wds.TroopPresets @preset, maxPresetCount, presets
function TroopModule:GetPresetData(index)
	if (index == nil or index < 1) then index = 1 end
	local castle = ModuleRefer.PlayerModule:GetCastle()
	local maxPresetCount = castle.Castle.GlobalAttr.PresetCount
	local presets = castle.TroopPresets
	return presets.Presets[index], maxPresetCount, presets
end

--- 获取部队宠物类型列表
---@param self TroopModule
---@param troopIndex number
---@return table<number, boolean>
function TroopModule:GetTroopPetTypeList(troopIndex)
	local list = {}
	local castle = ModuleRefer.PlayerModule:GetCastle()
	if (not castle or not castle.TroopPresets or not castle.TroopPresets.Presets) then return list end
	local preset = castle.TroopPresets.Presets[troopIndex]
	if (preset) then
		local heroes = preset.Heroes or {}
		for _, info in ipairs(heroes) do
			if (info and info.HeroCfgID > 0) then
				local petId = ModuleRefer.HeroModule:GetHeroLinkPet(info.HeroCfgID)
				if (petId and petId > 0) then
					local petInfo = ModuleRefer.PetModule:GetPetByID(petId)
					if (petInfo) then
						list[petInfo.Type] = true
					end
				end
			end
		end
	end
	return list
end

--- 获取宠物所属编队索引
---@param petId number
---@return number
function TroopModule:GetPetBelongedTroopIndex(petId)
	local castle = ModuleRefer.PlayerModule:GetCastle()
	if (not castle or not castle.TroopPresets or not castle.TroopPresets.Presets) then return nil end
	for i, preset in ipairs(castle.TroopPresets.Presets) do
		if (preset) then
			for _, hero in ipairs(preset.Heroes) do
				if (hero and hero.HeroCfgID and hero.HeroCfgID > 0) then
					local petIdInPreset = hero.PetCompId
					if (petIdInPreset == petId) then
						return i
					end
				end
			end
		end
	end
	return 0
end

--- 获取编队战力
---@param self TroopModule
---@param troopIndex number
---@return number
function TroopModule:GetTroopPower(troopIndex)
	local castle = ModuleRefer.PlayerModule:GetCastle()
	local preset = castle.TroopPresets.Presets[troopIndex]
	return self:GetTroopPowerByPreset(preset)
end

---@param preset wds.TroopPreset
function TroopModule:GetTroopPowerByPreset(preset)
	if (not preset) then return 0 end
	local power = 0
	for _, heroInfo in ipairs(preset.Heroes) do
		local heroId = heroInfo.HeroCfgID
		local petId = heroId and heroId > 0 and ModuleRefer.HeroModule:GetHeroLinkPet(heroId)
		if (heroId and heroId > 0) then
			power = power + ModuleRefer.HeroModule:GetHeroAttrDisplayValue(heroId, ATTR_DISP_POWER)
		end
		if (petId and petId > 0) then
			power = power + ModuleRefer.PetModule:GetPetAttrDisplayValue(petId, ATTR_DISP_POWER)
		end
	end
	return power
end

--- 获取编队主将英雄ID
---@param troopIndex number
---@return number
function TroopModule:GetTroopLeadHeroId(troopIndex)
	local castle = ModuleRefer.PlayerModule:GetCastle()
	local preset = castle.TroopPresets.Presets[troopIndex]
	return self:GetPresetLeadHeroId(preset)
end

---@param preset wds.TroopPreset
function TroopModule:GetPresetLeadHeroId(preset)
	if (not preset) then
		return 0
	end

    local FormationUtility = require("FormationUtility")
    local maxIndex = FormationUtility.GetMaxIndex(preset.Heroes)

	local ret = 0
	local maxPower = -math.huge
	for i = 0, maxIndex do
		local hero = preset.Heroes[i]
		if hero then
			local power = ModuleRefer.HeroModule:CalcHeroPower(hero.HeroCfgID)
			if (power > maxPower) then
				maxPower = power
				ret = hero.HeroCfgID
			end
		end
	end
	return ret
end

--- 获取所有编队总战力
---@param self TroopModule
---@return number
function TroopModule:GetAllTroopsTotalPower()
	local power = 0
	for i = 1, MAX_TROOP_COUNT do
		power = power + self:GetTroopPower(i)
	end
	return power
end

function TroopModule:GetMaxTroopPower()
	local maxPower = 0
	for i = 1, MAX_TROOP_COUNT do
		local power = self:GetTroopPower(i)
		if power > maxPower then
			maxPower = power
		end
	end
	return maxPower
end

function TroopModule:OnPetAdd(petId)
	self._forceHidePetRedDot = false
	self:RefreshRedDotStatus()
	g_Game.EventManager:TriggerEvent(EventConst.FORCE_HIDE_PET_REDDOT_TROOP)
end

function TroopModule:OnHeroAdd(heroId)
	-- self._forceHideHeroRedDot = false
	self:RefreshRedDotStatus()
end

--- 强制隐藏宠物红点
---@param self TroopModule
function TroopModule:ForceHideRedDotPet()
	self._forceHidePetRedDot = true
	self:RefreshRedDotStatus()
	g_Game.EventManager:TriggerEvent(EventConst.FORCE_HIDE_PET_REDDOT_TROOP)
end

--- 是否强制隐藏宠物红点
---@param self TroopModule
function TroopModule:IsRedDotPetForceHidden()
	return self._forceHidePetRedDot
end

-- -- - 强制隐藏英雄红点
-- -- -@param self TroopModule
-- function TroopModule:ForceHideRedDotHero()
-- 	self._forceHideHeroRedDot = true
-- 	self:RefreshRedDotStatus()
-- end

-- --- 是否强制隐藏英雄红点
-- ---@param self TroopModule
-- function TroopModule:IsRedDotHeroForceHidden()
-- 	return self._forceHideHeroRedDot
-- end

--- 获取所有编队内的所有英雄列表
---@param self TroopModule
---@return table<number, boolean>
function TroopModule:GetHeroesFromAllPresets()
	---@type table<number, boolean>
	local result = {}
	local castle = ModuleRefer.PlayerModule:GetCastle()
	if (not castle or not castle.TroopPresets or not castle.TroopPresets.Presets) then return result end
	for i = 1, MAX_TROOP_COUNT do
		local preset = castle.TroopPresets.Presets[i]
		if (preset and preset.Heroes) then
			for _, hero in pairs(preset.Heroes) do
				if (hero and hero.HeroCfgID > 0) then
					result[hero.HeroCfgID] = true
				end
			end
		end
	end
	return result
end

--- 是否有可用战斗英雄
---@param self TroopModule
---@return boolean
function TroopModule:HasFreeBattleHero()
	local heroesInTeam = self:GetHeroesFromAllPresets()
	local player = ModuleRefer.PlayerModule:GetPlayer()
	for _, heroInfo in pairs(player.Hero.HeroInfos) do
		local heroCfg = ConfigRefer.Heroes:Find(heroInfo.CfgId)
		if (not heroesInTeam[heroInfo.CfgId] and heroCfg and heroCfg:Type() == HeroType.Heros) then
			return true
		end
	end
	return false
end

--- 是否有新的战斗英雄
---@param self TroopModule
---@return boolean
function TroopModule:HasNewBattleHero()	
	local player = ModuleRefer.PlayerModule:GetPlayer()
	for _, heroInfo in pairs(player.Hero.HeroInfos) do
		local heroCfg = ConfigRefer.Heroes:Find(heroInfo.CfgId)
		local isNew = ModuleRefer.HeroModule:CheckHeroHeadIconNew(heroInfo.CfgId)

		if isNew and heroCfg:Type() == HeroType.Heros then
			return true
		end
	end
	return false
end

function TroopModule:GetRelationConfigData()
	if self.cfgData == nil then
		self.cfgData = UIHeroAssociateHelper.GetHeroAssociateData()
	end
	return self.cfgData
end

---@param index number
---@return number
function TroopModule:GetHerosRelationValueByIndex(index)
	local castle = ModuleRefer.PlayerModule:GetCastle()
	local preset = castle.TroopPresets.Presets[index]
	return self:GetHerosRelationValue(preset)
end

---@param preset wds.TroopPreset
---@return number
function TroopModule:GetHerosRelationValue(preset)
	if not preset then
		return 0
	end
	local tags2Num = {}
	for _, hero in pairs(preset.Heroes) do
		if hero.HeroCfgID > 0 then
			local heroCfg = ConfigRefer.Heroes:Find(hero.HeroCfgID)
			local tagId = heroCfg:AssociatedTagInfo()
			if not tags2Num[tagId] then
				tags2Num[tagId] = 0
			end
			tags2Num[tagId] = tags2Num[tagId] + 1
		end

		local pet = ModuleRefer.PetModule:GetPetByID(hero.PetCompId)
		if pet then
			local petCfg = ConfigRefer.Pet:Find(pet.ConfigId)
			local tagId = petCfg:AssociatedTagInfo()
			if not tags2Num[tagId] then
				tags2Num[tagId] = 0
			end
			tags2Num[tagId] = tags2Num[tagId] + 1
		end
	end
	local maxMatchedNum = 0
    local maxBuffId = 0
    ---@type number, TagTiesElementConfigCell
    for _, cfg in ConfigRefer.TagTiesElement:ipairs() do
        local matchedNum = 0
        local active = true
        for i = 1, cfg:BattleStyleLength() do
            local tagId = cfg:BattleStyle(i)
            if (tags2Num[tagId] or 0) < cfg:Num(i) then
                active = false
                matchedNum = 0
                break
            else
                matchedNum = matchedNum + cfg:Num(i)
            end
        end
        if active and matchedNum > maxMatchedNum then
            maxMatchedNum = matchedNum
            maxBuffId = cfg:Id()
        end
    end
	local buffCfg = ConfigRefer.TagTiesElement:Find(maxBuffId)
	if not buffCfg then
		return 0
	end
	local tiesId = buffCfg:Ties()
	return require("UITroopHelper").GetTiesValueByTiesId(tiesId)
end


function TroopModule:CanFillTroop(index)
	if not index or index < 1 or index > MAX_TROOP_COUNT then
		return false
	end

	local heroCount = 0
	local petCount = 0

	local castle = ModuleRefer.PlayerModule:GetCastle()
	if castle and castle.TroopPresets and castle.TroopPresets.Presets then
		local preset = castle.TroopPresets.Presets[index]
		if preset and preset.Heroes then
			for _, value in pairs(preset.Heroes) do
				if value.HeroCfgID > 0 then
					heroCount = heroCount + 1
				else
					break
				end
				if value.PetCompId > 0 then
					petCount = petCount + 1
				end
			end
		end
	end

	local maxPetCount = self:GetTroopPetSlotCount(index)

	--英雄和宠物都没有空位
	if heroCount >= MAX_HERO_COUNT and petCount >= maxPetCount then
		return false
	end

	if heroCount < MAX_HERO_COUNT then --英雄有空位
		local hasFreeHero = self:HasFreeBattleHero()
		if hasFreeHero then
			return true
		end
	else
		if petCount < maxPetCount then --英雄没空位，但是宠物有空位（宠物没法脱离英雄单独上阵）
			local hasFreePet = ModuleRefer.PetModule:HasFreePet()
			if hasFreePet then
				return true
			end
		end
	end

	return false
end

function TroopModule:GetTroopPetSlotCount(presetIndex)
	local PresetIndex2FlagType = {
		1001301,
		1001701,
		1002101
	}

	local city = ModuleRefer.CityModule:GetMyCity()
    local flagType = PresetIndex2FlagType[presetIndex]
    ---@type CityFurniture
    local furniture = city.furnitureManager:GetFurnitureByTypeCfgId(flagType)
	if not furniture then return 0 end
    local furnitureId = furniture:UniqueId()
    local unlockNum = ModuleRefer.CastleAttrModule:GetValueWithFurniture(CityAttrType.TroopPetSlot, furnitureId)
	return unlockNum
end

function TroopModule:RecallTroopPreset(index)
	require("HUDTroopUtils").DoestTroopStateMeetStartMarchConditions(index, function()
		if ModuleRefer.SlgModule:IsInMyCity() then
			local myCity = ModuleRefer.CityModule.myCity
			local explorerMgr = myCity.cityExplorerManager
			local team = explorerMgr:GetTeamByPresetIndex(index - 1)
			if team and not team:InExplore() then
				explorerMgr:SendDismissTeam(team)
				return
			end
		end
		local preset = self:GetPresetData(index)
		ModuleRefer.SlgModule:ReturnToHome(preset.TroopId)
	end)
end

function TroopModule:OnNotifyTroopPresetBagHpRecover(_, rsp, _)
	ModuleRefer.ToastModule:AddSimpleToast(I18N.GetWithParams("toast_foodtoteam_desc", rsp.RecoverBagHp))
end

return TroopModule
