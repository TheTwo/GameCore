---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by BE.Tenner.
--- DateTime: 2021/7/14 14:17
---

local SEUnitcomponentType = require("SEUnitComponentType")
local Utils = require("Utils")
local ArtResourceUtils = require("ArtResourceUtils")
local ArtResourceConsts = require("ArtResourceConsts")
local ConfigRefer = require("ConfigRefer")

---@class SEActor
local SEActor = class("SEActor")
local SELogger = require("SELogger")

local FBX_HIDDEN_OFFSET = CS.UnityEngine.Vector3(0, -5000, 0)
local ELEVATOR_HERO_FOLLOWS = {CS.UnityEngine.Vector3(1, 0, 1), CS.UnityEngine.Vector3(-1, 0, 1)}
local VECTOR3_ZERO = CS.UnityEngine.Vector3.zero
local VECTOR3_ONE = CS.UnityEngine.Vector3.one
local QUATERNION_IDENTITY = CS.UnityEngine.Quaternion.identity

local SHADER_PARAM_POLLUTION = "_POLLUTION"
local SHADER_KEYWORD_POLLUTION_NONE = "_POLLUTION_NONE"
local SHADER_KEYWORD_POLLUTION_ADD = "_POLLUTION_ADD"
-- local SHADER_PARAM_EMISSION = "_EMISSION_TOGGLE"
-- local SHADER_PARAM_EMISSION_COLOR = "_EmissionColor"
-- local SHADER_KEYWORD_EMISSION = "_EMISSION"
local SHADER_PARAM_EFFECT_COLOR = "_EffectColor"

local SKILL_COVERAGE_COLOR_R = 1
local SKILL_COVERAGE_COLOR_G = 0
local SKILL_COVERAGE_COLOR_B = 0

local SKILL_COVERAGE_COLOR_FRIENDLY_R = 0
local SKILL_COVERAGE_COLOR_FRIENDLY_G = 1
local SKILL_COVERAGE_COLOR_FRIENDLY_B = 0

---@param self SEActor
---@param unit SEUnit
---@return void
function SEActor:ctor(unit)
    ---@type SEUnit
    self._unit = unit
    self._components = {}
    ---@type CS.UnityEngine.GameObject
    self._rootObject = nil
    ---@type CS.UnityEngine.Transform
    self._transform = nil
    ---@type CS.UnityEngine.GameObject
    self._fbxObject = nil
    ---@type CS.UnityEngine.GameObject
    self._originalFbxObject = nil
    ---@type CS.UnityEngine.Animator
    self._animator = nil
    ---@type CS.UnityEngine.Vector3
    self._cachedPosition = nil
    ---@type CS.UnityEngine.Vector3
    self._serverPosition = nil
    self._skillProgressShown = false
    self._skillProgressDuration = 0
    self._skillProgressElapsedTime = 0
    self._skillProgressReversed = false
    self._recycleId = ""
    ---@type CS.UnityEngine.Renderer[]
    self._fbxRendererList = nil
    self._animStates = {}
    ---@type CS.UnityEngine.Vector3
    self._fbxOriginalOffset = VECTOR3_ZERO
	---@type CS.UnityEngine.Vector3
	self._fbxOriginalScale = VECTOR3_ONE
    self._rendererInvisibleCount = 0
    self._createHelper = unit._manager._env:GetPooledCreateHelper()
	---@type CS.UnityEngine.Vector3
	self._moveForward = nil
    self._ignoreKeepDirection = false
    self._glowEffectId = 10000
	self._animatorParamTable = {}
	---@type CS.SEUnitCorpseDisslove
	self._corpseController = nil
	self._skillCovered = false
    self._recordAppendMaterialNames = {}

	SKILL_COVERAGE_COLOR_R = ConfigRefer.ConstSe.SeSkillCoverageColor and ConfigRefer.ConstSe:SeSkillCoverageColor(1) or SKILL_COVERAGE_COLOR_R
	SKILL_COVERAGE_COLOR_G = ConfigRefer.ConstSe.SeSkillCoverageColor and ConfigRefer.ConstSe:SeSkillCoverageColor(2) or SKILL_COVERAGE_COLOR_G
	SKILL_COVERAGE_COLOR_B = ConfigRefer.ConstSe.SeSkillCoverageColor and ConfigRefer.ConstSe:SeSkillCoverageColor(3) or SKILL_COVERAGE_COLOR_B

	SKILL_COVERAGE_COLOR_FRIENDLY_R = ConfigRefer.ConstSe.SeSkillCoverageColorFriendly and ConfigRefer.ConstSe:SeSkillCoverageColorFriendly(1) or SKILL_COVERAGE_COLOR_FRIENDLY_R
	SKILL_COVERAGE_COLOR_FRIENDLY_G = ConfigRefer.ConstSe.SeSkillCoverageColorFriendly and ConfigRefer.ConstSe:SeSkillCoverageColorFriendly(2) or SKILL_COVERAGE_COLOR_FRIENDLY_G
	SKILL_COVERAGE_COLOR_FRIENDLY_B = ConfigRefer.ConstSe.SeSkillCoverageColorFriendly and ConfigRefer.ConstSe:SeSkillCoverageColorFriendly(3) or SKILL_COVERAGE_COLOR_FRIENDLY_B
end

function SEActor:SetMoveForward(forward)
	self._moveForward = forward
end

function SEActor:GetMoveForward()
	if (self._moveForward) then
		return self._moveForward
	else
		return self:GetForward()
	end
end

---@param self SEActor
---@param pos CS.UnityEngine.Vector3
---@return void
function SEActor:SetCachedPosition(pos)
    self._cachedPosition = pos
end

---@param self SEActor
---@return boolean
function SEActor:IsValid()
    return Utils.IsNotNull(self._rootObject)
end

function SEActor:IsFbxObjectValid()
    return Utils.IsNotNull(self._fbxObject)
end

---@param self SEActor
---@return void
function SEActor:IsDead()
    return self._unit:IsDead()
end

---@param self SEActor
---@return boolean
function SEActor:CastSkillWhenDead()
	if (not self._unit:IsDead()) then return true end
	local cell = self._unit:GetData():GetConfig()
	return cell:CastSkillWhenDead()
end

---@param self SEActor
---@return void
function SEActor:SyncHpClientFromKeyEvent()
    self._unit:SyncHpClientFromKeyEvent()
end

---@param self SEActor
---@return CS.UnityEngine.Transform
function SEActor:GetTransform()
    return self._transform
end

---@param self SEActor
---@return CS.UnityEngine.GameObject
function SEActor:GetRootObject()
    return self._rootObject
end

---@param self SEActor
---@return CS.UnityEngine.Transform
function SEActor:GetFbxTransform()
    if (self._fbxObject) then
        return self._fbxObject.transform
    end
    if (Utils.IsNull(self._transform)) then
        return nil
    end
    return self._transform:GetChild(0)
end

---@param self SEActor
---@return CS.UnityEngine.Vector3
function SEActor:GetPosition()
    if (Utils.IsNull(self._transform)) then
        return self._cachedPosition
    end
    return self._transform.position
end

---@param self SEActor
---@return CS.UnityEngine.Vector2
function SEActor:GetPosition2D()
    local pos = self:GetPosition()
    return CS.UnityEngine.Vector2(pos.x, pos.z)
end

---@param self SEActor
---@param position CS.UnityEngine.Vector3
---@return void
function SEActor:SetPosition(position)
    if (not position) then
        SELogger.LogError("Trying to set unit %s actor position of nil!", self._unit._id)
        return
    end
    self._cachedPosition = position
    if (self._transform) then
        self._transform.position = position
    end
end

---@param self SEActor
---@param pos CS.UnityEngine.Vector3
---@return void
function SEActor:TeleportTo(pos)
    self._unit:GetLocomotion():TeleportTo(pos)
end

---@param self SEActor
---@return CS.UnityEngine.Quaternion
function SEActor:GetRotation()
    if (Utils.IsNull(self._transform)) then
        return nil
    end
    return self._transform.rotation
end

---@param self SEActor
---@param rotation CS.UnityEngine.Quaternion
---@return void
function SEActor:SetRotation(rotation)
    self._transform.rotation = rotation
end

---@param self SEActor
---@return CS.UnityEngine.Vector3
function SEActor:GetScale()
    if (Utils.IsNull(self._transform)) then
        return nil
    end
    return self._transform.localScale
end

---@param self SEActor
---@param scale CS.UnityEngine.Vector3
---@return void
function SEActor:SetScale(scale)
    self._transform.localScale = scale
end

---@param self SEActor
---@return CS.UnityEngine.Vector3
function SEActor:GetForward()
    if (Utils.IsNull(self._transform)) then
        return VECTOR3_ZERO
    end
    return self._transform.forward
end

local Ease = CS.DG.Tweening.Ease
local RotMinAngle = 10
local Mathf = CS.UnityEngine.Mathf

---@param self SEActor
---@param forward CS.UnityEngine.Vector3
---@param time any
---@param useRotAnim any
---@return void
function SEActor:SetForward(forward, time, useRotAnim)
    if (forward.x == 0 and forward.z == 0) then
        --g_Logger.Warn("Try to set forward of 0, 0!")
        return
    end
    if (not self._unit._init or not self._rootObject) then
        --g_Logger.Warn("Actor not initialized yet!")
        return
    end

	self._transform:DOKill()
	if (not time or time <= 0) then
		self._transform.forward = forward
	else
		-- 转向插帧
		local oldEulerAngles = self._transform.localEulerAngles
		local newEulerAngles = CS.UnityEngine.Quaternion.LookRotation(forward).eulerAngles
		local angleOffsetY = newEulerAngles.y - oldEulerAngles.y
		if Mathf.Approximately(angleOffsetY, 0) then
			self._transform.forward = forward
			return
		end
		if useRotAnim then
			if angleOffsetY > 180 then
				angleOffsetY = angleOffsetY - 360
			elseif angleOffsetY < -180 then
				angleOffsetY = angleOffsetY + 360
			end
			if angleOffsetY > RotMinAngle or angleOffsetY < -RotMinAngle then
				self._unit:GetStateMachine():OnRot(angleOffsetY)
			end
		end

        -- SELogger.Log('Rotate %s: %s, %s, %s', self:GetTransform().name, oldEulerAngles, newEulerAngles, time)
		return self._transform:DORotate(newEulerAngles, time):SetEase(Ease.Linear)
	end
end

---@param self SEActor
---@return SEUnit
function SEActor:GetUnit()
    return self._unit
end

---@param self SEActor
---@return void
function SEActor:GetID()
    local unit = self._unit
    if unit then
        return unit._id
    end
    SELogger.LogError("id empty, unit == nil")
    return 0
end

---@param self SEActor
---@param prefabPath string
---@param parent CS.UnityEngine.Transform
---@param callback function
---@return void
function SEActor:Init(prefabPath, parent, callback)
    local pp = get_filename_without_extension(prefabPath)
    if (not pp or pp == "") then
        SELogger.LogError("Asset [%s] not found!", pp)
        return
    end
    self._recycleId = tostring(self._unit:GetData():GetConfig():Id())..pp
    local go = self._unit._manager._env._mapInfo:GetGameObjectFromPool(self._recycleId)
    if (go) then
        --g.Logger.Log("Get actor from pool, unit: %s, prefab: %s", self._unit._id, prefabPath)
        self:OnActorCreated(go, parent, callback, true)
    else
        self._createHelper:Create(pp, require("SESceneRoot").GetSceneRoot(), function(ngo)
			if (not ngo) then
				SELogger.LogError("Asset [%s] create failed!", pp)
			end
            self:OnActorCreated(ngo, parent, callback, false)
        end)
    end
end

---@param self SEActor
---@param go CS.UnityEngine.Object
---@param parent CS.UnityEngine.Transform
---@param callback function
---@param fromPool boolean
---@return void
function SEActor:OnActorCreated(go, parent, callback, fromPool)
    self._rootObject = go
    if (self._rootObject) then
        self._transform = self._rootObject.transform
        local fbxTrans = self._transform:GetChild(0)
        if (fbxTrans) then
            self._fbxObject = fbxTrans.gameObject
            self._originalFbxObject = fbxTrans.gameObject
            self._fbxRendererList = fbxTrans:GetComponentsInChildren(typeof(CS.UnityEngine.Renderer))
        end
        self._transform.parent = parent
        self._transform.localScale = VECTOR3_ONE
        self._transform.localPosition = VECTOR3_ZERO
        local model = self._transform:GetChild(0)
        if (model) then
            --self._fbxOriginalOffset = model.transform.localPosition
			self._fbxOriginalOffset = VECTOR3_ZERO
			--self._fbxOriginalScale = model.transform.localScale
        end
        self._cachedPosition = self._transform.position
        self._transform.localRotation = QUATERNION_IDENTITY
        self._animator = self._rootObject:GetComponentInChildren(typeof(CS.UnityEngine.Animator))
		if (self._animator and self._animator.parameterCount and self._animator.parameterCount > 0) then
			local prms = self._animator.parameters
			for i = 0, self._animator.parameterCount - 1 do
				local p = prms[i].name
				--SELogger.Trace("*** unit %s set animator param %s", self._id, p)
				self._animatorParamTable[p] = true
			end
		end

        self._rootObject:SetActive(true)
        --self._unit:SetInit()
        callback(fromPool)
    else
        SELogger.Trace("Actor is nil!")
    end
end

---@param self SEActor
---@return CS.UnityEngine.Animator
function SEActor:GetRealAnimator()
    return self._animator
end

---@param self SEActor
---@return CS.UnityEngine.Animator
function SEActor:GetAnimator()
	return self._animator
    --return self._playableAnimator
end

---@param self SEActor
---@return SEUnitLocomotion
function SEActor:GetLocomotion()
    return self._unit:GetComponent(SEUnitcomponentType.Locomotion)
end

---@param self SEActor
---@param other CS.UnityEngine.Collider
---@return void
function SEActor:OnTriggerEnter(other)
    --g.Logger.Log("unit %s trigger enter: %s", self._unit._id, other)
    if (not other) then
        return
    end

    -- 电梯控制
    if (self._unit:IsCaptain()) then
        ---@type CS.SEElevator
        local elevator = other:GetComponentInParent(typeof(CS.SEElevator))
        if (elevator) then
            -- 禁用触发器
            other.enabled = false
            elevator.enabled = false

            -- 获取电梯各种引用
            local floor = elevator.Floor
            local floorStart = elevator.Start
            local floorEnd = elevator.End
            local endPosDelta = floorEnd.position - floorStart.position

            -- 隐藏终点地板
            floorEnd.gameObject:SetActive(false)

            -- 初始化移动地板
            floor.position = floorStart.position
            floor.rotation = floorStart.rotation
            floor.gameObject:SetActive(true)

            -- 队长失去控制
            local env = self._unit._manager._env
            local captain = env:GetCaptain()
            env:GetInputManager():SetNoControl(true, elevator.LostControlTime)

            -- 队长停止翻滚
            captain:GetActor():GetTransform():DOKill()
            captain:GetStateMachine():OnIdle(true)

            -- 移动英雄到队长身边（同时禁用寻路）
            local captionPos = captain:GetActor():GetPosition()
            local heroIndex = 1
            for _, hero in pairs(self._unit._manager:GetHeroList()) do
                if (hero and hero ~= captain) then
                    hero:SetInElevator(true)
                    hero:GetActor():SetPosition(captionPos + ELEVATOR_HERO_FOLLOWS[heroIndex])
                    heroIndex = heroIndex + 1
                    hero:GetLocomotion():SetAgentEnabled(false)
                    hero:GetActor():GetTransform():DOKill()
                    hero:GetStateMachine():OnIdle(true)
                end
            end

            -- 禁用队长寻路
            captain:SetInElevator(true)
            captain:GetLocomotion():SetAgentEnabled(false)

            -- 移动
            for _, hero in pairs(self._unit._manager:GetHeroList()) do
                if (hero) then
                    local trans = hero:GetActor():GetTransform()
                    local pos = trans.position + endPosDelta
                    trans:DOMove(pos, elevator.Duration):SetEase(Ease.Linear)
                end
            end

            -- 启动电梯
            elevator:SetRunning(true)

            -- 移动地板
            floor.transform:DOMove(floorEnd.transform.position, elevator.Duration):SetEase(Ease.Linear):OnComplete(
                function()
                    -- 显示终点地板
                    floorEnd.gameObject:SetActive(true)

                    -- 隐藏移动地板
                    floor.gameObject:SetActive(false)

                    -- 启用触发器
                    elevator.enabled = true

                    -- 出电梯
                    for _, hero in pairs(self._unit._manager:GetHeroList()) do
                        if (hero) then
                            hero:GetLocomotion():SetAgentEnabled(true)
                            hero:SetInElevator(false)
                        end
                    end

                    -- 停止电梯
                    elevator:SetRunning(false)
                end
            )

            -- 向服务器发进电梯消息
            local pspos = self._unit._manager._env:ClientPos2Server(captionPos)
            local msg = rpc.EnterElevator.New()
            msg.request.CurPos.X = pspos.x
            msg.request.CurPos.Y = pspos.y
            msg.request.CurPos.Z = pspos.z
            msg.request.ElevatorId = elevator.ID
            msg:Start()
        end
    end
end

---@param self SEActor
---@param other CS.UnityEngine.Collider
---@return void
function SEActor:OnTriggerExit(other)
    --g.Logger.Log("player trigger exit: %s", other)
    if (not other) then
        return
    end
end

---@param self SEActor
---@param force boolean
---@return void
function SEActor:Release(force)
	if (Utils.IsNotNull(self._playableGraph)) then
		self._playableGraph:Destroy()
	end

    if (not self._rootObject) then
        return
    end

	self:ResetAppendedMaterial()
	self:SetSkillCovered(false)

	self._transform:DOKill()

    -- 缓存位置
    self._cachedPosition = self._transform.position

    -- 回收
    local unit = self._unit
    local mapInfo = unit._manager._env._mapInfo
    local hasMapInfo = Utils.IsNotNull(mapInfo)
    if (Utils.IsNotNull(self._animator)) then
        self._animator:StopPlayback()
    end
	-- local fbxTrans = self:GetFbxTransform()
	-- if (fbxTrans) then
	-- 	fbxTrans.localScale = self._fbxOriginalScale
	-- end
    self:HideSkillProgress()
    local hud, hudHandle = unit:GetHud()
    if (hud) then
        hud:HideProgress()
        hud:HideHP()
    end
    if hudHandle then
        hudHandle:Delete()
    elseif hud then
        local hudGo = hud.gameObject
        if Utils.IsNotNull(hudGo) then
            CS.UnityEngine.Object.Destroy(hudGo)
        end
    end
    unit:SetHud(nil, nil)
    local catchPetHud, petCatchHudHandle = unit:GetPetCatchHud()
    if catchPetHud then
        catchPetHud:ResetToNormal()
        catchPetHud:ShowAsCatchTarget(nil)
        catchPetHud:SetShowIcon(false)
        catchPetHud:SetShowProgress(false)
    end
    if petCatchHudHandle then
        petCatchHudHandle:Delete()
    else
        local petCatchHudGo = unit:GetPetCatchHudGo()
        if Utils.IsNotNull(petCatchHudGo) then
            CS.UnityEngine.Object.Destroy(petCatchHudGo)
        end
    end
    unit:SetPetCatchHud(nil, nil)
    local dialogGo
    local dialog, dialogHandle = unit:GetDialog()
    if dialogHandle then
        dialogHandle:Delete()
    elseif (dialog) then
        dialogGo = dialog.gameObject
    end
    if (dialogGo) then
        CS.UnityEngine.Object.Destroy(dialogGo)
    end
    unit:SetDialog(nil, nil)
    local arGo
    local alertRange, alertRangeHandle = unit:GetAlertRange()
    if alertRangeHandle then
        alertRangeHandle:Delete()
    elseif (alertRange) then
        arGo = alertRange.gameObject
    end
    if (arGo) then
        CS.UnityEngine.Object.Destroy(arGo)
    end
    unit:SetAlertRange(nil, nil)

	if (not force and self._corpseController) then
		self._corpseController.mapInfo = mapInfo
		self._corpseController.recycleId = self._recycleId
		self._corpseController:StartDissolve(true)
	else
        if hasMapInfo then
            ---@type CS.SEUnitDataComp
            local entityDataComp = self._rootObject:GetComponent(typeof(CS.SEUnitDataComp))
            if Utils.IsNotNull(entityDataComp) then
                entityDataComp.ID = 0
            end
		    mapInfo:RecycleGameObject(self._recycleId, self._rootObject, true, true)
        else
            CS.UnityEngine.Object.Destroy(self._rootObject)
        end
	end

    self._fbxRendererList = nil
    self._rootObject = nil
    self._transform = nil
end

---@param self SEActor
---@param pos any
---@param time any
---@param curve any
---@return void
function SEActor:TryPushTo(pos, time, curve)
    return self._unit:GetController():TryPushTo(pos, time, curve)
end

---@param self SEActor
---@param delta number
---@return void
function SEActor:Update(delta, nowTime)
    -- 技能进度条
    if (self._skillProgressShown) then
        self._skillProgressElapsedTime = self._skillProgressElapsedTime + delta
        local prg = self._skillProgressElapsedTime / self._skillProgressDuration
        if (prg >= 1) then
            self:HideSkillProgress()
        else
            if (self._skillProgressReversed) then
                prg = 1 - prg
            end
            local hud = self._unit:GetHud()
            if (hud) then
                hud.SkillProgressSlider.progress = prg
            end
        end
    end
end

---@param self SEActor
---@param data skillclient.data.TimeProgressTip
---@return void
function SEActor:StartTimeProgressTip(data)
    local SkillClientGen = require("SkillClientGen")
    self._skillProgressShown = true
    self._skillProgressElapsedTime = 0
    self._skillProgressDuration = data.Time
    local startProgress = 0

    if data.Direction == SkillClientGen.Direction.Forward then
        -- 正向
        self._skillProgressReversed = false
    else
        -- 反向
        self._skillProgressReversed = true
        startProgress = 1
    end
    local hud = self._unit:GetHud()
    if (hud) then
        hud.SkillProgressSlider.progress = startProgress
        hud.SkillProgressBar:SetActive(true)
        hud.SkillText.text = data.Text
        hud.SkillText.gameObject:SetActive(true)
    end
end

---@param self SEActor
---@param data skillclient.data.TimeProgressTip
---@return void
function SEActor:EndTimeProgressTip(data)
    self:HideSkillProgress()
end

---@param self SEActor
---@return void
function SEActor:HideSkillProgress()
    self._skillProgressShown = false
    local hud = self._unit:GetHud()
    if (hud) then
        hud.SkillProgressBar:SetActive(false)
        hud.SkillText.gameObject:SetActive(false)
    end
end

---@param self SEActor
---@return CS.UnityEngine.Renderer[]|nil @CS ARRAY
function SEActor:GetFbxRendererList()
    return self._fbxRendererList
end

local AnimStateType = require("SEAnimStateType")

---@param self SEActor
---@param type any
---@return void
function SEActor:AddAnimStateCount(type)
    local old = (self._animStates[type] or 0)
    local new = old + 1
    self._animStates[type] = new
    if old <= 0 and new > 0 then
        self:OnAnimStateChange(type, true)
    end
end

---@param self SEActor
---@param type any
---@return void
function SEActor:SubAnimStateCount(type)
    local old = (self._animStates[type] or 0)
    local new = old - 1
    self._animStates[type] = new
    if old > 0 and new <= 0 then
        self:OnAnimStateChange(type, false)
    end
end

---@param self SEActor
---@param type any
---@param value any
---@return void
function SEActor:OnAnimStateChange(type, value)
	if (not self:GetLocomotion()) then return end
    if type == AnimStateType.IgnoreRunRotation then
        self:GetLocomotion():SetAngularSpeedEnable(not value)
		self:GetLocomotion():SetIgnoreMoveRotation(value)
    elseif type == AnimStateType.PlayAttackMove then
        local animator = self:GetAnimator()
		if (animator) then
			animator:SetBool("attacking", value)
		end
    elseif type == AnimStateType.IgnoreKeepDirection then
        self:SetIgnoreKeepDirection(value)
    end
end

---@param self SEActor
---@return void
function SEActor:IsPlayAttackMove()
    return (self._animStates[AnimStateType.PlayAttackMove] or 0) > 0
end

---@param self SEActor
---@param iconName string
---@return void
function SEActor:AddBuffIcon(name)
    SELogger.LogError('SEActor:AddBuffIcon TODO')
end

---@param self SEActor
---@param text any
---@return void
function SEActor:AddBuffText(text)
    SELogger.LogError('SEActor:AddBuffText TODO')
end

---@param self SEActor
---@param hidden boolean
---@return void
function SEActor:SetHidden(hidden)
	local trans = self:GetFbxTransform()
	if (Utils.IsNull(trans)) then return end
    if (hidden) then
        trans.localPosition = FBX_HIDDEN_OFFSET
    else
        trans.localPosition = self._fbxOriginalOffset
    end
end

function SEActor:GetFbxOriginalOffset()
	return self._fbxOriginalOffset
end

---@param self SEActor
---@param count any
---@return void
function SEActor:AddRendererInvisibleCount(count)
    self._rendererInvisibleCount = self._rendererInvisibleCount + count
    if self._rendererInvisibleCount > 0 then
        for i = 0, self._fbxRendererList.Length - 1 do
            self._fbxRendererList[i].enabled = false
        end
    else
        for i = 0, self._fbxRendererList.Length - 1 do
            self._fbxRendererList[i].enabled = true
        end
    end
end

---@param self SEActor
---@return CS.UnityEngine.Vector3
function SEActor:GetServerPosition()
    if (not self._serverPosition) then
        return self:GetPosition()
    end
    return self._serverPosition
end

---@param self SEActor
---@param pos CS.UnityEngine.Vector3
---@return void
function SEActor:SetServerPosition(pos)
    self._serverPosition = pos
end

--- 变形
---@param self SEActor
---@param name string @模型资源名称
function SEActor:TransmorphTo(name)
    g_Logger.Trace('TransmorphTo %s', name);
    if (not name or name == "") then
        SELogger.LogError("Asset [%s] not found!", name)
        return
    end
    self._recycleId = tostring(self._unit:GetData():GetConfig():Id())..name
    local go = self._unit._manager._env._mapInfo:GetGameObjectFromPool(self._recycleId)
    if (go) then
        self:OnTransmorphTo(go)
    else
        self._createHelper:Create(name, require("SESceneRoot").GetSceneRoot(), function(ngo)
            self:OnTransmorphTo(ngo)
        end)
    end
end

---@param self SEActor
---@param go CS.UnityEngine.GameObject
function SEActor:OnTransmorphTo(go)
    if (go) then
        local fbxTrans = go.transform:GetChild(0)
        if (fbxTrans) then
            if (self._fbxObject and self._fbxObject ~= self._originalFbxObject) then
                CS.UnityEngine.Object.Destroy(self._fbxObject)
            end
            self._originalFbxObject:SetActive(false)
            self._fbxObject = fbxTrans.gameObject
            self._fbxObject.transform:SetParent(self._originalFbxObject.transform.parent)
            self._fbxObject.transform.localPosition = self._originalFbxObject.transform.localPosition
            self._fbxObject.transform.localScale = self._originalFbxObject.transform.localScale
            self._fbxObject.transform.localRotation = self._originalFbxObject.transform.localRotation
            self._fbxObject:SetLayerRecursive(self._originalFbxObject.layer)
            self._animator = self._fbxObject:GetComponentInChildren(typeof(CS.UnityEngine.Animator))
            self._fbxObject:SetActive(true)
            self._unit:GetLocomotion():Stop()
        end
        CS.UnityEngine.Object.Destroy(go)
    end
end

--- 取消变形
---@param self SEActor
function SEActor:CancelTransmorph()
    if (self._fbxObject ~= self._originalFbxObject) then
        local oldFbx = self._fbxObject
        self._fbxObject = self._originalFbxObject
        CS.UnityEngine.Object.Destroy(oldFbx)
        self._animator = self._fbxObject:GetComponentInChildren(typeof(CS.UnityEngine.Animator))
        self._fbxObject:SetActive(true)
        self._unit:GetLocomotion():Stop()
    end
end

function SEActor:SetIgnoreKeepDirection(value)
    self._ignoreKeepDirection = value
end

function SEActor:IsIgnoreKeepDirection()
    return self._ignoreKeepDirection
end

---@return number
function SEActor:GenerateGlowEffectId()
    self._glowEffectId = self._glowEffectId + 1
    return self._glowEffectId
end

---@param id number
---@param data GlowEffectData
function SEActor:AddRunningGlowEffect(id, data)
	if (not self._runningGlowEffects) then
		self._runningGlowEffects = {}
	end
    self._runningGlowEffects[id] = data
end

---@param id number
function SEActor:RemoveRunningGlowEffect(id)
    self._runningGlowEffects[id] = nil
end

local gen = require("SkillClientGen")
--- 筛选当前显示的GlowEffect
--- 1，高优先级覆盖低优先级
--- 2，同优先级，新的覆盖旧的
function SEActor:GetDisplayGlowEffectId()
    local displayId = -1
    if self._skillCovered then
        return displayId
    end

    for id, data in pairs(self._runningGlowEffects) do
        ---@type skillclient.data.GlowEffect
        local glowData = data
        if glowData.Priority == gen.Priority.Strong then
            displayId = id
        end
    end

    if displayId > 0 then
        return displayId
    end

    for id, data in pairs(self._runningGlowEffects) do
        ---@type skillclient.data.GlowEffect
        local glowData = data
        if glowData.Priority == gen.Priority.General then
            displayId = id
        end
    end

    if displayId > 0 then
        return displayId
    end

    for id, data in pairs(self._runningGlowEffects) do
        ---@type skillclient.data.GlowEffect
        local glowData = data
        if glowData.Priority == gen.Priority.Sneak then
            displayId = id
        end
    end

    return displayId
end

---@param self SEActor
---@return CS.UnityEngine.Animations.AnimationLayerMixerPlayable
function SEActor:GetLayerMixer()
	return self._playableLayerMixer
end

--- 应用AvatarMask
---@param self SEActor
---@param layer number
---@param mask CS.UnityEngine.AvatarMask
function SEActor:ApplyMask(layer, mask)
	if (Utils.IsNull(mask)) then return end
	if (not layer or layer < 0) then layer = 0 end

	self._playableLayerMixer:SetLayerMaskFromAvatarMask(layer, mask)
end

--- 取消AvatarMask
---@param self SEActor
---@param layer number
function SEActor:CancelMask(layer)
	if (not layer or layer < 0) then layer = 0 end
	self._playableLayerMixer:SetLayerMaskFromAvatarMask(layer, nil)
end

function SEActor:AnimatorHasParameter(param)
	return self._animatorParamTable[param]
end

function SEActor:SetEmissionEnable(enable)
	if (Utils.IsNull(self._rootObject)) then return end
	local value = 0
	if (enable) then
		value = 1
		self._rootObject:SetKeywordEnabledForAllMaterials(SHADER_KEYWORD_POLLUTION_ADD, true)
		self._rootObject:SetKeywordEnabledForAllMaterials(SHADER_KEYWORD_POLLUTION_NONE, false)
	else
		self._rootObject:SetKeywordEnabledForAllMaterials(SHADER_KEYWORD_POLLUTION_NONE, true)
		self._rootObject:SetKeywordEnabledForAllMaterials(SHADER_KEYWORD_POLLUTION_ADD, false)
	end
	self._rootObject:SetFloatForAllMaterials(SHADER_PARAM_POLLUTION, value)
end

function SEActor:GetCorpseController()
	return self._corpseController
end

function SEActor:SetSkillCovered(value, friendly)
	if (self._skillCovered == value) then return end
	self._skillCovered = value
	-- if (value) then
	-- 	g_Logger.Trace("**** unit %s get skill covered!", self._unit._id)
	-- end
	if (self._skillCovered) then
		if (friendly) then
			self._rootObject:SetVectorForAllMaterials(SHADER_PARAM_EFFECT_COLOR,
				SKILL_COVERAGE_COLOR_FRIENDLY_R, SKILL_COVERAGE_COLOR_FRIENDLY_G, SKILL_COVERAGE_COLOR_FRIENDLY_B, 0.5)
		else
			self._rootObject:SetVectorForAllMaterials(SHADER_PARAM_EFFECT_COLOR,
				SKILL_COVERAGE_COLOR_R, SKILL_COVERAGE_COLOR_G, SKILL_COVERAGE_COLOR_B, 0.5)
		end
	else
		self._rootObject:SetVectorForAllMaterials(SHADER_PARAM_EFFECT_COLOR, 0, 0, 0, 0)
	end
end

--- 追加材质
---@param self SEActor
---@param name string
function SEActor:AppendMaterial(name)
	if (Utils.IsNull(self._fbxObject)) then
        return 
    end

    self._recordAppendMaterialNames[name] = true
	for i = 0, self._fbxRendererList.Length - 1 do
        local renderer = self._fbxRendererList[i]
        ---@type CS.MaterialAppender
        local ma = renderer.gameObject:GetComponent(typeof(CS.MaterialAppender))
        if Utils.IsNull(ma) then
            ma = renderer.gameObject:AddComponent(typeof(CS.MaterialAppender))
            ma.targetRenderer = renderer
            ma:RecordCurrentAsOriginal()
        end

        if Utils.IsNull(ma) then
            goto continue
        end

        ma:AppendMaterialByName(name)

        ::continue::
    end
end

--- 移除追加的材质
---@param self SEActor
---@param name string
function SEActor:RemoveAppendedMaterial(name)
	if (Utils.IsNull(self._fbxObject)) then
        return 
    end
    self._recordAppendMaterialNames[name] = nil
    -- 已经被release 就不要操作了
    if not self._fbxRendererList then return end

    for i = 0, self._fbxRendererList.Length - 1 do
        local renderer = self._fbxRendererList[i]
        
        ---@type CS.MaterialAppender
        local ma = renderer.gameObject:GetComponent(typeof(CS.MaterialAppender))
        if Utils.IsNull(ma) then
            goto continue
        end

        ma:RemoveAppendedMaterial(name)
        
        ::continue::
    end
end

--- 重置追加的材质
---@param self SEActor
function SEActor:ResetAppendedMaterial()
	if (Utils.IsNull(self._fbxObject)) then 
        return 
    end

    for materialName, _ in pairs(self._recordAppendMaterialNames) do
        self:RemoveAppendedMaterial(materialName)
    end
    table.clear(self._recordAppendMaterialNames)
    for i = 0, self._fbxRendererList.Length - 1 do
        local renderer = self._fbxRendererList[i]
        ---@type CS.MaterialAppender
        local ma = renderer.gameObject:GetComponent(typeof(CS.MaterialAppender))
        if Utils.IsNull(ma) then
            goto continue
        end

        ma:ResetToOriginal()
        ::continue::
    end
end

return SEActor
