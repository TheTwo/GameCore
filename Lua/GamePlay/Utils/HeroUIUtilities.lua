---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/6/19 00:23
---
-- local UnitType = require('UnitType')
local ArtResourceUIConsts = require("ArtResourceUIConsts")
local HeroQuality = require("HeroQuality")
local AttackDistanceType = require('AttackDistanceType')
local ColorConsts = require('ColorConsts')
local ConfigRefer = require('ConfigRefer')
local UIHeroLocalData = require('UIHeroLocalData')
local SlgUtils = require('SlgUtils')
local ManualResourceConst = require("ManualResourceConst")
local BattleLabel = require('BattleLabel')
local I18N = require('I18N')
---@class HeroUIUtilities
local HeroUIUtilities = class('HeroUIUtilities')

HeroUIUtilities.RomanChar = {'I','II','III','IV','V','VI','VII','VIII','IX','X'}
local MonsterQuality = {
    Gray = 0,
    Green = 1,
    Blue = 2,
    Purple = 3,
    Golden = 4,
}

local QUALITY_COLOR = {
    ColorConsts.quality_green,
    ColorConsts.quality_blue,
    ColorConsts.quality_purple,
    ColorConsts.quality_orange,
}

local QUALITY_TEXT = {
    'equip_quality2',
    'equip_quality3',
    'equip_quality4',
    'equip_quality5',
}

local QUALITY_TEXT_COLORLESS = {
    "equip_quality2_colorless",
    "equip_quality3_colorless",
    "equip_quality4_colorless",
    "equip_quality5_colorless"
}
---@param quality number @HeroQuality
---@return number @ArtResourceUI
function HeroUIUtilities.GetQualitySpriteID(quality)
    if quality == HeroQuality.Green then
        return ArtResourceUIConsts.sp_hero_frame_circle_2
    elseif quality == HeroQuality.Blue then
        return ArtResourceUIConsts.sp_hero_frame_circle_3
    elseif quality == HeroQuality.Purple then
        return ArtResourceUIConsts.sp_hero_frame_circle_4
    elseif quality == HeroQuality.Golden then
        return ArtResourceUIConsts.sp_hero_frame_circle_5
    end
end

---@param quality number @HeroQuality
---@return number @ArtResourceUI
function HeroUIUtilities.GetRadarPetTraceFrameSpriteID(quality)
    if quality == HeroQuality.Green then
        return ManualResourceConst.sp_radar_img_frame_01
    elseif quality == HeroQuality.Blue then
        return ManualResourceConst.sp_radar_img_frame_01
    elseif quality == HeroQuality.Purple then
        return ManualResourceConst.sp_radar_img_frame_02
    elseif quality == HeroQuality.Golden then
        return ManualResourceConst.sp_radar_img_frame_03
    end
end

---@param quality number @HeroQuality
---@return number @ArtResourceUI
function HeroUIUtilities.GetCardQualitySpriteID(quality)
    if quality == HeroQuality.Green then
        return ArtResourceUIConsts.sp_hero_card_base_green
    elseif quality == HeroQuality.Blue then
        return ArtResourceUIConsts.sp_hero_card_base_blue
    elseif quality == HeroQuality.Purple then
        return ArtResourceUIConsts.sp_hero_card_base_purple
    elseif quality == HeroQuality.Golden then
        return ArtResourceUIConsts.sp_hero_card_base_orange
    end
end

function HeroUIUtilities.GetMonsterCardQualitySpriteID(quality)
    if quality == MonsterQuality.Gray then
        return ArtResourceUIConsts.sp_hero_frame_circle_1
    elseif quality == MonsterQuality.Green then
        return ArtResourceUIConsts.sp_hero_frame_circle_2
    elseif quality == MonsterQuality.Blue then
        return ArtResourceUIConsts.sp_hero_frame_circle_3
    elseif quality == MonsterQuality.Purple then
        return ArtResourceUIConsts.sp_hero_frame_circle_4
    elseif quality == MonsterQuality.Golden then
        return ArtResourceUIConsts.sp_hero_frame_circle_5
    end
end

---@param quality number @HeroQuality
---@return number @ArtResourceUI
function HeroUIUtilities.GetQualityFrontSpriteID(quality)
    if quality == HeroQuality.Green then
        return ArtResourceUIConsts.sp_hero_frame_circle_2_mask
    elseif quality == HeroQuality.Blue then
        return ArtResourceUIConsts.sp_hero_frame_circle_3_mask
    elseif quality == HeroQuality.Purple then
        return ArtResourceUIConsts.sp_hero_frame_circle_4_mask
    elseif quality == HeroQuality.Golden then
        return ArtResourceUIConsts.sp_hero_frame_circle_5_mask
    end
end



---@param quality number @HeroQuality
function HeroUIUtilities.GetQualityFrameSpriteID(quality)
    if quality == HeroQuality.Green then
        return ArtResourceUIConsts.item_frame_2
    elseif quality == HeroQuality.Blue then
        return ArtResourceUIConsts.item_frame_3
    elseif quality == HeroQuality.Purple then
        return ArtResourceUIConsts.item_frame_4
    elseif quality == HeroQuality.Golden then
        return ArtResourceUIConsts.item_frame_5
    else
        return ArtResourceUIConsts.item_frame_0
    end
end


local EnumSoldierType = require('EnumSoldierType')
---@param type number @EnumSoldierType
---@return number @ArtResourceUI
function HeroUIUtilities.GetSoldierTypeTextureID(type)
    if type == EnumSoldierType.Infantry then
        return  ArtResourceUIConsts.sp_icon_survivor_type_1
    elseif type == EnumSoldierType.Cavalry then
        return ArtResourceUIConsts.sp_icon_survivor_type_2
    elseif type == EnumSoldierType.Archer then
        return ArtResourceUIConsts.sp_icon_survivor_type_3
    elseif type == EnumSoldierType.Engine then
        return ArtResourceUIConsts.sp_comp_icon_process
    else
        return ArtResourceUIConsts.sp_comp_icon_help_build
    end
end

---@param heroes table<number, wds.TroopHero>
function HeroUIUtilities.GetTroopTypeTextureId(heroes)
    if not heroes then
        return ArtResourceUIConsts.sp_icon_survivor_type_1
    end
    local hasShortHero = false
    for key, hero in pairs(heroes) do
        if hero and hero.HeroID > 0 then
            local heroCfg = ConfigRefer.Heroes:Find(hero.HeroID)
            if heroCfg and heroCfg:AttackDistance() == AttackDistanceType.Short then
                hasShortHero = true
            end
        end
    end

    if hasShortHero then
        return ArtResourceUIConsts.sp_icon_survivor_type_1
    else
        return ArtResourceUIConsts.sp_icon_survivor_type_3
    end
end

---@param heroCfg HeroesConfigCell
---@return number @ArtResourceUI
function HeroUIUtilities.GetHeroTypeTextureID(heroCfg)
    if not heroCfg then
        return ArtResourceUIConsts.sp_icon_survivor_type_1
    end
    return HeroUIUtilities.GetHeroAttRangeTextureId(heroCfg:AttackDistance())
end

---@param type number @AttackDistanceType
function HeroUIUtilities.GetHeroAttRangeTextureId(type)
    if type == AttackDistanceType.Long then
        return ArtResourceUIConsts.sp_icon_survivor_type_3
    else
        return ArtResourceUIConsts.sp_icon_survivor_type_1
    end
end

function HeroUIUtilities.GetHeroBattleTypeTextureName(type)
    local battleInfo = UIHeroLocalData.BATTLE_LABEL[type]
    return battleInfo and battleInfo.icon or ''
end

function HeroUIUtilities.GetQualityColor(quality)
    return QUALITY_COLOR[quality + 1]
end

function HeroUIUtilities.GetQualityText(quality)
    return QUALITY_TEXT[quality + 1]
end

function HeroUIUtilities.GetQualityTextColorless(quality)
    return QUALITY_TEXT_COLORLESS[quality + 1]
end

---@param troop wds.Troop
---@return string,string,boolean
function HeroUIUtilities.TroopStateIcon(troop)
    if not troop then
        return '','',false
    end

    ---@type wds.MapEntityState
    local mapStates = troop.MapStates
    if SlgUtils.IsTroopRetreating(mapStates) then
        return 'sp_comp_icon_retreat','sp_troop_img_state_base_4',true
    elseif mapStates.BackToCity then
        return 'sp_common_btn_back_03','sp_troop_img_state_base_1',true
    elseif mapStates.Attacking then
        return 'sp_troop_icon_status_battle','sp_troop_img_state_base_4',true
    elseif mapStates.Moving then
        if SlgUtils.IsTroopInRally(troop) then
            return 'sp_troop_icon_status_assemble','sp_troop_img_state_base_3',true
        end
        return 'sp_troop_img_state_walk','sp_troop_img_state_base_1',true
    elseif mapStates.Gathering then
        return 'sp_troop_img_state_collect','sp_troop_img_state_base_2',true
    elseif mapStates.StateWrapper2.StrengthenRebuildOnMap then
        return 'sp_comp_icon_build','sp_troop_img_state_base_2',true
    elseif mapStates.StateWrapper2.InGarrison then
        if SlgUtils.IsTroopInRally(troop) then
            return 'sp_troop_icon_status_assemble','sp_troop_img_state_base_3',true
        end
        return 'sp_comp_icon_defense_s','sp_troop_img_state_base_2',true
    else
        return 'sp_city_icon_refugee','sp_troop_img_state_base_2',true
    end
end

---@param preset wds.TroopPreset
---@return string,string,boolean
function HeroUIUtilities.PresetStateIcon(preset)
    if not preset then
        return '','',false
    end

    if preset.Status == wds.TroopPresetStatus.TroopPresetInHome or
       preset.Status == wds.TroopPresetStatus.TroopPresetIdle
    then
        return '','',false
    end

    local mapStates = preset.BasicInfo
    if SlgUtils.IsTroopRetreating(mapStates) then
        return 'sp_comp_icon_retreat','sp_troop_img_state_base_4',true
    elseif mapStates.BackToCity then
        return 'sp_common_btn_back_03','sp_troop_img_state_base_1',true
    elseif mapStates.Attacking then
        return 'sp_troop_icon_status_battle','sp_troop_img_state_base_4',true
    elseif mapStates.Moving then
        if preset.Status == wds.TroopPresetStatus.TroopPresetTeamInTrusteeship then
            return 'sp_troop_icon_status_assemble','sp_troop_img_state_base_3',true
        end
        return 'sp_troop_img_state_walk','sp_troop_img_state_base_1',true
    elseif mapStates.Gather then
        return 'sp_troop_img_state_collect','sp_troop_img_state_base_2',true
    elseif mapStates.StrengthenRebuildOnMap then
        return 'sp_comp_icon_build','sp_troop_img_state_base_2',true
    elseif mapStates.InGarrison then
        if preset.Status == wds.TroopPresetStatus.TroopPresetTeamInTrusteeship then
            return 'sp_troop_icon_status_assemble','sp_troop_img_state_base_3',true
        end
        return 'sp_comp_icon_defense_s','sp_troop_img_state_base_2',true
    else
        return 'sp_city_icon_refugee','sp_troop_img_state_base_2',true
    end
end

---@param troop wds.Troop | wds.MapMob
---@param preset wds.TroopPreset
function HeroUIUtilities.MyTroopStateIconByTroopAndPreset(troop, preset)
    if troop then
        return HeroUIUtilities.TroopStateIcon(troop)
    end

    if preset then
        return HeroUIUtilities.PresetStateIcon(preset)
    end

    return '','',false
end

---@param troopData wds.Troop | wds.MapMob | wds.MobileFortress | wds.SlgPuppet
---@param preset wds.TroopPreset
---@return string,string,string
function HeroUIUtilities.MyTroopStateIconAndDesc(troopData, preset)
    local icon, back = HeroUIUtilities.MyTroopStateIconByTroopAndPreset(troopData, preset)
    if troopData then
        return icon,back,HeroUIUtilities.GetTroopStateDesc(troopData.MapStates)
    end
    
    if preset then
        if preset.Status == wds.TroopPresetStatus.TroopPresetInSignUp then
            return icon, back,"formation_gvealert"
        elseif preset.Status == wds.TroopPresetStatus.TroopPresetTeamInTrusteeship then
            return icon, back, "troop_status_8"
        elseif preset.BasicInfo then
            return icon, back, HeroUIUtilities.GetTroopStateDesc(preset.BasicInfo)
        end
    end

    return icon,back,"formation-zhuzha"
end

---@param mapState wds.MapEntityState | wds.PresetTroopBasicInfo
function HeroUIUtilities.GetTroopStateDesc(mapState)
    if mapState.BackToCity then
        return "troop_status_5"
    elseif mapState.Moving then
        return "formation-xingjun"
    elseif mapState.Battling or mapState.Attacking then
        return "formation-zhandou"
    elseif mapState.Gathering or mapState.Gather then
        return "troop_status_4"
    else
        return "formation-zhuzha"
    end
end

---@param preset wds.TroopPreset
---@return number
function HeroUIUtilities.GetTroopsStateEndTime(preset)
    return preset.BasicInfo.MoveStopTime / 1000
end

---@param label number
function HeroUIUtilities.GetBattleLabelStr(label)
    if label == BattleLabel.Tank then
        return I18N.Get("troop_con_front")
    elseif label == BattleLabel.Damage then
        return I18N.Get("troop_con_middle")
    else
        return I18N.Get("troop_con_back")
    end
end

return HeroUIUtilities
