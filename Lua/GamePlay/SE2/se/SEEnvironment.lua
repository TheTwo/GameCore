---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by BE.Tenner.
--- DateTime: 2021/7/13 10:45
---
--- SE副本场景管理, 副本整体的底层管理器

local Delegate = require("Delegate")
local BuffClientManager = require("BuffClientManager")
local SkillClientManager = require("SkillClientManager")
local ModuleRefer = require("ModuleRefer")
local GameObjectCreateHelper = CS.DragonReborn.AssetTool.GameObjectCreateHelper
local PooledGameObjectCreateHelper = CS.DragonReborn.AssetTool.PooledGameObjectCreateHelper
local SEClientCmdType = require("SEClientCmdType")
local InteractorCreateType = require("InteractorCreateType")
local ConfigRefer = require("ConfigRefer")
local SELogger = require("SELogger")
local I18N = require("I18N")
local ArtResourceUtils = require("ArtResourceUtils")
local ArtResourceConsts = require("ArtResourceConsts")
local Utils = require("Utils")
local EventConst = require("EventConst")
local ShadowDistanceControl = require("ShadowDistanceControl")
local SceneEnterType = require("SceneEnterType")
local SEHudTroopMediatorDefine = require("SEHudTroopMediatorDefine")
local UIMediatorNames = require("UIMediatorNames")
local MathUtils = require("MathUtils")
local RenderPiplineUtil = CS.RenderPiplineUtil
local SESceneRoot = require("SESceneRoot")
local SEEnvironmentModeType = require("SEEnvironmentModeType")
local DBEntityType = require("DBEntityType")
local PowerSubType = require("PowerSubType")

local EXIT_TO_CITY_POS_KEY = "se_exit_pos"
local EXIT_USE_DEFAULT_POS = "se_use_default_pos"
local KEY_SE_AUTO_BATTLE = "se_auto_battle"

local DEFAULT_SHADOW_DISTANCE = 70
local DEFAULT_SHADOW_CASCADE = 2

local BLACK_SCREEN_ALPHA = 0.9

local BATTLE_TYPE_NORMAL = 0
local BATTLE_TYPE_BOSS = 1
local BATTLE_TYPE_PET = 2
local BATTLE_TYPE_NPC = 3
local BATTLE_TYPE_ELITE = 4
local BATTLE_TYPE_CLIMB_TOWER = 5
local BATTLE_TYPE_PVP = 6

local SPEED_CHANGE_CD = 2
local FACTION_PLAYER = 1

---@class SEEnvironment
local SEEnvironment = class("SEEnvironment")
local m_Instance = nil

---@return SEEnvironment
function SEEnvironment.Instance(create)
    if (create and not m_Instance) then
        m_Instance = SEEnvironment.new()
    end

	-- if (not m_Instance) then
	-- 	g_Logger.Error("SE副本尚未创建, 请检查!")
	-- end

    return m_Instance
end

local CAMERA_PRIORITY_HIGH = 20
local CAMERA_PRIORITY_LOW = 5

local DEFAULT_CAMERA_BLEND_TIME = 2

---@param self SEEnvironment
---@return void
function SEEnvironment:ctor()
    self._instanceId = 0
	---@type MapInstanceConfigCell
	self._instConfig = nil
    self._factionManager = nil
    self._pause = false
    self._camera = nil
    self._uiCamera = nil
    ---@type Cinemachine.CinemachineBrain
    self._cameraBrain = nil
    self._cameraBlendTime = DEFAULT_CAMERA_BLEND_TIME
    ---@type Cinemachine.CinemachineVirtualCamera
    self._cameraCtrl = nil
    ---@type Cinemachine.CinemachineVirtualCamera
    self._cameraCtrlHigh = nil
    ---@type Cinemachine.CinemachineVirtualCamera
    self._cameraCtrlAlt1 = nil
    ---@type Cinemachine.CinemachineVirtualCamera
    self._cameraCtrlAlt2 = nil
    ---@type Cinemachine.CinemachineBasicMultiChannelPerlin
    self._cameraPerlin = nil
    ---@type Cinemachine.CinemachineBasicMultiChannelPerlin
    self._cameraPerlinAlt1 = nil
    ---@type Cinemachine.CinemachineBasicMultiChannelPerlin
    self._cameraPerlinAlt2 = nil
    self._mapInfo = nil
    ---@type CS.UnityEngine.Transform
    self._mapRoot = nil
    
	---@type CS.SEFloatingTextManager
    self._ftManager = nil
    self._unitManager = nil
    self._skillManager = nil
    self._wdsManager = nil
    self._damageManager = nil
    self._inputManager = nil
	self._warmUpManager = nil
    self._sceneBagManager = nil
    
	self._allowClickMove = false
    self._seInteractorTable = {}
    self._cameraShakingTime = 0
    ---@type CS.UnityEngine.GameObject
    self._unitSelectorGo = nil
    ---@type CS.SECircleSelect
    self._unitSelector = nil
    self._selectedUnit = nil
    self._unitSelectorPending = false
    self._unitSelectorShow = false
    ---@type SEUiBattlePanel
    self._uiBattlePanel = nil
    ---@type SEUiToastPanel
    self._uiToastPanel = nil
    self._functionClearHandleList = {}
    self._failMsgTable = {}
    self._disposing = false
    self._eventRegionTable = {}
    --self._lightingConf = nil
    self._priorityTargetList = {}
    self._priorityFlagTimeList = {}
    self._pendingGenInteractors = {}
    self._baseServerTime = 0
    self._lastServerSyncTime = 0
    self._nextSwitchToAltCamera1 = true
    self._eventTriggerTable = {}
    self._miniMapConf = nil
    ---@type CS.UnityEngine.GameObject
    self._uavModelGo = nil
    ---@type CS.DragonReborn.AssetTool.GameObjectCreateHelper
    self._createHelper = GameObjectCreateHelper.Create()
    ---@type CS.DragonReborn.AssetTool.PooledGameObjectCreateHelper
    self._pooledCreateHelper = PooledGameObjectCreateHelper.Create("SE")
	self._pooledCreateHelperForSkillModel = PooledGameObjectCreateHelper.Create("SE_SkillModel")
    self._player = nil
    -- self._waypointGo = nil
    -- self._waypointPending = false
    self._cameraLockingPos = nil
    self._usingAltCamera = false
    self._dirGuideGo = nil
    self._dirGuideShow = false
    self._preExited = false
	self._cameraOffsetBeforeLock = CS.UnityEngine.Vector3.zero
	self._fogSpaceValues = {
		set = false,
		bottom = 0,
		top = 0,
	}
	self._lastFogSpaceValues = {
		bottom = 0,
		top = 0,
	}
	self._inBattle = false
	self._skillsMap = {}
	self._currentCameraShakingIndex = 1
	---@type StoryTimeline
	self._timeline = nil
	self._timelineCfgId = -1
	self._sceneLoadComplete = false
	self._uiLoadComplete = false
	self._loadCompleteSent = false
	self._seTimerStartTime = -1
	self._seTimerStarted = false
	self._battleType = BATTLE_TYPE_NORMAL
	self._counterCurrent = 0
	self._counterTotal = 0
	self._targetName = "???"
	---@type SEHudMediator
	self._hud = nil
	self._blockGuideStatus = 0
	self._dontShowHud = false
	self._autoBattle = false
	self._lastSpeedChangeTime = 0
	self._battleSpeed = 1
    self._currentFocusPresetIndex = nil
    self._fallbackPresetIndex = nil
    self._citySeMode = false
    self._currentSpawnerId = nil
    ---@type table<number, number>
    self._interactorRangeIdMap = {}
    self._interactorRangeChangedMap = {}
    ---@type CS.DragonReborn.RangeEventMgr
    self._interactorRangeEventMgr = CS.DragonReborn.RangeEventMgr(self._interactorRangeIdMap, self._interactorRangeChangedMap)
    ---@type table<number, SEManualInteractorLogic>
    self._manualInteractorMap = {}
    ---@type SEEnvironmentModeType|nil
    self._envMode = nil
    self._cityInExploring = false
    self._playerId = nil
    self._currentTeamInBattleFlag = false
end

--- 是否在战斗中
---@param self SEEnvironment
---@return boolean
function SEEnvironment:IsInBattle()
	return self._inBattle
end

---获取UI战斗面板
---@param self SEEnvironment
---@return SEUiBattlePanel
function SEEnvironment:GetUiBattlePanel()
    return self._uiBattlePanel
end

--- 获取UI Toast面板
---@param self SEEnvironment
---@return SEUiToastPanel
function SEEnvironment:GetUiToastPanel()
    return self._uiToastPanel
end

---@param self SEEnvironment
---@return SEWdsManager
function SEEnvironment:GetWdsManager()
	return self._wdsManager
end

---获取单位管理器
---@param self SEEnvironment
---@return SEUnitManager
function SEEnvironment:GetUnitManager()
    return self._unitManager
end

---获取技能管理器
---@param self SEEnvironment
---@return SESkillManager
function SEEnvironment:GetSkillManager()
    return self._skillManager
end

---获取输入管理器
---@param self SEEnvironment
---@return SEInputManager
function SEEnvironment:GetInputManager()
    return self._inputManager
end

---获取队伍管理器
---@return SETeamManager
function SEEnvironment:GetTeamManager()
    return self._teamManager
end

---@return SESceneBagManager
function SEEnvironment:GetSceneBagManager()
    return self._sceneBagManager
end

---获取交互物列表
---@param self SEEnvironment
---@return table
function SEEnvironment:GetInteractorTable()
    return self._seInteractorTable
end

---@param self SEEnvironment
---@return void
function SEEnvironment:Update(delta)
    if (self._disposing) then
        return
    end

    -- local delta = g_Game.Time.time - self._lastUpdateTime
    -- self._lastUpdateTime = g_Game.Time.time

    if (self._pause) then
        delta = 0
    end
    local nowTime = g_Game.ServerTime:GetServerTimestampInSecondsNoFloor()
    -- Unit manager update
    self._unitManager:Update(delta, nowTime)

    -- Input manager update
    self._inputManager:Update(delta)

    -- Camera shaking
    if (self._cameraShakingTime > 0) then
        self._cameraShakingTime = self._cameraShakingTime - delta
        if (self._cameraShakingTime <= 0) then
            self:StopCameraShake()
        end
    end

    -- UI update
    if (self._uiBattlePanel and self._uiBattlePanel.Update) then
        self._uiBattlePanel:Update(delta)
    end

    -- Skill manager update
    if (self._skillManager) then
        self._skillManager:Update(delta)
    end

    if self._teamManager then
        self._teamManager:Update(delta)
    end

    -- 方向引导tick
    self:UpdateCaptainDirGuide()
    for _, v in pairs(self._manualInteractorMap) do
        v:Tick(delta, nowTime)
    end
    if self._interactorRangeEventMgr then
        table.clear(self._interactorRangeChangedMap)
        self._interactorRangeEventMgr:GetChangedResult()
        if not table.isNilOrZeroNums(self._interactorRangeChangedMap) then
            local currentTeam = self._teamManager:GetOperatingTeam()
            local hero = currentTeam and currentTeam:GetRightOfBallControlHero()
            for id, hitStatus in pairs(self._interactorRangeChangedMap) do
                local logic = self._manualInteractorMap[id]
                if logic then
                    if hitStatus then
                        logic:ShowHud(nil, nil, hero and hero:GetID(), true)
                    else
                        logic:HideHud()
                    end
                end
            end
        end
        self._interactorRangeEventMgr:Update()
    end
end

---设置是否允许点击移动
---@param self SEEnvironment
---@param allow boolean
---@return void
function SEEnvironment:SetAllowClickMove(allow)
	SELogger.LogHigh("*** SetAllowClickMove: %s", allow)
    self._allowClickMove = allow
end

---设置是否允许点击移动
---@param self SEEnvironment
---@param allow boolean
---@return fun()
function SEEnvironment:SetAllowClickMoveWithStack(allow)
	SELogger.LogHigh("*** SetAllowClickMoveWithStack: %s", allow)
    local currentStatus = self._allowClickMove
    self._allowClickMove = allow
    return function()
        self._allowClickMove = currentStatus
    end
end

---获取相机控制器
--- 相机控制器
---@param self SEEnvironment
---@return Cinemachine.CinemachineVirtualCamera
function SEEnvironment:GetCameraCtrl()
    return self._cameraCtrl
end

---是否暂停
---@param self SEEnvironment
---@return boolean
function SEEnvironment:IsPause()
    return self._pause
end

---设置暂停
---@param self SEEnvironment
---@param pause boolean
---@return void
function SEEnvironment:SetPause(pause)
    self._pause = pause
end

---获取相机
---@param self SEEnvironment
---@return CS.UnityEngine.Camera
function SEEnvironment:GetCamera()
    return self._mapInfo:GetMainCamera()
end

---获取相机目标
---@param self SEEnvironment
---@return CS.UnityEngine.Transform
function SEEnvironment:GetCameraTarget()
    return self._mapInfo:GetCameraTarget()
end

---获取备用相机1目标
---@param self SEEnvironment
---@return CS.UnityEngine.Transform
function SEEnvironment:GetCameraAlt1Target()
    local _,ret = self._mapInfo:GetCameraAltTarget(1)
    return ret
end

---获取备用相机2目标
---@param self SEEnvironment
---@return CS.UnityEngine.Transform
function SEEnvironment:GetCameraAlt2Target()
    local _,ret = self._mapInfo:GetCameraAltTarget(2)
    return ret
end

---获取相机跟随偏移
---@param self SEEnvironment
---@return CS.UnityEngine.Vector3
function SEEnvironment:GetCameraFollowOffset()
    return self._mapInfo:GetCameraTargetOffset()
end

---设置相机目标偏移
---@param self SEEnvironment
---@param offset CS.UnityEngine.Vector3
---@return void
function SEEnvironment:SetCameraTargetOffset(offset)
    self._mapInfo:SetCameraTargetOffset(offset)
end

--- 设置所有相机跟随偏移
---@param self SEEnvironment
---@param offset CS.UnityEngine.Vector3
function SEEnvironment:SetCamerasFollowOffset(offset)
	local transposer = self._cameraCtrl:GetTransposerComponent()
	if (transposer) then
		transposer.m_FollowOffset = offset
	end
	transposer = self._cameraCtrlAlt1:GetTransposerComponent()
	if (transposer) then
		transposer.m_FollowOffset = offset
	end
	transposer = self._cameraCtrlAlt2:GetTransposerComponent()
	if (transposer) then
		transposer.m_FollowOffset = offset
	end
end

---获取备用相机1跟随偏移
---@param self SEEnvironment
---@return CS.UnityEngine.Vector3
function SEEnvironment:GetCameraAlt1FollowOffset()
    return self._mapInfo:GetCameraAltTargetOffset(1)
end

---获取备用相机2跟随偏移
---@param self SEEnvironment
---@return CS.UnityEngine.Vector3
function SEEnvironment:GetCameraAlt2FollowOffset()
    return self._mapInfo:GetCameraAltTargetOffset(2)
end

---设置备用相机跟随偏移
---@param self SEEnvironment
---@param offset CS.UnityEngine.Vector3
---@return void
function SEEnvironment:SetCameraAltFollowOffset(offset)
    if (self._nextSwitchToAltCamera1) then
        self._mapInfo:SetCameraAltTargetOffset(1, offset)
    else
        self._mapInfo:SetCameraAltTargetOffset(2, offset)
    end
end

---获取地图信息
---@param self SEEnvironment
---@return CS.SEMapInfo
function SEEnvironment:GetMapInfo()
    return self._mapInfo
end

---获取地图根节点
---@param self SEEnvironment
---@return CS.UnityEngine.Transform
function SEEnvironment:GetMapRoot()
    if Utils.IsNull(self._mapInfo) then return nil end
    return self._mapInfo.transform
end

---@param entity wds.SeInteractor
---@return string
function SEEnvironment:GetInteractorUniqueNameByEntity(entity)
    local conf = ConfigRefer.Mine:Find(entity.Interactor.ConfigID)

    -- SE mine components
    local un
    if (conf and conf:CreateType() == InteractorCreateType.Dynamic) then
        un = tostring(entity.ID)
    else
        un = entity.LevelEntityInfo.UniqueName
    end
    return un
end

---通过惟一名获取交互物组件
---@param self SEEnvironment
---@param uniqueName string
---@return CS.SEComponents.SEComponentBase[]
function SEEnvironment:GetInteractorComponentsByUniqueName(uniqueName)
    return self._seInteractorTable[uniqueName]
end

---添加矿点组件
---@param self SEEnvironment
---@param interactor CS.SEMineInteractiveControl
---@return void
function SEEnvironment:AddSEInteractor(interactor)
    if (not self._seInteractorTable[interactor.UniqueName]) then
        self._seInteractorTable[interactor.UniqueName] = {}
    end
    -- Reset Interactible status
    interactor.Interactible = false
    table.insert(self._seInteractorTable[interactor.UniqueName], interactor)

    -- Activation control effects
    if (interactor.OnActivate and interactor.OnActivateEffect and interactor.OnActivateEffect > 0) then
        SELogger.LogLow("Activation control %s has OnActivateEffect %s", interactor:GetID(), interactor.OnActivateEffect)
        local onActivateFunc = function(go)
            SELogger.LogLow("Activation control %s OnActivate triggered: %s", interactor:GetID(), interactor.OnActivateEffect)
            self:GetSkillManager():CastSkillPerform(
                interactor.OnActivateEffect,
                wds.enum.SkillStageType.SkillStageTypeDefault,
                nil,
                interactor.OnActivateEffectPosition.position,
                nil,
                interactor.OnActivateEffectPosition.position
            )
        end
        interactor:OnActivate("+", onActivateFunc)
        self:AddFunctionClearHandle(
            function()
                interactor:OnActivate("-", onActivateFunc)
            end
        )
    end
    if (interactor.OnDeactivate and interactor.OnDeactivateEffect and interactor.OnDeactivateEffect > 0) then
        SELogger.LogLow("Activation control %s has OnDeactivateEffect %s", interactor:GetID(), interactor.OnDeactivateEffect)
        local onDeactivateFunc = function(go)
            SELogger.LogLow("Activation control %s OnDeactivate triggered: %s", interactor:GetID(), interactor.OnDeactivateEffect)
            self:GetSkillManager():CastSkillPerform(
                interactor.OnDeactivateEffect,
                wds.enum.SkillStageType.SkillStageTypeDefault,
                nil,
                interactor.OnDeactivateEffectPosition.position,
                nil,
                interactor.OnDeactivateEffectPosition.position
            )
        end
        interactor:OnDeactivate("+", onDeactivateFunc)
        self:AddFunctionClearHandle(
            function()
                interactor:OnDeactivate("-", onDeactivateFunc)
            end
        )
    end
end

---@return SEManualInteractorLogic
function SEEnvironment:CreateManualInteractorLogic(entity, birthPos, hpYOffset)
    local logic = require("SEManualInteractorLogic").new()
    logic:Setup(self, entity, birthPos, hpYOffset)
    return logic
end

---@param entity wds.SeInteractor
---@param birthPos CS.UnityEngine.Vector3
---@param radius number
function SEEnvironment:AddDynamicSEInteractorRangeEvent(entity, birthPos, radius, hpYOffset)
    if not self._interactorRangeEventMgr then return end
    local id = entity.ID
    self._interactorRangeEventMgr:AddOrUpdateListener(id, birthPos, radius)
    local interactorLogic = self._manualInteractorMap[id]
    if interactorLogic then
        interactorLogic:Dispose()
    end
    self._manualInteractorMap[id] = self:CreateManualInteractorLogic(entity, birthPos, hpYOffset)
end

function SEEnvironment:RemoveDynamicSEInteractorRangeEvent(entityId)
    if not self._interactorRangeEventMgr then return end
    self._interactorRangeEventMgr:RemoveListener(entityId)
    local interactorLogic = self._manualInteractorMap[entityId]
    self._manualInteractorMap[entityId] = nil
    if interactorLogic then
        interactorLogic:Dispose()
    end
end

function SEEnvironment:UpdateTeamCenterPosToRangeEvent(worldPosV3)
    if not self._interactorRangeEventMgr then return end
    if worldPosV3 then
        self._interactorRangeEventMgr:AddOrUpdateMoveAgent(worldPosV3)
    else
        self._interactorRangeEventMgr:RemoveMoveAgent()
    end
end

---@param self SEEnvironment
---@param id number
---@param uiCamera CS.UnityEngine.Camera
---@param camera CS.UnityEngine.Camera
---@param mapInfo CS.SEMapInfo
---@param presetIndex number|nil
---@param envMode SEEnvironmentModeType
---@return void
function SEEnvironment:Init(id, uiCamera, camera, mapInfo, presetIndex, envMode)
    -- ctor begin
    self._instanceId = id
	---@type MapInstanceConfigCell
	self._instConfig = ConfigRefer.MapInstance:Find(id)
	---@type MapSceneConfigCell
	self._sceneCfg = ConfigRefer.MapScene:Find(self._instConfig:SceneId())
    self._uiCamera = uiCamera
    self._camera = camera
    self._mapInfo = mapInfo
	self._presetIndex = presetIndex
    self._envMode = envMode
    self._cityInExploring = false
    self._playerId = ModuleRefer.PlayerModule:GetPlayerId()

    -- Remove scene editor ref
    self._mapInfo:RemoveEditorRef()

    self._mapRoot = self._mapInfo:GetMapRoot()
    --self._lightingConf = lightConf

    --self._onApplicationQuit = GetCallBack(self, self.OnApplicationQuit)
    --CS.Wod.Loader.Instance:onApplicationQuit("+", self._onApplicationQuit)

    self._cameraBrain = self._camera:GetComponent(typeof(CS.Cinemachine.CinemachineBrain))
    self._cameraCtrl = self._mapInfo:GetVirtualCamera()
    self._cameraCtrlHigh = self._mapInfo:GetVirtualCameraHigh()
    local cameraTarget = self._mapInfo:GetCameraTarget()
    self._cameraCtrl.LookAt = cameraTarget
    self._cameraCtrl.Follow = cameraTarget
    local has
    has,self._cameraCtrlAlt1 = self._mapInfo:GetVirtualCameraAlt(1)
    local _,cameraAlt1Target = self._mapInfo:GetCameraAltTarget(1)
    self._cameraCtrlAlt1.LookAt = cameraAlt1Target
    self._cameraCtrlAlt1.Follow = cameraAlt1Target
    has,self._cameraCtrlAlt2 = self._mapInfo:GetVirtualCameraAlt(2)
    local _,cameraAlt2Target = self._mapInfo:GetCameraAltTarget(2)
    self._cameraCtrlAlt2.LookAt = cameraAlt2Target
    self._cameraCtrlAlt2.Follow = cameraAlt2Target
    self._cameraPerlin = CS.CameraUtil.GetBasicMultiChannelPerlinComponent(self._cameraCtrl)
    self._cameraPerlinAlt1 = CS.CameraUtil.GetBasicMultiChannelPerlinComponent(self._cameraCtrlAlt1)
    self._cameraPerlinAlt2 = CS.CameraUtil.GetBasicMultiChannelPerlinComponent(self._cameraCtrlAlt2)
    self._nextSwitchToAltCamera1 = true

    self:ResetDefaultCameraParams()

    -- ctor end

	SPEED_CHANGE_CD = (ConfigRefer.ConstSe.SeBattleSpeedSwitchCD and ConfigRefer.ConstSe:SeBattleSpeedSwitchCD()) or SPEED_CHANGE_CD

    self._disposing = false

	-- 阴影
	self:LoadDefaultShadowConfig()

	-- 云影
	self:LoadCloudShadowConfig()

	-- 迷雾
	self:LoadFogConfig()

	-- 天空盒（默认关）
	self:SetSkyBoxEnabled(false)

	-- GTAO
	local enableGtao = self._sceneCfg and self._sceneCfg.EnableGTAO and self._sceneCfg:EnableGTAO()
	self._mapInfo:SetGTAOEnabled(enableGtao)

    -- 玩家引用
    self._player = ModuleRefer.PlayerModule:GetPlayer()
    if (self._player) then
        SELogger.LogHigh("*** Player id %s", self._player.ID)
    end

	-- 飘字管理器
    CS.SEFloatingTextManager.ASSET_PATH = ArtResourceUtils.GetItem(ArtResourceConsts.se_floating_text)
    CS.SEFloatingTextManager.ASSET_PATH_HOSTILE = ArtResourceUtils.GetItem(ArtResourceConsts.se_floating_text_hostile)
    self._ftManager = self._mapInfo:GetComponent(typeof(CS.SEFloatingTextManager))

    -- 时间初始化
    CS.UnityEngine.Time.timeScale = 1
    self:SetBaseServerTime(g_Game.ServerTime:GetServerTimestampInMilliseconds())

	-- 预热
	self._warmUpManager = require("SEWarmUpManager").new(self, self._pooledCreateHelper)
	self._warmUpManager:WarmUp(self._presetIndex, SEEnvironmentModeType.ClimbTower)

    --local SceneManager = require("SceneManager")
    -- Update AOI
    require("PvPRequestService").InvalidateMapAOI()

    -- Buff client
    BuffClientManager.CreateInstance("SESkillClientNative")
    BuffClientManager.GetInstance().native.Environment = self

    -- Skill client
    SkillClientManager.CreateInstance("SESkillClientNative")
    SkillClientManager.GetInstance().native.Environment = self
	self._skillsMap = SkillClientManager.GetSkillsMap()

	-- Message queue
	self._mq = (require "SEMessageQueue").new(self)

    -- Wds manager
    self._wdsManager = (require "SEWdsManager").new(self)

    -- DamageManager
    self._damageManager = require("SEDamageManager").new(self)

    -- Skill manager
    self._skillManager = (require "SESkillManager").new(self)

    -- Battle UI
    self._uiBattlePanel = (require "SEUiBattlePanel").new(self)

    -- Toast UI
    self._uiToastPanel = (require "SEUiToastPanel").new(self)

    -- Unit manager
    self._unitManager = (require "SEUnitManager").new(self)
	self._unitManager:PrecacheWaypointCenterGo()

    -- Team manager
    self._teamManager = (require "SETeamManager").new(self)

    -- Faction manager
    self._factionManager = (require "SEFactionManager").new()

    -- Input manager
    self._inputManager = (require "SEInputManager").new(self)
    self._inputManager:SetInputWrapper(CS.UnityEngine.Input)

    self._sceneBagManager = (require "SESceneBagManager").new(self)
    local scene = self:GetCurrentSceneWDS()
    local sceneId = scene and scene.ID
    self._sceneBagManager:InitWithSceneId(sceneId)

    -- Event manager
    --self._eventManager = (require "SEEventManager").new(self)

    -- SE mine components
    local seInteractors = self._mapRoot:GetComponentsInChildren(typeof(CS.SEComponents.SEMineActionComponentBase))
    for i = 0, seInteractors.Length - 1 do
        local v = seInteractors[i]
        if (v and v.gameObject and v.gameObject.activeInHierarchy) then
            self:AddSEInteractor(v)
        end
    end
    seInteractors = self._mapInfo:GetComponentsInChildren(typeof(CS.SEComponents.SEMineActionComponentBase))
    for i = 0, seInteractors.Length - 1 do
        local v = seInteractors[i]
        if (v and v.gameObject and v.gameObject.activeInHierarchy) then
            self:AddSEInteractor(v)
        end
    end
    if (self._mapInfo.EditorNode) then
        seInteractors =
            self._mapInfo.EditorNode:GetComponentsInChildren(typeof(CS.SEComponents.SEMineActionComponentBase))
        for i = 0, seInteractors.Length - 1 do
            local v = seInteractors[i]
            if (v and v.gameObject and v.gameObject.activeInHierarchy) then
                self:AddSEInteractor(v)
            end
        end
    end

    -- Fail message table
    for _, v in ConfigRefer.NpcGen:ipairs() do
        if (v and v:FailMsg() and v:Pos() > 0) then
            local posConf = ConfigRefer.LevelPos:Find(v:Pos())
            self._failMsgTable[posConf:StringId()] = v:FailMsg()
        end
    end

    -- Event region table
    for _, v in ConfigRefer.EventRegion:ipairs() do
        if (v) then
            self._eventRegionTable[v:Name()] = v
        end
    end

    -- Input handling
    --self:GetInputManager():Init()

    -- Update handling
    --self._lastUpdateTime = g_Game.Time.time
    g_Game:AddIgnoreInvervalTicker(Delegate.GetOrCreate(self, self.Update))
    if UNITY_EDITOR and UNITY_DEBUG then
        g_Game:AddOnDrawGizmos(Delegate.GetOrCreate(self, self.OnDrawGizmos))
    end

    -- Server listener
    self._wdsManager:Init()

    -- Damage manager
    self._damageManager:Start()

	self:GetMapInfo():DisableRenderFeature()
	self:GetMapInfo():DeactiveBlackScreen()

	-- 播放BGM与环境音效
	if (self._instConfig:Bgm() > 0) then
		local bgmConf = ConfigRefer.AudioConfig:Find(self._instConfig:Bgm())
		if (bgmConf and bgmConf:PlayData(1)) then
			g_Game.SoundManager:PlayBgm(bgmConf:PlayData(1))
		end
	end
	if (self._instConfig:Ambient() > 0) then
		local ambConf = ConfigRefer.AudioConfig:Find(self._instConfig:Ambient())
		if (ambConf and ambConf:PlayData(1)) then
			g_Game.SoundManager:PlayAmb(ambConf:PlayData(1))
		end
	end
end

--- 获取场景配置
---@param self SEEnvironment
---@return MapInstanceConfigCell
function SEEnvironment:GetInstanceConfig()
	return self._instConfig
end

---@param self SEEnvironment
---@return void
function SEEnvironment:Dispose()
    SELogger.LogLow("SEEnvironment Dispose")
    self._disposing = true
	self._sceneLoadComplete = false
	self._uiLoadComplete = false
    self._loadCompleteSent = false
    if self._interactorRangeEventMgr then
        self._interactorRangeEventMgr:Dispose()
    end
    self._interactorRangeEventMgr = nil
    table.clear(self._interactorRangeIdMap)
    table.clear(self._interactorRangeChangedMap)
    for i, v in pairs(self._manualInteractorMap) do
        v:Dispose()
    end
    table.clear(self._manualInteractorMap)

	-- 清空缓冲池
	BuffClientManager.DestroyInstance()
    SkillClientManager.DestroyInstance()
	self._pooledCreateHelper:DeleteAll()
	self._pooledCreateHelperForSkillModel:DeleteAll()
	g_Game.GameObjectPoolManager:Clear("SE")
	g_Game.GameObjectPoolManager:Clear("SE_SkillModel")
	g_Game.GameObjectPoolManager:Clear("SkillClientBullet")
	g_Game.GameObjectPoolManager:Clear("SkillClientAlert")
	g_Game.GameObjectPoolManager:Clear("BuffClientEffect")
	
	g_Game.EventManager:RemoveListener(EventConst.STORY_TIMELINE_STOP, Delegate.GetOrCreate(self, self.OnTimelinePlayEnd))
	-- 强制停止Timeline
	if (self._timeline) then
		self:OnTimelinePlayEnd(self._timelineCfgId)
	end

	if (self._warmUpManager) then
		self._warmUpManager:Dispose()
		self._warmUpManager = nil
	end
	
	g_Game:RemoveIgnoreInvervalTicker(Delegate.GetOrCreate(self, self.Update))
    if UNITY_EDITOR and UNITY_DEBUG then
        g_Game:RemoveOnDrawGizmos(Delegate.GetOrCreate(self, self.OnDrawGizmos))
    end
	self:StopSETimer()
    if (self._functionClearHandleList) then
        for _, v in pairs(self._functionClearHandleList) do
            if (v) then
                v()
            end
        end
        self._functionClearHandleList = nil
    end
    self:StopCameraShake()

	-- 云影
    if Utils.IsNotNull(self._mapInfo) then
        -- 退出时可能go 已经被干掉了 做个判空
        self._mapInfo:SetCloudShadowEnabled(false)
    end
    
    if self._teamManager then
        self._teamManager:Dispose()
        self._teamManager = nil
    end
    if (self._factionManager) then
        self._factionManager:Dispose()
        self._factionManager = nil
    end
    if (self._unitManager) then
        self._unitManager:Dispose()
        self._unitManager = nil
    end
    if (self._skillManager) then
        self._skillManager:Dispose()
        self._skillManager = nil
    end
    if (self._uiBattlePanel) then
        self._uiBattlePanel:Dispose()
        self._uiBattlePanel = nil
    end

    self._seInteractorTable = {}
    if (self._wdsManager) then
        self._wdsManager:Dispose()
        self._wdsManager = nil
    end
	if (self._mq) then
		self._mq:Dispose()
		self._mq = nil
	end
    if (self._damageManager) then
        self._damageManager:Dispose()
        self._damageManager = nil
    end
	if (Utils.IsNotNull(self._ftManager)) then
		self._ftManager:Clear()
	end
    if self._ui then
        self._ui:DestroyPanel()
        self._ui = nil
    end
    if self._uiShow then
        self._uiShow:DestroyPanel()
        self._uiShow = nil
    end
    if self._uiTypeLabel then
        self._uiTypeLabel:DestroyPanel()
        self._uiTypeLabel = nil
    end
    if self._sceneBagManager then
        self._sceneBagManager:Dispose()
        self._sceneBagManager = nil
    end
    --self._mapInfo:ClearGameObjectPool(true, true)
    self._failMsgTable = {}
    self._eventRegionTable = {}

	-- 强制恢复速度
    CS.UnityEngine.Time.timeScale = 1
 
	if (Utils.IsNotNull(self._mapInfo)) then
		self._mapInfo:SetGTAOEnabled(false)
		self._mapInfo:Dispose()
	end

	g_Game.EventManager:TriggerEvent(EventConst.SE_EXIT)

    SESceneRoot.SetSceneRoot(nil)
    SESceneRoot.SetClientScale(nil)
    SESceneRoot.SetCameraRotation(nil)
    SESceneRoot.SetSceneWayPointYOffset(nil)
    self._fallbackPresetIndex = nil
    m_Instance = nil
end

---是否足够接近
---@param self SEEnvironment
---@param pos CS.UnityEngine.Vector3
---@param targetPos CS.UnityEngine.Vector3
---@param overrideDistance number
---@return boolean
function SEEnvironment:IsNearEnough(pos, targetPos, overrideDistance)
    if (not pos or not targetPos) then
        return false
    end
    local dist = MathUtils.Distance(pos, targetPos)
    local targetDist
    if (overrideDistance and overrideDistance > 0) then
        targetDist = overrideDistance
    elseif (not self._mapInfo or not self._mapInfo.GridSize) then
        targetDist = 0.25
    else
        targetDist = self._mapInfo.GridSize
    end
    targetDist = targetDist * SESceneRoot.GetClientScale()
    return dist <= targetDist
end

---服务端坐标转为客户端坐标
---@param self SEEnvironment
---@param serverPos CS.UnityEngine.Vector3
---@return CS.UnityEngine.Vector3
function SEEnvironment:ServerPos2Client(serverPos)
    return self._mapInfo:ServerPos2Client(serverPos)
end

---客户端坐标转换为服务端坐标
---@param self SEEnvironment
---@param clientPos CS.UnityEngine.Vector3
---@return CS.UnityEngine.Vector3
function SEEnvironment:ClientPos2Server(clientPos)
    return self._mapInfo:ClientPos2Server(clientPos)
end

---服务端方向转换为客户端朝向
---@param self SEEnvironment
---@param serverDirection wds.Vector2F
---@return CS.UnityEngine.Vector3
function SEEnvironment:ServerDirection2ClientForward(serverDirection)
    return CS.UnityEngine.Vector3(serverDirection.X, 0, serverDirection.Y).normalized
end

---开始相机震动
---@param self SEEnvironment
---@param data table
---@param magnitude number
---@param frequency number
---@param time number
---@return void
function SEEnvironment:StartCameraShake(data)
	if (data and data.Params) then
		local conf = data.Params[self._currentCameraShakingIndex or 1]
		if (conf) then
			local magnitude = conf.AmplitudeGain
			local frequency = conf.FrequencyGain
			local time = data.Time or 0.5

			self._cameraPerlin.m_AmplitudeGain = magnitude
			self._cameraPerlin.m_FrequencyGain = frequency
		
			self._cameraPerlinAlt1.m_AmplitudeGain =
				magnitude * self._cameraCtrlAlt1.m_Lens.FieldOfView / self._cameraCtrl.m_Lens.FieldOfView
			self._cameraPerlinAlt1.m_FrequencyGain = frequency
		
			self._cameraPerlinAlt2.m_AmplitudeGain =
				magnitude * self._cameraCtrlAlt2.m_Lens.FieldOfView / self._cameraCtrl.m_Lens.FieldOfView
			self._cameraPerlinAlt2.m_FrequencyGain = frequency
		
			self._cameraShakingTime = time
		end
	end
end

---停止相机震动
---@param self SEEnvironment
---@return void
function SEEnvironment:StopCameraShake()
    self._cameraShakingTime = 0
    if not self._cameraPerlin then return end

    self._cameraPerlin.m_FrequencyGain = 0
    self._cameraPerlin.m_AmplitudeGain = 0

    self._cameraPerlinAlt1.m_FrequencyGain = 0
    self._cameraPerlinAlt1.m_AmplitudeGain = 0

    self._cameraPerlinAlt2.m_FrequencyGain = 0
    self._cameraPerlinAlt2.m_AmplitudeGain = 0
end

---生成飘浮文字
---@param self SEEnvironment
---@param style number
---@param unit SEUnit
---@param text string
---@param offset CS.UnityEngine.Vector3
---@param hostile boolean
---@return void
function SEEnvironment:SpawnFloatingText(style, unit, text, offset, hostile)
    if (not self._ftManager) then
        SELogger.LogError("FloatingTextManager not found!")
        return
    end
    self._ftManager:Spawn(style, unit:GetActor():GetTransform(), text, offset, hostile)
end

---实体是否不可见
---@param self SEEnvironment
---@param id number
---@return boolean
function SEEnvironment:IsEntityInvisible(id)
    return self:GetUnitManager():GetDummyUnit(id) ~= nil
end

---@param self SEEnvironment
---@param handle function
---@return void
function SEEnvironment:AddFunctionClearHandle(handle)
    table.insert(self._functionClearHandleList, handle)
end

---获取阵营管理器
---@param self SEEnvironment
---@return SEFactionManager
function SEEnvironment:GetFactionManager()
    return self._factionManager
end

function SEEnvironment:IsPVP()
    return self._instConfig:SceneEnterTypo() == SceneEnterType.ReplicaPvp
end

--- 相对自己，是敌方
---@param unit SEUnit
function SEEnvironment:IsHostile(unit)
    local selfLevelCampIndex = self:GetWdsManager():GetSelfLevelCampIndex()
    local otherLevelCampIndex = unit:GetLevelCampIndex()
    if selfLevelCampIndex > 0 and otherLevelCampIndex > 0 then
        return selfLevelCampIndex ~= otherLevelCampIndex
    end

    return self:GetFactionManager():IsHostile(FACTION_PLAYER, unit:GetFaction())
end

--- 相对自己，是友方
---@param unit SEUnit
function SEEnvironment:IsFriendly(unit)
    local selfLevelCampIndex = self:GetWdsManager():GetSelfLevelCampIndex()
    local otherLevelCampIndex = unit:GetLevelCampIndex()
    if selfLevelCampIndex > 0 and otherLevelCampIndex > 0 then
        return selfLevelCampIndex == otherLevelCampIndex
    end

    return self:GetFactionManager():IsFriendly(FACTION_PLAYER, unit:GetFaction())
end

--- 相对自己，是中立
---@param unit SEUnit
function SEEnvironment:IsNeutral(unit)
    return (not self:IsHostile(unit)) and (not self:IsFriendly(unit))
end

---@param self SEEnvironment
---@param id number
---@return boolean
function SEEnvironment:IsDummy(id)
    return self:GetUnitManager():GetDummyUnit(id) ~= nil
end

---@param self SEEnvironment
---@param blendTime number
---@return void
function SEEnvironment:SetCinemachineCameraBlendTime(blendTime)
    self._cameraBrain.m_DefaultBlend =
        CS.Cinemachine.CinemachineBlendDefinition(CS.Cinemachine.CinemachineBlendDefinition.Style.EaseInOut, blendTime)
end

---是否允许点击移动
---@param self SEEnvironment
---@return boolean
function SEEnvironment:AllowClickMove()
    return self._allowClickMove
end

---获取伤害管理器
---@param self SEEnvironment
---@return SEDamageManager
function SEEnvironment:GetDamageManager()
    return self._damageManager
end

---模拟客户端命令
---@param self SEEnvironment
---@param id number
---@param params number[]
---@return void
function SEEnvironment:SimulateClientCommand(id, params)
    local cmd = ConfigRefer.ClientCmdSe:Find(id)
    if (cmd) then
        self:ProcessClientCommand(cmd, params)
    end
end

---结束客户端命令
---@param self SEEnvironment
---@param cmd ClientCmdSeConfigCell
---@return void
function SEEnvironment:EndClientCommand(cmd)
    if (not cmd) then
        return
    end
    local msg = require("NotifyCmdParameter").new()
    msg.args.CmdType = wrpc.CmdType.CmdTypeStopClientCmd
    msg.args.Params:Add(cmd:Id())
    msg:Send()
end

---战斗准备
function SEEnvironment:ProcessBattlePrepare(battleType, icon)
	self._battleType = battleType
	local type = self._battleType
    local battle = self:GetUiBattlePanel()
    if battle and self:GetEnvMode() == SEEnvironmentModeType.CityScene then
        battle:HideBossHPBarAll()
    end
	-- 新增类型特殊处理
	if (type == BATTLE_TYPE_ELITE) then type = BATTLE_TYPE_NORMAL end

    if self._battleType == BATTLE_TYPE_CLIMB_TOWER then
        local scenePlayer = self._wdsManager:GetScenePlayer()
		---@type SEClimbTowerObjectiveMediatorParam
		local params = {
			---TODO
			sectionId = scenePlayer.SceneClimbTower.SectionCfgId or 0,
		}
		g_Game.UIManager:Open(UIMediatorNames.SEClimbTowerObjectiveMediator, params)
    elseif self._battleType == BATTLE_TYPE_PVP then
        ---@type ReplicaPVPBattleStartMediatorParameter
        local pvpBattleStartParam = {}
        pvpBattleStartParam.env = self
        g_Game.UIManager:Open(UIMediatorNames.ReplicaPVPBattleStartMediator, pvpBattleStartParam)
    elseif self._battleType == BATTLE_TYPE_BOSS and self._currentSpawnerId then
        local unitMgr = self:GetUnitManager()
        local unit, index = unitMgr:GetFirstBossBySpawnerId(self._currentSpawnerId)
        unitMgr:RefreshBossHud(unit, index)
    else
        local key = ConfigRefer.ConstSe:SeBattleStartText(type + 1)
		local params = {
			battleType = type,
			text = I18N.Get(key),
			icon = icon,
		}
		g_Game.UIManager:Open(UIMediatorNames.SEBattleWarningMediator, params)
    end
end

---战斗开始
function SEEnvironment:ProcessBattleStart()
	self:GetMapInfo():EnableRenderFeature()

	self._inBattle = true
    local oldInBattle = self._currentTeamInBattleFlag
    self._currentTeamInBattleFlag = self:DoRefreshCurrentTeamInBattleFlag()
    if oldInBattle ~= self._currentTeamInBattleFlag then
        self:GetUnitManager():RefreshAllGetPetCatchHud()
    end
	self:GetUnitManager():ForceRefreshFightForAll()

    g_Game.UIManager:CloseByName(UIMediatorNames.SEBattleWarningMediator)
    g_Game.UIManager:CloseByName(UIMediatorNames.SEBattleBossWarningMediator)
	g_Game.UIManager:CloseByName(UIMediatorNames.SEClimbTowerObjectiveMediator)
    g_Game.UIManager:CloseByName(UIMediatorNames.ReplicaPVPBattleStartMediator)

    self:GetUiBattlePanel():Show(self._battleType)
    self:GetUiBattlePanel():OnBattleStart()

    -- 副本计时
	self:StartSETimer()
end

---战斗结束
function SEEnvironment:ProcessBattleEnd()
    SELogger.Log('ProcessBattleEnd')
    ---正在释放就不要继续了
    if self._disposing then
        return
    end
	-- self:SetBattleSpeed(1, true)
    local mapInfo = self:GetMapInfo()
    if Utils.IsNotNull(mapInfo) then
        self:GetMapInfo():DisableRenderFeature()
    end
	self._inBattle = false
	self:GetUnitManager():ForceRefreshFightForAll()

    self:GetUiBattlePanel():OnBattleEnd()
    self:GetUiBattlePanel():Hide()
    -- 取消所有施放中的技能
    self:GetSkillManager():CancelSkill(nil, true)
    -- 所有卡牌归位
    self:GetUiBattlePanel():ResetAllCardItems()
    self:GetUiBattlePanel():HideCardTips()
end

---处理客户端命令
---@param self SEEnvironment
---@param cmd ClientCmdSeConfigCell
---@param params number[]
---@return void
function SEEnvironment:ProcessClientCommand(cmd, params)
    SELogger.Trace("*** Client command: %s, %s, %s", cmd:Id(), cmd:SeCmdType(), params)
	g_Logger.LogChannel("SE", "SE client command: id: %s, type: %s, param: %s", cmd:Id(), cmd:SeCmdType(), params)
    -- 相机参数变更
    if (cmd:SeCmdType() == SEClientCmdType.CameraParamChange) then
		local followOffsetX, followOffsetY, followOffsetZ
		if (cmd:FloatParamsLength() >= 11) then
			followOffsetX = cmd:FloatParams(9)
			followOffsetY = cmd:FloatParams(10)
			followOffsetZ = cmd:FloatParams(11)
		end
        self:SetAltCameraParams(cmd:FloatParams(1), cmd:FloatParams(2), cmd:FloatParams(3),
            cmd:FloatParams(4), cmd:FloatParams(5), cmd:FloatParams(6), cmd:FloatParams(7), cmd:FloatParams(8),
			followOffsetX, followOffsetY, followOffsetZ)
        self:SwitchToAltCamera()
        self:EndClientCommand(cmd)
    -- 相机参数还原
    elseif (cmd:SeCmdType() == SEClientCmdType.CameraParamReset) then
        self._cameraBlendTime = cmd:FloatParams(1) or DEFAULT_CAMERA_BLEND_TIME
        self:SwitchToDefaultCamera()
        self:EndClientCommand(cmd)
    -- 战斗准备
    elseif (cmd:SeCmdType() == SEClientCmdType.SeBattlePrepare) then
        local battleType = params[2]
		local icon = params[3] or -1
        self:ProcessBattlePrepare(battleType, icon)
    -- 战斗开始
    elseif (cmd:SeCmdType() == SEClientCmdType.SeBattleStart) then
        self:ProcessBattleStart()
    -- 战斗结束
    elseif (cmd:SeCmdType() == SEClientCmdType.SeBattleEnd) then
        self:ProcessBattleEnd()
    -- 玩家失去控制
    elseif (cmd:SeCmdType() == SEClientCmdType.PlayerNoControl) then
        local t = 0
        if (params[2]) then t = params[2] / 1000 end
        self:GetInputManager():SetNoControl(true, t)
        self:EndClientCommand(cmd)
    -- 玩家恢复控制
    elseif (cmd:SeCmdType() == SEClientCmdType.PlayerGainControl) then
        self:GetInputManager():SetNoControl(false)
        self:EndClientCommand(cmd)
    -- 展示动画
    elseif (cmd:SeCmdType() == SEClientCmdType.ShowAnim) then
        SELogger.LogLow("play anim: %s, %s", cmd:StringParams(1), cmd:StringParams(2))
        local go = self:GetGoByName(cmd:StringParams(1))
        if (go) then
            SELogger.LogLow("Found object %s", cmd:StringParams(1))
            ---@type UnityEngine.Animator
            local anim = go:GetComponentInChildren(typeof(CS.UnityEngine.Animator))
            if (anim) then
                SELogger.LogLow("Found animator")
                anim:Play(cmd:StringParams(2))
            end
        end
        self:EndClientCommand(cmd)
    -- 搜寻波提示
    elseif (cmd:SeCmdType() == SEClientCmdType.ExploreWaveHint) then
        --self:GetExploreWaveManager():SetHintCmdConf(cmd)
        --self:GetUI():SetExploreWaveButtonEffectActive(true)
        self:EndClientCommand(cmd)
    -- 播放音效
    elseif (cmd:SeCmdType() == SEClientCmdType.PlayAudio) then
        if (cmd:AudioConfigConf() > 0) then
			local audioConf = ConfigRefer.AudioConfig:Find(cmd:AudioConfigConf())
			if (audioConf and audioConf:PlayData(1)) then
				g_Game.SoundManager:Play(audioConf:PlayData(1))
			end
        end
        self:EndClientCommand(cmd)
    -- 播放BGM
    elseif (cmd:SeCmdType() == SEClientCmdType.PlayBgm) then
        if (cmd:AudioConfigConf() > 0) then
			local audioConf = ConfigRefer.AudioConfig:Find(cmd:AudioConfigConf())
			if (audioConf and audioConf:PlayData(1)) then
				g_Game.SoundManager:PlayBgm(audioConf:PlayData(1))
			end
        end
        self:EndClientCommand(cmd)
    -- 显示区域名称
    elseif (cmd:SeCmdType() == SEClientCmdType.ShowAreaName) then
        self:GetUISkillPanel():ShowAreaName(I18N.Get(cmd:I18nText()), cmd:FloatParams(1))
        self:EndClientCommand(cmd)
    -- 打字机效果
    elseif (cmd:SeCmdType() == SEClientCmdType.TypeLabel) then
        self:ShowTypeLabel(I18N.Get(cmd:I18nText()), cmd:FloatParams(1), cmd:FloatParams(2))
        self:EndClientCommand(cmd)
    -- 服务器推送事件触发
    elseif (cmd:SeCmdType() == SEClientCmdType.EventTrigger) then
        self:EventTriggered(params[2])
    -- 激活对象
    elseif (cmd:SeCmdType() == SEClientCmdType.SceneNodeHide) then
		local targetName = cmd:StringParams(1)
		local target = self:GetGoByName(targetName)
        if (target) then
            if (cmd:StringParams(2) == "1") then
				SELogger.LogLow("Activate [%s]", targetName)
                target:SetActive(true)
            elseif (cmd:StringParams(2) == "0") then
				SELogger.LogLow("Deactivate [%s]", targetName)
                target:SetActive(false)
            end
        else
            SELogger.LogError("Can't find objct [%s] in scene!", targetName)
        end
    -- 锁定相机
    elseif (cmd:SeCmdType() == SEClientCmdType.SeCameraLock) then
        --SELogger.LogLow("*** CameraLockPos %s, %s, %s, %s", cmd:FloatParams(1), cmd:FloatParams(2), cmd:FloatParams(3), cmd:FloatParams(4))
		SELogger.Trace("***锁定相机: confId: %s, prms: %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s", cmd:Id(),
			cmd:FloatParams(1), cmd:FloatParams(2), cmd:FloatParams(3), cmd:FloatParams(4),
			cmd:FloatParams(5), cmd:FloatParams(6), cmd:FloatParams(7), cmd:FloatParams(8),
			cmd:FloatParams(9), cmd:FloatParams(10), cmd:FloatParams(11))
        self._cameraLockingPos = CS.UnityEngine.Vector3(cmd:FloatParams(1), cmd:FloatParams(2), cmd:FloatParams(3))
        self:SetNextAltCameraTargetPos(self._cameraLockingPos)
		local rotX, rotY, rotZ, fov
		if (cmd:FloatParamsLength() > 3) then
			rotX = cmd:FloatParams(4)
			rotY = cmd:FloatParams(5)
			rotZ = cmd:FloatParams(6)
			fov = cmd:FloatParams(7)
		end
        self._cameraBlendTime = cmd:FloatParams(8) or DEFAULT_CAMERA_BLEND_TIME
		local offx, offy, offz
		if (cmd:FloatParamsLength() > 8) then
			offx = cmd:FloatParams(9)
			offy = cmd:FloatParams(10)
			offz = cmd:FloatParams(11)
		end
		if (self._nextSwitchToAltCamera1) then
			if (self._cameraCtrlAlt1) then
				self._cameraCtrlAlt1.transform.localRotation =
					CS.UnityEngine.Quaternion.Euler(rotX, rotY, rotZ)
				local lens = self._cameraCtrlAlt1.m_Lens
				lens.FieldOfView = fov
				self._cameraCtrlAlt1.m_Lens = lens
				if (offx and offy and offz) then
					local body = self._cameraCtrlAlt1:GetTransposerComponent()
					if (body) then
						body.m_FollowOffset = CS.UnityEngine.Vector3(offx, offy, offz)
					end
				end
			end
		else
			if (self._cameraCtrlAlt2) then
				self._cameraCtrlAlt2.transform.localRotation =
					CS.UnityEngine.Quaternion.Euler(rotX, rotY, rotZ)
				local lens = self._cameraCtrlAlt2.m_Lens
				lens.FieldOfView = fov
				self._cameraCtrlAlt2.m_Lens = lens
				if (offx and offy and offz) then
					local body = self._cameraCtrlAlt2:GetTransposerComponent()
					if (body) then
						body.m_FollowOffset = CS.UnityEngine.Vector3(offx, offy, offz)
					end
				end
			end
		end
        self:SwitchToAltCamera()
    -- 相机解锁
    elseif (cmd:SeCmdType() == SEClientCmdType.SeCameraUnlock) then
        self._cameraLockingPos = nil
        self._cameraBlendTime = cmd:FloatParams(1) or DEFAULT_CAMERA_BLEND_TIME
        self:SetNextAltCameraTargetPos(self:GetCaptain():GetActor():GetPosition())
        if (self._usingAltCamera) then
            self:CopyAltCameraParamsToNext()
        else
            self:CopyDefaultCameraParamsToAltCamera()
        end
        self:SwitchToAltCamera()
    -- 引导
    elseif (cmd:SeCmdType() == SEClientCmdType.GuideStart) then
        if cmd:StringParamsLength() > 0 then
            local strId = cmd:StringParams(1)
            local id = tonumber(strId)
            if id and id > 0 then
                ModuleRefer.GuideModule:CallGuide(id, function()
                    self:EndClientCommand(cmd)
                end)
            end
        end
    -- 显示方向指引
    elseif (cmd:SeCmdType() == SEClientCmdType.ShowDirGuide) then
        local trackPos = CS.UnityEngine.Vector3(cmd:FloatParams(1), cmd:FloatParams(2), cmd:FloatParams(3))
        self:ShowCaptainDirGuide(trackPos)
    -- 关闭方向指引
    elseif (cmd:SeCmdType() == SEClientCmdType.EndDirGuide) then
        self:HideCaptainDirGuide()
    -- 开始剧情对话
    elseif (cmd:SeCmdType() == SEClientCmdType.ShowStoryTask) then
        if cmd:StringParamsLength() > 0 then
            local strId = cmd:StringParams(1)
            local id = tonumber(strId)
            if id and id > 0 then
                ModuleRefer.StoryModule:StoryStart(id, function()
                    self:EndClientCommand(cmd)
                end)
            end
        end
	-- Boss血条显隐
	elseif (cmd:SeCmdType() == SEClientCmdType.BossHPHide) then
		if (cmd:FloatParamsLength() > 0) then
			local show = (cmd:FloatParams(1) ~= 0)
			self:GetUiBattlePanel():SetBossHPBarVisible(show)
		end
	-- 隐藏/显示战斗UI
	elseif (cmd:SeCmdType() == SEClientCmdType.UIHide) then
		if (cmd:FloatParamsLength() > 0) then
			local show = (cmd:FloatParams(1) ~= 0)
			if (show) then
				self:GetUiBattlePanel():Show()
			else
				self:GetUiBattlePanel():Hide()
				self:GetUiBattlePanel():CancelUsingSkill()
				self:GetSkillManager():CancelSkill(nil, true)
				self:GetUiBattlePanel():HideCardTips()
			end
		end
	-- 变更相机震动配置
	elseif (cmd:SeCmdType() == SEClientCmdType.CameraShakeLevel) then
		if (cmd:FloatParamsLength() > 0) then
			self._currentCameraShakingIndex = (cmd:FloatParams(1) or 0) + 1
		end
	-- 英雄显隐
	elseif (cmd:SeCmdType() == SEClientCmdType.HeroHide) then
		if (cmd:FloatParams(1) ~= 0) then
			self:GetUnitManager():SetHeroesHidden(false)
		else
			self:GetUnitManager():SetHeroesHidden(true)
		end
	-- 傀儡显隐
	elseif (cmd:SeCmdType() == SEClientCmdType.PuppetHide) then
		if (cmd:FloatParams(1) ~= 0) then
			self:GetUnitManager():SetPuppetsHidden(false)
		else
			self:GetUnitManager():SetPuppetsHidden(true)
		end
	-- 销毁所有血条
	elseif (cmd:SeCmdType() == SEClientCmdType.HPDestroy) then
		self:GetUnitManager():DestroyAllUnitHuds()
	-- 所有单位显隐
	elseif (cmd:SeCmdType() == SEClientCmdType.NpcHide) then
		if (cmd:FloatParams(1) ~= 0) then
			self:GetUnitManager():SetAllUnitsHidden(false)
		else
			self:GetUnitManager():SetAllUnitsHidden(true)
		end
	-- 阴影配置
	elseif (cmd:SeCmdType() == SEClientCmdType.ShadowConfig) then
		if (cmd:FloatParamsLength() > 0 and cmd:FloatParams(1)) then
            RenderPiplineUtil.SetShadowDistance(cmd:FloatParams(1))
		end
		if (cmd:FloatParamsLength() > 1 and cmd:FloatParams(2)) then
			ShadowDistanceControl.ChangeShadowCascades(cmd:FloatParams(2))
		end
		if (cmd:FloatParamsLength() > 2 and cmd:FloatParams(3)) then
			ShadowDistanceControl.ChangeCascade2Split(cmd:FloatParams(3), cmd:FloatParams(1))
		end
	-- 黑屏
	elseif (cmd:SeCmdType() == SEClientCmdType.UIBlankScreen) then
		if (cmd:FloatParamsLength() > 0 and cmd:FloatParams(1)) then
			if (cmd:FloatParams(1) == 1) then
				self:GetUiBattlePanel():Hide()
				self:GetUiBattlePanel():CancelUsingSkill()
				self:GetSkillManager():CancelSkill(nil, true)
				self:GetUiBattlePanel():HideCardTips()
				self._mapInfo:ActivateBlackScreen(BLACK_SCREEN_ALPHA)
			else
				self._mapInfo:DeactiveBlackScreen()
			end
		end
	-- 强行结束引导
	elseif (cmd:SeCmdType() == SEClientCmdType.GuideEnd) then
		ModuleRefer.GuideModule:StopCurrentStep()

	elseif (cmd:SeCmdType() == SEClientCmdType.KO) then
		if (self._uiBattlePanel) then
			self._uiBattlePanel:ShowKO(true)
		end
	-- 结算界面英雄传送
	elseif (cmd:SeCmdType() == SEClientCmdType.SettlementHeroPos) then
		---@type CS.UnityEngine.Vector3
		local pos
		---@type CS.UnityEngine.Quaternion
		local rotation
		---@type SEHero
		local hero
		local heroTable = self:GetUnitManager():GetHeroList()
		if (not heroTable) then return end
		local heroList = {}
		local index = 1
		for _, h in pairs(heroTable) do
			heroList[index] = h
			index = index + 1
			if (index > 3) then break end
		end

		-- 英雄1
		if (heroList[1] and cmd:FloatParamsLength() >= 6) then
			pos = CS.UnityEngine.Vector3(cmd:FloatParams(1), cmd:FloatParams(2), cmd:FloatParams(3))
			rotation = CS.UnityEngine.Quaternion.Euler(CS.UnityEngine.Vector3(cmd:FloatParams(4), cmd:FloatParams(5), cmd:FloatParams(6)))
			hero = heroList[1]
            hero:GetLocomotion():TeleportTo(pos)
            hero:GetActor():SetForward(rotation * CS.UnityEngine.Vector3.forward)
		end

		-- 英雄2
		if (heroList[2] and cmd:FloatParamsLength() >= 12) then
			pos = CS.UnityEngine.Vector3(cmd:FloatParams(7), cmd:FloatParams(8), cmd:FloatParams(9))
			rotation = CS.UnityEngine.Quaternion.Euler(CS.UnityEngine.Vector3(cmd:FloatParams(10), cmd:FloatParams(11), cmd:FloatParams(12)))
			hero = heroList[2]
            hero:GetLocomotion():TeleportTo(pos)
            hero:GetActor():SetForward(rotation * CS.UnityEngine.Vector3.forward)
		end

		-- 英雄3
		if (heroList[3] and cmd:FloatParamsLength() >= 18) then
			pos = CS.UnityEngine.Vector3(cmd:FloatParams(13), cmd:FloatParams(14), cmd:FloatParams(15))
			rotation = CS.UnityEngine.Quaternion.Euler(CS.UnityEngine.Vector3(cmd:FloatParams(16), cmd:FloatParams(17), cmd:FloatParams(18)))
			hero = heroList[3]
            hero:GetLocomotion():TeleportTo(pos)
            hero:GetActor():SetForward(rotation * CS.UnityEngine.Vector3.forward)
		end
	-- 开云
	elseif (cmd:SeCmdType() == SEClientCmdType.LoadingMistEnd) then
		require("CloudUtils").Uncover()
    
    -- 弹toast
    elseif cmd:SeCmdType() == SEClientCmdType.Toast then
        ModuleRefer.ToastModule:AddSimpleToast(I18N.Get(cmd:I18nText()))

    -- 在hud顶部显示buff图标
    elseif cmd:SeCmdType() == SEClientCmdType.StageIcon then
        local buffCount = cmd:StringParamsLength()
        for i = 1, buffCount do
            self:GetUiBattlePanel():AddPvpBuffIcon(cmd:StringParams(i))
        end
        self:GetUiBattlePanel():RefreshPvpBuffIcons()
    elseif cmd:SeCmdType() == SEClientCmdType.ShowMediator then
        local paramCount = cmd:StringParamsLength()
        if paramCount > 0 then
            local mediatorLogicName = cmd:StringParams(1)
            local mediatorName = UIMediatorNames[mediatorLogicName]
            if mediatorName then
                local uiParameters = nil
                if paramCount > 1 then
                    uiParameters = {}
                    for i = 2, paramCount do
                        table.insert(uiParameters, cmd:StringParams(i))
                    end
                end
                g_Game.UIManager:Open(mediatorName, uiParameters)
            else
                g_Logger.Error("ClientCmd:%s mediator:%s not found", cmd:Id(), mediatorLogicName)
            end
        else
            g_Logger.Error("ClientCmd:%s no param", cmd:Id())
        end
    end
end

---显示方向引导
---@param self SEEnvironment
---@param trackPos CS.UnityEngine.Vector3
---@return void
function SEEnvironment:ShowCaptainDirGuide(trackPos)
    self._dirGuidePos = trackPos
    self._dirGuideShow = true
    if (Utils.IsNull(self._dirGuideGo)) then
        self._createHelper:Create(ArtResourceUtils.GetItem(ArtResourceConsts.se_dir_guide), self:GetMapRoot(), function(go)
            if not go then
                return
            end
            self._dirGuideGo = go
			self._dirGuideGo:SetActive(true)
            -- if not self._dirGuideGo.activeSelf and self._dirGuideGo.activeInHierarchy then
            --     self._dirGuideGo:SetVisible(true)
            -- end
        end)
    else
		if (Utils.IsNotNull(self._dirGuideGo)) then
			self._dirGuideGo:SetActive(true)
		end
        -- if not self._dirGuideGo.activeSelf and self._dirGuideGo.activeInHierarchy then
        --     self._dirGuideGo:SetVisible(true)
        -- end
    end
end

---隐藏设置方向引导
---@param self SEEnvironment
---@return void
function SEEnvironment:HideCaptainDirGuide()
    self._dirGuidePos = nil
    self._dirGuideShow = false
	if (Utils.IsNotNull(self._dirGuideGo)) then
		self._dirGuideGo:SetActive(false)
	end
    -- if self._dirGuideGo and self._dirGuideGo.activeSelf then
    --     self._dirGuideGo:SetVisible(false)
    -- end
end

function SEEnvironment:UpdateCaptainDirGuide()
    if not self._dirGuideShow or not self._dirGuidePos then
        return
    end

    if self._dirGuideGo then
        if (self:GetCaptain()) then
            local captainPos = self:GetCaptain():GetActor():GetPosition()
            self._dirGuideGo.transform.position = captainPos
            self._dirGuideGo.transform:LookAt(self._dirGuidePos)
        end
    end
end

---重置默认相机参数
---@param self SEEnvironment
---@param includingHighCameraFov boolean
---@return void
function SEEnvironment:ResetDefaultCameraParams(includingHighCameraFov)
    local conf = self:GetInstanceConfig()
    if (conf) then
        self:SetDefaultCameraParams(conf)
    end
end

--- 复制默认相机参数到备用相机
---@param self SEEnvironment
function SEEnvironment:CopyDefaultCameraParamsToAltCamera()
    self:SetCameraAltFollowOffset(self._mapInfo.CameraTargetOffset)
	local mainBody = self._cameraCtrl:GetTransposerComponent()
    if (self._nextSwitchToAltCamera1) then
        if (self._cameraCtrlAlt1) then
            self._cameraCtrlAlt1.transform.localRotation = self._cameraCtrl.transform.localRotation
            local lens = self._cameraCtrlAlt1.m_Lens
            lens.FieldOfView = self._cameraCtrl.m_Lens.FieldOfView
            self._cameraCtrlAlt1.m_Lens = lens
			local body = self._cameraCtrlAlt1:GetTransposerComponent()
			if (body and mainBody) then
				body.m_FollowOffset = mainBody.m_FollowOffset
			end
        end
    else
        if (self._cameraCtrlAlt2) then
            self._cameraCtrlAlt2.transform.localRotation = self._cameraCtrl.transform.localRotation
            local lens = self._cameraCtrlAlt2.m_Lens
            lens.FieldOfView = self._cameraCtrl.m_Lens.FieldOfView
            self._cameraCtrlAlt2.m_Lens = lens
			local body = self._cameraCtrlAlt2:GetTransposerComponent()
			if (body and mainBody) then
				body.m_FollowOffset = mainBody.m_FollowOffset
			end
        end
    end
end

--- 复制当前备用相机参数到下一个备用相机
---@param self SEEnvironment
function SEEnvironment:CopyAltCameraParamsToNext()
	if (self._nextSwitchToAltCamera1) then
        if (self._cameraCtrlAlt1) then
            self:SetCameraAltFollowOffset(self._mapInfo:GetCameraAltTargetOffset(2))
            self._cameraCtrlAlt1.transform.localRotation = self._cameraCtrlAlt2.transform.localRotation
            local lens = self._cameraCtrlAlt1.m_Lens
            lens.FieldOfView = self._cameraCtrlAlt2.m_Lens.FieldOfView
            self._cameraCtrlAlt1.m_Lens = lens
			local body2 = self._cameraCtrlAlt2:GetTransposerComponent()
			local body1 = self._cameraCtrlAlt1:GetTransposerComponent()
			if (body1 and body2) then
				body1.m_FollowOffset = body2.m_FollowOffset
			end
		end
    else
        if (self._cameraCtrlAlt2) then
            self:SetCameraAltFollowOffset(self._mapInfo:GetCameraAltTargetOffset(1))
            self._cameraCtrlAlt2.transform.localRotation = self._cameraCtrlAlt1.transform.localRotation
            local lens = self._cameraCtrlAlt2.m_Lens
            lens.FieldOfView = self._cameraCtrlAlt1.m_Lens.FieldOfView
            self._cameraCtrlAlt2.m_Lens = lens
			local body2 = self._cameraCtrlAlt2:GetTransposerComponent()
			local body1 = self._cameraCtrlAlt1:GetTransposerComponent()
			if (body1 and body2) then
				body2.m_FollowOffset = body1.m_FollowOffset
			end
        end
    end
end

---设置默认相机参数
---@param self SEEnvironment
---@param params MapInstanceConfigCell
---@return void
function SEEnvironment:SetDefaultCameraParams(params)
    if (self._cameraCtrl and params) then
		if (params:SeCameraParamsFollowOffsetLength() == 3) then
			self:SetCamerasFollowOffset(CS.UnityEngine.Vector3(params:SeCameraParamsFollowOffset(1), params:SeCameraParamsFollowOffset(2), params:SeCameraParamsFollowOffset(3)))
		end
        if (params:SeCameraParamsOffsetLength() == 3) then
            self:SetCameraTargetOffset(CS.UnityEngine.Vector3(params:SeCameraParamsOffset(1), params:SeCameraParamsOffset(2), params:SeCameraParamsOffset(3)))
        end
        if (params:SeCameraParamsRotationLength() == 3) then
            self._cameraCtrl.transform.localRotation =
                CS.UnityEngine.Quaternion.Euler(params:SeCameraParamsRotation(1), params:SeCameraParamsRotation(2), params:SeCameraParamsRotation(3))
        end
        local lens = self._cameraCtrl.m_Lens
        if (params:SeCameraParamsFov() and params:SeCameraParamsFov() > 0) then
            lens.FieldOfView = params:SeCameraParamsFov()
        end
        self._cameraCtrl.m_Lens = lens
    end
end

---设置备用相机参数
---@param self SEEnvironment
---@param offsetX number X偏移
---@param offsetY number Y偏移
---@param offsetZ number Z偏移
---@param rotX number X旋转
---@param rotY number Y旋转
---@param rotZ number Z旋转
---@param fov number 视角
---@param blendTime number 缓动时间
---@param followOffsetX 跟随偏移X
---@param followOffsetY 跟随偏移Y
---@param followOffsetZ 跟随偏移Z
function SEEnvironment:SetAltCameraParams(offsetX, offsetY, offsetZ, rotX, rotY, rotZ, fov, blendTime, followOffsetX, followOffsetY, followOffsetZ)
    self._cameraBlendTime = blendTime or DEFAULT_CAMERA_BLEND_TIME
    self:SetCameraAltFollowOffset(CS.UnityEngine.Vector3(offsetX, offsetY, offsetZ))
    if (self._nextSwitchToAltCamera1) then
        if (self._cameraCtrlAlt1) then
            self._cameraCtrlAlt1.transform.localRotation =
                CS.UnityEngine.Quaternion.Euler(rotX, rotY, rotZ)
            local lens = self._cameraCtrlAlt1.m_Lens
            lens.FieldOfView = fov
            self._cameraCtrlAlt1.m_Lens = lens
			if (followOffsetX and followOffsetY and followOffsetZ) then
				local body = self._cameraCtrlAlt1:GetTransposerComponent()
				if (body) then
					body.m_FollowOffset = CS.UnityEngine.Vector3(followOffsetX, followOffsetY, followOffsetZ)
				end
			end
        end
    else
        if (self._cameraCtrlAlt2) then
            self._cameraCtrlAlt2.transform.localRotation =
                CS.UnityEngine.Quaternion.Euler(rotX, rotY, rotZ)
            local lens = self._cameraCtrlAlt2.m_Lens
            lens.FieldOfView = fov
            self._cameraCtrlAlt2.m_Lens = lens
			if (followOffsetX and followOffsetY and followOffsetZ) then
				local body = self._cameraCtrlAlt2:GetTransposerComponent()
				if (body) then
					body.m_FollowOffset = CS.UnityEngine.Vector3(followOffsetX, followOffsetY, followOffsetZ)
				end
			end
        end
    end
end

---切换到备用相机
---@param self SEEnvironment
---@return void
function SEEnvironment:SwitchToAltCamera()
	self._usingAltCamera = true
    self:SetCameraBlendTime()
    if (self._nextSwitchToAltCamera1) then
        self._cameraCtrlAlt1.Priority = math.max(self._cameraCtrlAlt2.Priority + 1, CAMERA_PRIORITY_HIGH)
        self._cameraCtrlAlt2.Priority = CAMERA_PRIORITY_LOW
        self._nextSwitchToAltCamera1 = false
        SELogger.LogLow("*** Switched to alt camera 1")
    else
        self._cameraCtrlAlt2.Priority = math.max(self._cameraCtrlAlt1.Priority + 1, CAMERA_PRIORITY_HIGH)
        self._cameraCtrlAlt1.Priority = CAMERA_PRIORITY_LOW
        self._nextSwitchToAltCamera1 = true
        SELogger.LogLow("*** Switched to alt camera 2")
    end
end

---切换到默认相机
---@param self SEEnvironment
---@return void
function SEEnvironment:SwitchToDefaultCamera()
    self._lastAltCameraConf = nil
    self._usingAltCamera = false
    self:SetCameraBlendTime()
    self._cameraCtrlAlt1.Priority = CAMERA_PRIORITY_LOW
    self._cameraCtrlAlt2.Priority = CAMERA_PRIORITY_LOW
    SELogger.Log("*** Switched to default camera")
end

---@param self SEEnvironment
---@return void
function SEEnvironment:SetCameraBlendTime()
    SELogger.LogLow("*** SetCameraBlendTime %s", self._cameraBlendTime)
    self._cameraBrain.m_DefaultBlend =
        CS.Cinemachine.CinemachineBlendDefinition(
        CS.Cinemachine.CinemachineBlendDefinition.Style.EaseInOut,
        self._cameraBlendTime
    )
end

---获取玩家位置引用
---@param self SEEnvironment
---@return CS.UnityEngine.Transform
function SEEnvironment:GetPlayerPositionRef()
    return self._mapInfo.PlayerPositionRef
end

---播放音效
---@param self SEEnvironment
---@param conf AudioConfigConfItem
---@return boolean
function SEEnvironment:PlayAudio(conf)
    if (conf) then
        SELogger.LogLow("Play audio config id %s", conf:Id())
        --TODO: KWwise.PlayEventWithId(conf.ID)
        return true
    end
    return false
end

---停止音效
---@param self SEEnvironment
---@param conf AudioConfigConfItem
---@return boolean
function SEEnvironment:StopAudio(conf)
    if (conf) then
        SELogger.LogLow("Stop audio config id %s", conf.ID)
        --TODO: KWwise.PlayStopEventWithId(conf.ID)
        return true
    end
    return false
end

function SEEnvironment:CancelGenInteractor(entityId)
    self._pendingGenInteractors[entityId] = nil
end

---@param comp CS.SEComponents.SEMineActionComponentBase
function SEEnvironment:DestoryInteractorGo(comp)
    if Utils.IsNull(comp) then return end
    CS.DragonReborn.AssetTool.GameObjectCreateHelper.DestroyGameObject(comp.gameObject)
end

---获取矿点
---@param self SEEnvironment
---@param entity wds.SeInteractor
---@return boolean
function SEEnvironment:GenInteractor(entity)
    if (self._pendingGenInteractors[entity.ID]) then
        return true
    end

    local mineConf = ConfigRefer.Mine:Find(entity.Interactor.ConfigID)
    if (not mineConf) then
        SELogger.LogError("Mine config id %s not found!", entity.Interactor.ConfigID)
        return false
    end
    if (mineConf:CreateType() ~= InteractorCreateType.Dynamic) then
        return false
    end
    SELogger.LogLow(
        "Try generating dynamic interactor [%s] status unique name [%s] conf id [%s] status [%s] interactable [%s]",
        entity.ID,
        entity.LevelEntityInfo.UniqueName,
        entity.Interactor.ConfigID,
        entity.Interactor.LifeStatus,
        entity.Interactor.State.CanInteract
    )
    local interactModelConf = ConfigRefer.ArtResource:Find(mineConf:InteractModel())
    if (not interactModelConf) then
        SELogger.LogError("Mine config id %s interact model not found!", entity.MineBase.ConfigID)
        return false
    end
    local entityId = entity.ID
    self._pendingGenInteractors[entityId] = true
    local brithPos = self:ServerPos2Client(CS.UnityEngine.Vector3(entity.MapBasics.Position.X, entity.MapBasics.Position.Y, entity.MapBasics.Position.Z))
    local radius = mineConf:Distance() * SESceneRoot.GetClientScale()
    local needManualCollect = mineConf:ManualInteract()
    local hpYOffset = interactModelConf:HpYOffset()
    self._createHelper:Create(interactModelConf:Path(), self:GetMapRoot(), function(prefab) 
        ---@type CS.UnityEngine.GameObject
        local go = prefab
        if (not go) then
            SELogger.LogError("Instantiate prefab %s failed!", interactModelConf:Path())
            return
        end
        if not self._pendingGenInteractors[entityId] then
            CS.DragonReborn.AssetTool.GameObjectCreateHelper.DestroyGameObject(go)
            return
        end
        -- Model scale
        if (interactModelConf:ModelScale() and interactModelConf:ModelScale() ~= 0) then
            go.transform.localScale = go.transform.localScale * interactModelConf:ModelScale()
        end
        ---@type CS.SEMineInteractiveControl
        local ctrl = go:GetComponent(typeof(CS.SEMineInteractiveControl))
        if (not ctrl) then
            SELogger.LogError("Prefab %s doesn't have SEMineInteractiveControl component!", interactModelConf:Path())
            return
        end
        ctrl.UniqueName = tostring(entity.ID)
        ctrl.AlwaysSearchable = mineConf:AlwaysSearchable()
        ctrl.InteractAsap = mineConf:InteractAsap()
        ctrl.IsDynamic = true
        go.transform.position = brithPos
        self:AddSEInteractor(ctrl)
        if needManualCollect then
            self:AddDynamicSEInteractorRangeEvent(entity, brithPos, radius, hpYOffset)
        end
        if (entity.Owner.MasterID > 0) then
            self:GetUnitManager():AddToLootTable(entity.ID, entity.Owner.MasterID)
        end
        self._wdsManager:UpdateInteractorStatus(entity)
        self._pendingGenInteractors[entity.ID] = nil
    end)
    return true
end

---变更时间速率
---@param self SEEnvironment
---@param scale number
---@return void
function SEEnvironment:ChangeTimeScale(scale)
    SELogger.LogLow("Change time scale to %s", scale)
    CS.UnityEngine.Time.timeScale = math.max( 0.0001, scale)
end

---设置服务端基准时间
---@param self SEEnvironment
---@param time number
---@return void
function SEEnvironment:SetBaseServerTime(time)
    SELogger.LogLow("Set base server time: %s", time)
    self._baseServerTime = time
    self:ResyncServerTime()
end

---重新同步服务器时间
---@param self SEEnvironment
---@return void
function SEEnvironment:ResyncServerTime()
    self._lastServerSyncTime = g_Game.Time.time
end

---获取服务器时间（包含流速变化）
---@param self SEEnvironment
---@return number
function SEEnvironment:GetServerTime()
    local delta = (g_Game.Time.time - self._lastServerSyncTime) * 1000
    return self._baseServerTime + delta
end

---@param self SEEnvironment
---@param text string
---@param duration number
---@param delay number
---@return void
function SEEnvironment:ShowTypeLabel(text, duration, delay)
    if (self._uiTypeLabel) then
        self._uiTypeLabel:ShowText(text, duration, delay)
    end
end

---@param self SEEnvironment
---@param id number
---@return void
function SEEnvironment:EventTriggered(id)
    SELogger.LogLow("Event %s triggered!", id)
    self._eventTriggerTable[id] = true
end

---@param self SEEnvironment
---@return CS.DragonReborn.AssetTool.GameObjectCreateHelper
function SEEnvironment:GetCreateHelper()
    return self._createHelper
end

---@param self SEEnvironment
---@return CS.DragonReborn.AssetTool.PooledGameObjectCreateHelper
function SEEnvironment:GetPooledCreateHelper()
    return self._pooledCreateHelper
end

---@param self SEEnvironment
---@return CS.DragonReborn.AssetTool.PooledGameObjectCreateHelper
function SEEnvironment:GetPooledCreateHelperForSkillModel()
    return self._pooledCreateHelperForSkillModel
end

---@param self SEEnvironment
---@return CS.UnityEngine.LineRenderer
function SEEnvironment:GetPathRenderer()
    return self._mapInfo.PathRenderer
end

--- 设置玩家位置引用及相机目标
---@param self SEEnvironment
---@param pos CS.UnityEngine.Vector3
---@param follow boolean
function SEEnvironment:SetPlayerPositionRefAndCameraTargets(pos, follow)
    self:GetPlayerPositionRef().position = pos
    if (not follow or self._cameraLockingPos) then return end
    local target = self:GetCameraTarget()
    local targetAlt1 = self:GetCameraAlt1Target()
    local targetAlt2 = self:GetCameraAlt2Target()
    if (target and not self._usingAltCamera) then
        target.position = pos + self:GetCameraFollowOffset()
    end
    if (targetAlt1 and self._usingAltCamera and not self._nextSwitchToAltCamera1) then
        targetAlt1.position = pos + self:GetCameraAlt1FollowOffset()
    end
    if (targetAlt2 and self._usingAltCamera and self._nextSwitchToAltCamera1) then
        targetAlt2.position = pos + self:GetCameraAlt2FollowOffset()
    end
end

---设置下一个备用相机的目标位置
---@param self SEEnvironment
---@param pos CS.UnityEngine.Vector3
function SEEnvironment:SetNextAltCameraTargetPos(pos)
    if (self._nextSwitchToAltCamera1) then
        self:GetCameraAlt1Target().position = pos
    else
        self:GetCameraAlt2Target().position = pos
    end
end

--- 显示SE专用Toast
---@param self SEEnvironment
---@param text string
function SEEnvironment:ShowToast(text)
    if (self._uiToastPanel) then
        self._uiToastPanel:Show(text)
    end
end

function SEEnvironment:HideToast()
	if (self._uiToastPanel) then
		self._uiToastPanel:Hide()
	end
end

--- 模拟屏幕点击
---@param self SEEnvironment
---@param screenPos CS.UnityEngine.Vector3 屏幕坐标
---@param force boolean 是否强制
function SEEnvironment:SimulateScreenClick(screenPos, force)
    if self._inputManager:TriggerClick(screenPos) then return end
    self._inputManager:ScreenClick(screenPos, force)
end

function SEEnvironment:RequestLeave(clickTrans, huntingNoContinue)
    if self._citySeMode then
        g_Game.EventManager:TriggerEvent(EventConst.SE_REQUEST_CITY_LEAVE_BATTLE, clickTrans)
        return
    else
        self:QuitSE(huntingNoContinue)
    end
end

function SEEnvironment:QuitSE(huntingNoContinue)
    self:PreExit()

    -- 竞技场时，不退出SE，直接打开竞技场主页面
    if self._battleType == BATTLE_TYPE_PVP then
        ModuleRefer.ReplicaPVPModule:EnterReplicaPVPInSE()
    elseif not huntingNoContinue and self._instConfig and self._instConfig:SceneEnterTypo() == SceneEnterType.Hunting then -- 爬塔进入连续中转界面
        --主动退出的话 没必要开爬塔选择界面了
        local backToSceneTid = g_Game.StateMachine:ReadBlackboard("SE_BACK_TO_SCENE_TID") or 0
        local GotoUtils = require('GotoUtils')
        GotoUtils.GoToJumpScene(backToSceneTid, 0, self._exitX, self._exitY)
    else
        local backToSceneTid = g_Game.StateMachine:ReadBlackboard("SE_BACK_TO_SCENE_TID") or 0 --新手SLG副本是从大世界进入但是需要退出到城内
        local GotoUtils = require('GotoUtils')
        GotoUtils.GotoSceneKingdomWithLoadingUI(
            backToSceneTid,
            0, self._exitX, self._exitY)
    end
end

function SEEnvironment:PreExit()
    if (not self._preExited) then
		local fromType = g_Game.StateMachine:ReadBlackboard("SE_FROM_TYPE")
		local useDefaultPos = g_Game.StateMachine:ReadBlackboard("SE_USE_DEFAULT_POS")
		self._exitX = g_Game.StateMachine:ReadBlackboard("SE_FROM_X", false)
		self._exitY = g_Game.StateMachine:ReadBlackboard("SE_FROM_Y", false)
		local data = {
			x = self._exitX,
			y = self._exitY,
		}
		if (fromType == SEHudTroopMediatorDefine.FromType.City) then
			g_Game.StateMachine:WriteBlackboard("KINGDOM_GO_TO_WORLD", false, true)
			g_Game.StateMachine:WriteBlackboard(EXIT_TO_CITY_POS_KEY, data, true)
			g_Game.StateMachine:WriteBlackboard(EXIT_USE_DEFAULT_POS, useDefaultPos, true)
		elseif (fromType == SEHudTroopMediatorDefine.FromType.World) then
            local callback = function()
                local KingdomMapUtils = require("KingdomMapUtils")
                local worldPos = CS.Grid.MapUtils.CalculateCoordToTerrainPosition(self._exitX, self._exitY, KingdomMapUtils.GetMapSystem())
				KingdomMapUtils.GetBasicCamera():ForceGiveUpTween()
                KingdomMapUtils.GetBasicCamera():LookAt(worldPos, 0)
            end
			g_Game.StateMachine:WriteBlackboard("KINGDOM_GO_TO_WORLD", true, true)
			g_Game.StateMachine:WriteBlackboard("EnterKingdomCallback", callback, true)
			g_Game.StateMachine:WriteBlackboard(EXIT_USE_DEFAULT_POS, useDefaultPos, true)
		end

		if (self._inputManager) then
			self._inputManager:SetNoControl(true)
		end
        self:SetAllowClickMove(false)
        self._preExited = true
        if (self._wdsManager) then
            self._wdsManager:ClearWdsListeners()
        end
		local buffClient = BuffClientManager.GetInstance()
		if (buffClient) then
			buffClient:OnDestroy()
		end
		local skillClient = SkillClientManager.GetInstance()
		if (skillClient) then
			skillClient:OnDestroy()
		end
    end
end

--- 通过名称获取GameObject (获取此名称的第一个)
---@param self SEEnvironment
---@param name string
---@return CS.UnityEngine.GameObject
function SEEnvironment:GetGoByName(name)
	SELogger.Trace("Try get GO by name %s", name)
	return self:GetMapInfo():GetGoByName(name)
end

--- 保存当前相机偏移
---@param self SEEnvironment
function SEEnvironment:SaveCurrentCameraOffset()
	if (not self._usingAltCamera) then
		self._cameraOffsetBeforeLock = self:GetCameraFollowOffset()
	else
		if (self._nextSwitchToAltCamera1) then
			self._cameraOffsetBeforeLock = self:GetCameraAlt2FollowOffset()
		else
			self._cameraOffsetBeforeLock = self:GetCameraAlt1FollowOffset()
		end
	end
end

--- 设置高度雾
---@param self SEEnvironment
---@param baseY number
function SEEnvironment:SetFogSpace(baseY)
	if (not self._fogSpaceValues.set) then
		local conf = self:GetInstanceConfig()
		if (not conf or not conf.Fogrange or not conf.FograngeLength or conf:FograngeLength() < 2) then return end
		self._fogSpaceValues.bottom = conf:Fogrange(1) or 0
		self._fogSpaceValues.top = conf:Fogrange(2) or 0
		self._fogSpaceValues.set = true
	end
	local nb = baseY + self._fogSpaceValues.bottom
	local nt = baseY + self._fogSpaceValues.top
	if (nb ~= self._lastFogSpaceValues.bottom or nt ~= self._lastFogSpaceValues.top) then
		---@type CS.UnityEngine.Vector4
		local space = CS.RenderExtension.SceneEnvData.GetCurrentFogSpace()
		space.z = nb
		space.w = nt
		self._lastFogSpaceValues.bottom = nb
		self._lastFogSpaceValues.top = nt
		CS.RenderExtension.SceneEnvData.SetCurrentFogSpace(space)
	end
end

--- 播放Timeline
---@param self SEEnvironment
---@param cfgId number
function SEEnvironment:PlayTimeline(cfgId)
    g_Game.EventManager:TriggerEvent(EventConst.SE_TIMELINE_START, cfgId)
    
	g_Game.EventManager:AddListener(EventConst.STORY_TIMELINE_STOP, Delegate.GetOrCreate(self, self.OnTimelinePlayEnd))
	local cfg = ConfigRefer.TimelineInfo:Find(cfgId)
	if cfg then
		self._timelineCfgId = cfgId
		self:GetSkillManager():CancelSkill(nil, true)
		self:GetUiBattlePanel():HideCardTips()
		if (Utils.IsNotNull(self._hud)) then
			self._hud:SetVisible(false)
		end
		self:GetMapInfo():EnableRenderFeature()
		self:SetCloudShadowEnabled(false)
		self:SetSkyBoxEnabled(true)
		self._timeline = require("StoryTimeline").BuildWithConfig(cfg)
		self._timeline:PrepareAsset(true)
	else
		SELogger.Trace("Timeline cfgId %s not found", cfgId)
	end
end

function SEEnvironment:OnTimelinePlayEnd(cfgId)
    g_Game.EventManager:TriggerEvent(EventConst.SE_TIMELINE_END, cfgId)

	if (not self._wdsManager) then return end
	g_Game.EventManager:RemoveListener(EventConst.STORY_TIMELINE_STOP, Delegate.GetOrCreate(self, self.OnTimelinePlayEnd))
	if (self._timeline) then
		--self:GetUiBattlePanel():Show()
		if (Utils.IsNotNull(self._hud) and not self._dontShowHud) then
			self._hud:SetVisible(true)
		end
		self._timeline:Stop(false)
		self._timeline:Release()
		-- 不在战斗中时才关闭
		if (not self._inBattle) then
			self:GetMapInfo():DisableRenderFeature()
		end
		self:SetCloudShadowEnabled(true)
		self:SetSkyBoxEnabled(false)
	end
	self._timeline = nil
	self._wdsManager:TimelineEnd(cfgId)
end

function SEEnvironment:SetSceneLoadComplete()
    SELogger.Log("SE Scene load complete")
	self._sceneLoadComplete = true
	self:CheckLoadComplete()
end

function SEEnvironment:SetUILoadComplete()
	SELogger.Log("SE UI load complete")
	self._uiLoadComplete = true
	self:CheckLoadComplete()
end

function SEEnvironment:CheckLoadComplete()
	if (self._sceneLoadComplete and self._uiLoadComplete and not self._loadCompleteSent) then
		self._loadCompleteSent = true
        SELogger.Log("CheckLoadComplete true")

		-- 通知服务端副本加载完毕 (队长创建完毕+UI已加载)
		require("SceneLoadFinishParameter").new():Send()
        if ModuleRefer.EnterSceneModule.enterHuntingUsingCover then
            ModuleRefer.EnterSceneModule.enterHuntingUsingCover = false
            require("CloudUtils").Uncover()
        end
        g_Game.EventManager:TriggerEvent(EventConst.SCENE_LOADED)

        if _G["SELoadingTimer"] then
            -- 进副本计时
		    local loadingTime = (CS.System.DateTime.Now.Ticks - _G["SELoadingTimer"]) / 10000
		    g_Logger.TraceChannel("SE", "SE副本加载完毕, 总用时: %s ms", loadingTime)
		    _G["SELoadingTimer"] = nil
        end
	end
end

function SEEnvironment:IsLoadComplete()
	return self._loadCompleteSent
end

---@param self SEEnvironment
---@return SEMessageQueue
function SEEnvironment:GetMessageQueue()
	return self._mq
end

--- 开始副本计时
---@param self SEEnvironment
function SEEnvironment:StartSETimer(restart)
    self:GetUiBattlePanel():SetSETimerShow(false)
    g_Game:RemoveSecondTicker(Delegate.GetOrCreate(self, self.UpdateSETimer))
	if (self._seTimerStarted and not restart) then return end
	self._seTimerStarted = true
	self._seTimerStartTime = g_Game.ServerTime:GetServerTimestampInSeconds()
    if self._envMode == SEEnvironmentModeType.CityScene then return end
	g_Game:AddSecondTicker(Delegate.GetOrCreate(self, self.UpdateSETimer))
	self:GetUiBattlePanel():SetSETimerShow(true)
end

--- 获取副本计时
---@param self SEEnvironment
---@return number
function SEEnvironment:GetSETimer()
	return g_Game.ServerTime:GetServerTimestampInSeconds() - self._seTimerStartTime
end

--- 停止并返回副本计时
---@param self SEEnvironment
---@return number
function SEEnvironment:StopSETimer()
	self._seTimerStarted = false
	g_Game:RemoveSecondTicker(Delegate.GetOrCreate(self, self.UpdateSETimer))
	self:GetUiBattlePanel():SetSETimerShow(false)
	return self:GetSETimer()
end

--- 更新副本计时
---@param self SEEnvironment
function SEEnvironment:UpdateSETimer()
	local timeStr = require("TimeFormatter").SimpleFormatTimeWithoutHour(self:GetSETimer())
	self:GetUiBattlePanel():SetSETimerText(timeStr, true)
end

--- 设置计数器
---@param self SEEnvironment
---@param current number
---@param total number
function SEEnvironment:SetCounterValue(current, total)
	self._counterCurrent = current
	self._counterTotal = total
end

--- 获取计数器
---@param self SEEnvironment
---@return number, number @当前, 总共
function SEEnvironment:GetCounterValue()
	return self._counterCurrent, self._counterTotal
end

--- 设置目标名称
---@param self SEEnvironment
---@param name string
function SEEnvironment:SetTargetName(name)
	if (name) then
		self._targetName = name
	else
		self._targetName = "???"
	end
	SELogger.Trace("设置目标名称: %s", self._targetName)
end

--- 显示结算界面
---@param self SEEnvironment
---@param success boolean
---@param rewardInfo wrpc.LevelRewardInfo
function SEEnvironment:ShowSettlement(success, rewardInfo)
	self:SetSkyBoxEnabled(true)
	self:SetCloudShadowEnabled(false)

    if (self._hud) then
		self._hud:SetVisible(false)
	end

    if (not success) and self._battleType ~= BATTLE_TYPE_PVP then
		g_Game.StateMachine:WriteBlackboard("SE_DEFEATED", true, true)
	else
		g_Game.StateMachine:WriteBlackboard("SE_DEFEATED", false, true)
	end

    -- 竞技场结算
    if self._battleType == BATTLE_TYPE_PVP then
        ---@type ReplicaPVPSettlementMediatorParameter
        local pvpParams = {}
        pvpParams.env = self
        pvpParams.isWin = success
        pvpParams.rewardInfo = rewardInfo
        g_Game.UIManager:Open(UIMediatorNames.ReplicaPVPSettlementMediator, pvpParams)
        return
    end

    -- 其他类型结算处理
	local ext = ""
	local battleType = self._battleType
	if (battleType == BATTLE_TYPE_CLIMB_TOWER) then
		local scenePlayer = self._wdsManager:GetScenePlayer()
		if (scenePlayer and scenePlayer.SceneClimbTower.SectionCfgId > 0) then
			local sectionCfg = ConfigRefer.ClimbTowerSection:Find(scenePlayer.SceneClimbTower.SectionCfgId)
			if (sectionCfg) then
				if (sectionCfg:TargetType() == require("ClimbTowerTargetType").Boss) then
					battleType = BATTLE_TYPE_BOSS
				else
					battleType = BATTLE_TYPE_NORMAL
				end
			end
		end
	end

	local key = ConfigRefer.ConstSe:SeBattleTypeGoalText(battleType + 1)
	if (key) then
		if (battleType == BATTLE_TYPE_BOSS) then
			SELogger.Trace("SE结算, key: %s, 类型: %s, 击杀%s", key, self._battleType, self._targetName)
			ext = I18N.GetWithParams(key, self._targetName)
		elseif (battleType == BATTLE_TYPE_PET) then
			SELogger.Trace("SE结算, key: %s, 类型: %s, 获得%s", key, self._battleType, self._targetName)
			ext = I18N.GetWithParams(key, self._targetName)
		elseif (battleType == BATTLE_TYPE_NPC) then
			SELogger.Trace("SE结算, key: %s, 类型: %s, 保护%s", key, self._battleType, self._targetName)
			ext = I18N.GetWithParams(key, self._targetName)
		elseif (battleType == BATTLE_TYPE_ELITE) then
			SELogger.Trace("SE结算, key: %s, 类型: %s, 击杀%s", key, self._battleType, self._targetName)
			ext = I18N.GetWithParams(key, self._targetName)
		else
			SELogger.Trace("SE结算, key: %s, 类型: %s, 击杀%s/%s", key, self._battleType, self._counterCurrent, self._counterTotal)
			ext = I18N.GetWithParams(key, self._counterCurrent, self._counterTotal)
		end
	end
    
	--local params = {
	--	Suc = success,
	--	LevelRewardInfo = rewardInfo,
	--	totalTimeStr = require("TimeFormatter").SimpleFormatTimeWithoutHour(self:GetSETimer()),
	--	extraStr = ext,
    --    preset = ModuleRefer.TroopModule:GetPresetData(self._presetIndex)
	--}
    --
	--g_Game.UIManager:Open(UIMediatorNames.SESettlementMediator, params)
    ---@type SEExploreSettlementMediatorParameter
    local uiParameter = {}
    uiParameter.result = success and 1 or 2
    uiParameter.gainList = {}
    uiParameter.showTypes = {}
    uiParameter.showTypes[PowerSubType.HeroBase] = true
    uiParameter.showTypes[PowerSubType.HeroEquip] = true
    uiParameter.showTypes[PowerSubType.HeroStrengthen] = true
    uiParameter.showTypes[PowerSubType.HeroSkill] = true
    uiParameter.showTypes[PowerSubType.PetBase] = true
    uiParameter.showTypes[PowerSubType.PetStrengthen] = true
    uiParameter.exitNormalSe = true
    for i, v in pairs(rewardInfo.RewardInfos) do
        uiParameter.gainList[i] = (uiParameter.gainList[i] or 0) + v
    end
    uiParameter.seBattleInfo = rewardInfo.SeBattleInfo
    g_Game.UIManager:Open(UIMediatorNames.SEExploreSettlementMediator, uiParameter)
end

--- 加载默认阴影配置
---@param self SEEnvironment
function SEEnvironment:LoadDefaultShadowConfig()
	if (self._instConfig:ShadowConfigLength() >= 3) then
        RenderPiplineUtil.SetShadowDistance(self._instConfig:ShadowConfig(1))
		ShadowDistanceControl.ChangeShadowCascades(self._instConfig:ShadowConfig(2))
		ShadowDistanceControl.ChangeCascade2Split(self._instConfig:ShadowConfig(3), self._instConfig:ShadowConfig(1))
	else
        RenderPiplineUtil.SetShadowDistance(DEFAULT_SHADOW_DISTANCE)
		ShadowDistanceControl.ChangeShadowCascades(DEFAULT_SHADOW_CASCADE)
	end
end

function SEEnvironment:LoadCloudShadowConfig()
	self:SetCloudShadowEnabled(true)
end

function SEEnvironment:LoadFogConfig()
	local fogPrefab = self._instConfig:Fog()
	if (not Utils.IsNullOrEmpty(fogPrefab)) then
		self._pooledCreateHelper:Create(fogPrefab, self._mapInfo:GetMapRoot(), function(go)
			if (Utils.IsNotNull(go)) then
				go.transform.position = CS.UnityEngine.Vector3.zero
				go.transform.localScale = CS.UnityEngine.Vector3.one
			end
		end)
	end
end

---@param enabled boolean
function SEEnvironment:SetCloudShadowEnabled(enabled)
	local cloudShadowMaterial = self._instConfig:CloudShader()
	if (not Utils.IsNullOrEmpty(cloudShadowMaterial)) then
		self._mapInfo:SetCloudShadowEnabled(enabled, cloudShadowMaterial)
	else
		self._mapInfo:SetCloudShadowEnabled(false)
	end
end

--- 设置HUD
---@param self SEEnvironment
---@param hud SEHudMediator
function SEEnvironment:SetHud(hud)
	self._hud = hud
end

---@param self SEEnvironment
---@return hud SEHudMediator
function SEEnvironment:GetHud()
	return self._hud
end

function SEEnvironment:SetDontShowHud(value)
	self._dontShowHud = value
end

function SEEnvironment:DisableCamera()
	self._camera.enabled = false
end

function SEEnvironment:EnableCamera()
	self._camera.enabled = true
end

---获取队长
---@param self SEEnvironment
---@return SEUnit
function SEEnvironment:GetCaptain()
    return self:GetUnitManager():GetCaptain()
end

--- 设置自动战斗
---@param self SEEnvironment
---@param auto boolean
function SEEnvironment:SetAutoBattle(auto)
    g_Game.PlayerPrefsEx:SetIntByUid(KEY_SE_AUTO_BATTLE, auto and 1 or 0)
end

--- 是否自动战斗
---@param self SEEnvironment
---@return boolean
function SEEnvironment:IsAutoBattle()
	return g_Game.PlayerPrefsEx:GetIntByUid(KEY_SE_AUTO_BATTLE, 0) == 1
end

---@param isAuto boolean @是否设置自动战斗
function SEEnvironment:SendAutoCastPetCardRequest(isAuto)
    local req = require("AutoCastPetCardParameter").new()
	req.args.Open = isAuto
    req.args.PresetIndex = self:GetCurrentFocusPresetIndex() or self:GetFallbackPresetIndex()
	req:Send()
end

--- 设置自动战斗速度
---@param self SEEnvironment
---@param speed number
---@param force boolean
---@param noCd boolean
---@return boolean
function SEEnvironment:SetBattleSpeed(speed, force, noCd, lockable)
	--SELogger.Trace("战斗速度: speed %s force %s noCd %s lastTime %s", speed, force, noCd, self._lastSpeedChangeTime)
	if (force or g_Game.Time.time - self._lastSpeedChangeTime > SPEED_CHANGE_CD) then
		self._lastSpeedChangeTime = g_Game.Time.time
		if (noCd) then
			self._lastSpeedChangeTime = 0
		end
		local msg = require("ChangeServerTimeRateParameter").new()
		local rate
		if (speed > 1) then
			rate = math.ceil(speed)
			msg.args.Rea = wrpc.TimeRateChangeRea.TimeRateChangeRea_FightFast
		elseif (speed == 1) then
			rate = 1
			msg.args.Rea = wrpc.TimeRateChangeRea.TimeRateChangeRea_Recover
		else
			rate = math.floor(1 / speed)
			msg.args.Rea = wrpc.TimeRateChangeRea.TimeRateChangeRea_ShowCardSlow
		end
		SELogger.Trace("战斗速度变更: %s", speed)
		msg.args.Rate = rate
		msg:SendOnceCallback(lockable)
		return true
	end
	return false
end

function SEEnvironment:SetThrowBallStart(isStart, unitId, speed)
    local msg = require("CatchPetAimingParameter").new()
    msg.args.Start = isStart
    msg.args.CaptainId = unitId
    if isStart then
        msg.args.Rate = speed
        self:ChangeTimeScale(1.0/(math.floor(speed)))
    else
        msg.args.Rate = 1
        self:ChangeTimeScale(1)
    end
    msg:Send()
end

function SEEnvironment:UpdateBattleSpeedFromSecenInfo()
    g_Game.EventManager:TriggerEvent(EventConst.SE_BATTLE_SPEED_REFRESH)
end

function SEEnvironment:GetBattleSpeed()
    local scene = self:GetCurrentSceneWDS()
    if not scene then return 1 end
	return scene.SceneBase.TimeRate or 1
end

--- 设置是否允启用天空盒
---@param self SEEnvironment
---@param enabled boolean
function SEEnvironment:SetSkyBoxEnabled(enabled)
	self._mapInfo:SetSkyBoxEnabled(enabled)
end

function SEEnvironment:SetCurrentFocusPresetIndex(index)
    self._currentFocusPresetIndex = index
end

function SEEnvironment:GetCurrentFocusPresetIndex()
    return self._currentFocusPresetIndex
end

function SEEnvironment:SetCurrentFocusSpawnerId(spawnerId)
    self._currentSpawnerId = spawnerId
end

function SEEnvironment:GetFallbackPresetIndex()
    if self._fallbackPresetIndex then return self._fallbackPresetIndex end
    local myPlayerId = ModuleRefer.PlayerModule:GetPlayerId()
    local players = self:GetWdsManager().scenePlayers
    for _, player in pairs(players) do
        if player.Owner.PlayerID == myPlayerId then
            for _, value in pairs(player.ScenePlayerPreset.PresetList) do
                self._fallbackPresetIndex = value.PresetIndex
                return self._fallbackPresetIndex
            end
        end
    end
    return nil
end

---@return SEEnvironmentModeType
function SEEnvironment:GetEnvMode()
    return self._envMode
end

function SEEnvironment:SetCityModeInExploring(value)
    if self._cityInExploring == value then return end
    self._cityInExploring = value
    self:GetUnitManager():RefreshAllGetPetCatchHud()
end

function SEEnvironment:CityModeInExploring()
   return self._cityInExploring 
end

---@return wds.Scene
function SEEnvironment:GetCurrentSceneWDS()
    ---@type table<number, wds.Scene>
    local scenes = g_Game.DatabaseManager:GetEntitiesByType(DBEntityType.Scene)
    if not scenes then return nil end
    for _, scene in pairs(scenes) do
        if scene.Level.TID == self._instanceId then
            return scene
        end
    end
end

---@param serverTargetCoord CS.UnityEngine.Vector3 @ serverCoord
---@param callback fun(cmd:CatchSePetByPocketBallItemParameter, isSuccess:boolean, rsp:wrpc.CatchSePetByPocketBallItemReply)
function SEEnvironment:SendCapaturePetCmd(fromUnitId, targetId, pocketBallId, serverTargetCoord, callback)
    local cmd = require("CatchSePetByPocketBallItemParameter").new()
    cmd.args.SourceId = fromUnitId
    cmd.args.TargetId = targetId or 0
    cmd.args.ItemId = ConfigRefer.PetPocketBall:Find(pocketBallId):LinkItem()
    cmd.args.TargetPos.X = serverTargetCoord.x
    cmd.args.TargetPos.Y = serverTargetCoord.y
    cmd.args.TargetPos.Z = serverTargetCoord.z
    cmd:SendOnceCallback(nil, nil, nil, callback)
end

---@param callback fun(cmd:BaseParameter, isSuccess:boolean, rsp:any)
function SEEnvironment:SendTryInteractSe(fromUnitId, targetUnitId, callback)
    local cmd = require("TryInteractSeParameter").new()
    cmd.args.SourceId = fromUnitId
    cmd.args.TargetId = targetUnitId
    cmd:SendOnceCallback(nil, targetUnitId, nil, callback)
end

function SEEnvironment:OnDrawGizmos()
    if self._interactorRangeEventMgr then
        self._interactorRangeEventMgr:DebugDrawGizmos()
    end
end

---@param entity wds.Hero
function SEEnvironment:OnAnyHeroBattleStateChanged(entity)
    if entity.Owner.PlayerID ~= self._playerId then return end
    local teamMgr = self:GetTeamManager()
    local team = teamMgr:GetOperatingTeam()
    if not team or team._presetIdx ~= entity.BasicInfo.PresetIndex then return end
    local inBattle = entity.MapStates.StateWrapper.Battle
    if self._currentTeamInBattleFlag == inBattle then return end
    if inBattle then
        self._currentTeamInBattleFlag = true
    else
        inBattle = self:DoRefreshCurrentTeamInBattleFlag()
        if inBattle then return end
        self._currentTeamInBattleFlag = inBattle
    end
    self:GetUnitManager():RefreshAllGetPetCatchHud()
end

function SEEnvironment:DoRefreshCurrentTeamInBattleFlag()
    local inBattle = false
    local heroList = self:GetUnitManager():GetHeroList()
    for _, v in pairs(heroList) do
        local e = v:GetEntity()
        if e and e.MapStates.StateWrapper.Battle then
            inBattle = true
            break
        end
    end
    return inBattle
end

function SEEnvironment:CurrentFocusTeamAnyHeroInBattle()
    return self._currentTeamInBattleFlag
end

return SEEnvironment
