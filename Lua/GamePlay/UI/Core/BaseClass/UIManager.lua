---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/4/15 14:55
---
local LuaUIProcessorRegister = require('LuaUIProcessorRegister')
local CSUIManager = CS.DragonReborn.UI.UIManager.Instance;
local Utils = require("Utils")
local EventConst = require('EventConst')
local SdkCrashlytics = require("SdkCrashlytics")
local ColorUtil = require('ColorUtil')
local UIMediatorNames = require('UIMediatorNames')
local UIShowHideSoundProcessor = require("UIShowHideSoundProcessor")
local UIClickScreenEffect = require("UIClickScreenEffect")
local UI3DViewManager = require("UI3DViewManager")
local UI3DViewConst = require("UI3DViewConst")
local LocalizationConst = require('LocalizationConst')
local DeviceUtil = require("DeviceUtil")

---@class UIManager
---@field new fun():UIManager
---@field manager CS.DragonReborn.UI.UIManager
---@field mediators table<number,BaseUIMediator>
---@field ui3DViewManager UI3DViewerManager
local UIManager = class('UIManager', require("BaseManager"))

---@class UIMediatorType
local UIMediatorType =
{
    SceneUI = 1,  --0000 0001
    Hud = 2,      --0000 0010
    Dialog = 4,   --0000 0100
    Popup = 8,    --0000 1000
    Tip = 16,     --0001 0000
    TopMostHud = 32, --0010 0000
    SystemMsg = 64 --0100 0000
}

local UIMediatorAssetState ={
    Loading = 1,
    Ready = 2,
}

UIManager.UIMediatorType = UIMediatorType
UIManager.CSUIMediatorType = CS.DragonReborn.UI.UIMediatorType
--UI全局背板的颜色
UIManager.ZBlockColor = ColorUtil.FromHex(0x212636F2)
--UI背景模糊的颜色
UIManager.ZBlurColor = CS.UnityEngine.Color.white--ColorUtil.FromHex(0x212636FF)
function UIManager:ctor()
    self.manager = CSUIManager;
    self.mediators = {}
    self.mediatorAssetState = {}
    self.closingIds = {}
    self.topLayer = -1
    self.inputEnabled = true
    local initParamJson = self:InitParamJson()
    self.manager:OnGameInitialize(initParamJson)
    self.manager:SetUIBackGroundColor(UIManager.ZBlockColor,UIManager.ZBlurColor)
    self.manager:SetLuaOnAnyPointDownCallback(require("Delegate").GetOrCreate(self, self.OnAnyPointDown))
    ---@type fun(screenPos:CS.UnityEngine.Vector2)
    self._anyPointClickCallback = {}
    self._uiClickScreenEffect = UIClickScreenEffect.new()
    self._preloadingEnd = false
    self._fontPreloaded = false
    self._gestureListener = CS.LuaGestureListener(self)
end

function UIManager:WarmUpUI()
    self:Open('UIFullscreenBlock',nil,function(mediator)
        require('TimerUtility').DelayExecute(function()
            mediator:CloseSelf()
        end,1,true)
    end)
    self:Open(UIMediatorNames.UISceneGestureManagerBlockMediator, nil, function(BaseUIMediator)
        require('TimerUtility').DelayExecute(function()
            BaseUIMediator:CloseSelf()
        end,1,true)
    end)
end

function UIManager:InitParamJson()
	if DeviceUtil.IsLowMemoryDevice() then 
		return '{"prefabCacheSize":5, "lruCacheSize":5,"lruFixedCacheSize":5}'
	end

	return '{"prefabCacheSize":10, "lruCacheSize":10,"lruFixedCacheSize":10}'
end

function UIManager:Reset()
    self:UnbindGestureListener()
    self._uiClickScreenEffect:Reset()
    self:CloseAll()
    self:DeleteUI3DRoot()
    self.manager:Reset()
    self.manager:SetLuaOnAnyPointDownCallback(nil)
end

function UIManager:Initialize()
    self._preloadingEnd = false
    -- 做个保护 fpanimation 依赖的协程回调执行器 场景切换时被销毁的话会有些逻辑问题
    -- 不知道为啥vxtool 不用 getRunner2, 为了避免每次更新vxtool 覆盖掉我们的patch, 只能这么凑乎了
    local runner = CS.Defer.getRunner()
    if Utils.IsNotNull(runner) then
        CS.UnityEngine.Object.DontDestroyOnLoad(runner.gameObject)
    end
    if UNITY_DEBUG then
        CS.DG.Tweening.DOTween.useSafeMode = false
    else
        CS.DG.Tweening.DOTween.useSafeMode = true
    end

    self:UpdateCurrentLanguage()
    self:RegisterUIProcessors()
    self._uiClickScreenEffect:Initialize(self:GetRootForType(CS.DragonReborn.UI.UIMediatorType.TopMostHud), self:GetUICamera())
    self._uiClickScreenEffect:SetEffectSwitch(self._preloadingEnd)
    self:BindGestureListener()
end

function UIManager:BindGestureListener()
    if self.binded then return end
    self.binded = true
    g_Game.GestureManager:AddListener(self._gestureListener)
end

function UIManager:UnbindGestureListener()
    if not self.binded then return end
    self.binded = false
    g_Game.GestureManager:RemoveListener(self._gestureListener)
end

function UIManager:OnUITouchUp(gesture)
    g_Game.EventManager:TriggerEvent(EventConst.ON_OVER_UI_ELEMENT, gesture.tapGameObj)
end

function UIManager:UpdateCurrentLanguage()
    self.manager.CurrentLanguage = g_Game.LocalizationManager:GetCurrentLanguage()

end

function UIManager:RegisterPreRequestUI()
    self.manager:RegisterUI('UIGameBgMediator',"ui_game_bg",
            UIMediatorType.Tip, 999, false, false, false, false, false,false, false);
    self.manager:RegisterUI('UIFullscreenBlock',"ui_fullscreen_block",
            UIMediatorType.TopMostHud, 999, false, false, false, false, false,false, false);
    self.manager:RegisterUI('UIGameLaunchMediator',"ui_game_launch_page",
            UIMediatorType.TopMostHud, 1000, false, false, false, true, false,false, false);
    self.manager:RegisterUI(UIMediatorNames.SystemQuitUIMediator,"ui_common_popup_quit",
            UIMediatorType.SystemMsg, 1000, false, false, false, false, false,false, false);
    self.manager:RegisterUI(UIMediatorNames.SystemRestartUIMediator,"ui_common_popup_restart",
            UIMediatorType.SystemMsg, 1000, false, false, false, false, false,false, false);
    self.manager:RegisterUI('StoryPopupMoviePlayerMediator',"ui_story_movie_player",
            UIMediatorType.TopMostHud, 1001, false, false, false, false, false,false, false);
    self.manager:RegisterUI('LightRestartBlockUIMediator',"LoadingFlag_3",
            UIMediatorType.TopMostHud, 1000, true, false, false, false, false, false, false);
    self.manager:RegisterUI("SystemCommonPopupUIMediator", "ui_common_popup_login",
            UIMediatorType.SystemMsg, 0, false, false, false, true, false, false, false)
end

function UIManager:RegisterAllUI()
    local database = CS.DragonReborn.UI.UIMediatorPropertyDatabase();
    database:LoadFromCSVFile();
    for i, v in pairs(database.AllUIMediatoryProperty) do
        self.manager:RegisterUI(v);
    end
    self.manager:SetUICachedList({
        'UIFullscreenBlock',
        UIMediatorNames.UISceneGestureManagerBlockMediator,
        UIMediatorNames.UIGuideFingerMediator,
        UIMediatorNames.UIRewardLightMediator,
        UIMediatorNames.SEHudMediator,
        UIMediatorNames.CitySeExplorerHudUIMediator,
        UIMediatorNames.HUDSelectTroopList,
    })
    self.manager:RegisterUIProcessor(UIShowHideSoundProcessor.new())
end

function UIManager:RegisterUIProcessors()
    self.manager:UnRegisterAllUIProcessor()
    --register CS UIProcessor
    self.manager:RegisterDefaultUIProcessor()
    --register lua UIProcessor
    LuaUIProcessorRegister.RegisterAllLuaUIProcessors()
end
function UIManager:RegisterUIProcessor(processor)
    self.manager:RegisterUIProcessor(processor)
end

---@return CS.UnityEngine.Camera
function UIManager:GetUICamera()
    if not self.uiCam then
        self.uiCam = self.manager.UICamera
    end
    return self.uiCam
end

---@return CS.UnityEngine.GameObject
function UIManager:GetUIRoot()
    if not self.uiRoot then
        self.uiRoot = self.manager.UIRoot
    end
    return self.uiRoot
end

function UIManager:GetUIRootCanvasScaler()
    local root = self:GetUIRoot()
    if Utils.IsNotNull(root) then
        local canvasScaler = root:GetComponent(typeof(CS.UnityEngine.UI.CanvasScaler))
        if Utils.IsNotNull(canvasScaler) then
            return canvasScaler.scaleFactor
        end
    end
    return 1
end

---@param typ CS.DragonReborn.UI.UIMediatorType
---@return CS.UnityEngine.Transform
function UIManager:GetRootForType(typ)
    return self.manager:GetRootForType(typ)
end

--打开窗口,是一个异步过程
---Open
---@param uiName string
---@param param table
---@param callback fun(BaseUIMediator)
---@param newInstance boolean @打开一个新的实例
---@return number @runtimeId of an UIMediator
function UIManager:Open(uiName,param,callback,newInstance)

    SdkCrashlytics.RecordOpenUiOperation(uiName)
    ---@type BaseUIMediator
    local mediator = nil
    if not newInstance then
        mediator = self:FindUIMediatorByName(uiName)
    end
    if mediator then
        --Reopen
        mediator:StopAllAnim()
        mediator:SetVisible(false,nil)
        mediator:SetVisible(true,param)
        if callback then
            callback(mediator)
        end
        return self:Name2RuntimeId(uiName)
    else

        -- 遇到了一个问题：loading结束打开ui_hud_city，这个资源依赖的ab有26个
        -- 当其中某个ab没有准备好时，会使得ui_hud_city打开失败，阻碍了后续的进city流程，导致卡loading
        -- 临时把这段逻辑注释掉，待下个版本修复
        -- if not self.mediatorAssetState[uiName]
        --     or self.mediatorAssetState[uiName] < UIMediatorAssetState.Ready
        -- then
        --     local uiPrefabPath = self:GetPrefabName(uiName)
        --     if not g_Game.AssetManager:CanLoadSync(uiPrefabPath) then
        --         if uiName ~= UIMediatorNames.SimpleToastMediator then
        --             g_Logger.Error('%s %s not ready', uiName, uiPrefabPath)
        --             -- require('ModuleRefer').ToastModule:AddSimpleToast(require('I18N').Get('error_code_download_resource'))
        --         end
        --         if not self.mediatorAssetState[uiName] then
        --             self.mediatorAssetState[uiName] = UIMediatorAssetState.Loading
        --             self:LoadMediatorAsset(uiPrefabPath, function()
        --                 self.mediatorAssetState[uiName] = UIMediatorAssetState.Ready
        --             end)
        --         end
        --         return 0
        --     else
        --         self.mediatorAssetState[uiName] = UIMediatorAssetState.Ready
        --     end
        -- end

        return self.manager:Open(uiName,param,
        function(csMediator)
            if Utils.IsNull(csMediator) then
                g_Logger.ErrorChannel('UIManager','Open UIMediator Failed,UIName:'..uiName)
                if callback then
                    callback(nil)
                end
                return
            end
            local mediatorObj = csMediator.LogicObject
            self:OnMediatorOpend(uiName,mediatorObj)
            if callback then
                callback(mediatorObj)
            end
        end
        )
    end
end

--打开窗口回调，缓存窗口对象
function UIManager:OnMediatorOpend(uiName,mediator)
    self:AddUIMediator(mediator)
end

--发送打开窗口指令，但不立即执行，而是放入指令队列，当指令队首对应的窗口关闭时，才执行下一条
function UIManager:SendOpenCmd(uiName,param,callback)
    self.manager:SendOpenCmd(uiName,param,
        function(csMediator)
            local mediator = csMediator.LogicObject
            self:OnMediatorOpend(uiName,mediator)
            if callback then
                callback(mediator)
            end
        end
        )
end

--取消指令队列中的一条指令
function UIManager:CancleOpenCmd(uiName)
    self.manager:CancleOpenCmd(uiName)
end
--清空指令队列
function UIManager:ClearAllOpenCmd()
    self.manager:ClearAllOpenCmd()
end

---@param uiName string
---@param param table
---@param forceClose boolean
function UIManager:UIMediatorCloseSelfByName(uiName,param,forceClose)
    if string.IsNullOrEmpty(uiName) then
        return
    end
    local mediator = self:FindUIMediatorByName(uiName)
    if mediator then
        mediator:CloseSelf(param,forceClose)
    end
end

---@param runtimeId number
---@param param table
---@param forceClose boolean
function UIManager:UIMediatorCloseSelf(runtimeId,param,forceClose)
    if runtimeId and runtimeId <= 0 then
        return
    end
    local mediator = self.mediators[runtimeId]
    if mediator then
        mediator:CloseSelf(param,forceClose)
    end
end

function UIManager:Close(runtimeId,param,backToPrevious, previousSkipShowAni)
    backToPrevious = backToPrevious or false
    previousSkipShowAni = previousSkipShowAni or false
    self.closingIds[runtimeId] = true
    self.manager:Close(runtimeId,param,backToPrevious, previousSkipShowAni)
    self:RemoveUIMediatorByRuntimeId(runtimeId)
    self.closingIds[runtimeId] = false
end

function UIManager:CloseByName(uiName)
    local closingId = self:Name2RuntimeId(uiName)
    self.closingIds[closingId] = true
    local runtimeId = self.manager:CloseByName(uiName)
    if runtimeId > 0 then
        self:RemoveUIMediatorByRuntimeId(runtimeId)
    end
    self.closingIds[closingId] = false
end

function UIManager:CloseAllByName(uiName)
    local ids = self.manager:CloseAllByName(uiName)
    for i = 0, ids.Count - 1 do
        local runtimeId = ids[i]
        self:RemoveUIMediatorByRuntimeId(runtimeId)
    end
    return ids
end

function UIManager:UpdateTopMediatorType()
    self.topLayer = -1
    for key, med in pairs(self.mediators) do
        if med and med.CSComponent ~= nil then
            local mediatorType = med:GetUIMediatorType()
            if mediatorType > self.topLayer then
                self.topLayer = mediatorType
            end
        end
    end
end

function UIManager:AddUIMediator(mediator)
    if Utils.IsNull(mediator ) then
        return
    end
    local runtimeId = mediator.GetRuntimeId and mediator:GetRuntimeId() or nil
    if runtimeId == nil then return end
    if self.mediators[runtimeId] == nil then
        self.mediators[runtimeId] = mediator
    end
    self:UpdateTopMediatorType()
end

function UIManager:RemoveUIMediator(mediator)
    if mediator == nil then
        return
    end
    local runtimeId = mediator:GetRuntimeId()
    if runtimeId == nil then return end
    if self.mediators[runtimeId] ~= nil then
        self.mediators[runtimeId] = nil;
        self:UpdateTopMediatorType()
    end
end

function UIManager:RemoveUIMediatorByRuntimeId(runtimeId)
    if self.mediators[runtimeId] ~= nil then
        self.mediators[runtimeId] = nil;
        self:UpdateTopMediatorType()
    end

end

function UIManager:CloseAll()
    if not self.mediators then return end
    -- for i, v in pairs(self.mediators) do
    --     self.manager:Close(i)
    -- end
    try_catch_traceback_with_vararg(self.manager.CloseAll, nil, self.manager)
    self.mediators = {}
    self.topLayer = -1
end

---@param type CS.DragonReborn.UI.UIMediatorType
function UIManager:CloseAllByType(type)
    if not self.mediators then return end
    for i, v in pairs(self.mediators) do
        if Utils.IsNotNull(v.CSComponent) and v.CSComponent.Property.Type == type then
            self.manager:Close(i)
            self.mediators[i] = nil
        end
    end
end
---@param exceptTypes CS.DragonReborn.UI.UIMediatorType[]
function UIManager:CloseAllExceptByType(exceptTypes)
    if not self.mediators then return end
    for i, v in pairs(self.mediators) do
        for index, type in ipairs(exceptTypes) do
            if Utils.IsNull(v.CSComponent) or v.CSComponent.Property.Type == type then
                goto UI_MANAGER_CLOSE_ALL_EXCEPT_LOOP
            end
        end
        self.manager:Close(i)
        self.mediators[i] = nil
        ::UI_MANAGER_CLOSE_ALL_EXCEPT_LOOP::
    end
end

function UIManager:Dispose()
    self.mediators = nil
    self.manager:Clear()
end

---convert uimediator name to runtime id
---@param name string
---@return number
function UIManager:Name2RuntimeId(name)
    return self.manager:FindRuntimeId(name)
end

---FindUIMediatorByName
---@param name string
---@return BaseUIMediator
function UIManager:FindUIMediatorByName(name)
    if string.IsNullOrEmpty(name) then
        return nil
    end
    local runtimeId = self:Name2RuntimeId(name)
    if runtimeId > 0 then
        return self.mediators[runtimeId]
    else
        return nil
    end
end

---FindUIMediator
---@param runtimeId number
---@return BaseUIMediator
function UIManager:FindUIMediator(runtimeId)
    if runtimeId and runtimeId > 0 then
        return self.mediators[runtimeId]
    else
        return nil
    end
end

function UIManager:IsOpened(runtimeId)
    if runtimeId and runtimeId > 0 then
        local hasOpend = self.mediators[runtimeId] ~= nil
        if not hasOpend then
            --Check UIMediatorLifeCircle
            --this UIMediator is Opening or Closing
            hasOpend = self.manager:IsUIMediatorExist(runtimeId)
        end
        if hasOpend and self.closingIds[runtimeId] then
            hasOpend = false
        end
        return hasOpend
    else
        return false
    end
end

function UIManager:IsOpenedByName(name)
    if string.IsNullOrEmpty(name) then
        return nil
    end
    local runtimeId = self:Name2RuntimeId(name)
    return self:IsOpened(runtimeId)
end

---@param type CS.DragonReborn.UI.UIMediatorType
function UIManager:IsOpenedByType(type)
    if not self.mediators then return false end
    local hasOpend = false
    for i, v in pairs(self.mediators) do
        if Utils.IsNotNull(v.CSComponent) and v.CSComponent.Property.Type == type then
            hasOpend = self:IsOpened(i)
            if hasOpend then
                return hasOpend
            end
        end
    end
    return hasOpend
end

function UIManager:HaveCullSceneUIMediator()
    return self.manager:HaveCullSceneUIMediator()
end

function UIManager:HaveFullScreenUIMediator()
    return self.manager:HaveFullScreenUIMediator()
end

function UIManager:HaveBlurSceneUIMediator()
    return self.manager:HaveBlurSceneUIMediator()
end

function UIManager:SetZBlurVisible(visible)
    self.manager:SetZBlurVisible(visible)
end

function UIManager:CullSceneUIMediatorCount()
    return self.manager:CullSceneUIMediatorCount()
end

function UIManager:FullScreenUIMediatorCount()
    return self.manager:FullScreenUIMediatorCount()
end

function UIManager:HaveZBlockSceneUIMediator()
    return self.manager:HaveZBlockSceneUIMediator()
end

function UIManager:ZBlockSceneUIMediatorCount()
    return self.manager:ZBlockSceneUIMediatorCount()
end

function UIManager:HaveDisableGestureUIMediator()
    return self.manager:HaveDisableGestureUIMediator()
end

function UIManager:DisableGestureUIMediatorCount()
    return self.manager:DisableGestureUIMediatorCount()
end

---@param winName string
---@param name string
---@param index number
---@param topMostLayer UIMediatorType
---@return CS.UnityEngine.RectTransform
function UIManager:FindUICtrl(winName,name,index,topMostLayer)
    index = math.max(0,index - 1)
    return self.manager:FindUICtrlInCurrentMediator(winName,name,index,topMostLayer)
end

---@param type CS.DragonReborn.UI.UIMediatorType
---@param on boolean
---@return boolean
function UIManager:SetBlockUIRootType(type, on)
    local trans = self:GetRootForType(type)
    if Utils.IsNull(trans) then
        return false
    end
    ---@type CS.UnityEngine.CanvasGroup
    local canvasGroup = trans:GetComponent(typeof(CS.UnityEngine.CanvasGroup))
    if Utils.IsNull(canvasGroup) then
        return false
    end
    canvasGroup.interactable = on
end

function UIManager:SetupUI3DRoot()
    if not self.ui3DViewManager then
        self.ui3DViewManager = UI3DViewManager.new()
        self.ui3DViewManager:Init()
    end
end

function UIManager:DeleteUI3DRoot()
    if self.ui3DViewManager then
        self.ui3DViewManager:Clear()
        self.ui3DViewManager = nil
    end
    Utils.FullGC()
end

function UIManager:ResetUI3DRoot()
    self:DeleteUI3DRoot()
    self:SetupUI3DRoot()
end

---@public
---@param runtimeId number @runtimeId of an UIMediator
---@param modelPath string
---@param envPath string
---@param callback fun(viewer:UI3DModelView)
---@param inPlaceId number
function UIManager:SetupUI3DModelView(runtimeId,modelPath,envPath,backgroundTexName, callback, inPlaceId)
    self:SetupUI3DView(runtimeId,UI3DViewConst.ViewType.ModelViewer,{
        shadowDistance = 48,
        shadowCascades = 1,
        modelPath = modelPath,
        envPath = envPath,
        backgroundTexName = backgroundTexName,
        callback = callback,
    },inPlaceId)
end

---@public
---@param runtimeId number @runtimeId of an UIMediator
---@param viewerType number @UI3DViewType
---@param data UI3DViewerParam
---@param inPlaceId number
function UIManager:SetupUI3DView(runtimeId,viewerType,data, inPlaceId)
    if not self.ui3DViewManager then
        self:SetupUI3DRoot()
    end
    self.ui3DViewManager:OpenUI3DView(runtimeId,viewerType,data, inPlaceId)
end

---@public
---@param runtimeId number @runtimeId of an UIMediator
function UIManager:CloseUI3DView(runtimeId)
   if not self.ui3DViewManager then return end
    self.ui3DViewManager:CloseUI3DView(runtimeId)    
end

function UIManager:ClassAllUI3DView()
    if not self.ui3DViewManager then return end
    self.ui3DViewManager:CloseAllViewer()
end

---@param func fun(screenPos:CS.UnityEngine.Vector2)
function UIManager:AddOnAnyPointDown(func)
    table.insert(self._anyPointClickCallback, func)
end

---@param func fun(screenPos:CS.UnityEngine.Vector2)
function UIManager:RemoveOnAnyPointDown(func)
    table.removebyvalue(self._anyPointClickCallback, func, true)
end

---@param vector2 CS.UnityEngine.Vector2 @screenPosition
function UIManager:OnAnyPointDown(vector2)
    --g_Logger.Log("AnyPointDown:%s", vector2)
    for _, v in pairs(self._anyPointClickCallback) do
        v(vector2)
    end
    if self._uiClickScreenEffect then
        self._uiClickScreenEffect:PlayOnScreen(vector2)
    end
end

function UIManager:GetTopOpenedUIMediator()
    return self.manager:GetTopOpenedUIMediator()
end

function UIManager:GetTopUIMediatorType()
    return self.topLayer
end

function UIManager:HasAnyDialogUIMediator()
    if not self.mediators then
        return
    end
    local dialogTypeInt = CS.DragonReborn.UI.UIMediatorType.Dialog:GetHashCode()
    for i, v in pairs(self.mediators) do
        if v:GetUIMediatorType() == dialogTypeInt and Utils.IsNotNull(v.CSComponent) then
            return true
        end
    end
    return false
end

function UIManager:SetInputEnabled(enabled,delayFrame)
    if self.inputEnabled == enabled then
        return
    end
    self.inputEnabled = enabled

    local setuper = function()
        --Setup Block UI
        if self.inputEnabled then
            if self.blockUIRuntimeId then
                self:Close(self.blockUIRuntimeId)
                self.blockUIRuntimeId = nil
            end
        else
            self.blockUIRuntimeId = self:Open('UIFullscreenBlock')
        end
    end


    if delayFrame and delayFrame > 0 then
        local steupState = enabled
        if self.inputSetupTimer then
            self.inputSetupTimer:Stop()
            self.inputSetupTimer = nil
        end
        self.inputSetupTimer = require('TimerUtility').DelayExecuteInFrame(function()
            if self:GetInputEnabled() == steupState then
                setuper()
            end
        end,delayFrame)
    else
        setuper()
    end

end

function UIManager:GetInputEnabled()
    return self.inputEnabled  -- and not (self.blockUIRuntimeId and self:IsOpened(self.blockUIRuntimeId) )
end

function UIManager:GetGestureEnabled()
    return g_Game.GestureManager:GetEnable()
end

function UIManager:SetPreloadingIsEnd(isEnd)
    self._preloadingEnd = isEnd
    if self._uiClickScreenEffect then
        self._uiClickScreenEffect:SetEffectSwitch(isEnd)
    end
end

---@private
---@return string[]
function UIManager:GetPreloadingFontsName()
    return self.manager.AllFontNames
end
---@private
---@param fonts CS.UnityEngine.Font[]
function UIManager:SetupFonts(fonts)
    if not fonts or #fonts == 0 then
        return
    end
    self.fontPreloaded = true
    self.manager.AllFontInUse = fonts
end

function UIManager:PreloadingFonts()
    if self.fontPreloaded then
        return
    end

    local fontsNames = self:GetPreloadingFontsName()
    if fontsNames and fontsNames.Length > 0 then
        local AssetManager = CS.DragonReborn.AssetTool.AssetManager.Instance
        local fonts = {}
        for i = 0, fontsNames.Length - 1 do
            local handle = AssetManager:LoadAsset(fontsNames[i])
            if handle and handle.IsValid then
                table.insert(fonts, handle.Asset)
            end
        end
        if #fonts > 0 then
            self:SetupFonts(fonts)
        end
    end
end

---@param onAssetsReadyFunc CS.System.Action<bool>
function UIManager:PrepareSyncLoadAssets(onAssetsReadyFunc)
    local HashSetString = CS.System.Collections.Generic.HashSet(typeof(CS.System.String))
    local set = HashSetString()
    set:Add('TextFontConfig')
    set:Add('TextStyleConfig')
    set:Add('OutlineMat')
    set:Add('ntailu')
    set:Add('UI_Gray')
    set:Add('uiregister_source.csv')
	set:Add('sp_icon_missing_2')
	set:Add('sp_custom_loading_icon_raw')

    g_Logger.Log('CurrentLanguage %s', g_Game.LocalizationManager:GetCurrentLanguage())
    if g_Game.LocalizationManager:GetCurrentLanguage() == LocalizationConst.LANG_ZH_CN then
        set:Add('cn_SourceHans')
    end

    g_Game.AssetManager:EnsureSyncLoadAssets(set, true, function(success)
        CS.DragonReborn.UI.TextStyleConfig.Prepare()
        CS.DragonReborn.UI.TextFontConfig.Prepare()

        -- 初始化UI
        g_Game.UIManager:RegisterAllUI();

        onAssetsReadyFunc(success)
    end)
end

---@private
function UIManager:LoadMediatorAsset(path,callback)
    local HashSetString = CS.System.Collections.Generic.HashSet(typeof(CS.System.String))
    local set = HashSetString()
    set:Add(path)
    g_Game.AssetManager:EnsureAssets(set,function(success)
        if success then
            callback()
        end
    end)
end

---@param uiName string UIMediatorNames里的名字
function UIManager:GetPrefabName(uiName)
    return self.manager:GetPrefabName(uiName)
end

---@param type CS.DragonReborn.UI.UIMediatorType
---@param show boolean
function UIManager:SetVisibleByType(type, show)
    self.manager:SetVisibleByType(type, show)
end

return UIManager;
