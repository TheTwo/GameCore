---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/5/16 17:10
---
local BaseUIComponent = require('BaseUIComponent')
local ModuleRefer = require('ModuleRefer')
local Delegate = require('Delegate')
local DBEntityPath = require('DBEntityPath')
local UIMediatorNames = require('UIMediatorNames')
local EventConst = require('EventConst')
local I18N = require('I18N')
local ConfigRefer = require('ConfigRefer')
local FpAnimTriggerEvent = require('FpAnimTriggerEvent')
local SystemInfo = CS.UnityEngine.Device.SystemInfo
local FPXSDKBIDefine = require("FPXSDKBIDefine")
local OnChangeHelper = require("OnChangeHelper")
local Utils = require("Utils")
local TimerUtility = require("TimerUtility")
local NewFunctionUnlockIdDefine = require("NewFunctionUnlockIdDefine")

---@class HUDPlayerInfoComponent : BaseUIMediator
local HUDPlayerInfoComponent = class("HUDPlayerInfoComponent",BaseUIComponent)

---@protected
function HUDPlayerInfoComponent:ctor(...)
    BaseUIComponent.ctor(self, ...)
end

function HUDPlayerInfoComponent:OnCreate(param)
    --time
    self._img_TimeIconDay = self:Image('p_icon_time_day')
    self._img_TimeIconNight = self:Image('p_icon_time_night')
    self._txt_Time = self:Text('p_text_time')
    ---@type PlayerInfoComponent
    self._comp_head_player = self:LuaObject('child_ui_head_player')
    --battery
    self._battery = self:Slider('p_progress')
    --player power
    self._txt_Power = self:Text('p_text_power')

    self._playerModule = ModuleRefer.PlayerModule

    self.goTime     = self:GameObject('p_btn_time')
    self.goPower    = self:GameObject('p_btn_power')
    self.goPosition = self:GameObject('p_position')
    self.showMyInfo = true
    self.btnPower = self:Button('p_btn_power', Delegate.GetOrCreate(self, self.OnBtnPowerClicked))
    self.btnPower = self:Button('p_btn_strengthen', Delegate.GetOrCreate(self, self.OnBtnStrenthenClicked))
	self.goStrengthenRedDot = self:GameObject("p_reddot_strengthen")
    self.btnEnergy = self:Button('p_btn_energy', Delegate.GetOrCreate(self, self.OnBtnEnergyClicked))
    self.enertySlider = self:Slider('p_energy_slider')
    self.statusButton = self:Button("p_btn_status", Delegate.GetOrCreate(self, self.OnStatusButtonClicked))
    self.imgStatus = self:Image("p_icon_status")
	---@type NotificationNode
	self.mailButtonRedDot = self:LuaObject("p_btn_mail_reddot")
    self.btnTerritory = self:Button("p_btn_territory", Delegate.GetOrCreate(self, self.OnBtnTerritoryClicked))
    self.textTerritory = self:Text("p_text_number_territory")

    self.btnLight = self:Button("p_btn_light", Delegate.GetOrCreate(self, self.OnBtnLightClicked))
    self.textLightNum = self:Text("p_text_number_light")
    self.aniTrigger = self:AnimTrigger("vx_hud_trigger")
    self.btnTower = self:Button('p_btn_tower', Delegate.GetOrCreate(self, self.OnBtnTowerClicked))
    self.sliderProgressTower = self:Slider('p_progress_tower')
    self.textTowerLv = self:Text('p_text_tower_lv')
    self.goIconUpgrade = self:GameObject('p_icon_upgrade')
    self.btnUpgradeItem = self:Button('p_btn_upgrade_item', Delegate.GetOrCreate(self, self.OnBtnUpgradeItemClicked))
    self.textItemNumber = self:Text('p_text_item_number')
    ---@type NotificationNode
	self.child_reddot_player_head = self:LuaObject('child_reddot_player_head')
end

function HUDPlayerInfoComponent:OnBtnTowerClicked(args)
    -- body
end
function HUDPlayerInfoComponent:OnBtnUpgradeItemClicked(args)
    -- body
end

function HUDPlayerInfoComponent:RecrodPowerPos()
    self.powerPosition = self.goPower.transform.position
end

function HUDPlayerInfoComponent:RecrodCorePos()
    self.corePosition = self.btnUpgradeItem.transform.position
end

function HUDPlayerInfoComponent:GetCorePos()
    if self.corePosition then
        return self.corePosition
    end
    return self.btnUpgradeItem.transform.position
end

function HUDPlayerInfoComponent:GetPowerPos()
    if self.powerPosition then
        return self.powerPosition
    end
    return self.goPower.transform.position
end

function HUDPlayerInfoComponent:OnBtnStrenthenClicked(args)
    local playerData = ModuleRefer.PlayerModule:GetPlayer()
    local curPower = playerData.PlayerWrapper2.PlayerPower.TotalPower
    local keyMap = FPXSDKBIDefine.ExtraKey.strengthen
    local extraDic = {}
    extraDic[keyMap.power] = curPower
    ModuleRefer.FPXSDKModule:TrackCustomBILog(FPXSDKBIDefine.EventName.strengthen, extraDic)
    g_Game.UIManager:Open(UIMediatorNames.UIStrengthenMediator, {isFromMain = true})
end

function HUDPlayerInfoComponent:OnBtnPowerClicked(args)
    g_Game.UIManager:Open(UIMediatorNames.UIStrengthenTipsMediator)
end

function HUDPlayerInfoComponent:OnClickPlayerHead()
    --g_Game.UIManager:Open(UIMediatorNames.HeadChangeMediator)
	g_Game.UIManager:Open(UIMediatorNames.UIPlayerHomepageMediator)
end

function HUDPlayerInfoComponent:OnBtnEnergyClicked(args)
    local radarInfo = ModuleRefer.RadarModule:GetRadarInfo()
    local curEnery = radarInfo.PPPCur
    local maxEnergy = radarInfo.PPPMax
    local isMax = curEnery >= maxEnergy
    if isMax then
        local text = I18N.GetWithParams("energy_tips_1", string.format("%d", ConfigRefer.ConstMain:PPPIncInterval() / 60))
        ModuleRefer.ToastModule:ShowTextToast({clickTransform = self.btnEnergy.transform, content = text, tailContent = I18N.Get("energy_tips_3")})
    else
        local lackNum = maxEnergy - curEnery
		local costSeconds = math.ceil(lackNum / ConfigRefer.ConstMain:PPPIncNum()) * ConfigRefer.ConstMain:PPPIncInterval()
		local maxTimeStamp = costSeconds + radarInfo.LastAddTime.timeSeconds
        local text = I18N.GetWithParams("energy_tips_1", string.format("%d", ConfigRefer.ConstMain:PPPIncInterval() / 60))
        ModuleRefer.ToastModule:ShowTextToast({clickTransform = self.btnEnergy.transform, content = text, timeStamp = maxTimeStamp, timeText = "energy_tips_2", tailContent = I18N.Get("energy_tips_3")})
    end
end

function HUDPlayerInfoComponent:OnShow(param)
    self._comp_head_player:SetClickHeadCallback(Delegate.GetOrCreate(self, self.OnClickPlayerHead))
    self.child_reddot_player_head:SetVisible(true)
	ModuleRefer.LeaderboardModule:AttachHudPlayerHeadRedDot(self.child_reddot_player_head.CSComponent.gameObject)
    ModuleRefer.LeaderboardModule:UpdateDailyRewardState()
    --g_Game:AddSecondTicker(Delegate.GetOrCreate(self,self.OnTick))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.Radar.MsgPath,Delegate.GetOrCreate(self,self.RefreshRadar))
	--g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.Basics.Portrait.MsgPath,Delegate.GetOrCreate(self,self.RefreshHeadIcon))
	g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.Basics.PortraitInfo.MsgPath,Delegate.GetOrCreate(self,self.RefreshHeadIcon))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.CastleBrief.MapStates.StateWrapper.MsgPath, Delegate.GetOrCreate(self,self.OnChangeCastleState))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.PowerProgress.CanReceiveRewardProgressIds.MsgPath, Delegate.GetOrCreate(self,self.RefreshPowerReward))
    g_Game.EventManager:AddListener(EventConst.ITEM_COUNT_ALL_CHANGED, Delegate.GetOrCreate(self, self.UpdateLightCount))
    g_Game.EventManager:AddListener(EventConst.CITY_MAIN_FURNITURE_UPDATE, Delegate.GetOrCreate(self, self.RefreshBuildingInfo))
    g_Game.EventManager:AddListener(EventConst.CITY_MAIN_FURNITURE_ADD, Delegate.GetOrCreate(self, self.RefreshBuildingInfo))
    g_Game.EventManager:AddListener(EventConst.CITY_MAIN_FURNITURE_REMOVE, Delegate.GetOrCreate(self, self.RefreshBuildingInfo))
    g_Game.EventManager:AddListener(EventConst.HUD_PLAY_POWER_EFFECT, Delegate.GetOrCreate(self, self.UpdatePower))
    ModuleRefer.InventoryModule:AddCountChangeListener(ConfigRefer.ConstMain:CityExpItem(), Delegate.GetOrCreate(self, self.RefreshBuildingInfo))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.SystemEntry.OpenSystems.MsgPath, Delegate.GetOrCreate(self, self.OnOpenSystemsChanged))
	--self:UpdateTime()
    self:RefreshPower()
    self:RefreshRadar()
    self:UpdateLightCount()
    self:RefreshPlayerStatus()
    self:RefreshTerritoryBtn()
    self:RefreshPowerReward()
    self:RefreshHeadIcon()
    self:RefreshBuildingInfo()
    self:RecrodPowerPos()
end

function HUDPlayerInfoComponent:OnHide(param)
    --g_Game:RemoveSecondTicker(Delegate.GetOrCreate(self,self.OnTick))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.Radar.MsgPath,Delegate.GetOrCreate(self,self.RefreshRadar))
    --g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.Basics.Portrait.MsgPath,Delegate.GetOrCreate(self,self.RefreshHeadIcon))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.Basics.PortraitInfo.MsgPath,Delegate.GetOrCreate(self,self.RefreshHeadIcon))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.CastleBrief.MapStates.StateWrapper.MsgPath, Delegate.GetOrCreate(self,self.OnChangeCastleState))
    g_Game.EventManager:RemoveListener(EventConst.ITEM_COUNT_ALL_CHANGED, Delegate.GetOrCreate(self, self.UpdateLightCount))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.SystemEntry.OpenSystems.MsgPath, Delegate.GetOrCreate(self, self.OnOpenSystemsChanged))
    g_Game.EventManager:RemoveListener(EventConst.CITY_MAIN_FURNITURE_UPDATE, Delegate.GetOrCreate(self, self.RefreshBuildingInfo))
    g_Game.EventManager:RemoveListener(EventConst.CITY_MAIN_FURNITURE_ADD, Delegate.GetOrCreate(self, self.RefreshBuildingInfo))
    g_Game.EventManager:RemoveListener(EventConst.CITY_MAIN_FURNITURE_REMOVE, Delegate.GetOrCreate(self, self.RefreshBuildingInfo))
    ModuleRefer.InventoryModule:RemoveCountChangeListener(ConfigRefer.ConstMain:CityExpItem(), Delegate.GetOrCreate(self, self.RefreshBuildingInfo))
    g_Game.EventManager:RemoveListener(EventConst.HUD_PLAY_POWER_EFFECT, Delegate.GetOrCreate(self, self.UpdatePower))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.PowerProgress.CanReceiveRewardProgressIds.MsgPath, Delegate.GetOrCreate(self,self.RefreshPowerReward))
end

function HUDPlayerInfoComponent:RefreshBuildingInfo()
    self.textTowerLv.text = I18N.Get("new_chapter_city_lvl") .. ModuleRefer.PlayerModule:StrongholdLevel()
    local costItemId = ConfigRefer.ConstMain:CityExpItem()
    local curNum = ModuleRefer.InventoryModule:GetAmountByConfigId(costItemId)
    self.textItemNumber.text = curNum
    local city = ModuleRefer.CityModule:GetMyCity()
    local buildingLevel = city.furnitureManager:GetMainFurniture()
    if not buildingLevel then
        return
    end
    local cost = buildingLevel.furnitureCell:LevelUpCost()
    local itemArray = ModuleRefer.InventoryModule:ItemGroupId2ItemIds(cost)
    local costNum = 0
    for _, item in ipairs(itemArray) do
        if item.id == costItemId then
            costNum = item.count
        end
    end
    if costNum <= curNum then
        self.sliderProgressTower.value = 1
        self.goIconUpgrade:SetActive(buildingLevel:CanUpgrade())
    else
        self.sliderProgressTower.value = curNum / costNum
        self.goIconUpgrade:SetActive(false)
    end
end

function HUDPlayerInfoComponent:RefreshPowerReward()
    local playerData =  ModuleRefer.PlayerModule:GetPlayer()
    local canRewardIndexs = playerData.PlayerWrapper2.PowerProgress.CanReceiveRewardProgressIds or {}
    self.goStrengthenRedDot:SetActive(#canRewardIndexs > 0)
end

function HUDPlayerInfoComponent:RefreshHeadIcon()
    --self._comp_head_player:RefreshHeadIcon()
    self._comp_head_player:FeedData(ModuleRefer.PlayerModule:GetPlayer().Basics.PortraitInfo)
end

function HUDPlayerInfoComponent:RefreshRadar()
    local radarInfo = ModuleRefer.RadarModule:GetRadarInfo()
    local curEnery = radarInfo.PPPCur
    local maxEnergy = radarInfo.PPPMax
    -- if curEnery == 0 then
    --     self.textNumber.text = string.format('<color=#FF0000FF>%d</color>/%d', curEnery, maxEnergy)
    -- else
    --     self.textNumber.text = curEnery .. '/' .. maxEnergy
    -- end
    self.enertySlider.value = curEnery / maxEnergy
end

function HUDPlayerInfoComponent:OnTick(delta)
    --self:UpdateTime()
end

-- function HUDPlayerInfoComponent:UpdateTime()
--     local serverTime = g_Game.ServerTime:GetServerTimeTable()
--     if serverTime.hour > 6 and serverTime.hour < 18 then
--         self.inDay = true
--     else
--         self.inDay = false
--     end
--     self._img_TimeIconDay:SetVisible(self.inDay)
--     self._img_TimeIconNight:SetVisible(not self.inDay)
--     self._txt_Time.text = string.format('%02d:%02d:%02d',serverTime.hour,serverTime.min,serverTime.sec)

--     self._battery.value = math.clamp01(SystemInfo.batteryLevel)
-- end

function HUDPlayerInfoComponent:RefreshPower()
    if not self.showMyInfo then return end
    local playerData = self._playerModule:GetPlayer()
    --player power
    local curPower = playerData.PlayerWrapper2.PlayerPower.TotalPower
    if self._txt_Power then
        self._txt_Power.text = tostring(curPower)
    end
end

function HUDPlayerInfoComponent:UpdatePower()
    if not self.showMyInfo then return end
    if self._playerModule.powerUp then
        self.aniTrigger:PlayAll(FpAnimTriggerEvent.Custom1)
        self._playerModule.powerUp = false
    end
    if self._playerModule.powerDown then
        self.aniTrigger:PlayAll(FpAnimTriggerEvent.Custom2)
        self._playerModule.powerDown = false
    end
    local playerData = self._playerModule:GetPlayer()
    --player power
    local curPower = playerData.PlayerWrapper2.PlayerPower.TotalPower
    if self._txt_Power then
        self._txt_Power.text = tostring(curPower)
    end
end

function HUDPlayerInfoComponent:SwitchPlayerInfo(myInfo)
    self.showMyInfo = myInfo
    self.goTime:SetVisible(myInfo)
    self.goPower:SetVisible(myInfo)
    self.goPosition:SetVisible(myInfo)
end

function HUDPlayerInfoComponent:OnMailButtonClicked()
    g_Game.UIManager:Open(UIMediatorNames.UIMailMediator)
end

---@param entity wds.Player
function HUDPlayerInfoComponent:OnOpenSystemsChanged(entity, changeTable)
    if entity.ID ~= ModuleRefer.PlayerModule:GetPlayerId() then
        return
    end
    local refreshTerritoryBtn = false
    if changeTable.Add then
        if changeTable.Add[NewFunctionUnlockIdDefine.KingdomScene_radar_world_unlock] then
            refreshTerritoryBtn = true
        end
    end
    if changeTable.Remove then
        if changeTable.Remove[NewFunctionUnlockIdDefine.KingdomScene_radar_world_unlock] then
            refreshTerritoryBtn = true
        end
    end
    if refreshTerritoryBtn then
        self:RefreshTerritoryBtn()
    end
end

function HUDPlayerInfoComponent:RefreshTerritoryBtn()
    self.btnTerritory:SetVisible(false)
    -- local isUnLock = ModuleRefer.NewFunctionUnlockModule:CheckNewFunctionIsUnlocked(NewFunctionUnlockIdDefine.KingdomScene_castle_born)
end

function HUDPlayerInfoComponent:UpdateLightCount()
    local itemID = ConfigRefer.ConstMain:AddExploreValueItemId()
    --local itemConfig = ConfigRefer.Item:Find(itemID)
   -- g_Game.SpriteManager:LoadSprite(itemConfig:Icon(), self.iconLight)
    local count = ModuleRefer.InventoryModule:GetAmountByConfigId(itemID)
    local limit = ModuleRefer.MapFogModule:GetUnlockItemCountLimit()
    self.textLightNum.text = string.format("%s/%s", count, limit)
end

function HUDPlayerInfoComponent:OnBtnTerritoryClicked()
    local isUnLock = ModuleRefer.NewFunctionUnlockModule:CheckNewFunctionIsUnlocked(NewFunctionUnlockIdDefine.KingdomScene_radar_world_unlock)
    if not isUnLock then
        ModuleRefer.NewFunctionUnlockModule:ShowLockedTipToast(NewFunctionUnlockIdDefine.KingdomScene_radar_world_unlock)
        return
    end
    g_Game.UIManager:Open(UIMediatorNames.MapResourceFieldMainUIMediator)
end

function HUDPlayerInfoComponent:OnBtnLightClicked()
    local toastParameter = {}
    toastParameter.clickTransform = self.btnLight.transform
    toastParameter.content = ModuleRefer.MapFogModule:ShowUnlockItemTip()
    ModuleRefer.ToastModule:ShowTextToast(toastParameter)
end

function HUDPlayerInfoComponent:OnStatusButtonClicked()
    ---@type PlayerStatusToastParam
    local param = {status = ModuleRefer.ProtectModule:GetCurProtectStatus()}
    g_Game.UIManager:Open(UIMediatorNames.PlayerStatusToastMediator, param)
end

function HUDPlayerInfoComponent:OnChangeCastleState(entity, _)
    if not entity then
        return
    end
    self:RefreshPlayerStatus(entity)
end

function HUDPlayerInfoComponent:RefreshPlayerStatus(entity)
    local status = nil
    if not entity then
        status =  ModuleRefer.ProtectModule:GetCurProtectStatus()
    else
        status = ModuleRefer.ProtectModule:GetProtectStatusByEntity(entity)
    end
    local spriteName = ModuleRefer.ProtectModule:GetProtectStatusIconName(status)
    self.statusButton.gameObject:SetActive(not string.IsNullOrEmpty(spriteName))
    if not string.IsNullOrEmpty(spriteName) then
        g_Game.SpriteManager:LoadSprite(spriteName, self.imgStatus)
    end
end

return HUDPlayerInfoComponent
