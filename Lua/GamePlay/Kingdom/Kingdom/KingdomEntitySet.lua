--local DBEntityType = require("DBEntityType")
--local ObjectType = require("ObjectType")
--local MapHudTransformControl = require("MapHudTransformControl")
--local ModuleRefer = require("ModuleRefer")
--
-----@class KingdomEntitySet
-----@field factory KingdomAssetFactory
-----@field staticMapData CS.Grid.StaticMapData
-----@field assets table<number, KingdomBaseAsset>
-----@field objectType number
--local KingdomEntitySet = class("KingdomEntitySet")
--
--function KingdomEntitySet:ctor()
--    self.assets = {}
--end
--
--function KingdomEntitySet:Initialize(factory, root, staticMapData)
--    self.factory = factory
--    self.root = root
--    self.staticMapData = staticMapData
--end
--
--function KingdomEntitySet:Release()
--    for _, asset in pairs(self.assets) do
--        if asset then
--            asset:Hide()
--            asset:Release()
--        end
--    end
--    self.assets = nil
--
--    self.factory = nil
--    self.root = nil
--    self.staticMapData = nil
--end
--
--function KingdomEntitySet:Reset()
--    for _, asset in pairs(self.assets) do
--        if asset then
--            self.factory:Recycle(self.objectType, asset)
--            asset:Hide()
--        end
--    end
--    table.clear(self.assets)
--end
--
-----@param objectType number
-----@param set table<number, table>
-----@param lod number
--function KingdomEntitySet:FeedData(objectType, set, lod)
--    self.objectType = objectType
--    for id, asset in pairs(self.assets) do
--        if set[id] == nil then
--            asset:Hide()
--            self.factory:Recycle(objectType, asset)
--            self.assets[id] = nil
--        end
--    end
--    
--    for id, entity in pairs(set) do
--        local x, z = self:GetPosition(entity)
--        if self.assets[id] == nil then
--            if self:IsFogUnlocked(x, z) then
--                local asset = self.factory:Create(objectType)
--                if asset then
--                    asset:FeedData(id, objectType, lod, entity, self.root, self.staticMapData, x, z)
--                    asset:Show(lod)
--                    self.assets[id] = asset
--                end
--            end
--        else
--            local asset = self.assets[id]
--            asset:FeedData(id, objectType, lod, entity, self.root, self.staticMapData, x, z)
--        end
--    end
--end
--
--function KingdomEntitySet:OnLodChanged(lod)
--    for _, asset in pairs(self.assets) do
--        if asset then
--            asset:UpdateLod(lod)
--        end
--    end
--end
--
--function KingdomEntitySet:OnSizeChanged(size)
--    for _, asset in pairs(self.assets) do
--        if asset then
--            asset:SetScale(MapHudTransformControl.scale)
--        end
--    end
--end
--
-----@return number
-----@return number
--function KingdomEntitySet:GetPosition(entity)
--    if self.objectType == ObjectType.SlgCastle then
--        ---@type wds.AllianceMember
--        local member = entity
--        return member.BigWorldPosition.X, member.BigWorldPosition.Y
--    end
--end
--
--function KingdomEntitySet:IsFogUnlocked(x, z)
--    if self.objectType == ObjectType.SlgCastle then
--        return true
--    end
--    return ModuleRefer.MapFogModule:IsFogCellUnlockedAt(x, z)
--end
--return KingdomEntitySet