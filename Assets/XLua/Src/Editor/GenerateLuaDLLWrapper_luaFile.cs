using System;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using DragonReborn.CSharpReflectionTool;
// using RuntimeInspectorNamespace;
using UnityEditor;
using UnityEngine;

// ReSharper disable once CheckNamespace
namespace XLua.Src
{
	// ReSharper disable once InconsistentNaming
	public static class GenerateLuaDLLWrapper_luaFile
	{
		[MenuItem("DragonReborn/XLua/生成LuaDLL转绑定Wrapper")]
		private static void DoGenerate()
		{
			var targetType = typeof(LuaDLL.Lua);
			var needProcessMethod = targetType.GetMethods(BindingFlags.Static | BindingFlags.Public);
			var strBuilder = new StringBuilder();
			var voidType = typeof(void);
			foreach (var methodInfo in needProcessMethod)
			{
				var isDllImportMethod = methodInfo.GetCustomAttribute<DllImportAttribute>() != null;
				var mName = methodInfo.Name;
				var parameters = methodInfo.GetParameters();
				var methodSig = "public static " + (methodInfo.ReturnType == voidType
					? "void"
					: methodInfo.ReturnType.TypeNameToHandWriteFormat()) + " " + mName + "(";
				methodSig += string.Join(',', parameters.Select(p=>MakeParameter(p, true)));
				methodSig += ")";
				if (isDllImportMethod)
				{
					var returnValueCall = (methodInfo.ReturnType == voidType ? "" : "var ret = ") + "LuaOriginAPI." + mName + "(";
					returnValueCall += string.Join(',', parameters.Select(p => MakeParameter(p, false)));
					returnValueCall += ");";
					var returnValueLine = (methodInfo.ReturnType == voidType ? string.Empty : "return ret;");
					strBuilder.Append(MethodBlockLuaLibCallTemplate.Replace("###METHOD_SIG###", methodSig)
						.Replace("###METHOD_RETURN###", returnValueCall)
						.Replace("###METHOD_RETURN_VALUE###", returnValueLine));
				}
				else
				{
					var returnCall = (methodInfo.ReturnType == voidType ? "" : "return ") + "LuaOriginAPI." + mName + "(";
					returnCall += string.Join(',', parameters.Select(p => MakeParameter(p, false)));
					returnCall += ");";
					strBuilder.Append(MethodNormalBlockTemplate.Replace("###METHOD_SIG###", methodSig)
						.Replace("###METHOD_RETURN_ONE_LINE###", returnCall));
				}
			}
			var writeContent = ClassTemplate.Replace("###GENERATE_TIME###",
				DateTime.Now.ToString(CultureInfo.InvariantCulture)).Replace("###METHODS_HERE###", strBuilder.ToString());
			var writeFilePath = Path.Combine(Application.dataPath, "XLua/Src/LuaDLLWrapper_lua.cs");
			File.WriteAllText(writeFilePath, writeContent);
		}

		private static string MakeParameter(ParameterInfo parameterInfo, bool showType)
		{
			var modifier = string.Empty;
			if (parameterInfo.IsIn)
			{
				modifier = "in ";
			}
			else if (parameterInfo.IsOut)
			{
				modifier = "out ";
			}
			else if (parameterInfo.ParameterType.IsByRef)
			{
				modifier = "ref ";
			}

			if (!showType) return modifier + parameterInfo.Name;
			var typeName = ((parameterInfo.IsIn || parameterInfo.IsOut || parameterInfo.ParameterType.IsByRef)
				? (parameterInfo.ParameterType.HasElementType
					? parameterInfo.ParameterType.GetElementType()!.TypeNameToHandWriteFormat()
					: parameterInfo.ParameterType.TypeNameToHandWriteFormat())
				: parameterInfo.ParameterType.TypeNameToHandWriteFormat()) + " ";
			var optional = string.Empty;
			if (parameterInfo.IsOptional)
			{
				optional = " = " + parameterInfo.DefaultValue;
			}
			return modifier + typeName + parameterInfo.Name + optional;
		}

		private const string ClassTemplate = @"//////////////////////////////////////////////////////////////////////////
//
//      UPDATE TIME : ###GENERATE_TIME###
//      DO NOT EDIT THIS FILE!! THIS IS AUTOMATICALLY GENERATED!!
//
//////////////////////////////////////////////////////////////////////////

#if CHECK_XLUA_API_CALL_ENABLE
using LuaOriginAPI = XLua.LuaDLL.Lua;
using System.Runtime.CompilerServices;

// ReSharper disable All
namespace XLua.LuaDLL
{
	public static partial class LuaDLLWrapper
	{
###METHODS_HERE###
	}
}
#endif
";

		private const string MethodNormalBlockTemplate = @"
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		###METHOD_SIG###
		{
			###METHOD_RETURN_ONE_LINE###
		}
";
		
		private const string MethodBlockLuaLibCallTemplate = @"
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		###METHOD_SIG###
		{
			var handle = PreCallInjected();
			###METHOD_RETURN###
			EndCallInjected(handle);
			###METHOD_RETURN_VALUE###
		}
";
	}
}
