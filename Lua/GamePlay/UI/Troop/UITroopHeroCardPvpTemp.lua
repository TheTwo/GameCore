---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hao.wu.ss
--- DateTime: 2023/8/15 11:05
---

--- scene: scene_child_slg_card

local BaseUIComponent = require('BaseUIComponent')
local Delegate = require('Delegate')
local ModuleRefer = require("ModuleRefer")
local I18N = require("I18N")
local ConfigRefer = require("ConfigRefer")
local Utils = require("Utils")
local HeroUIUtilities = require("HeroUIUtilities")
local UIHeroLocalData = require('UIHeroLocalData')
local UIHelper = require('UIHelper')
local ColorConsts = require('ColorConsts')


---@class UITroopHeroCardPvpTemp : BaseUIComponent
---@field onHeroCardClick  fun(data:UITroopHeroCardPvpTempData):void
---@field onHeroInfoClick  fun(data:UITroopHeroCardPvpTempData):void
---@field onPetClick fun(data:UITroopHeroCardPvpTempData):void
local UITroopHeroCardPvpTemp = class('UITroopHeroCardPvpTemp', BaseUIComponent)

---@class UITroopHeroCardPvpTempData
---@field slotIndex number
---@field heroCfgId number @cfgId
---@field heroLevel number
---@field heroStrengthenLevel number
---@field heroHp number
---@field heroHpMax number @<=0不显示
---@field petCfgId number @cfgId
---@field petCompId number @compId
---@field petLevel number
---@field petRankLevel number
---@field petUnlockNum number
---@field petHp number
---@field petHpMax number @<=0不显示
---@field editable boolean
---@field limitEdit boolean
---@field onEmptyButtonClick fun(data:UITroopHeroCardPvpTempData):void
---@field onHeroDeleteClick fun(data:UITroopHeroCardPvpTempData):void
---@field hpPreview number
---@field petHpPreview number
---@field petSkillLevels table<number, number>


local STATUS_INDEX_EMPTY = 0
local STATUS_INDEX_NORMAL = 1

local SP_HERO_FRAME_PREFIX = "sp_slg_farme_"
local SP_PET_FRAME_PREFIX = "sp_item_frame_circle_"

local LV_BASE_IMG = {
	[0] = 'sp_comp_base_lv',
	[1] = 'sp_comp_base_lv_1'
}

function UITroopHeroCardPvpTemp:ctor()

end

function UITroopHeroCardPvpTemp:OnCreate(param)
	self:InitObjects()
end

function UITroopHeroCardPvpTemp:OnHide(param)
	self:SetFollowWSPosition(nil, CS.UnityEngine.Vector3.zero, CS.UnityEngine.Vector3.zero)
end

function UITroopHeroCardPvpTemp:InitObjects()
	--Unkonw

	--Hero Infos
	self.heroStatusRecord = self:StatusRecordParent("p_hero_status")
	self.emptyButton = self:Button("p_btn_hero_empty", Delegate.GetOrCreate(self, self.OnEmptyButtonClick))
	self.heroAddIcon = self:GameObject("p_btn_hero_empty")

	self.heroButton = self:Button("p_btn_hero", Delegate.GetOrCreate(self, self.OnHeroButtonClicked))
	self.heroName = self:Text("p_text_name")
	self.heroLvText = self:Text("p_text_lv")

	self.heroJobIcon = self:Image('p_icon_job')
	---@type UIHeroAssociateIconComponent
	self.compHeroStyle = self:LuaObject('p_icon_style')

	self.heroHpPreview = self:Slider("p_progress_view_hero")
	self.heroHpSlider = self:Slider("p_hero_hp")
	self.heroHpValueText = self:Text("p_text_hp_hero")
	self.goHeroHp = self:GameObject('p_hp')

	--Pet Infos
	self.petStatusRecord = self:StatusRecordParent("p_pet_status")
	self.goPetBase = self:GameObject('p_base_n_pet')
	---@type PetStarLevelComponent
	self.luaPetStar = self:LuaObject('p_star_layout')
	self.petAddButton = self:Button("p_btn_pet_empty", Delegate.GetOrCreate(self, self.OnPetButtonClick))
	self.petButton = self:Button("p_btn_pet", Delegate.GetOrCreate(self, self.OnPetButtonClick))
	self.compPetStyle = self:LuaObject('p_icon_style_pet')

	self.petLvText = self:Text("p_text_lv_pet")
	self.petHpPreview = self:Slider("p_progress_view_pet")
	self.petHpSlider = self:Slider("p_progress_pet_hp")
	self.petHpValueText = self:Text("p_text_hp_pet")
	---@type NotificationNode
	self.petRedDot = self:LuaObject("p_pet_red_dot")
	---@type NotificationNode
	self.heroRedDot = self:LuaObject("p_hero_reddot")

	self.goCircleButtons = self:GameObject('p_circle_buttons')
    self.btnDelete = self:Button('p_btn_delete', Delegate.GetOrCreate(self, self.OnBtnDeleteClicked))
    self.btnTroop = self:Button('p_btn_troop', Delegate.GetOrCreate(self, self.OnBtnTroopClicked))
	self.textInjuriedInfo = self:Text('p_text_injuried','formation_injuringwarn')

	self.goInjured = self:GameObject('p_base_injured')
	self.imgLv = self:Image('p_lv')
	self.imgFillHero = self:Image('p_fill_hero')

	self.imgFillPet = self:Image('p_fill_pet')
	self.strengthPet = self:LuaObject('p_strengthen_pet_icon')
	self.goInjuredPet = self:GameObject('p_base_injured_pet')
	---@see UIHeroStrengthenCellGroup
	self.luaHeroStrengthen = self:LuaObject('p_strengthen_hero_group')

	---@type CS.UnityEngine.UI.Image[]
	self.petStars = {}
end

---@param data UITroopHeroCardPvpTempData
function UITroopHeroCardPvpTemp:OnFeedData(data)
	if (not data) then return end
	if not self._data or self._data.heroCfgId ~= data.heroCfgId then
		self:CloseCircleMenu()
	end
	self._data = data
	self:RefreshUI()
end

function UITroopHeroCardPvpTemp:PlayHealingEffect()
	-- self.vxHealing:SetActive(true)
end

function UITroopHeroCardPvpTemp:StopHealingEffect()
	-- self.vxHealing:SetActive(false)
end

function UITroopHeroCardPvpTemp:PlayPetEffect()
	self.vxPet:SetActive(false)
	self.vxPet:SetActive(true)
end

function UITroopHeroCardPvpTemp:StopPetEffect()
	self.vxPet:SetActive(false)
end

function UITroopHeroCardPvpTemp:SetupHeroRanckIcon(strengthLv)
	self.luaHeroStrengthen:FeedData(strengthLv)
end

function UITroopHeroCardPvpTemp:SetupPetRankIcon(rankLv)
end

function UITroopHeroCardPvpTemp:RefreshUI()
	if (not self._data.heroCfgId or self._data.heroCfgId <= 0) then
		self.heroStatusRecord:ApplyStatusRecord(STATUS_INDEX_EMPTY)
		self.petStatusRecord.gameObject:SetActive(false)
		self.emptyButton.gameObject:SetActive(self._data.editable)
		-- self.textHeroEmpty.text = tostring(self._data.slotIndex)
		self.heroAddIcon:SetActive(self._data.editable)
		self.heroRedDot.go:SetActive(self._data.editable and self._data.showHeroRedDot)
		self.heroRedDot.redDot:SetActive(self._data.editable and self._data.showHeroRedDot)
	else
		self.heroRedDot.go:SetActive(false)
		self.heroStatusRecord:ApplyStatusRecord(STATUS_INDEX_NORMAL)
		local heroData = ModuleRefer.HeroModule:GetHeroByCfgId(self._data.heroCfgId)
		if (heroData) then
			local minHpPct = ModuleRefer.SlgModule.battleMinHpPct
			self.heroName.text = I18N.Get(heroData.configCell:Name())
			local levelStr = ""
			if self._data.heroLevel and self._data.heroLevel > 0 then
				levelStr = levelStr .. tostring(self._data.heroLevel)
			elseif heroData.dbData and heroData.dbData.Level > 0  then
				levelStr = levelStr .. tostring(heroData.dbData.Level)
			else
				levelStr = levelStr .. '1'
			end
			self.heroLvText.text = levelStr
			if self._data.heroStrengthenLevel and self._data.heroStrengthenLevel >= 0 then
				-- self.heroRankNode:SetActive(true)
				self:SetupHeroRanckIcon(self._data.heroStrengthenLevel)
			elseif heroData.dbData and heroData.dbData.StarLevel >= 0 then
				-- self.heroRankNode:SetActive(true)
				self:SetupHeroRanckIcon(heroData.dbData.StarLevel)
			else
				-- self.heroRankNode:SetActive(false)
			end

			local heroInjured = false
			local petInjured = false

			if self._data.heroHpMax == nil or self._data.heroHpMax <= 0 then
				-- self.heroHpSlider:SetVisible(false)
				-- self.heroHpValueText:SetVisible(false)
				self.goHeroHp:SetVisible(false)
			else
				-- self.heroHpSlider:SetVisible(true)
				-- self.heroHpValueText:SetVisible(true)
				self.goHeroHp:SetVisible(true)
				local hp = math.floor(math.max(self._data.heroHp, self._data.hpPreview or 0))
				local maxHp = math.floor(self._data.heroHpMax)
				self.heroHpValueText.text = I18N.GetWithParams("NewFormation_HPShow", hp, maxHp)
				self.heroHpSlider.value = math.clamp(self._data.heroHp / maxHp,0,1)
				self.heroHpPreview.value = math.clamp((self._data.hpPreview or 0) / maxHp,0,1)
				heroInjured = (hp < math.floor(maxHp * minHpPct )) and not self._data.simpleMode and self._data.editable
				self:SetHeroInjuredState(heroInjured)
			end
			self.textInjuriedInfo:SetVisible(heroInjured)
			--BattleLabel
			local battleLabel = heroData.configCell:BattleType()
			local battleInfo = UIHeroLocalData.BATTLE_LABEL[battleLabel]
			g_Game.SpriteManager:LoadSprite(battleInfo.icon, self.heroJobIcon)

			--HeroStyle
			local tagInfoId = heroData.configCell:AssociatedTagInfo()
			self.compHeroStyle:FeedData({
				tagId = tagInfoId
			})

			self.petStatusRecord.gameObject:SetActive(true)
			local petId = self._data.petCompId
			local petCfgId = (ModuleRefer.PetModule:GetPetByID(petId) or {}).ConfigId or self._data.petCfgId
			if petCfgId and petCfgId > 0 then
				self.compPetStyle:SetVisible(true)
				local petTag = ConfigRefer.Pet:Find(petCfgId):AssociatedTagInfo()
				self.compPetStyle:FeedData({
					tagId = petTag
				})
			else
				self.compPetStyle:SetVisible(false)
			end

			if self._data.petCompId and self._data.petCompId > 0 or
			self._data.petCfgId and self._data.petCfgId > 0 then
				self.goPetBase:SetVisible(true)
			else
				self.goPetBase:SetVisible(false)
			end

			if self._data.petHp and self._data.petHpMax and self._data.petHpMax > 0 then
				self.petHpValueText:SetVisible(true)
				self.petHpSlider:SetVisible(true)
				local hp = math.floor(math.max(self._data.petHp, self._data.petHpPreview or 0))

				local maxHp = math.floor(self._data.petHpMax)
				self.petHpValueText.text = I18N.GetWithParams("NewFormation_HPShow", hp, maxHp)
				self.petHpSlider.value = math.clamp( self._data.petHp / maxHp,0,1)
				self.petHpPreview.value = math.clamp( (self._data.petHpPreview or 0 ) / maxHp,0,1)
				petInjured = ( hp < math.floor(maxHp * minHpPct ) ) and not self._data.simpleMode and self._data.editable
				self:SetPetInjuredState(petInjured)
			else
				self.petHpValueText:SetVisible(false)
				self.petHpSlider:SetVisible(false)
				self:SetPetInjuredState(false)
			end

			if (petId and petId > 0) then
				self.petStatusRecord:ApplyStatusRecord(STATUS_INDEX_NORMAL)
				local petInfo = ModuleRefer.PetModule:GetPetByID(petId)
				if petInfo then
					self.petLvText.text = tostring(petInfo.Level)
					self.luaPetStar:FeedData({petId = petId})
				end
			elseif petCfgId and petCfgId > 0 then
				self.petStatusRecord:ApplyStatusRecord(STATUS_INDEX_NORMAL)
				self.petLvText.text = tostring(self._data.petLevel)
				if self._data.petSkillLevels then
					self.luaPetStar:FeedData({skillLevels = self._data.petSkillLevels})
				end
			elseif self._data.editable then
				self.petStatusRecord:ApplyStatusRecord(STATUS_INDEX_EMPTY)
				if (self._data.showPetRedDot) then
					self.petRedDot.go:SetActive(true)
					self.petRedDot.redDot:SetActive(true)
					self.petRedDot.redTextGo:SetActive(false)
					self.petRedDot.redNew:SetActive(false)
				else
					self.petRedDot.go:SetActive(false)
				end
			else
				self.petStatusRecord.gameObject:SetActive(false)
			end
		else
			self.petStatusRecord.gameObject:SetActive(false)
		end
	end

	-- 简易模式
	if (self._data.simpleMode) then
		-- self.heroHpValueText.gameObject:SetActive(false)
		-- self.heroHpSlider.gameObject:SetActive(false)
		self.goHeroHp:SetActive(false)
	else
		-- self.heroHpValueText.gameObject:SetActive(true)
		-- self.heroHpSlider.gameObject:SetActive(true)
		self.goHeroHp:SetActive(true)		
	end
end

function UITroopHeroCardPvpTemp:OnPetButtonClick()
	if self.onPetClick and self._data.editable  then
		self.onPetClick(self._data)
	end
end

function UITroopHeroCardPvpTemp:OnEmptyButtonClick()
	if (self._data.editable and self._data.onEmptyButtonClick) then
		self._data.onEmptyButtonClick(self._data)
	end
end

-- function UITroopHeroCardPvpTemp:OnDragBegin(go, eventData)
-- 	if (self._data.editable and self._data.onDragBegin) then
-- 		self._data.onDragBegin(self._data, go, eventData)
-- 	end
-- end

-- function UITroopHeroCardPvpTemp:OnDrag(go, eventData)
-- 	if (self._data.editable and self._data.onDrag) then
-- 		self._data.onDrag(self._data, go, eventData)
-- 	end
-- end

-- function UITroopHeroCardPvpTemp:OnDragEnd(go, eventData)
-- 	if (self._data.editable and self._data.onDragEnd) then
-- 		self._data.onDragEnd(self._data, go, eventData)
-- 	end
-- end

---@param onHeroCardClick fun(data:UITroopHeroCardPvpTempData):void
---@param onHeroInfoClick fun(data:UITroopHeroCardPvpTempData):void
---@param onPetClick fun(data:UITroopHeroCardPvpTempData):void
function UITroopHeroCardPvpTemp:AddClickListener(onHeroCardClick,onHeroInfoClick,onPetClick)
	self.onHeroCardClick = onHeroCardClick
	self.onHeroInfoClick = onHeroInfoClick
	self.onPetClick = onPetClick
end

function UITroopHeroCardPvpTemp:GetHeroConfigId()
	if not self._data then
		return 0
	end
	return self._data.heroCfgId
end

function UITroopHeroCardPvpTemp:OnHeroButtonClicked()
	if (self._data.editable or self._data.limitEdit) and self.onHeroCardClick then
		self.onHeroCardClick(self._data)
	end
end

function UITroopHeroCardPvpTemp:OpenCircleMenu()
	if not self._data.editable and not self._data.limitEdit then
		return
	end
	self.showCircleButtons = true
	self.goCircleButtons:SetActive(true)
	if not self._data.editable and self._data.limitEdit then
		self.btnDelete.gameObject:SetActive(false)
	else
		self.btnDelete.gameObject:SetActive(true)
	end
end

function UITroopHeroCardPvpTemp:CloseCircleMenu()
	self.showCircleButtons = false
	self.goCircleButtons:SetActive(false)
end


function UITroopHeroCardPvpTemp:OnBtnDeleteClicked(args)
	self:CloseCircleMenu()
	if (self._data.editable and self._data.onHeroDeleteClick) then
		self._data.onHeroDeleteClick(self._data)
	end
end
function UITroopHeroCardPvpTemp:OnBtnTroopClicked(args)
	self:CloseCircleMenu()
    if (self.onHeroInfoClick) then
		self.onHeroInfoClick(self._data)
	end
end

---@param cam CS.UnityEngine.Camera
---@param heroPos CS.UnityEngine.Vector3
---@param petPos CS.UnityEngine.Vector3
function UITroopHeroCardPvpTemp:SetFollowWSPosition(cam, heroPos,petPos)
	UIHelper.SetWSPosAnchor(cam,self.heroStatusRecord.transform, heroPos)
	UIHelper.SetWSPosAnchor(cam,self.petStatusRecord.transform, petPos)

end

function UITroopHeroCardPvpTemp:SetHeroInjuredState(isInjured)
	self.goInjured:SetActive(isInjured)
	-- local imgId = isInjured and 1 or 0
	-- g_Game.SpriteManager:LoadSprite(LV_BASE_IMG[imgId], self.imgLv)
	self.imgFillHero.color = UIHelper.TryParseHtmlString(isInjured and ColorConsts.army_red or ColorConsts.white)
end

function UITroopHeroCardPvpTemp:SetPetInjuredState(isInjured)
	self.goInjuredPet:SetActive(isInjured)
	-- local imgId = isInjured and 1 or 0
	-- g_Game.SpriteManager:LoadSprite(LV_BASE_IMG[imgId], self.imgPetLv)
	self.imgFillPet.color = UIHelper.TryParseHtmlString(isInjured and ColorConsts.army_red or ColorConsts.white)
end

return UITroopHeroCardPvpTemp
