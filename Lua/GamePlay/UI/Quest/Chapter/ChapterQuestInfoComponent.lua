---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/1/5 20:47
---
local BaseUIComponent = require("BaseUIComponent")
local Delegate = require("Delegate")
local ModuleRefer = require("ModuleRefer")
local QuestModule_Chapter = require('QuestModule_Chapter')
local I18N = require("I18N")
local TaskType = require('TaskType')

---@class ChpaterQuestInfoComponent : BaseUIComponent
---@field module QuestModule_Chapter
---@field questList wds.TaskUnit[]
---@field questCache table<number,CachedChapterTaskItem>
local ChpaterQuestInfoComponent = class("ChpaterQuestInfoComponent", BaseUIComponent)

function ChpaterQuestInfoComponent:OnCreate(param)
    --Top Part
    self:OnCreate_TopPart()
    --Bottom Part
    self:OnCreate_PartQuestListPage()
    self:OnCreate_PartCompletePage()
end

function ChpaterQuestInfoComponent:OnShow(param)
    self:OnShow_PartQuestListPage()
end

function ChpaterQuestInfoComponent:ctor()
    self.module = ModuleRefer.QuestModule.Chapter
end

--region TopPart
function ChpaterQuestInfoComponent:OnCreate_TopPart()
    self.progress = self:BindComponent('p_slider_progress',typeof(CS.UnityEngine.UI.Slider))
    self.progressFx = self:GameObject('p_icon_hand')
    self.txtProgress = self:Text('p_text_progress')
    self.txtChapterTitle = self:Text('p_text_chapter')
    self.txtChapterTarget = self:Text('p_text_target')
    self.imgChapterTarget = self:Image('p_img_target')
    --self:PointerClick('mask',Delegate.GetOrCreate(self,self.OnOpenChapterTarget))
end

function ChpaterQuestInfoComponent:UpdateUI_TopPart()
    local questCountInStage = self.module:GetQuestCountInStage()
    local completeCountInStage = self.module:GetCompleteQuestCountInStage()
    local pct = completeCountInStage  / questCountInStage
    self.txtProgress.text = string.format('%0.1f%%',pct* 100.0)

    self.progress.value = pct
    self.progressFx:SetVisible(completeCountInStage < questCountInStage)

    self.txtChapterTitle.text = I18N.Get(self.chapterGroupConfig:Desc())
    self.txtChapterTarget.text = I18N.Get(self.chapterGroupConfig:Title())
    self:LoadSprite(self.chapterConfig:Pic2(),self.imgChapterTarget)
end

function ChpaterQuestInfoComponent:QuestRewardAction(i_quest, lockable, tableCell)
    self.module:GetChapterQuestReward(i_quest, lockable,tableCell)
end

function ChpaterQuestInfoComponent:GotoAction(gotoId)
    g_Game.UIManager:Close(self:GetCSUIMediator().RuntimeId)
    require('GuideUtils').GotoByGuide(gotoId,true)

end

function ChpaterQuestInfoComponent:OnOpenChapterTarget()
    -- local parentCSComp = self.CSComponent.Parent
    -- ---@type ChapterQuestPageComponent
    -- local parentComp = nil
    -- if parentCSComp then
    --     parentComp = parentCSComp.Lua
    -- end
    -- if parentComp then
    --     parentComp:ShowChapterTarget()
    -- end
end

--endregion

-------------------------------------------------------------------------
--region Quest List
function ChpaterQuestInfoComponent:PlayCellsShowAnim()
    local count = self.tablePartQuests.CellCount
    for i = 0, count - 1 do
        local cell = self.tablePartQuests:GetCell(i)
        cell.Lua:PlayShowAnim()
    end
end

function ChpaterQuestInfoComponent:PlayCellInitAnim()
    local count = self.tablePartQuests.CellCount
    for i = 0, count - 1 do
        local cell = self.tablePartQuests:GetCell(i)
        cell.Lua:PlayInitAnim()
    end
end

function ChpaterQuestInfoComponent:OnCreate_PartQuestListPage()
    self.goQuestListContent = self:RectTransform('content_list')
    --title
    self.txtPartQuestTitle = self:Text('p_text_part_num')
    self.txtPartQuestDesc = self:Text('p_text_chapter_rewards')
    self.txtPartQuestRewardDesc = self:Text('p_text_reward','ssr_chapter_part_reward_desc')
    self.textTitle = self:Text('p_title_scenario','ssr_chapter_title')

    self.tablePartQuests = self:TableViewPro('p_item_table')

    self.tablePartQuestRewardPreview = self:TableViewPro('p_item_table_part_rewards')

    --Part Reward Button
    ---@type BistateButton
    self.btnPartQuestClaim = self:LuaObject('child_comp_btn_b_s')
end

function ChpaterQuestInfoComponent:OnShow_PartQuestListPage()
    if self.btnPartQuestClaim then
        ---@type BistateButtonParameter
        local btnParam = {
            onClick = Delegate.GetOrCreate(self,self.OnPartQuestRewardClaimed),
            buttonText = I18N.Get('task_btn_claim'),
        }

        self.btnPartQuestClaim:FeedData(btnParam)
    end
end

function ChpaterQuestInfoComponent:UpdateUI_PartQuestListPage(visible)
    self.goQuestListContent:SetVisible(visible)
    if not visible then
        return
    end
    -- self.txtPartQuestTitle.text = self.chapterConfig:Group() .. '-' .. self.chapterConfig:Id()
    -- self.txtPartQuestDesc.text = I18N.Get(self.chapterConfig:Desc())
    -- set part reward data
    self:SetupRewardInfo()
    -- set part quest data
    self:SetupQuestList()
end

function ChpaterQuestInfoComponent:SetupQuestList()
    if self.questCache ~= nil and table.nums(self.questCache) > 0 then
        self.tablePartQuests:Clear()
        local mainQuest = {}
        ---@type ChapterQuestItem.ChapterQuestItemData[]
        local questInfos = {}
        for _, value in pairs(self.questCache) do
            if value.config then
                ---@type ChapterQuestItem.ChapterQuestItemData
                local _itemData = {}
                _itemData.ParentQuestInfoComp = self
                _itemData.cachedQuestItem = value
                _itemData._rewardList = self.module:GetQuestRewards(value.config)
                _itemData.hideFlag = 0
                _itemData.nextQuestId = 0
                if value.config:Property():TaskType() == TaskType.MainChapter then
                    table.insert(mainQuest ,_itemData)
                else
                    table.insert(questInfos ,_itemData)
                end
            end
        end
        self.tablePartQuests:AppendDataEx({isMain = true}, 0, 0, 1, -1, 0)
        if mainQuest and #mainQuest >= 1 then
            self:RefreshItemsDetail(mainQuest, false)
        else
            self.tablePartQuests:AppendDataEx({isMain = true}, 0, 0, 2, -1, 0)
        end
        self.tablePartQuests:AppendDataEx({isMain = false}, 0, 0, 1, -1, 0)
        if questInfos and #questInfos >= 1 then
            self:RefreshItemsDetail(questInfos, true)
        else
            self.tablePartQuests:AppendDataEx({isMain = false}, 0, 0, 2, -1, 0)
        end
    else
        -- show Empty Icon
    end
    self.tablePartQuests:RefreshAllShownItem()
end

function ChpaterQuestInfoComponent:RefreshItemsDetail(questInfos, isSubQuest)
    if questInfos and #questInfos > 1 then
        table.sort(questInfos, function(a, b)
            return QuestModule_Chapter.CalcQuestPriority(a.cachedQuestItem)
                    < QuestModule_Chapter.CalcQuestPriority(b.cachedQuestItem)
        end)
    end
    for _, info in ipairs(questInfos) do
        self:CheckQuestState(info)
    end
    local focusData = nil
    for i = 1, #questInfos do
        local _itemData = questInfos[i]
        if _itemData.hideFlag < 3 then
            self.tablePartQuests:AppendDataEx(_itemData, 0, 0, 0, -1, 0)
            if _itemData.hideFlag == 1 then
                focusData = _itemData
            end
        end
    end
    if isSubQuest and focusData then
        self.tablePartQuests:SetFocusData(focusData)
    end
end

function ChpaterQuestInfoComponent:CheckQuestState(info)
    if not info.cachedQuestItem.inChain then
        if info.cachedQuestItem.state < wds.TaskState.TaskStateReceived then
            -- if info.cachedQuestItem.unit.State ~= info.cachedQuestItem.state then
            --     info.hideFlag = 1 --等待解锁任务
            -- else
            --     info.hideFlag = 2 --锁定任务
            -- end
            info.hideFlag = 3
        end
    else
        if info.cachedQuestItem.state < wds.TaskState.TaskStateFinished then
            --任务链隐藏判断
            --当任务未完成时，判断是否隐藏
            if info.cachedQuestItem.preId then
                local preTask = self.questCache[info.cachedQuestItem.preId]
                if preTask and preTask.state < wds.TaskState.TaskStateFinished then
                    --有前置任务且前置任务未完成，需要隐藏
                    info.hideFlag = 3
                end
            elseif info.cachedQuestItem.state < wds.TaskState.TaskStateReceived then
                -- if info.cachedQuestItem.unit.State ~= info.cachedQuestItem.state then
                --     info.hideFlag = 1 --等待解锁任务
                -- else
                --     info.hideFlag = 2 --锁定任务
                -- end
                info.hideFlag = 3
            end
        else
            --当任务完成时，判断是否隐藏
            if info.cachedQuestItem.nextId ~= nil then
                --当不是链尾时，需要隐藏
                info.hideFlag = 3
            end
        end
    end
end

function ChpaterQuestInfoComponent:SetupRewardInfo()
    if self.chapterQuestStatus.all <= self.chapterQuestStatus.claimed then
        self.btnPartQuestClaim:SetEnabled(true)
    else
        self.btnPartQuestClaim:SetEnabled(false)
    end

    if self.chapterConfig ~= nil then
        local chapterRewardList = self.module:GetChpaterRewardList()
        self.tablePartQuestRewardPreview:Clear(false, false, true)
        if chapterRewardList then
            for _, v in pairs(chapterRewardList) do
                self.tablePartQuestRewardPreview:AppendData(v ,0,-1)
            end
        end

    end
end

function ChpaterQuestInfoComponent:OnPartQuestRewardClaimed()
    local rect = self.btnPartQuestClaim.CSComponent.gameObject:GetComponent(typeof(CS.UnityEngine.RectTransform))
    self.module:GetChapterPartReward(rect)
end

--endregion
-------------------------------------------------------------------------
function ChpaterQuestInfoComponent:OnPartCompleteContinue()
    self.module:GotoNextPart()
end

---@param visible boolean
---@param lastChapterConfig ChapterConfigCell
function ChpaterQuestInfoComponent:UpdateUI_PartCompletePage(visible,lastChapterConfig)

    self.goPartCompleteContent:SetVisible(visible)
    if not visible then
        return
    end
    if self.module:IsAllChapterFinished() then
        self.btnPartCompleteContinue.gameObject:SetVisible(false)
        self.txtPartCompleteContinue.text = ''
        self.txtPartCompleteDest.text = I18N.Get('task_complete_mission_title')
        self.txtPartCompleteNotice.text = ''
    end
end

function ChpaterQuestInfoComponent:OnCreate_PartCompletePage()
    self.goPartCompleteContent = self:RectTransform('content_part_finish')
    self.txtPartCompleteTitle = self:Text('p_text_part_finish_num')
    self.txtPartCompleteDest = self:Text('p_text_part_finish','task_complete_mission_title')
    self.txtPartCompleteNotice = self:Text('p_text_congratulations','task_complete_mission_content')
    self.txtPartCompleteContinue = self:Text('p_text_continue','task_open_next_click')
    self.btnPartCompleteContinue = self:Button('p_button_continue',Delegate.GetOrCreate(self,self.OnPartCompleteContinue))
end

-------------------------------------------------------------------------

-------------------------------------------------------------------------
function ChpaterQuestInfoComponent:UpdateData()
    self.chapterConfig = self.module:CurrentChapterConfig()
    self.chapterGroupConfig = self.module:CurrentChapterGroup()
    self.questCache = self.module:GetChapterQuests()
    local all, complete, claimed = self.module:ChapterQuestCompleteCount()
    self.chapterQuestStatus={}
    self.chapterQuestStatus.all = all
    self.chapterQuestStatus.complete = complete
    self.chapterQuestStatus.claimed = claimed
end

--显示PartNormal的状态，节任务通常
function ChpaterQuestInfoComponent:OnChapterQuestNormal()
    self:UpdateData()
    -- self:UpdateUI_TopPart()
    self:UpdateUI_PartQuestListPage(true)
end

--显示PartComplete状态，节任务完成
---@param lastChapterConfig ChapterConfigCell
function ChpaterQuestInfoComponent:ShowPartCompletePage(lastChapterConfig)
    if not self.chapterConfig then
        self:UpdateData()
        -- self:UpdateUI_TopPart()
    end
    self:UpdateUI_PartQuestListPage(false)
    -- self:UpdateUI_PartCompletePage(true,lastChapterConfig)
end


return ChpaterQuestInfoComponent