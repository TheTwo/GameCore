---
--- SE消息队列管理器
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hao.su.ss
--- DateTime: 2023/2/3 11:05
---

---@class SEMessageQueue
local SEMessageQueue = class("SEMessageQueue")

---@param self SEMessageQueue
---@param env SEEnvironment
---@return void
function SEMessageQueue:ctor(env)
    ---@type SEEnvironment
    self._env = env
	---@type table<string, any>
	self._messageTable = {}
	---@type table<string, function<any>>
	self._functionTable = {}
	---@type table<string, boolean>
	self._queuedFlagTable = {}
end

---@param self SEMessageQueue
---@return void
function SEMessageQueue:Dispose()
	self._messageTable = {}
	self._functionTable = {}
	self._queuedFlagTable = {}
end

---@param self SEMessageQueue
---@return SEEnvironment
function SEMessageQueue:GetEnvironment()
	return self._env
end

--- 推送队列处理消息
---@param self SEMessageQueue
---@param key string
---@param msg any
---@param fun function<any>
---@param popImmediately boolean
function SEMessageQueue:PushQueued(key, msg, fun, popImmediately)
	self._queuedFlagTable[key] = true
	if (not self._messageTable[key]) then
		self._messageTable[key] = {}
	end
	local q = self._messageTable[key]
	table.insert(q, msg)
	self._functionTable[key] = fun
	if (popImmediately) then
		self:Pop(key)
	end
end

--- 推送覆盖处理消息
---@param self SEMessageQueue
---@param key string
---@param msg any
---@param fun function<any>
---@param popImmediately boolean
function SEMessageQueue:PushOverride(key, msg, fun, popImmediately)
	self._queuedFlagTable[key] = nil
	self._messageTable[key] = msg
	self._functionTable[key] = fun
	if (popImmediately) then
		self:Pop(key)
	end
end

--- 获取消息（不弹出，不处理）
---@param self SEMessageQueue
---@param key string
---@return any, function<any>
function SEMessageQueue:Get(key)
	return self._messageTable[key], self._functionTable[key]
end

--- 弹出消息并处理
---@param self SEMessageQueue
---@param key string
function SEMessageQueue:Pop(key)
	local isQueued = self._queuedFlagTable[key]
	self._queuedFlagTable[key] = nil
	local q = self._messageTable[key]
	self._messageTable[key] = nil
	local fun = self._functionTable[key]
	if (fun) then
		if (isQueued) then
			for _, v in pairs(q) do
				fun(v)
			end
		else
			fun(q)
		end
	end
	return q, fun
end

--- 弹出所有消息并处理
---@param self SEMessageQueue
function SEMessageQueue:PopAll()
	for key, q in pairs(self._messageTable) do
		local isQueued = self._queuedFlagTable[key]
		local fun = self._functionTable[key]
		if (fun) then
			if (isQueued) then
				for _, v in pairs(q) do
					fun(v)
				end
			else
				fun(q)
			end
		end
	end
	self._queuedFlagTable = {}
	self._messageTable = {}
	self._functionTable = {}
end

return SEMessageQueue
