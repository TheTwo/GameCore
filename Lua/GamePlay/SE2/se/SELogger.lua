---
--- SE日志管理器
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by BE.Tenner.
--- DateTime: 2021/9/23 10:51
---

---@class SELogger
local SELogger = class("SELogger")

local LOG_SHOW_ALL = false
local LOG_SHOW_TRACE = true
local LOG_LEVEL_LOW = false
local LOG_LEVEL_NORMAL = false
local LOG_LEVEL_HIGH = true
local LOGERROR_LEVEL_LOW = false
local LOGERROR_LEVEL_NORMAL = true
local LOGERROR_LEVEL_HIGH = true

local LOG_CHANNEL = "SE"

local __buffer__ = {
    "[",
    "",
    "] ",
    ""
}

local __gen_buffer = function(...)
    __buffer__[2] = tostring(g_Game.Time.frameCount)
    __buffer__[4] = string.format(...)
    return table.concat(__buffer__)
end

---设置是否显示全部日志
---@param showAll boolean
---@return void
function SELogger.SetShowAll(showAll)
    LOG_SHOW_ALL = showAll
end

---设置是否显示低优先级日志
---@param showLow boolean
---@return void
function SELogger.SetShowLow(showLow)
    LOG_LEVEL_LOW = showLow
    LOGERROR_LEVEL_LOW = showLow
end

---设置是否显示调试日志
---@param showTrace boolean
function SELogger.SetShowTrace(showTrace)
    LOG_SHOW_TRACE = showTrace
end

---调试日志
---@param ... any
function SELogger.Trace(...)
    if (LOG_SHOW_ALL or LOG_SHOW_TRACE) then
        g_Logger.TraceChannel(LOG_CHANNEL, __gen_buffer(...))
    end
end

---低优先级日志
---@param ... any
---@return void
function SELogger.LogLow(...)
    if (LOG_SHOW_ALL or LOG_LEVEL_LOW) then
        g_Logger.LogChannel(LOG_CHANNEL, __gen_buffer(...))
    end
end

---普通优先级日志
---@param ... any
---@return void
function SELogger.LogNormal(...)
    if (LOG_SHOW_ALL or LOG_LEVEL_NORMAL) then
        g_Logger.LogChannel(LOG_CHANNEL, __gen_buffer(...))
    end
end

---高优先级日志
---@param ... any
---@return void
function SELogger.LogHigh(...)
    if (LOG_SHOW_ALL or LOG_LEVEL_HIGH) then
        g_Logger.LogChannel(LOG_CHANNEL, __gen_buffer(...))
    end
end

---记录日志
---@param ... any
---@return void
function SELogger.Log(...)
    SELogger.LogNormal(...)
end

---低优先级错误日志
---@param ... any
---@return void
function SELogger.LogErrorLow(...)
    if (LOG_SHOW_ALL or LOGERROR_LEVEL_LOW) then
        g_Logger.ErrorChannel(LOG_CHANNEL, __gen_buffer(...))
    end
end

---普通优先级错误日志
---@param ... any
---@return void
function SELogger.LogErrorNormal(...)
    if (LOG_SHOW_ALL or LOGERROR_LEVEL_NORMAL) then
        g_Logger.ErrorChannel(LOG_CHANNEL, __gen_buffer(...))
    end
end

---高优先级错误日志
---@param ... any
---@return void
function SELogger.LogErrorHigh(...)
    if (LOG_SHOW_ALL or LOGERROR_LEVEL_HIGH) then
        g_Logger.ErrorChannel(LOG_CHANNEL, __gen_buffer(...))
    end
end

---错误日志
---@param ... any
---@return void
function SELogger.LogError(...)
    SELogger.LogErrorNormal(...)
end

return SELogger
