---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hao.wu.ss
--- DateTime: 2022/8/19 14:38
---

local BaseModule = require('BaseModule')
local ModuleRefer = require('ModuleRefer')
local DBEntityPath = require('DBEntityPath')
local ConfigRefer = require('ConfigRefer')
local Delegate = require('Delegate')

local RED_DOT_SYSTEM_TYPE = wrpc.RedDotSystemType.RedDotSystemType_Card

local PET_CARD_LIST_NOTIFICATION_TYPE = 31
local PET_CARD_NOTIFICATION_TYPE = 32

-- 新卡红点位
local RED_DOT_MASK_NEW_CARD_SET = 2147483646    -- 0111 1111 1111 1111 1111 1111 1111 1110
local RED_DOT_MASK_NEW_CARD_CLEAR = 1           -- 0000 0000 0000 0000 0000 0000 0000 0001

---@class CardModule
local CardModule = class('CardModule', BaseModule)

function CardModule:OnRegister()
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper.PlayerCard.CardInfos.MsgPath, Delegate.GetOrCreate(self, self.OnPlayerCardChange))
    self:UpdateCardList()
end

function CardModule:OnRemove()
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper.PlayerCard.CardInfos.MsgPath, Delegate.GetOrCreate(self, self.OnPlayerCardChange))
end

---@param self CardModule
---@return wds.Player
function CardModule:GetPlayer()
    if (not self._player) then
        self._player = ModuleRefer.PlayerModule:GetPlayer()
    end
    return self._player
end

---@param self CardModule
function CardModule:OnPlayerCardChange(data, changedTable)
    self:UpdateCardList()
end

--- 刷新卡牌列表
---@param self CardModule
function CardModule:UpdateCardList()
    ---@type table<number, wds.CardInfo>
    self._cardServerIdMap = {}
    ---@type table<number, wds.CardInfo>
    self._cardCfgIdMap = {}
    ---@type table<number, wds.CardInfo>
    self._petCardServerIdMap = {}
    ---@type table<number, wds.CardInfo>
    self._petCardCfgIdMap = {}
    for _, info in pairs(self:GetPlayer().PlayerWrapper.PlayerCard.CardInfos) do
        self._cardServerIdMap[info.ID] = info
        self._cardCfgIdMap[info.CfgId] = info
        local cfg = ConfigRefer.Card:Find(info.CfgId)
        if (cfg and cfg:CardTypeEnum() == require("CardType").Pet) then
            self._petCardServerIdMap[info.ID] = info
            self._petCardCfgIdMap[info.CfgId] = info
        end
    end
    self:RefreshPetCardsRedDotData()
end

--- 刷新伙伴卡牌红点数据
---@param self CardModule
function CardModule:RefreshPetCardsRedDotData()
    if (not self._petCardRedDotMap) then
        self._petCardRedDotMap = {}
    end
    if (not self._petCardListRedDot) then
        self._petCardListRedDot = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("pet_card_list", PET_CARD_LIST_NOTIFICATION_TYPE)
    end
    for cfgId, card in pairs(self._petCardCfgIdMap) do
        if (not self._petCardRedDotMap[cfgId]) then
            self:CreatePetCardRedDotData(cfgId)
            ModuleRefer.NotificationModule:AddToParent(self._petCardRedDotMap[cfgId], self._petCardListRedDot)
        end
        local count = 0
        if (self:IsNewCard(card)) then count = 1 end
        ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(self._petCardRedDotMap[cfgId], count)
    end
end

---@param self CardModule
---@param cfgId number 卡牌配置ID
function CardModule:CreatePetCardRedDotData(cfgId)
    local un = "pet_card_" .. cfgId
    self._petCardRedDotMap[cfgId] = ModuleRefer.NotificationModule:GetOrCreateDynamicNode(un, PET_CARD_NOTIFICATION_TYPE)
end

--- 获取伙伴卡牌列表红点数据
---@param self CardModule
---@return CS.NotificationDynamicNode
function CardModule:GetPetCardListRedDotData()
    return self._petCardListRedDot
end

--- 通过配置ID获取伙伴卡牌红点数据
---@param self CardModule
---@param cfgId number 配置ID
---@return CS.NotificationDynamicNode
function CardModule:GetPetCardRedDotData(cfgId)
    return self._petCardRedDotMap[cfgId]
end

---@param self CardModule
---@return table<number, wds.CardInfo>
function CardModule:GetCardIdMap()
    return self._cardServerIdMap
end

---@param self CardModule
---@return table<number, wds.CardInfo>
function CardModule:GetCardCfgIdMap()
    return self._cardCfgIdMap
end

--- 通过配置ID获取卡牌信息
---@param self CardModule
---@param cfgId number 配置ID
---@return wds.CardInfo
function CardModule:GetCardByCfgId(cfgId)
    return self._cardCfgIdMap[cfgId]
end

--- 通过服务器ID获取卡牌信息
---@param self CardModule
---@param serverId number 服务器ID
---@return wds.CardInfo
function CardModule:GetCardByServerId(serverId)
    return self._cardServerIdMap[serverId]
end

--- 判断卡牌是否为新卡
---@param self CardModule
---@param card wds.CardInfo
---@return boolean
function CardModule:IsNewCard(card)
    return card and ((card.RedDotMask & RED_DOT_MASK_NEW_CARD_CLEAR) == 0)
end

--- 通过配置ID判断是否为新卡
---@param self CardModule
---@param cfgId number 配置ID
---@return boolean
function CardModule:IsNewCardByCfgId(cfgId)
    return self:IsNewCard(self:GetCardByCfgId(cfgId))
end

---@param self CardModule
---@param serverId number 服务器ID
---@return boolean
function CardModule:IsNewCardByServerId(serverId)
    return self:IsNewCard(self:GetCardByServerId(serverId))
end

---@param self CardModule
---@param card wds.CardInfo
---@param isNew boolean 是否为新卡
---@param localUpdate boolean 本地更新数据
---@return boolean 是否更新
function CardModule:SetIsNewCard(card, isNew, localUpdate)
    local newMask
    if (isNew) then
        newMask = card.RedDotMask & RED_DOT_MASK_NEW_CARD_SET
    else
        newMask = card.RedDotMask | RED_DOT_MASK_NEW_CARD_CLEAR
    end

    -- 无需更新
    if (newMask == card.RedDotMask) then return false end

    -- 发送协议
    local msg = require("SyncRedDotParameter").new()
    msg.args.Typo = RED_DOT_SYSTEM_TYPE
    msg.args.Id = card.CfgId
    msg.args.RedDotMask = newMask
    msg:Send()

    -- 本地更新
    if (localUpdate) then
        card.RedDotMask = newMask
        if (self._petCardCfgIdMap[card.CfgId]) then
            if (isNew) then
                if (not self._petCardRedDotMap[card.CfgId]) then
                    self:CreatePetCardRedDotData(card.CfgId)
                    ModuleRefer.NotificationModule:AddToParent(self._petCardRedDotMap[card.CfgId], self._petCardListRedDot)
                end
                ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(self._petCardRedDotMap[card.CfgId], 1)
            else
                if (self._petCardRedDotMap[card.CfgId]) then
                    ModuleRefer.NotificationModule:SetDynamicNodeNotificationCount(self._petCardRedDotMap[card.CfgId], 0)
                end
            end
        end
    end

    return true
end

--- 通过配置ID设置是否为新卡
---@param self CardModule
---@param cfgId number 配置ID
---@param isNew boolean 是否为新卡
---@param localUpdate boolean 本地更新数据
---@return boolean 是否更新
function CardModule:SetIsNewCardByCfgId(cfgId, isNew, localUpdate)
    return self:SetIsNewCard(self:GetCardByCfgId(cfgId), isNew, localUpdate)
end

--- 通过服务器ID设置是否为新卡
---@param self CardModule
---@param serverId number 服务器ID
---@param isNew boolean 是否为新卡
---@param localUpdate boolean 本地更新数据
---@return boolean 是否更新
function CardModule:SetIsNewCardByServerId(serverId, isNew, localUpdate)
    return self:SetIsNewCard(self:GetCardByServerId(serverId), isNew, localUpdate)
end

return CardModule
