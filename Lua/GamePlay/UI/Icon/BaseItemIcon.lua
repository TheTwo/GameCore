---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/5/31 15:47
---

--- scene: scene_child_item_standard_s

local BaseUIComponent = require('BaseUIComponent')
local Delegate = require('Delegate')
local UIMediatorNames = require("UIMediatorNames")
local CommonItemDetailsDefine = require("CommonItemDetailsDefine")
local Utils = require("Utils")
local UIHelper = require("UIHelper")
local ColorConsts = require("ColorConsts")
local NumberFormatter = require("NumberFormatter")
local I18N = require("I18N")
local FunctionClass = require("FunctionClass")

---@class ItemIconData
---@field configCell ItemConfigCell
---@field customImage string @customImage和customQuality必须同时赋值
---@field customQuality number @customImage和customQuality必须同时赋值
---@field count number
---@field addCount number
---@field locked boolean @是否锁定 default false
---@field unavailable boolean @是否不可用 default false -- 表现上和locked一样，但是不会显示锁
---@field claimable boolean @是否可领取 default false
---@field received boolean @是否已领取
---@field showCount boolean @是否显示数量 default true
---@field showSelect boolean
---@field useNoneMask boolean @如果显示数量，当数量为0时，是否显示NoneMask default true
---@field customTopStr string|nil @如果不为nil，则textValueQuantityTop改为显示此内容 default nil
---@field countAtTop boolean @如果显示数量，数量是否显示在顶部 default false
---@field showNumPair boolean @是否显示为数量对，如果为是，则数量显示为count/addCount，default false
---@field customData table
---@field onClick fun(item:ItemConfigCell,customData:table)
---@field onDelBtnClick fun(item:ItemConfigCell,customData:table)
---@field hideBtnDelete boolean
---@field showDurability boolean
---@field durability number 耐久度，用0-1的小数表示
---@field countUseBigNumber boolean 大数字Count文本自动缩进制单位 12345678 -> 1.2M
---@field showTextNum boolean @是否显示一个特殊的多语言文本
---@field customTextNum string @自定义的多语言文本
---@field showRecommend boolean @是否显示推荐标签
---@field isEggCrack boolean @是否显示蛋破裂特效

---@class BaseItemIcon : BaseUIComponent
---@field itemData ItemConfigCell
---@field count number
---@field addCount number
---@field locked boolean @是否锁定 default false
---@field showCount boolean @是否显示数量 default true
---@field useNoneMask boolean @如果显示数量，当数量为0时，是否显示NoneMask default true
---@field customTopStr string|nil @如果不为nil，则textValueQuantityTop改为显示此内容
---@field countAtTop boolean @如果显示数量，数量是否显示在顶部 default false
---@field showNumPair boolean @是否显示为数量对，如果为是，则数量显示为count/addCount，default false
---@field isPlayAnim boolean @是否需要播放动画
---@field customData table
---@field onClick fun(item:ItemConfigCell,customData:table)
---@field onDelBtnClick fun(item:ItemConfigCell,customData:table)
---@field countUseBigNumber boolean
local BaseItemIcon = class('BaseItemIcon', BaseUIComponent)

local TopTextShowReason = {
    SpeedUpItem = 1,
    FoodItem = 2,
}

function BaseItemIcon:ctor()
end

function BaseItemIcon:OnCreate(param)
    --base info
    self.itemBase = self:Button('p_item_base')
    self.goItemInfo = self:GameObject('item_info')
    self:PointerClick("p_item_base", Delegate.GetOrCreate(self, self.OnClick))
    ---@type CS.Empty4Raycast
    self.itemBaseEmpty4Raycast = self:BindComponent('p_item_base', typeof(CS.Empty4Raycast))
    self.imgItemFrame = self:Image('p_item_frame')
    self.imgItemFrameGlow01 = self:Image('p_item_frame_glow01')
    self.imgItemFrameGlow02 = self:Image('p_item_frame_glow02')
    self.imgItemIcon = self:Image('p_item_icon')
    self.imgItemIconGlow1 = self:Image('p_item_icon_glow1')
    self.imgItemIconGlow2 = self:Image('p_item_icon_glow2')
    self.imgItemIconGlow3 = self:Image('p_item_icon_glow3')
    self.imgItemSelect = self:GameObject('p_img_select')
    self.imgReceived = self:Image("p_img_received")

    --claimable vx
    self.goVxClaimable = self:GameObject('vfx_btn_shuangguang_01')
    self.imgVxItemIcon = self:Image('p_item_icon_2')

    --lock
    self.noneMask = self:GameObject('p_img_none')
    self.imgLock = self:Image('p_icon_lock')

    --bottom quantity
    self.goItemQuantity = self:GameObject('p_item_quantity')
    self.txtValueQuantity = self:Text('p_value_quantity')

    --top quantity
    self.goItemQuantityTop = self:GameObject('p_item_quantity_top')
    self.textValueQuantityTop = self:Text('p_value_quantity_top')

    --right Count
    self.goLvRight = self:GameObject("p_lv_right")
    self.textLvRight = self:Text("p_text_lv")

    --suit
    self.goSuit = self:GameObject("p_suit")
    self.imgIconSuit = self:Image("p_icon_suit")
    self.goIconGearProtect = self:GameObject("p_icon_gearprotect")

    --add components
    self.goBaseAdd = self:GameObject('p_base_add')
    self.goItemAdd = self:GameObject('p_item_add')
    self.goBaseQualityAdd = self:GameObject('base_text_quantity')
    self.textQuantityAdd = self:Text('p_text_quantity')
    self.btnDelete = self:Button('p_btn_delete', Delegate.GetOrCreate(self, self.OnBtnDeleteClicked))

    self.goRecomment = self:GameObject('p_recomment')

    --durability
    self.goGroupDurability = self:GameObject("p_group_durability")
    self.textDurability = self:Text("p_text_durability")

    ---@type CS.FpAnimation.FpAnimationCommonTrigger
    self.animTrigger = self:BindComponent("p_vx_anim_tregger", typeof(CS.FpAnimation.FpAnimationCommonTrigger))

    --item text
    self.goItemTxt = self:GameObject("p_group_text_top")
    self.txtNum = self:Text("p_text_num")
    self.imgBlood = self:Image("p_icon_top")

    --egg special
    self._p_img_crack = self:GameObject("p_img_crack")
end

---OnFeedData
---@param data ItemIconData
function BaseItemIcon:OnFeedData(data)
    self.itemData = data.configCell
    self.customImage = data.customImage
    self.customQuality = data.customQuality
    self.count  = data.count or 0
    self.addCount  = data.addCount or 0
    self.locked  = data.locked or false
    self.gearProtect = data.gearProtect or false
    if data.showCount == false then
        self.showCount = false
    else
        self.showCount = true
    end
    self.useNoneMask = data.useNoneMask or false
    self.claimable = data.claimable or false
    self.received = data.received
    self.unavaliable = data.unavailable or false
    self.countAtTop  = data.countAtTop or false
    self.customTopStr = data.customTopStr
    self.showNumPair = data.showNumPair or false
    self.showPairBlank = data.showPairBlank or false
    self.showRightCount = data.showRightCount or false
    self.onClick = data.onClick
    self.onDelBtnClick = data.onDelBtnClick
    self.showDelBtn = data.showDelBtn or false
    self.customData = data.customData
    self.showTips = data.showTips or false
    if data.showRecommend ~= nil then
        self.showRecommend = data.showRecommend
    else
        self.showRecommend = true
    end
    self.setTipsPos = data.setTipsPos or false
    self.showSelect = data.showSelect or false
    self.isPlayAnim = data.isPlayAnim or false
    self.hideBtnDelete = data.hideBtnDelete or false
    self.showDurability = data.showDurability or false
    self.durability = data.durability or 0
    self.countUseBigNumber = data.countUseBigNumber or false
    --- 默认使用道具配置中的数据显示
    self.showTextNum = data.showTextNum
    if data.showTextNum == nil then
        if data.configCell ~= nil and not string.IsNullOrEmpty(data.configCell:MiddleI18N()) then
            self.showTextNum = true
            self.showTextReason = TopTextShowReason.SpeedUpItem
        elseif data.configCell ~= nil and data.configCell:FunctionClass() == FunctionClass.AddFood then
            self.showTextNum = true
            self.showTextReason = TopTextShowReason.FoodItem
        end
    end
    self.customTextNum = data.customTextNum
    self.isEggCrack = data.isEggCrack

    self.itemBase.gameObject:SetActive(true) -- 临时处理自选礼包处的异常
    self.goItemInfo:SetActive(true)
    self:CheckIsRecomment()
    self:UpdateIcon()
end

function BaseItemIcon:CheckIsRecomment()
    self.goRecomment:SetActive(self.itemData and self.itemData:Recommend() and self.showRecommend)
end

function BaseItemIcon:OnClose(param)
    --重载方法
    self.onClick = nil
    self.onDelBtnClick = nil
end

function BaseItemIcon:OnClick()
    if self.onClick then
        self.onClick(self.itemData, self.customData, self.itemBase)
    else
        self:ShowTips()
    end
end

function BaseItemIcon:ShowTips()
    if not self.itemData then
        return
    end
    
    local param = {
        itemId = self.itemData:Id(),
        itemType = CommonItemDetailsDefine.ITEM_TYPE.ITEM,
    }

    --不确定是不是所有的 tips 都应该以这个基类的transform为准
    if self.setTipsPos then
        param.clickTransform = self.itemBase.transform
    end
    self.tipsRuntimeId = g_Game.UIManager:Open(UIMediatorNames.PopupItemDetailsUIMediator, param)
end

function BaseItemIcon:OnBtnDeleteClicked()
    if self.onDelBtnClick and self.itemData then
        self.onDelBtnClick(self.itemData,self.customData)
    end
end


function BaseItemIcon:Reset(resetIcon)
    if resetIcon then
        self:ChangeIcon("sp_icon_missing")
        self:ChangeItemFrame(BaseItemIcon.GetFrameImageNameByQuality(0))
    end
    --lock
    self.noneMask:SetVisible(false)
    self.imgLock:SetVisible(false)
    --quantity
    self.goItemQuantity:SetVisible(false)
    self.goItemQuantityTop:SetVisible(false)
    if self.goLvRight then
        self.goLvRight:SetActive(false)
    end
    if self.goSuit then
        self.goSuit:SetActive(false)
    end

    self.goBaseAdd:SetVisible(false)
    self.goItemAdd:SetVisible(false)

    if (self.imgReceived) then
        self.imgReceived.gameObject:SetActive(self.received == true)
    end

    if self.goIconGearProtect then
        self.goIconGearProtect:SetVisible(false)
    end

    if self.goGroupDurability then
        self.goGroupDurability:SetVisible(false)
    end

    if self.goItemTxt then
        self.goItemTxt:SetActive(false)
    end

    self:ChangeSelectStatus(false)
end

function BaseItemIcon:GetIcon()
    if not string.IsNullOrEmpty(self.customImage) then
        return self.customImage
    elseif self.itemData then
        return UIHelper.GetFitItemIcon(self.imgItemIcon, self.itemData)
    else
        return nil
    end
end

function BaseItemIcon:GetQuality()
    if self.customQuality then
        return self.customQuality
    elseif self.itemData then
        return self.itemData:Quality()
    else
        return nil
    end
end

function BaseItemIcon:UpdateIcon()
    local icon = self:GetIcon()
    local quality = self:GetQuality()
    if icon == nil or quality == nil then
        self:Reset(true)
        return
    end

    self:Reset()
    self:ChangeIcon(icon)
    self:ChangeItemFrame(BaseItemIcon.GetFrameImageNameByQuality(quality))

    local showCountTop = (self.showCount and self.countAtTop) or self.customTopStr ~= nil
    self.goItemQuantityTop:SetVisible(showCountTop)
    if showCountTop then
        if self.showCount and self.countAtTop then
            if self.showNumPair then
                self.textValueQuantityTop.text = string.format('%s/%s',self:ProcessBigNumber(self.count),self:ProcessBigNumber(self.addCount))
            else
                self.textValueQuantityTop.text = tostring(self:ProcessBigNumber(self.count))
            end
        elseif self.customTopStr then
            self.textValueQuantityTop.text = tostring(self.customTopStr)
        end
    end

    local showCountBottom = (self.showCount and not self.countAtTop)
    self.goItemQuantity:SetVisible(showCountBottom)
    if showCountBottom then
        --添加碎片道具自动显示逻辑
        local isPieceItem = false
        local needPieceNum = self.itemData:NeedPieceNum()
        if needPieceNum > 0 then
            isPieceItem = true
            if self.count < needPieceNum then
                self.txtValueQuantity.text = string.format('<color=%s>%s</color>/%s', ColorConsts.army_red, self:ProcessBigNumber(self.count), self:ProcessBigNumber(needPieceNum))
            else
                if self.showPairBlank then
                    self.txtValueQuantity.text = string.format('%s/%s', self:ProcessBigNumber(self.count), self:ProcessBigNumber(self.addCount))
                else
                    self.txtValueQuantity.text = string.format('<color=%s>%s</color>/%s', ColorConsts.army_green, self:ProcessBigNumber(self.count), self:ProcessBigNumber(needPieceNum))
                end
            end
            if self.useNoneMask then
                self.noneMask:SetVisible(true)
            end
        else
            if self.showNumPair then
                if self.count < self.addCount then
                    self.txtValueQuantity.text = string.format('<color=%s>%s</color>/%s', ColorConsts.army_red, self:ProcessBigNumber(self.count), self:ProcessBigNumber(self.addCount))
                else
                    if self.showPairBlank then
                        self.txtValueQuantity.text = string.format('%s/%s', self:ProcessBigNumber(self.count), self:ProcessBigNumber(self.addCount))
                    else
                        self.txtValueQuantity.text = string.format('<color=%s>%s</color>/%s', ColorConsts.army_green, self:ProcessBigNumber(self.count), self:ProcessBigNumber(self.addCount))
                    end
                end
            else
                self.txtValueQuantity.text = "x" .. tostring(self:ProcessBigNumber(self.count))
            end
            if self.count < 1 then
                if self.useNoneMask then
                    self.noneMask:SetVisible(true)
                elseif not self.showNumPair then
                    self.txtValueQuantity.text = string.format('<color=#FF5A36>%s</color>', "x" .. self:ProcessBigNumber(self.count))
                end
            end
        end
    end

    if self.showRightCount then
        if self.goLvRight then
            self.textLvRight.text = "+" .. tostring(self:ProcessBigNumber(self.count))
            self.goLvRight:SetActive(true)
        end
    else
        if self.goLvRight then
            self.goLvRight:SetActive(false)
        end
    end

    if self.locked then
        self.noneMask:SetVisible(true)
        self.imgLock:SetVisible(true)
    end

    if self.unavaliable then
        self.noneMask:SetVisible(true)
        self.imgLock:SetVisible(false)
    end

    if self.gearProtect then
        self.goIconGearProtect:SetVisible(true)
    end

    self.goBaseQualityAdd:SetVisible(not self.showNumPair and self.addCount > 0)
    if not self.showNumPair and self.addCount > 0 then
        self.goBaseAdd:SetVisible(true)
        self.goItemAdd:SetVisible(true)
        self.textQuantityAdd.text = tostring(self:ProcessBigNumber(self.addCount))
    end

    if self.showDelBtn then
        self.goItemAdd:SetVisible(true)
    end

    if self.hideBtnDelete then
        self.btnDelete:SetVisible(false)
    end

    if (self.imgReceived) then
        self.imgReceived.gameObject:SetActive(self.received == true)
    end

    if self.isPlayAnim then
        self:PlayGetAnim()
    end

    if self.showDurability then
        self.goGroupDurability:SetVisible(true)
        self.textDurability.text = math.round(self.durability * 100) .. "%"
    end

    if self.showTextNum then
        self.goItemTxt:SetActive(true)
        if self.customTextNum then
            self.txtNum.text = self.customTextNum
        elseif self.showTextReason == TopTextShowReason.SpeedUpItem then
            self.txtNum.text = I18N.Get(self.itemData:MiddleI18N())
        elseif self.showTextReason == TopTextShowReason.FoodItem then
            self.txtNum.text = I18N.Get(self.itemData:UseParam(1))
        end
    end
	
	if self.imgBlood then
		self.imgBlood:SetVisible(self.showTextNum and self.showTextReason == TopTextShowReason.FoodItem)
	end
	
    -- self.imgBlood:SetVisible(self.showTextNum and self.showTextReason == TopTextShowReason.FoodItem)

    if Utils.IsNotNull(self.animTrigger) then
        if self.imgVxItemIcon then
            self.imgVxItemIcon.gameObject:SetActive(self.claimable)
        end
        if self.claimable then
            if Utils.IsNotNull(self.goVxClaimable) then
                self.goVxClaimable:SetActive(true)
            end
            self.animTrigger:PlayAll(CS.FpAnimation.CommonTriggerType.Custom2)
        else
            self.animTrigger:FinishAll(CS.FpAnimation.CommonTriggerType.Custom2)
            if Utils.IsNotNull(self.goVxClaimable) then
                self.goVxClaimable:SetActive(false)
            end
        end
    end

    if Utils.IsNotNull(self._p_img_crack) then
        self._p_img_crack:SetActive(self.isEggCrack == true)
    end

    self:ChangeSelectStatus(self.showSelect)
end

function BaseItemIcon:ChangeSelectStatus(isSelected)
    if Utils.IsNotNull(self.imgItemSelect) then
        self.imgItemSelect:SetVisible(isSelected)
    end
end

function BaseItemIcon:ChangeSuitIcon(icon)
    if self.goSuit then
        self.goSuit:SetActive(true)
        self:LoadSprite(icon, self.imgIconSuit1)
    end
end

function BaseItemIcon:ChangeQuality(level)
    self:ChangeItemFrame(BaseItemIcon.GetFrameImageNameByQuality(level))
end

function BaseItemIcon:ChangeIcon(icon)
    g_Game.SpriteManager:LoadSprite(icon, self.imgItemIcon)
    g_Game.SpriteManager:LoadSprite(icon, self.imgVxItemIcon)
    self.itemIconName = icon
end

function BaseItemIcon:ChangeItemFrame(iconName)
    g_Game.SpriteManager:LoadSprite(iconName, self.imgItemFrame)
    self.framIconName = iconName
end

function BaseItemIcon:PlayGetAnim()
    if self.itemIconName then
        g_Game.SpriteManager:LoadSprite(self.itemIconName, self.imgItemIconGlow1)
        g_Game.SpriteManager:LoadSprite(self.itemIconName, self.imgItemIconGlow2)
        g_Game.SpriteManager:LoadSprite(self.itemIconName, self.imgItemIconGlow3)
    end
    if self.framIconName then
        g_Game.SpriteManager:LoadSprite(self.framIconName, self.imgItemFrameGlow01)
        g_Game.SpriteManager:LoadSprite(self.framIconName, self.imgItemFrameGlow02)
    end
    self.animTrigger:PlayAll(CS.FpAnimation.CommonTriggerType.Custom1)
end

function BaseItemIcon:SetIconBtnRayCastTarget(on)
    if Utils.IsNotNull(self.itemBaseEmpty4Raycast) then
        self.itemBaseEmpty4Raycast.raycastTarget = on
    end
end

function BaseItemIcon:SetGray(isGray)
    if Utils.IsNotNull(self.imgItemIcon) then
        UIHelper.SetGray(self.imgItemIcon.gameObject, isGray)
    end
end

function BaseItemIcon:SetColor(color)
    if self.showNumPair then
        self.txtValueQuantity.text = string.format('<color=%s>%s</color>/%s', color, self:ProcessBigNumber(self.count), self:ProcessBigNumber(self.addCount))
    else
        self.txtValueQuantity.text = UIHelper.GetColoredText("x" .. self:ProcessBigNumber(self.count), color)
    end
end

function BaseItemIcon:ChangeDelBtnState(state)
    self.goItemAdd:SetVisible(state)
end

function BaseItemIcon:ProcessBigNumber(count)
    if not count or type(count) ~= 'number' or not self.countUseBigNumber then
        return count
    end
    return NumberFormatter.NumberAbbr(count, true)
end

function BaseItemIcon:RefreshMaskState(state)
    self.noneMask.gameObject:SetActive(state)
end

function BaseItemIcon:RefreshLockState(state)
    self.goIconGearProtect:SetVisible(state)
end

function BaseItemIcon.GetFrameImageNameByQuality(quality, circle)
    if circle then
        return 'sp_item_frame_circle_'..tostring(quality)
    end
    return 'sp_item_frame_'..tostring(quality)
end

function BaseItemIcon:ClearSprite()
    local spMgr = g_Game.SpriteManager
    spMgr:SetNullSprite(self.imgItemIcon)
    spMgr:SetNullSprite(self.imgVxItemIcon)
    spMgr:SetNullSprite(self.imgIconSuit1)
    spMgr:SetNullSprite(self.imgItemFrame)
    spMgr:SetNullSprite(self.imgItemIconGlow1)
    spMgr:SetNullSprite(self.imgItemIconGlow2)
    spMgr:SetNullSprite(self.imgItemIconGlow3)
    spMgr:SetNullSprite(self.imgItemFrameGlow01)
    spMgr:SetNullSprite(self.imgItemFrameGlow02)
end

return BaseItemIcon

