---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xh.
--- DateTime: 2022/9/19 15:43
---

local GUILayout = require("GUILayout")
local GMPage = require("GMPage")
local ModuleRefer = require("ModuleRefer")
local RuntimeDebugSettings = require('RuntimeDebugSettings')
local EventConst = require('EventConst')

local Shader = CS.UnityEngine.Shader

---@class GMPageOpt:GMPage
local GMPageOpt = class("GMPageOpt", GMPage)

function GMPageOpt:ctor()
    self._scrollPos = CS.UnityEngine.Vector2.zero
end

function GMPageOpt:OnGUI()
    self._scrollPos = GUILayout.BeginScrollView(self._scrollPos)

    self:DrawPerformanceControl()
    self:DrawFeatureSwitches()

    GUILayout.EndScrollView()

end

function GMPageOpt:DrawPerformanceControl()
    GUILayout.BeginHorizontal()
    GUILayout.Label("Performance")
    GUILayout.EndHorizontal()

	GUILayout.BeginHorizontal()
		self.IsLowMemoryDevice = GUILayout.Toggle(RuntimeDebugSettings:IsLowMemoryDevice(),'IsLowMemoryDevice')
	
		if self.IsLowMemoryDevice ~= (RuntimeDebugSettings:IsLowMemoryDevice()) then
			RuntimeDebugSettings:SetLowMemoryDevice(self.IsLowMemoryDevice)
			g_Game:RestartGame()
		end

	if GUILayout.Button("Reset") then
		RuntimeDebugSettings:ResetLowMemoryDevice()
		g_Game:RestartGame()
	end
	GUILayout.EndHorizontal()

    GUILayout.BeginHorizontal()
    local deviceLevel = g_Game.PerformanceLevelManager:GetDeviceLevel()
    GUILayout.Label(string.format("Current Level: %s", tostring(deviceLevel)))
    GUILayout.EndHorizontal()
    
    GUILayout.BeginHorizontal()
    if GUILayout.Button("High") then
        self:SetDeviceLevel(101)
    end
    if GUILayout.Button("Medium") then
        self:SetDeviceLevel(102)
    end
    if GUILayout.Button("Low") then
        self:SetDeviceLevel(103)
    end
    GUILayout.EndHorizontal()

    GUILayout.BeginHorizontal()
    GUILayout.Label("FpsMode:")
    GUILayout.EndHorizontal()

    GUILayout.BeginHorizontal()
    if GUILayout.Button("60fps") then
        self:SetFpsMode(RuntimeDebugSettings.FPS_MODE_60)
    end
    if GUILayout.Button("30fps") then
        self:SetFpsMode(RuntimeDebugSettings.FPS_MODE_30)
    end
    if GUILayout.Button("30~60fps") then
        self:SetFpsMode(RuntimeDebugSettings.FPS_MODE_dynamic)
    end
    if GUILayout.Button("fps_off") then
        self:SetFpsMode(RuntimeDebugSettings.FPS_MODE_off)
    end
    GUILayout.EndHorizontal()

    GUILayout.BeginHorizontal()
    if GUILayout.Button("Trigger Low Memory") then
        g_Game.EventManager:TriggerEvent(EventConst.ON_LOW_MEMORY)
		g_Game:OnLowMemory()
    end
    GUILayout.EndHorizontal()

end

function GMPageOpt:SetFpsMode(fps_mode)
    RuntimeDebugSettings:SetInt('fps_mode', fps_mode)
    g_Game:RestartGame()
end

function GMPageOpt:SetDeviceLevel(level)
    RuntimeDebugSettings:SetDeviceLevel(level)
    g_Game:RestartGame()
end

function GMPageOpt:DrawFeatureSwitches()
    GUILayout.BeginHorizontal()
    GUILayout.Label("Feature Switches")
    GUILayout.EndHorizontal()
    
    GUILayout.BeginHorizontal()
    if GUILayout.Button("打开高度雾") then
        local city = ModuleRefer.CityModule.myCity
        if city then
            city:SwitchFog(true)
        end
    end

    if GUILayout.Button("关闭高度雾") then
        local city = ModuleRefer.CityModule.myCity
        if city then
            city:SwitchFog(false)
        end
    end
    GUILayout.EndHorizontal()

    GUILayout.BeginHorizontal()
    if GUILayout.Button("打开cityroot阴影") then
        local city = ModuleRefer.CityModule.myCity
        local renderers = city.CityRoot:GetComponentsInChildren(typeof(CS.UnityEngine.MeshRenderer))
        for i = 0, renderers.Length - 1 do
            renderers[i].shadowCastingMode = CS.UnityEngine.Rendering.ShadowCastingMode.On
        end
    end
    if GUILayout.Button("关闭cityroot阴影") then
        local city = ModuleRefer.CityModule.myCity
        local renderers = city.CityRoot:GetComponentsInChildren(typeof(CS.UnityEngine.MeshRenderer))
        for i = 0, renderers.Length - 1 do
            renderers[i].shadowCastingMode = CS.UnityEngine.Rendering.ShadowCastingMode.Off
        end
    end
    GUILayout.EndHorizontal()

    GUILayout.BeginHorizontal()
    if GUILayout.Button("简化shader") then
        local city = ModuleRefer.CityModule.myCity
        local renderers = city.CityRoot:GetComponentsInChildren(typeof(CS.UnityEngine.MeshRenderer))
        for i = 0, renderers.Length - 1 do
            if self.urpShader == nil then
                self.urpShader = renderers[i].material.shader
            end
            local mats = renderers[i].materials
            for j = 0, mats.Length - 1 do
                mats[j].shader = Shader.Find("Unlit/TestSimpleShader")
            end
        end
    end
    if GUILayout.Button("还原shader") then
        local city = ModuleRefer.CityModule.myCity
        local renderers = city.CityRoot:GetComponentsInChildren(typeof(CS.UnityEngine.MeshRenderer))
        for i = 0, renderers.Length - 1 do
            local mats = renderers[i].materials
            for j = 0, mats.Length - 1 do
                mats[j].shader = self.urpShader
            end
        end
    end
    GUILayout.EndHorizontal()

    GUILayout.BeginHorizontal()
    if GUILayout.Button('打开场景GPUProfiler') then
        local mainGo = CS.UnityEngine.GameObject.Find('p_main_camera')
        local profiler = mainGo:GetComponentInChildren(typeof(CS.RenderExtension.GPUProfile), true)
        profiler:SetVisible(true)
    end
    if GUILayout.Button('关闭场景GPUProfiler') then
        local mainGo = CS.UnityEngine.GameObject.Find('p_main_camera')
        local profiler = mainGo:GetComponentInChildren(typeof(CS.RenderExtension.GPUProfile), true)
        profiler:SetVisible(false)
    end
    GUILayout.EndHorizontal()

    GUILayout.BeginHorizontal()
    if GUILayout.Button('打开UI3D GPUProfiler') then
        local mainGo = CS.UnityEngine.GameObject.Find('camera_3d_ui')
        local profiler = mainGo:GetComponentInChildren(typeof(CS.RenderExtension.GPUProfile), true)
        profiler:SetVisible(true)
    end
    if GUILayout.Button('关闭UI3D GPUProfiler') then
        local mainGo = CS.UnityEngine.GameObject.Find('camera_3d_ui')
        local profiler = mainGo:GetComponentInChildren(typeof(CS.RenderExtension.GPUProfile), true)
        profiler:SetVisible(false)
    end
    GUILayout.EndHorizontal()

    if GUILayout.Button("Full GC") then
        local Utils = require("Utils")
        Utils.FullGC()
    end

    if GUILayout.Button("Memory Snapshot") then
        local path = CS.System.IO.Path.Combine(CS.UnityEngine.Application.persistentDataPath, "LuaMemorySnapshots")
        CS.LuaMemoryProfiler.Utility.CaptureSnapshot(path)
    end

    GUILayout.BeginHorizontal()
    if GUILayout.Button("ResetLoadedAssetDetails") then
        g_Game.AssetManager:ResetLoadedAssetDetails()
    end

    if GUILayout.Button("DumpLoadedAssetDetails") then
        g_Game.AssetManager:DumpLoadedAssetDetails()
    end
    GUILayout.EndHorizontal()

    GUILayout.BeginHorizontal()
    if GUILayout.Button('打开DOTS Rendering') then
        CS.Grid.MapUtils.EnableDOTSRendering(true)
    end
    if GUILayout.Button('关闭DOTS Rendering') then
        CS.Grid.MapUtils.EnableDOTSRendering(false)
    end
    GUILayout.EndHorizontal()

    if RuntimeDebugSettings:GetCloudScreenFaseMode() then
        if GUILayout.Button('关闭CloudScreen 速切模式')  then
            RuntimeDebugSettings:SetCloudScreenFaseMode(false)
        end
    else
        if GUILayout.Button('启用CloudScreen 速切模式') then
            RuntimeDebugSettings:SetCloudScreenFaseMode(true)
        end
    end

    if GUILayout.Button("打印DOTS状态信息") then
        local entityCount = CS.Grid.MapUtils.GetEntityTotalCount()
        g_Logger.Error(string.format("当前Entity总数: %d", entityCount))

        local localToWorldCount = CS.Grid.MapUtils.GetActiveLocalToWorldCount()
        g_Logger.Error(string.format("当前活跃的LocalToWorld总数: %d", localToWorldCount))
    end

    if GUILayout.Button("创建1亿个Entity") then
        CS.DragonReborn.SLG.Troop.TroopOptUtils.Create100MillionEntities()
    end

	if GUILayout.Button("开启 lua hook") then
		debug.sethook(function(event, line)
			local info = debug.getinfo(2)
			if info then
				g_Logger.Error("event: %s, source: %s, line: %d", event, info.short_src,  info.currentline)
			end
		end, "cr")
	end

	if GUILayout.Button("关闭 lua hook") then
		debug.sethook()
	end
end

return GMPageOpt
