---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by BE.Tenner.
--- DateTime: 2021/7/15 14:40
---
--- 单位数据

local SEUnitComponent = require("SEUnitComponent")
local SEUnitComponentType = require("SEUnitComponentType")
local ArtResourceUtils = require("ArtResourceUtils")
local SELogger = require("SELogger")

local PERFORMANCE_LEVEL_LOW_THRESHOLD = CS.DragonReborn.Performance.DeviceLevel.High:GetHashCode()

---@class SEUnitData:SEUnitComponent
---@field new fun(entity:wds.Puppet|wds.SePet|wds.Monster|wds.Hero, config:SeNpcConfigCell):SEUnitData
local SEUnitData = class("SEUnitData",  SEUnitComponent);

---@param self SEUnitData
---@param entity wds.Puppet|wds.SePet|wds.Monster|wds.Hero
---@param config SeNpcConfigCell
---@return void
function SEUnitData:ctor(entity, config)
    SEUnitData.super.ctor(self, SEUnitComponentType.Data, nil)
    self.m_Entity = entity
    self.m_config = config
    self.m_damageIntervalData = {
        lastDamageTime = 0,
        totalOffset = 0,
    }
    self.m_healingIntervalData = {
        lastDamageTime = 0,
        totalOffset = 0,
    }
    self.m_criticalIntervaldata = {
        lastDamageTime = 0,
        totalOffset = 0,
    }
    self.m_extraScale = 1
end

---@param self SEUnitData
---@param healing boolean
---@param critical boolean
---@return table
function SEUnitData:GetDamageIntervalData(healing, critical)
    if (healing) then
        return self.m_healingIntervalData
    else
        if (critical) then
            return self.m_criticalIntervaldata
        else
            return self.m_damageIntervalData
        end
    end
end

---@param self SEUnitData
---@return UnityEngine.Vector3
function SEUnitData:GetSpawnForward()
    return self:GetEnvironment():ServerDirection2ClientForward(self.m_Entity.MapBasics.Direction)
end

---@param self SEUnitData
---@return void
function SEUnitData:GetEntity()
    return self.m_Entity
end

---@param self SEUnitData
---@return SeNpcConfigCell
function SEUnitData:GetConfig()
    return self.m_config
end

---@param self SEUnitData
---@return UnityEngine.Vector3
function SEUnitData:GetSpawnPos()
    return self:GetEnvironment():ServerPos2Client(
            CS.UnityEngine.Vector3(self.m_Entity.MapBasics.Position.X, self.m_Entity.MapBasics.Position.Y, self.m_Entity.MapBasics.Position.Z)
    )
end

---@param self SEUnitData
---@return UnityEngine.Transform
function SEUnitData:GetMapRoot()
    return self:GetEnvironment():GetMapRoot()
end

---@param self SEUnitData
---@return string
function SEUnitData:GetPrefabPath()
	local model = ArtResourceUtils.GetItem(self.m_config:Model())
	local modelLow = ArtResourceUtils.GetItem(self.m_config:LowerModel())
	local deviceLevel = g_Game.PerformanceLevelManager:GetDeviceLevel():GetHashCode()
	if (modelLow and deviceLevel < PERFORMANCE_LEVEL_LOW_THRESHOLD) then
		SELogger.Trace("单位 %s 配置ID %s 使用低模 %s 因设备等级为 %s 小于阈值 %s", self._unit._id, self.m_config:Id(), modelLow, deviceLevel, PERFORMANCE_LEVEL_LOW_THRESHOLD)
		return modelLow
	end
    return model or ""
end

function SEUnitData:GetExtraScale()
    return self.m_extraScale or 1
end

function SEUnitData:SetExtraScale(scale)
    self.m_extraScale = scale
end

return SEUnitData
