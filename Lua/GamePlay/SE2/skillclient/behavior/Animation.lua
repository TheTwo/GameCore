---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wupei.
--- DateTime: 2021/6/27
---

local Behavior = require("Behavior")
local rapidJson = require("rapidjson")

---@class Animation:Behavior
---@field super Behavior
local Animation = class("Animation", Behavior)

local curSeqId = 0

---@param self Animation
---@param ... any
---@return void
function Animation:ctor(...)
    Animation.super.ctor(self, ...)

    ---@type skillclient.data.Animation
    self._dataAnim = self._data
    self._animStart = false
    curSeqId = curSeqId + 1
    self._seqId = curSeqId
    self._dataSpeedScale = nil
    self._curSpeed = 0
    self._curSpeedIndex = 1
    self._curTime = 0
end

---@param self Animation
---@return skillclient.data.Animation
function Animation:GetDataAnim()
    return self._dataAnim
end

---@param self Animation
---@return void
function Animation:GetSeqId()
    return self._seqId
end

---@param self Animation
---@return void
function Animation:OnStart()
    if not self._skillTarget:IsCtrlValid() then
        return
    end

    -- 对象死亡也播完动画，后端约定
    -- if self._skillTarget:GetCtrl():IsDead() then
    --     return
    -- end

    self._animStart = self._skillTarget:OnAnimationStart(self)
    if self._animStart then
        local speedScale = self._dataAnim.SpeedScale
        if speedScale ~= rapidJson.null then
            self._dataSpeedScale = speedScale
            self._curTime = 0
            self._curSpeed = -1
            self._curSpeedIndex = 1
        end
        self:SetSpeed(1)
    end
end

---@param self Animation
---@return void
function Animation:OnUpdate()
    if self._dataSpeedScale and self._animStart then
        if self._curSpeed > 0 then
            self._curTime = self._curTime + self._skillRunner:GetUnscaledDeltaTime() * self._curSpeed
        end
        for i = self._curSpeedIndex, #self._dataSpeedScale do
            local speedScale = self._dataSpeedScale[i]
            if self._curTime >= speedScale.TimeBegin then
                self:SetSpeed(speedScale.Speed)
                self._curSpeedIndex = self._curSpeedIndex + 1
            else
                break
            end
        end
    end
end

---@param self Animation
---@param speed any
---@return void
function Animation:SetSpeed(speed)
    if self._curSpeed ~= speed then
        if self._curSpeed > 0 then
            self._skillTarget:MultiplyAnimatorSpeed(1/self._curSpeed)
        end
        self._skillTarget:MultiplyAnimatorSpeed(speed)
        if self._dataAnim.OtherElementScale then
            self._skillRunner:SetTimeScale(speed)
        end
        self._curSpeed = speed
    end
end

---@param self Animation
---@param isCancel boolean
---@return void
function Animation:OnEnd(isCancel)
    if self._animStart then
        self:SetSpeed(1)
        self._skillTarget:OnAnimationEnd(self, isCancel)
    end
end

return Animation
