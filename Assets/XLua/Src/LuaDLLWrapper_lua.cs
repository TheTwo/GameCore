//////////////////////////////////////////////////////////////////////////
//
//      UPDATE TIME : 05/19/2023 11:14:24
//      DO NOT EDIT THIS FILE!! THIS IS AUTOMATICALLY GENERATED!!
//
//////////////////////////////////////////////////////////////////////////

#if CHECK_XLUA_API_CALL_ENABLE
using LuaOriginAPI = XLua.LuaDLL.Lua;
using System.Runtime.CompilerServices;

// ReSharper disable All
namespace XLua.LuaDLL
{
	public static partial class LuaDLLWrapper
	{

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_set_gc_callback(XLua.LuaDLL.LuaBeginGCCallback cb1,XLua.LuaDLL.LuaEndGCCallback cb2)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_set_gc_callback(cb1,cb2);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_clear_gc_callback()
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_clear_gc_callback();
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_report_table_size(System.IntPtr L,XLua.LuaDLL.TableSizeReport cb,int fast)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_report_table_size(L,cb,fast);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_report_object_relationship(System.IntPtr L,XLua.LuaDLL.ObjectRelationshipReport cb)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_report_object_relationship(L,cb);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr xlua_registry_pointer(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_registry_pointer(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr xlua_global_pointer(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_global_pointer(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr lua_tothread(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_tothread(L,index);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_get_lib_version()
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_get_lib_version();
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int lua_gc(System.IntPtr L,XLua.LuaGCOptions what,int data)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_gc(L,what,data);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr lua_getupvalue(System.IntPtr L,int funcindex,int n)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_getupvalue(L,funcindex,n);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr lua_setupvalue(System.IntPtr L,int funcindex,int n)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_setupvalue(L,funcindex,n);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int lua_pushthread(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_pushthread(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_isfunction(System.IntPtr L,int stackPos)
		{
			return LuaOriginAPI.lua_isfunction(L,stackPos);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_islightuserdata(System.IntPtr L,int stackPos)
		{
			return LuaOriginAPI.lua_islightuserdata(L,stackPos);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_istable(System.IntPtr L,int stackPos)
		{
			return LuaOriginAPI.lua_istable(L,stackPos);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_isthread(System.IntPtr L,int stackPos)
		{
			return LuaOriginAPI.lua_isthread(L,stackPos);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int luaL_error(System.IntPtr L,string message)
		{
			return LuaOriginAPI.luaL_error(L,message);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int luaL_error_exception(System.IntPtr L,System.Exception e)
		{
			return LuaOriginAPI.luaL_error_exception(L,e);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int lua_setfenv(System.IntPtr L,int stackPos)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_setfenv(L,stackPos);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr luaL_newstate()
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.luaL_newstate();
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_close(System.IntPtr L)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_close(L);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void luaopen_xlua(System.IntPtr L)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.luaopen_xlua(L);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void luaL_openlibs(System.IntPtr L)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.luaL_openlibs(L);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint xlua_objlen(System.IntPtr L,int stackPos)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_objlen(L,stackPos);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_createtable(System.IntPtr L,int narr,int nrec)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_createtable(L,narr,nrec);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_newtable(System.IntPtr L)
		{
			LuaOriginAPI.lua_newtable(L);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_getglobal(System.IntPtr L,string name)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_getglobal(L,name);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_setglobal(System.IntPtr L,string name)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_setglobal(L,name);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_getloaders(System.IntPtr L)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_getloaders(L);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_settop(System.IntPtr L,int newTop)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_settop(L,newTop);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_pop(System.IntPtr L,int amount)
		{
			LuaOriginAPI.lua_pop(L,amount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_insert(System.IntPtr L,int newTop)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_insert(L,newTop);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_remove(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_remove(L,index);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_rotate(System.IntPtr L,int index,int n)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_rotate(L,index,n);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int lua_rawget(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_rawget(L,index);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_rawset(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_rawset(L,index);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int lua_setmetatable(System.IntPtr L,int objIndex)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_setmetatable(L,objIndex);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int lua_getmetatable(System.IntPtr L,int objIndex)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_getmetatable(L,objIndex);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int lua_rawequal(System.IntPtr L,int index1,int index2)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_rawequal(L,index1,index2);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_pushvalue(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_pushvalue(L,index);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_pushcclosure(System.IntPtr L,System.IntPtr fn,int n)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_pushcclosure(L,fn,n);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_replace(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_replace(L,index);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int lua_gettop(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_gettop(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static XLua.LuaTypes lua_type(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_type(L,index);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_isnil(System.IntPtr L,int index)
		{
			return LuaOriginAPI.lua_isnil(L,index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_isnumber(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_isnumber(L,index);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_isboolean(System.IntPtr L,int index)
		{
			return LuaOriginAPI.lua_isboolean(L,index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int luaL_ref(System.IntPtr L,int registryIndex)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.luaL_ref(L,registryIndex);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int luaL_ref(System.IntPtr L)
		{
			return LuaOriginAPI.luaL_ref(L);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_rawgeti(System.IntPtr L,int tableIndex,long index)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_rawgeti(L,tableIndex,index);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_rawseti(System.IntPtr L,int tableIndex,long index)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_rawseti(L,tableIndex,index);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_getref(System.IntPtr L,int reference)
		{
			LuaOriginAPI.lua_getref(L,reference);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int pcall_prepare(System.IntPtr L,int error_func_ref,int func_ref)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.pcall_prepare(L,error_func_ref,func_ref);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void luaL_unref(System.IntPtr L,int registryIndex,int reference)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.luaL_unref(L,registryIndex,reference);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_unref(System.IntPtr L,int reference)
		{
			LuaOriginAPI.lua_unref(L,reference);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_isstring(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_isstring(L,index);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_isinteger(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_isinteger(L,index);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_pushnil(System.IntPtr L)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_pushnil(L);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_pushstdcallcfunction(System.IntPtr L,XLua.LuaDLL.lua_CSFunction function,int n = 0)
		{
			LuaOriginAPI.lua_pushstdcallcfunction(L,function,n);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_upvalueindex(int n)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_upvalueindex(n);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int lua_pcall(System.IntPtr L,int nArgs,int nResults,int errfunc)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_pcall(L,nArgs,nResults,errfunc);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static double lua_tonumber(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_tonumber(L,index);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_tointeger(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_tointeger(L,index);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint xlua_touint(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_touint(L,index);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_toboolean(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_toboolean(L,index);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr lua_topointer(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_topointer(L,index);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr lua_tolstring(System.IntPtr L,int index,out System.IntPtr strLen)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_tolstring(L,index,out strLen);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static string lua_tostring(System.IntPtr L,int index)
		{
			return LuaOriginAPI.lua_tostring(L,index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr lua_atpanic(System.IntPtr L,XLua.LuaDLL.lua_CSFunction panicf)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_atpanic(L,panicf);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_pushnumber(System.IntPtr L,double number)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_pushnumber(L,number);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_pushboolean(System.IntPtr L,bool value)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_pushboolean(L,value);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_pushinteger(System.IntPtr L,int value)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_pushinteger(L,value);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_pushuint(System.IntPtr L,uint value)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_pushuint(L,value);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_pushstring(System.IntPtr L,string str)
		{
			LuaOriginAPI.lua_pushstring(L,str);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_pushlstring(System.IntPtr L,byte[] str,int size)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_pushlstring(L,str,size);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_pushasciistring(System.IntPtr L,string str)
		{
			LuaOriginAPI.xlua_pushasciistring(L,str);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_pushstring(System.IntPtr L,byte[] str)
		{
			LuaOriginAPI.lua_pushstring(L,str);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static byte[] lua_tobytes(System.IntPtr L,int index)
		{
			return LuaOriginAPI.lua_tobytes(L,index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.ReadOnlySpan<byte> xlua_toreadonlyspanbytes(System.IntPtr L,int index)
		{
			return LuaOriginAPI.xlua_toreadonlyspanbytes(L,index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int luaL_newmetatable(System.IntPtr L,string meta)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.luaL_newmetatable(L,meta);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_pgettable(System.IntPtr L,int idx)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pgettable(L,idx);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_psettable(System.IntPtr L,int idx)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_psettable(L,idx);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void luaL_getmetatable(System.IntPtr L,string meta)
		{
			LuaOriginAPI.luaL_getmetatable(L,meta);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xluaL_loadbuffer(System.IntPtr L,byte[] buff,int size,string name)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xluaL_loadbuffer(L,buff,size,name);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int luaL_loadbuffer(System.IntPtr L,string buff,string name)
		{
			return LuaOriginAPI.luaL_loadbuffer(L,buff,name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_tocsobj_safe(System.IntPtr L,int obj)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_tocsobj_safe(L,obj);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_tocsobj_fast(System.IntPtr L,int obj)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_tocsobj_fast(L,obj);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int lua_error(System.IntPtr L)
		{
			return LuaOriginAPI.lua_error(L);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_checkstack(System.IntPtr L,int extra)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_checkstack(L,extra);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int lua_next(System.IntPtr L,int index)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_next(L,index);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_pushlightuserdata(System.IntPtr L,System.IntPtr udata)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_pushlightuserdata(L,udata);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr xlua_tag()
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_tag();
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void luaL_where(System.IntPtr L,int level)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.luaL_where(L,level);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_tryget_cachedud(System.IntPtr L,int key,int cache_ref)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_tryget_cachedud(L,key,cache_ref);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_pushcsobj(System.IntPtr L,int key,int meta_ref,bool need_cache,int cache_ref)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_pushcsobj(L,key,meta_ref,need_cache,cache_ref);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int gen_obj_indexer(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.gen_obj_indexer(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int gen_obj_newindexer(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.gen_obj_newindexer(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int gen_cls_indexer(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.gen_cls_indexer(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int gen_cls_newindexer(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.gen_cls_newindexer(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int get_error_func_ref(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.get_error_func_ref(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int load_error_func(System.IntPtr L,int Ref)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.load_error_func(L,Ref);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int luaopen_i64lib(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.luaopen_i64lib(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int luaopen_socket_core(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.luaopen_socket_core(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_pushint64(System.IntPtr L,long n)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_pushint64(L,n);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_pushuint64(System.IntPtr L,ulong n)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_pushuint64(L,n);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_isint64(System.IntPtr L,int idx)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_isint64(L,idx);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool lua_isuint64(System.IntPtr L,int idx)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_isuint64(L,idx);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static long lua_toint64(System.IntPtr L,int idx)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_toint64(L,idx);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static ulong lua_touint64(System.IntPtr L,int idx)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_touint64(L,idx);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_push_csharp_function(System.IntPtr L,System.IntPtr fn,int n)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_push_csharp_function(L,fn,n);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_csharp_str_error(System.IntPtr L,string message)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_csharp_str_error(L,message);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_csharp_error(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_csharp_error(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_pack_int8_t(System.IntPtr buff,int offset,byte field)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pack_int8_t(buff,offset,field);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_unpack_int8_t(System.IntPtr buff,int offset,out byte field)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_unpack_int8_t(buff,offset,out field);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_pack_int16_t(System.IntPtr buff,int offset,short field)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pack_int16_t(buff,offset,field);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_unpack_int16_t(System.IntPtr buff,int offset,out short field)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_unpack_int16_t(buff,offset,out field);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_pack_int32_t(System.IntPtr buff,int offset,int field)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pack_int32_t(buff,offset,field);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_unpack_int32_t(System.IntPtr buff,int offset,out int field)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_unpack_int32_t(buff,offset,out field);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_pack_int64_t(System.IntPtr buff,int offset,long field)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pack_int64_t(buff,offset,field);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_unpack_int64_t(System.IntPtr buff,int offset,out long field)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_unpack_int64_t(buff,offset,out field);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_pack_float(System.IntPtr buff,int offset,float field)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pack_float(buff,offset,field);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_unpack_float(System.IntPtr buff,int offset,out float field)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_unpack_float(buff,offset,out field);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_pack_double(System.IntPtr buff,int offset,double field)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pack_double(buff,offset,field);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_unpack_double(System.IntPtr buff,int offset,out double field)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_unpack_double(buff,offset,out field);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr xlua_pushstruct(System.IntPtr L,uint size,int meta_ref)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pushstruct(L,size,meta_ref);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void xlua_pushcstable(System.IntPtr L,uint field_count,int meta_ref)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.xlua_pushcstable(L,field_count,meta_ref);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr lua_touserdata(System.IntPtr L,int idx)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.lua_touserdata(L,idx);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_gettypeid(System.IntPtr L,int idx)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_gettypeid(L,idx);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_get_registry_index()
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_get_registry_index();
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_pgettable_bypath(System.IntPtr L,int idx,string path)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pgettable_bypath(L,idx,path);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int xlua_psettable_bypath(System.IntPtr L,int idx,string path)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_psettable_bypath(L,idx,path);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_pack_float2(System.IntPtr buff,int offset,float f1,float f2)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pack_float2(buff,offset,f1,f2);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_unpack_float2(System.IntPtr buff,int offset,out float f1,out float f2)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_unpack_float2(buff,offset,out f1,out f2);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_pack_float3(System.IntPtr buff,int offset,float f1,float f2,float f3)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pack_float3(buff,offset,f1,f2,f3);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_unpack_float3(System.IntPtr buff,int offset,out float f1,out float f2,out float f3)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_unpack_float3(buff,offset,out f1,out f2,out f3);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_pack_float4(System.IntPtr buff,int offset,float f1,float f2,float f3,float f4)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pack_float4(buff,offset,f1,f2,f3,f4);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_unpack_float4(System.IntPtr buff,int offset,out float f1,out float f2,out float f3,out float f4)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_unpack_float4(buff,offset,out f1,out f2,out f3,out f4);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_pack_float5(System.IntPtr buff,int offset,float f1,float f2,float f3,float f4,float f5)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pack_float5(buff,offset,f1,f2,f3,f4,f5);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_unpack_float5(System.IntPtr buff,int offset,out float f1,out float f2,out float f3,out float f4,out float f5)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_unpack_float5(buff,offset,out f1,out f2,out f3,out f4,out f5);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_pack_float6(System.IntPtr buff,int offset,float f1,float f2,float f3,float f4,float f5,float f6)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pack_float6(buff,offset,f1,f2,f3,f4,f5,f6);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_unpack_float6(System.IntPtr buff,int offset,out float f1,out float f2,out float f3,out float f4,out float f5,out float f6)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_unpack_float6(buff,offset,out f1,out f2,out f3,out f4,out f5,out f6);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_pack_decimal(System.IntPtr buff,int offset,ref decimal dec)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_pack_decimal(buff,offset,ref dec);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_unpack_decimal(System.IntPtr buff,int offset,out byte scale,out byte sign,out int hi32,out ulong lo64)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_unpack_decimal(buff,offset,out scale,out sign,out hi32,out lo64);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_is_eq_str(System.IntPtr L,int index,string str)
		{
			return LuaOriginAPI.xlua_is_eq_str(L,index,str);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool xlua_is_eq_str(System.IntPtr L,int index,string str,int str_len)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_is_eq_str(L,index,str,str_len);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static System.IntPtr xlua_gl(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.xlua_gl(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_ssr_manual_crush(System.IntPtr L)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_ssr_manual_crush(L);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void lua_ssr_manual_stackoverflow(System.IntPtr L)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.lua_ssr_manual_stackoverflow(L);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void luaopen_ssrbitarray(System.IntPtr L)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.luaopen_ssrbitarray(L);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void luaopen_ssrstreamhandle(System.IntPtr L)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.luaopen_ssrstreamhandle(L);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void luaopen_ssrbytearray(System.IntPtr L)
		{
			var handle = PreCallInjected();
			LuaOriginAPI.luaopen_ssrbytearray(L);
			EndCallInjected(handle);
			
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void InitWatcher()
		{
			LuaOriginAPI.InitWatcher();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void ClearWatcher()
		{
			LuaOriginAPI.ClearWatcher();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void SetFrameCount(int frameCount)
		{
			LuaOriginAPI.SetFrameCount(frameCount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int luaopen_lz4(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.luaopen_lz4(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int luaopen_watcher(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.luaopen_watcher(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int luaopen_xxhash(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.luaopen_xxhash(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int luaopen_rapidjson(System.IntPtr L)
		{
			var handle = PreCallInjected();
			var ret = LuaOriginAPI.luaopen_rapidjson(L);
			EndCallInjected(handle);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static int LoadRapidJson(System.IntPtr L)
		{
			return LuaOriginAPI.LoadRapidJson(L);
		}

	}
}
#endif
