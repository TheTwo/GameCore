---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by BE.Tenner.
--- DateTime: 2022/7/4 17:08
---

---@class SEUiBattlePanel
local SEUiBattlePanel = class("SEUiBattlePanel")
local ConfigRefer = require("ConfigRefer")
local UIHelper = require("UIHelper")
local I18N = require("I18N")
local SELogger = require("SELogger")
local Utils = require("Utils")
local Delegate = require("Delegate")
local AutoBattleCondition = require("AutoBattleCondition")
local SEUnitType = require("SEUnitType")
local ShapeType = require('ShapeType')
local SkillTag = require('SkillTag')
local ModuleRefer = require('ModuleRefer')
local ArtResourceUtils = require('ArtResourceUtils')
local ArtResourceConsts = require('ArtResourceConsts')
local ColorConsts = require('ColorConsts')
local SEEnvironmentModeType = require("SEEnvironmentModeType")

local AutoCastPetCardParameter = require('AutoCastPetCardParameter')

local LAYER_MASK_SE_FLOOR = 1 << 20
local LAYER_AFTER_TRANSPARENT = 16
local LANG_KEY_PET_CD_NOT_READY = "se_card_cd_notready"
local CARD_TIP_SHOW_DELAY = 0.5
local UI_CARD_COUNT = 3
local HERO_MAX_COUNT = 3
local VECTOR2_ZERO = CS.UnityEngine.Vector2.zero
local VECTOR3_ZERO = CS.UnityEngine.Vector3.zero
local VECTOR3_FORWARD = CS.UnityEngine.Vector3.forward

local BOSS_HP_TWEEN_DELAY = 0.5
local BOSS_HP_TWEEN_FORE_SPEED = 5
local BOSS_HP_TWEEN_BACK_SPEED = 5

local HERO_HP_WARNING_PCT = 0.2

local BATTLE_TYPE_NORMAL = 0
local BATTLE_TYPE_BOSS = 1
local BATTLE_TYPE_PET = 2
local BATTLE_TYPE_NPC = 3
local BATTLE_TYPE_ELITE = 4
local BATTLE_TYPE_CLIMB_TOWER = 5
local BATTLE_TYPE_PVP = 6

local KO_TIME = 2

local AUTO_BATTLE_CARD_DRAG_TIME = 0.5
local AUTO_BATTLE_FAST_SPEED = 2
local AUTO_BATTLE_CARD_USE_WAIT = 0.5

local SKILL_AVOID_EXTRA_DISTANCE = 2
local SKILL_AVOID_SEARCH_RADIUS = 2

local USE_CARD_SLOW_DOWN_WAITTIME = 0.2
local USE_CARD_SLOW_DOWN_RECIPROCAL = 3

local PET_CARD_HIGHLIGHT_CD = 2

local SHOW_PET_TIME = 1
local CARD_SKILL_QUERY_LEVEL = 20
local PET_CD_HINT_TIME = 3

---@param self SEUiBattlePanel
---@param env SEEnvironment
---@return void
function SEUiBattlePanel:ctor(env)
    self._env = env
	---@type SEHudMediator
	self._hud = nil
    ---@type SEHudBattlePanel
    self._ui = nil
	self._uiNoCardMode = false
	self._hideSkillShow = false
	self._uiNoAutoMode = false
	self._pendingShowBossHp = nil
	self._uiTimeHintShow = false
	self._uiPreShow = false
	self._uiPreRefreshBuffIcon = false
    self._cardItemGoCache = {}
    self._cardItemIndexCache = {}
    self._cardInfoList = {}
    ---@type SEHero
    self._skillUser = nil
    ---@type KheroSkillLogicalSeConfigCell
    self._usingSkill = nil
    self._usingSkillCd = 0
    self._usingSkillCancelling = false
    self._usingSkillOutOfRange = false
    self._usingSkillPos = CS.UnityEngine.Vector3.zero
    self._usingSkillDead = false
	---@type SEHudBattleSkillCardItem
    self._usingCardItem = nil
	self._usingSkillPreviewModel = 0
	---@type CS.UnityEngine.GameObject
	self._usingSkillPreviewCircle = nil
    self._preventNextClickMove = false
    self._usedCardIndex = -1
    self._cardTipHoldingTime = 0
    self._cardTipWaitingToShow = false
    self._cardTipConfigId = -1

	self._bossHpTargetProgress = {}
	self._bossHpCurrentProgress = {}
	self._bossHpRemainingDelayTime = {}
	self._bossHpGradientStartProgress = {}
	self._bossHpGradientEndProgress = {}

    self._bossHpTargetProgress[1] = 1
    self._bossHpCurrentProgress[1] = 0
    self._bossHpRemainingDelayTime[1] = -1
	self._bossHpGradientStartProgress[1] = -1
    self._bossHpGradientEndProgress[1] = -1

	self._bossHpTargetProgress[2] = 1
    self._bossHpCurrentProgress[2] = 0
    self._bossHpRemainingDelayTime[2] = -1
    self._bossHpGradientStartProgress[2] = -1
    self._bossHpGradientEndProgress[2] = -1

	self._bossHpTargetProgress[3] = 1
    self._bossHpCurrentProgress[3] = 0
    self._bossHpRemainingDelayTime[3] = -1
    self._bossHpGradientStartProgress[3] = -1
    self._bossHpGradientEndProgress[3] = -1

	self._cardOutOfCancelArea = false
    self._cardDragging = false

	self._preventAutoMove = false
	self._battleType = BATTLE_TYPE_NORMAL
	self._skillModelHandleList = {}
	self._skillPreviewModelList = {}

	self._heroWarningLastStatus = {}
	self._heroLastHpp = {}
	self._heroAlreadyDead = {}

	self._koStartTime = 0

	-- 自动战斗相关
	---@type CS.UnityEngine.GameObject
	self._autoBattleDraggingCardGo = nil
	---@type KheroSkillLogicalSeConfigCell
	self._autoBattleDraggingCardSkillCfg = nil
	---@type SEUnit
	self._autoBattleDraggingCardTarget = nil
	self._autoBattleDraggingCardStartPos = VECTOR2_ZERO
	self._autoBattleDraggingCardEndPos = VECTOR2_ZERO
	self._autoBattleDraggingStartTime = 0
	self._autoBattleConditionList = {}
	self._autoBattleCardUseWaitStartTime = 0

	-- 拖卡减速相关
	self._useCardSlowDownStartTime = 0
	self._useCardSlowedDown = false

	---@type table<number, number>
	self._skill2CardMap = {}

	self._petCdHintLastTime = 0
	self._petCdEnabled = true

	-- pvp
	self._pvpBuffIcons = {}
end

---@param self SEUiBattlePanel
---@param panel SEHudBattlePanel
---@param hud SEHudMediator
function SEUiBattlePanel:Init(panel, hud, noCardMode, hideSkillShow, noAutoMode)
	g_Logger.Log('SEUiBattlePanel:Init')
	g_Game.ServiceManager:AddResponseCallback(AutoCastPetCardParameter.GetMsgId(), Delegate.GetOrCreate(self, self.OnAutoCastPetCardResponse))
    
	BOSS_HP_TWEEN_DELAY = (ConfigRefer.ConstSe.SeBossHpTweenDelay and ConfigRefer.ConstSe:SeBossHpTweenDelay()) or BOSS_HP_TWEEN_DELAY
	BOSS_HP_TWEEN_FORE_SPEED = 0
    BOSS_HP_TWEEN_BACK_SPEED = (ConfigRefer.ConstSe.SeBossHpTweenBackSpeed and ConfigRefer.ConstSe:SeBossHpTweenBackSpeed()) or BOSS_HP_TWEEN_BACK_SPEED
	HERO_HP_WARNING_PCT = (ConfigRefer.ConstSe.SEHeroHPWarning and ConfigRefer.ConstSe:SEHeroHPWarning()) or HERO_HP_WARNING_PCT
	
	AUTO_BATTLE_CARD_DRAG_TIME = (ConfigRefer.ConstSe.SeAutoBattleCardDragTime and ConfigRefer.ConstSe:SeAutoBattleCardDragTime()) or AUTO_BATTLE_CARD_DRAG_TIME
	AUTO_BATTLE_FAST_SPEED = (ConfigRefer.ConstSe.SeBattleSpeedFastRate and ConfigRefer.ConstSe:SeBattleSpeedFastRate()) or AUTO_BATTLE_FAST_SPEED
	
	SKILL_AVOID_EXTRA_DISTANCE = (ConfigRefer.ConstSe.SeAutoBattleSkillAvoidExtraDistance and ConfigRefer.ConstSe:SeAutoBattleSkillAvoidExtraDistance()) or SKILL_AVOID_EXTRA_DISTANCE
	SKILL_AVOID_SEARCH_RADIUS = (ConfigRefer.ConstSe.SeAutoBattleSkillAvoidSearchRadius and ConfigRefer.ConstSe:SeAutoBattleSkillAvoidSearchRadius()) or SKILL_AVOID_SEARCH_RADIUS
	
	USE_CARD_SLOW_DOWN_WAITTIME = (ConfigRefer.ConstSe.SeUseCardSlowDownWaitTime and ConfigRefer.ConstSe:SeUseCardSlowDownWaitTime()) or USE_CARD_SLOW_DOWN_WAITTIME
	USE_CARD_SLOW_DOWN_RECIPROCAL = (ConfigRefer.ConstSe.SeUseCardSlowDownRateReciprocal and ConfigRefer.ConstSe:SeUseCardSlowDownRateReciprocal()) or USE_CARD_SLOW_DOWN_RECIPROCAL

	PET_CARD_HIGHLIGHT_CD = (ConfigRefer.ConstSe.SePetHighlightCD and ConfigRefer.ConstSe:SePetHighlightCD()) or PET_CARD_HIGHLIGHT_CD
	PET_CD_HINT_TIME = (ConfigRefer.ConstSe.SeCardCdHintWaitTime and ConfigRefer.ConstSe:SeCardCdHintWaitTime()) or PET_CD_HINT_TIME

	self._hud = hud
    self._ui = panel
	self._uiNoCardMode = noCardMode
	self._hideSkillShow = hideSkillShow
	self._uiNoAutoMode = noAutoMode
	if self._ui then
		self._ui:SetNoCardMode(noCardMode)
		self._ui:SetNoAutoMode(noAutoMode)
		self._ui._timeHint:SetVisible(self._uiTimeHintShow)
		self._ui:ResetAniState()
	end

	self:InitSkill2CardMap()

    self:ShowCardCancelArea(false)
	local uiPreShow = self._uiPreShow
	local uiPreRefreshBuffIcon = self._uiPreRefreshBuffIcon
    self:Hide()
	for i = 1, UI_CARD_COUNT do
        local cardItem = self:GetCardItem(i)
        if (cardItem) then
            cardItem:ResetToDefault()
        end
    end
    self:RefreshCardList(false)
    if (ConfigRefer.ConstSe.SESkillTipsThreshold) then
        CARD_TIP_SHOW_DELAY = ConfigRefer.ConstSe:SESkillTipsThreshold()
    end
	self:GetEnvironment():SetUILoadComplete()
	self:RefreshHeroStatus(true)
	self:RefreshCardAreaBase()

	-- 自动战斗初始状态
    local autoBattle = self:GetEnvironment():IsAutoBattle()
    self:GetEnvironment():SendAutoCastPetCardRequest(autoBattle)
	local tmpParam = self._pendingShowBossHp
	self._pendingShowBossHp = nil
	self:HideBossHPBarAll()
	if tmpParam then
		self:ShowBossHPBar(tmpParam.name, tmpParam.level, tmpParam.icon, tmpParam.index)
	end
	if uiPreShow then
		self:Show(self._battleType)
	end
	if uiPreRefreshBuffIcon then
		self:RefreshPvpBuffIcons()
	end
end

function SEUiBattlePanel:InitSkill2CardMap()
	for _, cell in ConfigRefer.Card:ipairs() do
		local skillId = cell:Skill()
		local id = cell:Id()
		self._skill2CardMap[skillId] = id
		for i = 1, CARD_SKILL_QUERY_LEVEL do
			local nskillid = ModuleRefer.SkillModule:GetSkillLevelUpId(skillId, i)
			self._skill2CardMap[nskillid] = id
		end
	end
end

function SEUiBattlePanel:LoadAutoBattleConditionList()
	self._autoBattleConditionList = {}
	for _, cell in ConfigRefer.SeAutoBattleCondition:ipairs() do
		local skillTag = cell:SESkillTag()
		if (not self._autoBattleConditionList[skillTag]) then
			self._autoBattleConditionList[skillTag] = {}
		end
		table.insert(self._autoBattleConditionList[skillTag], {
			condition = cell:ConditionType(),
			strParam = cell:StrParam(),
			floatParam = cell:FloatParam(),
			weight = cell:Weight(),
		})
	end
end

---@param self SEUiBattlePanel
---@return SEEnvironment
function SEUiBattlePanel:GetEnvironment()
    return self._env
end

---@param self SEUiBattlePanel
---@return void
function SEUiBattlePanel:Dispose()
	g_Game.ServiceManager:RemoveResponseCallback(AutoCastPetCardParameter.GetMsgId(), Delegate.GetOrCreate(self, self.OnAutoCastPetCardResponse))

	-- DOTween 处理
	if (self._hud) then
		local effectGo = self._hud:GetEffectEnergyRestore()
		if (Utils.IsNotNull(effectGo)) then
			effectGo.transform:DOKill()
		end
	end
	if (self._ui) then
		self._ui._koNode:SetActive(false)
	end

	self._env = nil
    self._ui = nil
    self._cardItemGoCache = {}
    self._cardItemIndexCache = {}
    self._skillUser = nil
    self._usingSkill = nil
    self._usingSkillCd = 0
    self._usingSkillCancelling = false
    self._usingSkillOutOfRange = false
    self._usingSkillPos = CS.UnityEngine.Vector3.zero
    self._usingSkillDead = false
    self._usingCardItem = nil
    self._preventNextClickMove = false
    self._usedCardIndex = -1
    self._cardTipHoldingTime = 0
    self._cardTipWaitingToShow = false
    self._cardTipConfigId = -1
    self._bossHpTargetProgress[1] = 1
    self._bossHpCurrentProgress[1] = 0
    self._bossHpRemainingDelayTime[1] = -1
    self._bossHpGradientStartProgress[1] = -1
    self._bossHpGradientEndProgress[1] = -1
    self._bossHpTargetProgress[2] = 1
    self._bossHpCurrentProgress[2] = 0
    self._bossHpRemainingDelayTime[2] = -1
    self._bossHpGradientStartProgress[2] = -1
    self._bossHpGradientEndProgress[2] = -1
    self._bossHpTargetProgress[3] = 1
    self._bossHpCurrentProgress[3] = 0
    self._bossHpRemainingDelayTime[3] = -1
    self._bossHpGradientStartProgress[3] = -1
    self._bossHpGradientEndProgress[3] = -1
	self._koStartTime = 0
	self._pvpBuffIcons = nil
end

---@param self SEUiBattlePanel
function SEUiBattlePanel:Show(battleType)
	if (battleType) then
		self._battleType = battleType
	end
	self._uiPreShow = true
    if (self._ui) then
        self._ui:SetVisible(true)
		self:ShowLevelTarget()
		self:RefreshPvpInfo()
    end
end

---@param self SEUiBattlePanel
function SEUiBattlePanel:Hide()
	self._uiPreShow = false
	self._uiPreRefreshBuffIcon = false
    if (self._ui) then
        self._ui:SetVisible(false)
    end
end

---@param self SEUiBattlePanel
---@param iconPath string
function SEUiBattlePanel:AddPvpBuffIcon(iconPath)
	table.insert(self._pvpBuffIcons, iconPath)
end

function SEUiBattlePanel:RefreshPvpBuffIcons()
	if not self._ui then
		self._uiPreRefreshBuffIcon = true
		return
	end
	self._ui:RefreshPvpBuffIcons(self._pvpBuffIcons)
end

---@param self SEUiBattlePanel
---@param screenPos UnityEngine.Vector3
function SEUiBattlePanel:GetSkillPos(screenPos)
	screenPos = self:CapScreenPos(screenPos)
    local sp = CS.UnityEngine.Vector3(screenPos.x, screenPos.y, 0)
    local ray = self:GetEnvironment():GetCamera():ScreenPointToRay(sp)
	local provider = self:GetEnvironment():GetInputManager()._clickGroundProvider
	if provider then
		local result,pos = provider(ray)
		if result then
			self._usingSkillPos = pos
			self._usingSkillOutOfRange = false
		else
			self._usingSkillPos = CS.UnityEngine.Vector3.zero
			self._usingSkillOutOfRange = true
		end
		return
	end
    local result, point = CS.RaycastHelper.PhysicsRaycastRayHitWithMask(ray, 9999, LAYER_MASK_SE_FLOOR)
    if (result) then
        self._usingSkillPos = point
        self._usingSkillOutOfRange = false
        local nr, _ = CS.UnityEngine.AI.NavMesh.SamplePosition(point, 0.5, CS.UnityEngine.AI.NavMesh.AllAreas)
        self._usingSkillOutOfRange = not nr
    else
        self._usingSkillPos = CS.UnityEngine.Vector3.zero
        self._usingSkillOutOfRange = true
    end
end

--- 更新卡牌拖动状态
---@param self SEUiBattlePanel
---@param cardItem SEHudBattleSkillCardItem
---@param screenPos UnityEngine.Vector2
---@param isAuto boolean
function SEUiBattlePanel:UpdateCardDragState(cardItem, screenPos, isAuto)
	screenPos = self:CapScreenPos(screenPos)

    -- 判断当前位置是否在取消区域内
    local cancelRect = self._ui:GetCancelAreaScreenRect()
    local inRect = cancelRect:Contains(CS.UnityEngine.Vector2(screenPos.x, CS.UnityEngine.Screen.height - screenPos.y))
	local modelRoot = self:GetEnvironment():GetSkillManager():GetSkillPreviewModelRoot()
    if (not isAuto and inRect) then
        cardItem:SetTransparent(false)
        self._usingSkillCancelling = true
        self:ShowCardCancelArea(self._cardOutOfCancelArea, self._cardOutOfCancelArea)
		modelRoot:SetActive(false)

        -- 移动卡牌
        cardItem:GetCardTransform().position =
            g_Game.UIManager:GetUICamera():ScreenToWorldPoint(
                CS.UnityEngine.Vector3(screenPos.x, screenPos.y, 0))
        self:SyncCardDeathMask(cardItem)
    else
        self._cardOutOfCancelArea = true
		self:ShowCardCancelArea(true, false)
		modelRoot:SetActive(true)
        if (self._usingSkillDead) then
            cardItem:SetTransparent(false)
            cardItem:GetCardTransform().position =
                g_Game.UIManager:GetUICamera():ScreenToWorldPoint(
                    CS.UnityEngine.Vector3(screenPos.x, screenPos.y, 0))
            self:SyncCardDeathMask(cardItem)
        else
            cardItem:SetTransparent(true)
        end
        self._usingSkillCancelling = false
    end
    self:GetEnvironment():GetSkillManager():SetUsingSkillCancelling(self._usingSkillCancelling or (not self._usingSkillDead and self._usingSkillOutOfRange))
end

--- 卡牌按下
---@param self SEUiBattlePanel
function SEUiBattlePanel:OnCardItemPointerDown(go, eventData)
    local cardItem, cardIndex = self:GetCardItemByGo(go)
    if (not cardItem) then return end
    
    -- 阻止点击移动
    self:PreventNextClickMove(true)
	self:SetPreventAutoMove(true)

	if not self._env:IsAutoBattle() then
		-- 准备显示卡牌提示
		self._cardTipConfigId = cardItem:GetCardCfgId()
		self._cardTipWaitingToShow = true
		self._cardTipHoldingTime = 0
	end

    -- 选中卡牌
    cardItem:SetSelected(true)
end

--- 卡牌抬起
---@param self SEUiBattlePanel
function SEUiBattlePanel:OnCardItemPointerUp(go, eventData)
    if (self._cardDragging) then return end

    local cardItem = self:GetCardItemByGo(go)
    if (not cardItem) then return end

    self._cardTipConfigId = -1
    self._cardTipWaitingToShow = false

    self:CancelUsingSkill()
    cardItem:SetSelected(false)

	self:SetPreventAutoMove(false)
end

--- 取消使用卡牌
---@param self SEUiBattlePanel
function SEUiBattlePanel:CancelUsingSkill(isAuto)
    SELogger.Trace("*** CancelUsingSkill %s %s", self._usingCardItem, self._usedCardIndex)
    self._usingSkill = nil
    if (self._usingCardItem) then
        self._usingCardItem:SetTransparent(false)
        self._usingCardItem:GetCardTransform().localPosition = CS.UnityEngine.Vector3.zero
        self:SyncCardDeathMask(self._usingCardItem)
        if (self._usedCardIndex <= 0) then
            self._usingCardItem:SetVisible(true)
        end
		if (not isAuto) then
			self._usingCardItem:SetSelected(false)
		end
    end
    self:ShowCardCancelArea(false, false)
    if (self._ui) then
		if (not isAuto) then
			self._ui:HideCardTips()
		end
    end
    self._usingCardItem = nil
	self._cardDragging = false

	-- 自动战斗
	self._autoBattleDraggingCardTarget = nil
end

--- 卡牌拖动开始
---@param self SEUiBattlePanel
function SEUiBattlePanel:OnCardItemDragStart(go, eventData, isAuto)
	if (self._env:IsAutoBattle() and not isAuto) then return end

    local cardItem, cardIndex = self:GetCardItemByGo(go)
    if (not cardItem) then return end

	if self:IsCardHeroDead(cardItem) then
		ModuleRefer.ToastModule:AddSimpleToast(I18N.Get('se_herodie_petinvalid'))
		self:CancelUsingSkill(isAuto)
		return
	end

    self._cardDragging = true
    --SELogger.Trace("*** OnCardItemDragStart %s", cardIndex)

    self._usingCardItem = cardItem

    -- 隐藏卡牌提示
	if (not isAuto) then
		self._ui:HideCardTips()
		self._cardTipConfigId = -1
		self._cardTipWaitingToShow = false
	end

    -- 阻止点击移动
    self:PreventNextClickMove(true)
	self:SetPreventAutoMove(true)

    -- 能量与CD检查
    local cardEnergy = 0

    -- -- 检查CD
	local remain = self:GetCardCdByIndex(cardIndex)
	if (remain and remain > 0) then
		if (not isAuto) then
			self:GetEnvironment():ShowToast(I18N.Get(LANG_KEY_PET_CD_NOT_READY))
		end
		return
	end

	-- 拖卡减速相关
	-- if (not isAuto) then
	-- 	self._useCardSlowDownStartTime = g_Game.Time.time
	-- end

    -- 设为最前
	go.transform:SetAsLastSibling()

    -- 状态更新
    self._cardOutOfCancelArea = false
    self:UpdateCardDragState(cardItem, eventData.position, isAuto)

    -- 使用技能
    local heroCfgCell = cardItem:GetHeroCfgCell()

    -- 使用者
	---@type SEHero
    local user = nil
    if (heroCfgCell) then
        user = self:GetEnvironment():GetUnitManager():GetHeroByHeroCfgId(heroCfgCell:Id())
    end

    -- 无使用者则默认队长使用
    if (not user) then
        user = self:GetEnvironment():GetUnitManager():GetCaptain()
    end

	if (isAuto) then
		self._autoBattleDraggingStartTime = g_Game.Time.time
		cardItem:SetSelected(false)
		self:HideCardTips()
	end

    local skill = cardItem:GetSkillCfgCell()
    if (skill) then
        self:GetSkillPos(eventData.position)
        self._skillUser = user
        self._usingSkill = skill
		local noRange = false
		self._usingSkillPreviewModel = skill:PreviewModel()
		
		-- 有预览模型
		---@type CS.UnityEngine.GameObject
		local modelRoot
		if (self._usingSkillPreviewModel > 0) then
			local artConf = ConfigRefer.ArtResource:Find(self._usingSkillPreviewModel)
			if (artConf) then
				local pooledCreateHelper = self:GetEnvironment():GetPooledCreateHelperForSkillModel()
				modelRoot = self:GetEnvironment():GetSkillManager():GetSkillPreviewModelRoot()
				modelRoot:SetActive(true)
				local modelRootTransfrom = modelRoot.transform
				local selctorParentScene = modelRoot.scene
				self._skillModelHandleList = {}
				-- 预览圈
				if (skill.PreviewRadius and skill:PreviewRadius() > 0) then
					table.insert(self._skillModelHandleList,
						pooledCreateHelper:Create(ArtResourceUtils.GetItem(ArtResourceConsts.se_circle_selector), modelRootTransfrom, function(circleGo, data)
							if Utils.IsNull(circleGo) then
								return
							end
							if circleGo.transform.scene ~= selctorParentScene then
								circleGo.transform:SetParent(nil)
								CS.UnityEngine.SceneManagement.SceneManager.MoveGameObjectToScene(circleGo, selctorParentScene)
							end
							circleGo.transform:SetParent(modelRootTransfrom)
							self._usingSkillPreviewCircle = circleGo
							---@type CS.SECircleAreaSelector
							local circleSelector = circleGo:GetComponent(typeof(CS.SECircleAreaSelector))
							if (circleSelector) then
								circleSelector:SetRadius(skill:PreviewRadius())
								circleSelector.Color = UIHelper.TryParseHtmlString(ColorConsts.quality_blue)
							end
						end))
				end

				-- 预览模型
				local matCount = ConfigRefer.ConstSe:SePetPreviewMatLength()
				local modelMats = {}
				if (matCount > 0) then
					for i = 1, matCount do
						table.insert(modelMats, ConfigRefer.ConstSe:SePetPreviewMat(i))
					end
				end
				self._skillPreviewModelList = {}
				noRange = true
				local count = skill:PreviewModelOffsetLength() // 2
				local dv = nil
				if (count == 0) then
					count = 1
					dv = 0
				end
				local modelScale = artConf:ModelScale() * self:GetEnvironment():GetUnitManager():GetExtraScaleValue()
				local modelPath = artConf:Path()
				for i = 1, count * 2, 2 do
					local ox = dv or skill:PreviewModelOffset(i) or 0
					local oz = dv or skill:PreviewModelOffset(i + 1) or 0
					table.insert(self._skillModelHandleList,
							pooledCreateHelper:Create(modelPath, modelRootTransfrom, function(model, data)
								if Utils.IsNull(model) then
									return
								end
								if model.transform.scene ~= selctorParentScene then
									model.transform:SetParent(nil)
									CS.UnityEngine.SceneManagement.SceneManager.MoveGameObjectToScene(model, selctorParentScene)
								end
								model.transform:SetParent(modelRootTransfrom)
								local sdata = {
									model = model,
									fbx = nil,
									scale = nil,
								}
								model.transform.localPosition = CS.UnityEngine.Vector3(ox, 0, oz)
								if (modelScale > 0) then
									---@type CS.UnityEngine.Transform
									local fbxTrans = model.transform:GetChild(0)
									if (fbxTrans) then
										sdata.fbx = fbxTrans
										sdata.scale = fbxTrans.localScale
										fbxTrans.localScale = fbxTrans.localScale * modelScale
									end
								end
								model:SetLayerRecursive(LAYER_AFTER_TRANSPARENT)
								table.insert(self._skillPreviewModelList, sdata)
								-- 材质
								if (matCount > 0) then
									local rendererList = model:GetComponentsInChildren(typeof(CS.UnityEngine.Renderer))
									if (rendererList) then
										for j = 0, rendererList.Length - 1 do
											local renderer = rendererList[j]
											---@type CS.MaterialBank
											if (renderer) then
												local bank = model:AddComponent(typeof(CS.MaterialBank))
												bank.targetRenderer = renderer
												bank:RecordCurrentAsOriginal()
												for index, matName in ipairs(modelMats) do
													bank:SetMaterialByName(index - 1, matName)
												end
												bank:ApplyBank()
											end
										end
									end
								end
					end))
				end
			end
		end
        self._usingSkillCd = 0
        self._usingSkillDead = self:IsCardHeroDead(cardItem)
        self:GetEnvironment():GetSkillManager():OnSkillPress(self._skillUser, self._usingSkill, cardItem:GetCardServerId(), self._usingSkillDead, cardEnergy, noRange)
        if (not self._usingSkillDead) then
			if (self._usingSkillPreviewModel > 0) then
				self:GetEnvironment():GetSkillManager():SetUsingSkillCallback(Delegate.GetOrCreate(self, self.UpdateModelRoot))
			end
            self:GetEnvironment():GetSkillManager():OnSkillUsing(self._usingSkillPos, self._usingSkillCancelling)
        end
		self._petCdHintLastTime = 0
		self._petCdEnabled = false
		self._ui:ShowFingerHint(false)
    end
end

function SEUiBattlePanel:UpdateModelRoot(pos)
	if (not self._usingSkill or not self._skillUser) then return end
	if (self._usingSkillPreviewModel <= 0) then return end
	local modelRoot = self:GetEnvironment():GetSkillManager():GetSkillPreviewModelRoot()
	local forward = (pos - self._skillUser:GetActor():GetPosition()).normalized
	forward.y = 0
	modelRoot.transform.forward = forward
	modelRoot.transform.position = pos
end

--- 卡牌拖动
---@param self SEUiBattlePanel
function SEUiBattlePanel:OnCardItemDrag(go, eventData, isAuto)
	if (self._env:IsAutoBattle() and not isAuto) then return end

    if (not self._usingSkill) then return end
    local cardItem = self:GetCardItemByGo(go)
    if (not cardItem) then
        return
    end

	-- 卡牌所属的英雄死亡，取消技能释放
	if self:IsCardHeroDead(cardItem) then
		self:CancelUsingSkill(isAuto)
		return 
	end

    -- 状态更新
    self:UpdateCardDragState(cardItem, eventData.position, isAuto)

    -- 预施放
    if (not self._usingSkillDead) then
        local skill = cardItem:GetSkillCfgCell()
        if (skill) then
            self:GetSkillPos(eventData.position)
            self:GetEnvironment():GetSkillManager():OnSkillUsing(self._usingSkillPos, self._usingSkillCancelling or self._usingSkillOutOfRange)
        end
    end
end

function SEUiBattlePanel:RecycleModelRoot()
	for _, data in ipairs(self._skillPreviewModelList) do
		if (data and Utils.IsNotNull(data.model)) then
			data.model:SetActive(false)
			data.model:SetLayerRecursive(0)
			if (data.fbx and data.scale) then
				data.fbx.localScale = data.scale
			end
			---@type CS.MaterialBank
			local bankList = data.model:GetComponentsInChildren(typeof(CS.MaterialBank))
			if (bankList) then
				for i = 0, bankList.Length - 1 do
					local bank = bankList[i]
					if (Utils.IsNotNull(bank)) then
						bank:ResetToOriginal()
					end
				end
			end
		end
	end
	local createHelper = self:GetEnvironment():GetPooledCreateHelperForSkillModel()
	for _, handle in ipairs(self._skillModelHandleList) do
		createHelper:Delete(handle)
	end
	local modelRoot = self:GetEnvironment():GetSkillManager():GetSkillPreviewModelRoot()
	if (Utils.IsNotNull(modelRoot)) then
		modelRoot:SetActive(false)
	end
end

--- 卡牌拖动结束
---@param self SEUiBattlePanel
function SEUiBattlePanel:OnCardItemDragEnd(go, eventData, isAuto)
	if (self._env:IsAutoBattle() and not isAuto) then return end

	self:RecycleModelRoot()
	self:GetEnvironment():GetSkillManager():SetUsingSkillCallback(nil)

    local cardItem, index = self:GetCardItemByGo(go)
    if (not cardItem) then
        return
    end

	-- 拖卡减速
	-- if (not isAuto) then-- and self._useCardSlowedDown) then
	-- 	self._env:SetBattleSpeed(1, true)
	-- 	self._useCardSlowDownStartTime = 0
	-- 	self._useCardSlowedDown = false
	-- end

    --SELogger.Trace("*** OnCardItemDragEnd %s", index)
    local result = self:GetEnvironment():GetSkillManager():OnSkillFinish()

    -- 收尾
    if (result) then

        -- if (not cardItem:IsPetCard()) then
            self._usedCardIndex = index
			g_Game.SoundManager:Play("sfx_ui_battle_pet_card")
		-- end
    end

    self:CancelUsingSkill(isAuto)
    self._cardDragging = false
	self:SetPreventAutoMove(false)

	if (isAuto) then
		self._autoBattleDraggingCardGo = nil
		self._autoBattleDraggingStartTime = 0
		self._autoBattleDraggingCardTarget = nil
		self._autoBattleCardUseWaitStartTime = g_Game.Time.time
	end
end

function SEUiBattlePanel:OnCardItemDragCancel(go, eventData)
    local cardItem = self:GetCardItemByGo(go)
    if (not cardItem) then
        return
    end

    self:CancelUsingSkill(self._env:IsAutoBattle())
end

---@param self SEUiBattlePanel
function SEUiBattlePanel:PreventNextClickMove()
    self._preventNextClickMove = true
end

---@param self SEUiBattlePanel
function SEUiBattlePanel:CancelPreventClickMove()
    self._preventNextClickMove = false
end

---@param self SEUiBattlePanel
---@return boolean
function SEUiBattlePanel:IsClickMovePrevented()
    if (self._preventNextClickMove) then
        self._preventNextClickMove = false
        return true
    end
    return false
end

---复位所有卡牌
---@param self SEUiBattlePanel
function SEUiBattlePanel:ResetAllCardItems()
	self:RecycleModelRoot()

    local cardItems = self:GetCardItems() or {}
    for _, cardItem in pairs(cardItems) do
        if (cardItem) then
            cardItem:GetCardTransform().localPosition = CS.UnityEngine.Vector3.zero
            self:SyncCardDeathMask(cardItem)
            cardItem:SetTransparent(false)
            cardItem:SetVisible(false)
        end
    end

	self._usedCardIndex = -1
end

---@param self SEUiBattlePanel
---@return table<number, SEHudBattleSkillCardItem>
function SEUiBattlePanel:GetCardItems()
    if (not self._ui) then return nil end
    return self._ui:GetCardItems()
end

---@param self SEUiBattlePanel
---@param index number
---@return SEHudBattleSkillCardItem
function SEUiBattlePanel:GetCardItem(index)
    if (not self._ui) then return nil end
    return self._ui:GetCardItem(index)
end

---@param self SEUiBattlePanel
---@param go UnityEngine.GameObject
---@return SEHudBattleSkillCardItem, number
function SEUiBattlePanel:GetCardItemByGo(go)
    if (not self._ui) then return nil, -1 end
    if (self._cardItemGoCache[go]) then
        return self._cardItemGoCache[go], self._cardItemIndexCache[go]
    end
    local cardItems = self:GetCardItems()
    if (cardItems and #cardItems > 0) then
        for i = 1, #cardItems do
            local cardItem = self:GetCardItem(i)
            if (cardItem and cardItem.selfGo == go) then
                self._cardItemGoCache[go] = cardItem
                self._cardItemIndexCache[go] = i
                return cardItem, i
            end
        end
    end
    return nil, -1
end

---@param self SEUiBattlePanel
---@param show boolean
function SEUiBattlePanel:ShowCardCancelArea(outer, inner)
    if (not self._ui) then return end
    self._ui:ShowInnerCancelArea(inner)
    self._ui:ShowOuterCancelArea(outer);
end

--- 刷新卡牌可用性
---@param self SEUiBattlePanel
function SEUiBattlePanel:RefreshCardAvailable()
    local maxCount = self:GetEnvironment():GetSkillManager():GetCardMaxCount()
    for i = 1, maxCount do
        local cardItem = self:GetCardItem(i)
        if (cardItem) then
            cardItem:SetDead(self:IsCardHeroDead(cardItem))
			cardItem:SetGray(self:IsCardHeroDead(cardItem))
        end
    end
end

---刷新卡牌列表
---@param self SEUiBattlePanel
---@param updated boolean
---@return table<number, boolean>|nil
function SEUiBattlePanel:RefreshCardList(updated)
    if (not self._ui) then return nil end

    local cardList = self:GetEnvironment():GetSkillManager():GetCardList()
	self._cardInfoList = cardList

    local maxCount = self:GetEnvironment():GetSkillManager():GetCardMaxCount()
	local turnToShowCard = {}
    -- 手牌列表
	local cardCount = 0
    for i = 1, UI_CARD_COUNT do
        local cardItem = self:GetCardItem(i)
        if (cardItem) then
            if (i > maxCount or not cardList[i]) then
                cardItem:SetVisible(false)
            else
				cardCount = cardCount + 1

				if (cardList[i].used) then
					cardItem:SetVisible(false)
				else
					cardItem:SetVisible(true)
					turnToShowCard[i] = true
					self:SetCardInfo(cardItem, cardList[i])
				end
            end
        end
    end

	self:RefreshCardAreaBase()
	return turnToShowCard
end

function SEUiBattlePanel:RefreshCardAreaBase()
	if (self._ui) then
		local cardList = self:GetEnvironment():GetSkillManager():GetCardList()
		local cardCount = 0
		for i = 1, UI_CARD_COUNT do
			if (cardList[i] and not cardList[i].used) then
				cardCount = cardCount + 1
			end
		end
		self._ui._cardAreaBase:SetActive(cardCount > 0)
	end
end

---@param self SEUiBattlePanel
---@param cardItem SEHudBattleSkillCardItem
---@return boolean
function SEUiBattlePanel:IsCardHeroDead(cardItem)
    if (not cardItem) then
		return false 
	end

    local heroCfgCell = cardItem:GetHeroCfgCell()
    if (not heroCfgCell) then
		return false 
	end

    local hero = self:GetEnvironment():GetUnitManager():GetHeroByHeroCfgId(heroCfgCell:Id())
    if (not hero or hero:IsDead() or hero:IsDeadServer()) then
		return true 
	end

    return false
end

---设置卡牌信息
---@param self SEUiBattlePanel
---@param cardItem SEHudBattleSkillCardItem
---@param cardRuntimeData SECardRuntimeData
function SEUiBattlePanel:SetCardInfo(cardItem, cardRuntimeData)
    if (not cardItem) then 
		return 
	end
	cardItem:SetCardInfo(cardRuntimeData)
end

---@param self SEUiBattlePanel
function SEUiBattlePanel:HideCardTips()
    if (self._ui) then
        self._ui:HideCardTips()
    end
    self._cardTipConfigId = -1
    self._cardTipHoldingTime = 0
    self._cardTipWaitingToShow = false
end

--- 取消指定英雄的卡牌使用
---@param self SEUiBattlePanel
---@param hero SEHero
function SEUiBattlePanel:CancelCardUsingByHero(hero)
	if (not hero) then return end
    local cardItems = self:GetCardItems()
    if (cardItems and #cardItems > 0) then
        for i = 1, #cardItems do
            local cardItem = self:GetCardItem(i)
            if (cardItem and cardItem:GetHeroCfgCell() and cardItem:GetHeroCfgCell():Id() == hero:GetHeroConfigId()) then
                self:CancelUsingSkill(self._env:IsAutoBattle())
                return
            end
        end
    end
end

---@param self SEUiBattlePanel
---@param delta number
function SEUiBattlePanel:Update(delta)
    -- 卡牌提示
    if (self._cardTipWaitingToShow) then
        self._cardTipHoldingTime = self._cardTipHoldingTime + delta
        if (self._cardTipHoldingTime >= CARD_TIP_SHOW_DELAY) then
            self._cardTipWaitingToShow = false
            if (self._ui) then
                self._ui:ShowCardTips(self._cardTipConfigId)
            end
        end
    end

    -- BOSS血条
    self:UpdateBossHpTween(delta, 1)
	self:UpdateBossHpTween(delta, 2)

    if (self._ui and self._ui.selfGo.activeInHierarchy) then
		--- 7Day+ 版本改动
        -- 卡牌CD
        local maxCount = self:GetEnvironment():GetSkillManager():GetCardMaxCount()
        for i = 1, maxCount do
            local cardItem = self:GetCardItem(i)
            if (cardItem) then
				local remain, total = self:GetCardCdByIndex(i)
				if (remain > 0) then
					cardItem:SetCdNum(math.ceil(remain / 1000))
				else
					cardItem:SetCdNum(0)
				end
            end
        end

		-- 卡牌使用提示
		if (self._petCdHintLastTime > 0) then
			local dt = g_Game.Time.time - self._petCdHintLastTime
			if (dt >= PET_CD_HINT_TIME) then
				self._petCdEnabled = false
				self._ui:ShowFingerHint(true)
			end
		end
    end

	-- KO节点
	if (self._ui and self._koStartTime > 0) then
		if (g_Game.Time.time - self._koStartTime >= KO_TIME) then
			self:ShowKO(false)
			self._koStartTime = 0
		end
	end
end

function SEUiBattlePanel:OnBattleStart()
    local turnToShowCard = self:RefreshCardList()
	if self._ui then
		self._ui:ShowCardEnterEffect(turnToShowCard)
	end
end

function SEUiBattlePanel:OnBattleEnd()
    self:CancelPreventClickMove()
end

--- 设置Boss血条可见性
---@param self SEUiBattlePanel
---@param visible boolean
function SEUiBattlePanel:SetBossHPBarVisible(visible)
	if (not self._ui or Utils.IsNull(self._ui._bossHpArea)) then return end
	self._ui._bossHpArea:SetActive(visible)
end

--- 设置BOSS血量百分比
---@param self SEUiBattlePanel
---@param progress number
---@param index number
function SEUiBattlePanel:SetBossHP(progress, index)
	if (not self._ui or Utils.IsNull(self._ui._bossHpFront[index])) then return end
	if (not index) then index = 1 end

	if (progress == self._bossHpTargetProgress[index]) then
		return
	end
	local oldProgress = self._bossHpTargetProgress[index]
	self._bossHpTargetProgress[index] = progress
	self._ui._bossHpFront[index].value = self._bossHpTargetProgress[index]

	-- 增长
	if (progress > oldProgress) then
		self._bossHpRemainingDelayTime[index] = -1
		self._ui._bossHpBack[index].fillAmount = self._ui._bossHpFront[index].value
	else
		-- 减少
		-- 延迟效果
		local delayTime = BOSS_HP_TWEEN_DELAY
		SELogger.LogLow("Boss %s HP delay time: %s", index, delayTime)
		if (delayTime > 0 and self._bossHpRemainingDelayTime[index] < 0
			and self._bossHpCurrentProgress[index] == oldProgress) then
			self._bossHpRemainingDelayTime[index] = delayTime
		end
	end
end

--- 隐藏BOSS血条
---@param self SEUiBattlePanel
---@param index number
function SEUiBattlePanel:HideBossHPBar(index)
	self._pendingShowBossHp = nil
    if (not self._ui or Utils.IsNull(self._ui._bossHp[index])) then return end
	if (not index) then index = 1 end
	self._ui._bossHp[index]:SetActive(false)
	if (Utils.IsNotNull(self._ui._bossHpArea)) then
		for _, go in pairs(self._ui._bossHp) do
			if (Utils.IsNotNull(go) and go.activeSelf) then
				self._ui._bossHpArea:SetActive(true)
				break
			end
		end
	end
    --self._ui:UpdateEnemyRound()
end

function SEUiBattlePanel:HideBossHPBarAll()
	if (not self._ui or not self._ui._bossHp) then return end
	for key, value in pairs(self._ui._bossHp) do
		if Utils.IsNotNull(value) then
			value:SetVisible(false)
		end
	end
end

--- 显示BOSS血条
---@param self SEUiBattlePanel
---@param name string 名称
---@param level number 等级
---@param icon number 图标引用
---@param index number 索引
function SEUiBattlePanel:ShowBossHPBar(name, level, icon, index)
	-- if (self._battleType ~= BATTLE_TYPE_ELITE) then
	-- 	self:GetEnvironment():SetTargetName(name)
	-- end
	if not self._ui then
		self._pendingShowBossHp = {name = name, level = level, icon = icon, index = index}
		return
	end
	self._pendingShowBossHp = nil
	if (not index) then index = 1 end
	if (Utils.IsNull(self._ui._bossHp[index])) then return end
	SELogger.Trace("ShowBossHPBar %s, %s, %s", name, level, index)
	self._ui:ChangeBossType(self._battleType)
	self._ui._bossName[index].text = name
	self._ui._bossLevelText[index].text = tostring(level)
	self._ui:LoadBossIcon(index, icon)
	self._ui._bossHp[index]:SetActive(true)
	self:EndBossHpTween(index)
	self._bossHpCurrentProgress[index] = 0
	self._bossHpTargetProgress[index] = 1
	if (Utils.IsNotNull(self._ui._bossHpArea)) then
		for _, go in pairs(self._ui._bossHp) do
			if (Utils.IsNotNull(go) and go.activeSelf) then
				self._ui._bossHpArea:SetActive(true)
				break
			end
		end
	end
	self._ui:ShowGroupTitleText(false)
	self:ShowLevelTarget()
end

--- 显示关卡目标
---@param self SEUiBattlePanelt
function SEUiBattlePanel:ShowLevelTarget()
	if (not self._ui) then return end

	local tipsCount = ConfigRefer.ConstSe:SeBattleGoalTipsTextLength()
	if self._battleType + 1 > tipsCount then
		self._ui:ShowGroupTitleText(false)
		return
	end
	if self._env and self._env:GetEnvMode() == SEEnvironmentModeType.CityScene then
		self._ui:ShowGroupTitleText(false)
		return
	end

	local key = ConfigRefer.ConstSe:SeBattleGoalTipsText(self._battleType + 1)
	if (not key) then key = "*缺失多语言常量配置*" end
	if (self._battleType == BATTLE_TYPE_BOSS) then
		self._ui:ShowGroupTitleText(true, true)
		self._ui._groupTitleText.text = I18N.GetWithParams(key, self._env._targetName)
	elseif (self._battleType == BATTLE_TYPE_NPC) then
		self._ui:ShowGroupTitleText(true, true)
		self._ui._groupTitleText.text = I18N.GetWithParams(key, self._env._targetName)
	elseif (self._battleType == BATTLE_TYPE_PET) then
		self._ui:ShowGroupTitleText(true, true)
		self._ui._groupTitleText.text = I18N.GetWithParams(key)
	elseif (self._battleType == BATTLE_TYPE_ELITE) then
		self._ui:ShowGroupTitleText(true, true)
		self._ui._groupTitleText.text = I18N.GetWithParams(key, self._env._targetName)
	elseif (self._battleType == BATTLE_TYPE_PVP) then
		self._ui:ShowGroupTitleText(false)
	--else
		--self._ui:ShowGroupTitleText(false)
	end
end

---@param self SEUiBattlePanel
---@param index number
function SEUiBattlePanel:EndBossHpTween(index)
	if (not self._ui or Utils.IsNull(self._ui._bossHp[index])) then return end
	if (not index) then index = 1 end
	self._bossHpCurrentProgress[index] = self._bossHpTargetProgress[index]
	self._bossHpRemainingDelayTime[index] = -1
	self._bossHpGradientStartProgress[index] = -1
	self._bossHpGradientEndProgress[index] = -1
end

---@param self SEUiBattlePanel
---@param phase1 number
---@param phase2 number
---@param phase3 number
---@param index number
function SEUiBattlePanel:ShowBossPhases(phase1, phase2, phase3, index)
	if (not self._ui or Utils.IsNull(self._ui._bossHp[index])) then return end
	if (not index) then index = 1 end
	if (phase1 and phase1 > 0) then
		self._ui._bossPhases[index][1].gameObject:SetActive(true)
		self._ui._bossPhases[index][1].value = math.clamp01(phase1)
	else
		self._ui._bossPhases[index][1].gameObject:SetActive(false)
	end
	if (phase2 and phase2 > 0) then
		self._ui._bossPhases[index][2].gameObject:SetActive(true)
		self._ui._bossPhases[index][2].value = math.clamp01(phase2)
	else
		self._ui._bossPhases[index][2].gameObject:SetActive(false)
	end
	if (phase3 and phase3 > 0) then
		self._ui._bossPhases[index][3].gameObject:SetActive(true)
		self._ui._bossPhases[index][3].value = math.clamp01(phase3)
	else
		self._ui._bossPhases[index][3].gameObject:SetActive(false)
	end
end

--- 更新BOSS血条缓动
---@param self SEUiBattlePanel
---@param delta number
---@param index number
function SEUiBattlePanel:UpdateBossHpTween(delta, index)
	if (not self._ui or Utils.IsNull(self._ui._bossHp[index])) then return end
	if (not index) then index = 1 end

	if (not self._ui._bossHp[index].activeInHierarchy) then return end
	if (self._bossHpCurrentProgress[index] == self._bossHpTargetProgress[index]
		or self._bossHpTargetProgress[index] < 0
		or self._bossHpCurrentProgress[index] < 0) then
		return
	end

	SELogger.LogLow("UpdateBossHpTween %s, cur: %s, tar: %s, delta: %s", index,
		self._bossHpCurrentProgress[index], self._bossHpTargetProgress[index], delta)

	local foreSpeed = BOSS_HP_TWEEN_FORE_SPEED
	local backSpeed = BOSS_HP_TWEEN_BACK_SPEED

	if (self._bossHpCurrentProgress[index] < self._bossHpTargetProgress[index]) then
		-- 增长
		if (foreSpeed > 0) then
			self._bossHpCurrentProgress[index] = self._bossHpCurrentProgress[index] + 1 / foreSpeed * delta
			if (self._bossHpCurrentProgress[index] > self._bossHpTargetProgress[index]) then
				self:EndBossHpTween(index)
			end
		else
			self:EndBossHpTween(index)
		end
		self._ui._bossHpFront[index].value = self._bossHpCurrentProgress[index]
		self._ui._bossHpBack[index].fillAmount = self._bossHpCurrentProgress[index]
	else
		-- 减少
		if (self._bossHpRemainingDelayTime[index] > 0) then
			self._bossHpRemainingDelayTime[index] = self._bossHpRemainingDelayTime[index] - delta
			return
		end

		SELogger.LogLow("boss %s back prg reduce: %s, backSpeed: %s", index, 1 / backSpeed * delta, backSpeed)

		self._bossHpCurrentProgress[index] = self._bossHpCurrentProgress[index] - 1 / backSpeed * delta

		-- 结束
		if (self._bossHpCurrentProgress[index] < self._bossHpTargetProgress[index]) then
			self:EndBossHpTween(index)
		end
	end
	self._ui._bossHpBack[index].fillAmount = self._bossHpCurrentProgress[index]
	SELogger.LogLow("BOSS %s HP back prg: %s", index, self._bossHpCurrentProgress[index])
end

---@param self SEUiBattlePanel
---@param cardItem SEHudBattleSkillCardItem
function SEUiBattlePanel:SyncCardDeathMask(cardItem)
    -- if (not cardItem or cardItem:IsPetCard()) then return end
    -- cardItem:GetDeathMaskTransform().position = cardItem:GetCardTransform().position
    -- cardItem:GetDeathMaskTransform().localPosition = cardItem:GetDeathMaskTransform().localPosition + CARD_DEATH_MASK_LOCAL_OFFSET
end

---@param self SEUiBattlePanel
---@param current number
---@param total number
function SEUiBattlePanel:UpdateEnemyRound(current, total)
	self:GetEnvironment():SetCounterValue(current, total)

    if (not self._ui) then return end
	
	if (self._battleType == BATTLE_TYPE_NORMAL) then
		self._ui:UpdateGroupTitleText(current, total)
	end
end

---@param self SEUiBattlePanel
---@return SEHudMediator
function SEUiBattlePanel:GetHud()
	return self._hud
end

--- 刷新英雄状态列表
---@param self SEUiBattlePanel
---@param loadIcon boolean
function SEUiBattlePanel:RefreshHeroStatus(loadIcon)
	if (not self._hud or not self._ui) then return end

	local list = self._env._unitManager._heroOrderedList
	local index = 1
	for _, hero in ipairs(list) do
		if (hero) then
			if (Utils.IsNotNull(self._ui._heroStatus[index])) then
				local dead = hero:IsDead()
				self._ui._heroStatus[index]:SetActive(true)
				if (loadIcon and Utils.IsNotNull(self._ui._heroStatusImg[index])) then
					local heroIcon = ConfigRefer.HeroClientRes:Find(hero:GetHeroConfig():ClientResCfg()):HeadMini()
					self._ui:LoadHeroStatusIcon(index, heroIcon)
					self._ui:LoadHeroBackImg(index, hero:GetHeroConfig():Quality())
				end
				local hpp = hero:GetHPPct()
				if (Utils.IsNotNull(self._ui._heroStatusHp[index])) then
					self._ui._heroStatusHp[index].value = hpp
					if (not self._heroLastHpp[index]) then
						self._heroLastHpp[index] = hpp
					end
					if (hpp > self._heroLastHpp[index]) then
						---@type CS.UnityEngine.Animation
						local anim = self._ui._heroHealAnim[index]
						if (anim) then
							anim:Rewind()
							anim:Play()
						end
					end
				end
				if (Utils.IsNotNull(self._ui._heroStatusWarning[index])) then
					local warning = not dead and hpp <= HERO_HP_WARNING_PCT
					if (not self._heroWarningLastStatus[index]) then
						self._heroWarningLastStatus[index] = false
					end
					if (warning and not self._heroWarningLastStatus[index]) then
						self._ui._heroStatusWarning[index]:SetVisible(true)
						---@type CS.FpAnimation.FpAnimatorTotalCommander
						local cmd = self._ui._heroWarningOpenAnim[index]
						if (cmd) then
							cmd:PlayAll()
						end
					elseif (not warning and self._heroWarningLastStatus[index]) then
						---@type CS.FpAnimation.FpAnimatorTotalCommander
						local cmd = self._ui._heroWarningCloseAnim[index]
						if (cmd) then
							local go = self._ui._heroStatusWarning[index]
							cmd:PlayAll(function()
								if Utils.IsNotNull(go) then
									go:SetVisible(false)
								end
							end)
						end
					else
						self._ui._heroStatusWarning[index]:SetVisible(false)
					end
					self._heroWarningLastStatus[index] = warning
					--self._ui._heroStatusWarning[index]:SetActive(warning)
				end
				if (Utils.IsNotNull(self._ui._heroStatusDeath[index])) then
					self._ui._heroStatusDeath[index]:SetActive(dead)
					if (dead and not self._heroAlreadyDead[index]) then
						self._heroAlreadyDead[index] = true
						self._ui._heroStatusWarning[index]:SetActive(false)

						---@type CS.FpAnimation.FpAnimatorTotalCommander
						local cmd = self._ui._heroWarningOpenAnim[index]
						if (cmd) then
							cmd:StopAll()
						end

						---@type CS.FpAnimation.FpAnimatorTotalCommander
						cmd = self._ui._heroWarningCloseAnim[index]
						if (cmd) then
							cmd:StopAll()
						end

						---@type CS.UnityEngine.Animation
						local anim = self._ui._heroDeathAnim[index]
						if (anim) then
							anim:Rewind()
							anim:Play()
						end
					end
				end
				if (Utils.IsNotNull(self._ui._heroStatusImg[index])) then
					UIHelper.SetGray(self._ui._heroStatusImg[index].gameObject, dead)
				end
			end
		else
			if (Utils.IsNotNull(self._ui._heroStatus[index])) then
				self._ui._heroStatus[index]:SetActive(false)
			end
		end
		index = index + 1
	end
	for i = index, HERO_MAX_COUNT do
		if (Utils.IsNotNull(self._ui._heroStatus[i])) then
			self._ui._heroStatus[i]:SetActive(false)
		end
	end
end

function SEUiBattlePanel:SetPreventAutoMove(prevent)
	self._preventAutoMove = prevent
end

function SEUiBattlePanel:IsPreventAutoMove()
	return self._preventAutoMove
end

function SEUiBattlePanel:SetSETimerShow(show)
	self._uiTimeHintShow = show
	if (not self._ui) then return end
	self._ui._timeHint:SetVisible(show)
end

function SEUiBattlePanel:SetSETimerText(text, autoShow)
	if (not self._ui) then return end
	if (autoShow) then self._ui._timeHint:SetActive(true) end
	self._ui._timeHintText.text = text
end

--- 限制屏幕坐标在屏幕内
---@param self SEUiBattlePanel
---@param screenPos CS.UnityEngine.Vector2
function SEUiBattlePanel:CapScreenPos(screenPos)
	if (not screenPos) then return end
	local screen = CS.UnityEngine.Screen
	local capped = false
	local x = screenPos.x
	local y = screenPos.y
	if (x < 0) then
		x = 0
		capped = true
	elseif (x > screen.width) then
		x = screen.width
		capped = true
	end
	if (y < 0) then
		y = 0
		capped = true
	elseif (y > screen.height) then
		y = screen.height
		capped = true
	end
	if (capped) then
		return CS.UnityEngine.Vector2(x, y)
	else
		return screenPos
	end
end

---@param self SEUiBattlePanel
---@param show boolean
function SEUiBattlePanel:ShowKO(show)
	if (not self._ui) then return end
	self._ui._autoBattleNode:SetActive(false)
	self._ui._koNode:SetActive(show)
	if (show) then
		self._koStartTime = g_Game.Time.time
	end
end

---@param isSuccess boolean
---@param reply wrpc.AutoCastPetCardReply
---@param req wrpc.AutoCastPetCardRequest
function SEUiBattlePanel:OnAutoCastPetCardResponse(isSuccess, reply, req)
	if not isSuccess then return end

	-- 切换自动战斗时取消当前正在使用的技能
	self:CancelUsingSkill()

	local playerScene = self._env:GetWdsManager():GetScenePlayer()
	local curretnCardInfo = playerScene.ScenePlayerCard.Infos[self._env:GetCurrentFocusPresetIndex() or self._env:GetFallbackPresetIndex()]
	self._env:SetAutoBattle(curretnCardInfo and curretnCardInfo.AutoCastPetCard)
	if not self._ui then return end
	self._ui:UpdateAutoBattleButton()
end

--- 自动战斗逻辑
---@param self SEUiBattlePanel
function SEUiBattlePanel:DoAutoBattle()
	if (not self._env:IsAutoBattle() or not self._env:IsInBattle()) then return end

	-- 尚未选定使用卡牌
	if (not self._autoBattleDraggingCardGo) then
		local cardGo, skillCfg = self:AutoBattleSelectCard()
		if (cardGo) then
			self._autoBattleDraggingCardGo = cardGo
			self._autoBattleDraggingCardSkillCfg = skillCfg
		end

	-- 已经选定使用的卡牌
	else

		-- 确定目标单位
		if (not self._autoBattleDraggingCardTarget) then
			local skillTag = self._autoBattleDraggingCardSkillCfg:SESkillTag()
			if (skillTag == SkillTag.Dps or skillTag == SkillTag.Control) then
				self._autoBattleDraggingCardTarget = self._env._unitManager:GetFirstHostileUnit()
			else
				local cardItem = self:GetCardItemByGo(self._autoBattleDraggingCardGo)
				if (cardItem) then
					local heroCfg = cardItem:GetHeroCfgCell()
					if (heroCfg) then
						self._autoBattleDraggingCardTarget = self._env._unitManager:GetHeroByHeroCfgId(heroCfg:Id())
					end
					if (not self._autoBattleDraggingCardTarget or self._autoBattleDraggingCardTarget:IsDead()) then
						self._autoBattleDraggingCardTarget = self._env._unitManager:GetCaptain()
					end
				end
			end
			if (not self._autoBattleDraggingCardTarget) then return end
			local targetScreenPos = self._env._camera:WorldToScreenPoint(self._autoBattleDraggingCardTarget:GetActor():GetPosition())
			self._autoBattleDraggingCardEndPos = CS.UnityEngine.Vector2(targetScreenPos.x, targetScreenPos.y)
		end

		-- 开始模拟拖拽
		if (self._autoBattleDraggingStartTime <= 0) then
			self._autoBattleDraggingCardStartPos = self._autoBattleDraggingCardGo.transform:GetScreenCenterV2(g_Game.UIManager:GetUICamera())
			self:OnCardItemDragStart(self._autoBattleDraggingCardGo, {
				position = self._autoBattleDraggingCardStartPos,
			}, true)
		else
			local t = (g_Game.Time.time - self._autoBattleDraggingStartTime) / AUTO_BATTLE_CARD_DRAG_TIME
			
			-- 拖拽中
			if (t < 1) then
				local pos = CS.UnityEngine.Vector2.Lerp(self._autoBattleDraggingCardStartPos, self._autoBattleDraggingCardEndPos, t)
				self:OnCardItemDrag(self._autoBattleDraggingCardGo, {
					position = pos,
				}, true)

			-- 结束
			else
				self:OnCardItemDragEnd(self._autoBattleDraggingCardGo, {
					position = self._autoBattleDraggingCardEndPos,
				}, true)

			end
		end

	end
end

--- 自动战斗选择卡牌
---@param self SEUiBattlePanel
---@return CS.UnityEngine.GameObject
function SEUiBattlePanel:AutoBattleSelectCard()
	-- 等待
	if (self._autoBattleCardUseWaitStartTime > 0) then
		if (g_Game.Time.time - self._autoBattleCardUseWaitStartTime < AUTO_BATTLE_CARD_USE_WAIT) then
			return
		else
			self._autoBattleCardUseWaitStartTime = 0
		end
	end
	
	-- 选定权重最高的卡牌
	local candidates = {}
	for i = 1, UI_CARD_COUNT do
		local cardItem = self:GetCardItem(i)
		if (cardItem) then
			local skillCfg = cardItem:GetSkillCfgCell()
			if (skillCfg and skillCfg:AutoBattleWeight() > 0) then
				local aliveWeight = 999999
				local cardHero = cardItem:GetHeroCfgCell()
				if (not cardHero) then
					aliveWeight = 0
				else
					local hero = self._env._unitManager:GetHeroByHeroCfgId(cardHero:Id())
					if (not hero or hero:IsDead()) then
						aliveWeight = 0
					end
				end
				local baseWeight = skillCfg:AutoBattleWeight() + aliveWeight
				local conditionWeight = self:AutoBattleGetWeight(skillCfg:SESkillTag())
				table.insert(candidates, {
					cfg = skillCfg,
					cfgId = skillCfg:Id(),
					weight = baseWeight + conditionWeight,
					go = cardItem.selfGo,
				})
				SELogger.Trace("自动战斗: 卡牌%s 权重%s = 基础权重%s + 条件权重%s", skillCfg:Id(), baseWeight + conditionWeight, baseWeight, conditionWeight)
			end
		end
	end
	table.sort(candidates, function(a, b)
		return a.weight > b.weight
	end)
	if (not table.isNilOrZeroNums(candidates)) then
		local selected = candidates[1]
		SELogger.Trace("自动战斗: 选定卡牌 %s 权重 %s", selected.cfgId, selected.weight)
		return selected.go, selected.cfg
	end
end

--- 自动战斗获取条件权重
---@param self SEUiBattlePanel
---@param skillTag number
---@return number
function SEUiBattlePanel:AutoBattleGetWeight(skillTag)
	local weight = 0
	if (self._autoBattleConditionList[skillTag]) then
		for _, data in ipairs(self._autoBattleConditionList[skillTag]) do
			if (self:AutoBattleIsConditionMet(data.condition, data.floatParam, data.strParam)) then
				weight = weight + data.weight
			end
		end
	end
	return weight
end

--- 自动战斗判断条件是否满足
---@param self SEUiBattlePanel
---@param condition number
---@param floatParam number
---@param strParam string
---@return boolean
function SEUiBattlePanel:AutoBattleIsConditionMet(condition, floatParam, strParam)
	-- 我方任意英雄血量小于等于X%
	if (condition == AutoBattleCondition.HeroHP) then
		for _, hero in pairs(self._env._unitManager._heroList) do
			if (hero and not hero:IsDead() and hero:GetHP() * 100 / hero:GetHPMax() <= floatParam) then
				return true
			end
		end

	-- 场上敌方数量大于等于X
	elseif (condition == AutoBattleCondition.MonsterNum) then
		if (self._env._unitManager:GetHostileUnitCount() >= floatParam) then
			return true
		end

	-- 场上我方召唤物数量大于等于X
	elseif (condition == AutoBattleCondition.PuppetNum) then
		if (self._env._unitManager:GetFriendlyUnitCount(SEUnitType.Puppet) >= floatParam) then
			return true
		end
	end
end

--- 开启加速
---@param self SEUiBattlePanel
function SEUiBattlePanel:SpeedUpOn(lockable)
	return self._env:SetBattleSpeed(AUTO_BATTLE_FAST_SPEED, nil, nil, lockable)
end

--- 关闭加速
---@param self SEUiBattlePanel
function SEUiBattlePanel:SpeedUpOff(lockable)
	return self._env:SetBattleSpeed(1, nil, nil, lockable)
end

--- 尝试躲避技能
---@param self SEUiBattlePanel
---@param skillCfg KheroSkillLogicalSeConfigCell
---@param msg wrpc.PushBattleCastSkillMessageRequest
function SEUiBattlePanel:TryAvoidSkill(skillCfg, msg)
	if (not skillCfg or not msg) then return end
	SELogger.Trace("自动战斗: 尝试躲避技能 %s", skillCfg:Id())

	local attacker = self._env._unitManager:GetUnit(msg.MsgSkill.Attacker)
	if (not attacker or not attacker:IsHostile() or attacker:IsDead()) then return end
	local captain = self._env._unitManager:GetCaptain()
	if (not captain) then return end
	local fpos = captain.m_entity.BasicInfo.FormationPos
	local formationPos = CS.UnityEngine.Vector3(fpos.X, fpos.Z, fpos.Y)
	local escapeToPos = formationPos

	-- 圆形技能
	if (skillCfg:Shape() == ShapeType.Round) then
		local tpos = msg.MsgSkill.SkillInfo.TargetPos
		local circleCenter = CS.UnityEngine.Vector3(tpos.X, tpos.Z, tpos.Y)
		local escapeDir = formationPos - circleCenter
		if (escapeDir == VECTOR3_ZERO) then
			escapeDir = VECTOR3_FORWARD
		end
		escapeToPos = escapeDir.normalized * (skillCfg:Length() + SKILL_AVOID_EXTRA_DISTANCE) + formationPos
		SELogger.Trace("自动战斗: 尝试躲避位于 %s 处半径为 %s 的圆形技能", circleCenter, skillCfg:Length())

	-- 矩形技能
	elseif (skillCfg:Shape() == ShapeType.Rectangle) then
		local tpos = msg.MsgSkill.SkillInfo.TargetPos
		local rectCenter = CS.UnityEngine.Vector3(tpos.X, tpos.Z, tpos.Y)
		local rectDir = CS.UnityEngine.Vector3(msg.MsgSkill.SkillInfo.TargetDir.X, 0, msg.MsgSkill.SkillInfo.TargetDir.Y).normalized
		if (skillCfg:Length() > skillCfg:Width()) then
			escapeToPos = CS.UnityEngine.Quaternion.AngleAxis(90, CS.UnityEngine.Vector3.up) * rectDir * (skillCfg:Width() + SKILL_AVOID_EXTRA_DISTANCE) + rectCenter
		else
			escapeToPos = rectDir * (skillCfg:Length() + SKILL_AVOID_EXTRA_DISTANCE) + rectCenter
		end
		SELogger.Trace("自动战斗: 尝试躲避位于 %s 处长为 %s 宽为 %s 方向为 %s 的矩形技能", rectCenter,
			skillCfg:Length(), skillCfg:Width(), msg.MsgSkill.SkillInfo.TargetDir)
	end

	-- 在躲避目标点附近找一个可达点
	SELogger.Trace("自动战斗: 尝试躲避至目标点 %s", escapeToPos)
	local result, hit = CS.UnityEngine.AI.NavMesh.SamplePosition(escapeToPos, SKILL_AVOID_SEARCH_RADIUS, CS.UnityEngine.AI.NavMesh.AllAreas)
	if (not result) then
		SELogger.Trace("自动战斗: 躲避目标点 %s 附近未找到可达点, 放弃躲避!", escapeToPos)
		return
	end
	SELogger.Trace("自动战斗: 躲避到可达点 %s", hit.position)

	-- 判断可达点在屏幕内
	local viewPort = self._env._camera:WorldToViewportPoint(hit.position)
	if (viewPort.x < 0 or viewPort.x > 1 or viewPort.y < 0 or viewPort.y > 1) then
		SELogger.Trace("自动战斗: 躲避点 %s 不在屏幕内, 放弃躲避!", hit.position)
		return
	end

	self._env._inputManager:MoveToWorldPos(hit.position)
end

function SEUiBattlePanel:RefreshPvpInfo()
	if (not self._ui) then return end
	self._ui._pvpNode:SetVisible(self._battleType == BATTLE_TYPE_PVP)

	if (self._battleType == BATTLE_TYPE_PVP) then 
		self._ui:RefreshPvpInfo()
	end
end

--- 获取指定index卡的CD信息，毫秒
---@param self SEUiBattlePanel
---@return number, number
function SEUiBattlePanel:GetCardCdByIndex(index)
	local cardInfo = self._cardInfoList[index]
	return self:GetCardCd(cardInfo)
end

--- 卡牌释放的剩余CD, CD时长(配置)，毫秒
---@param self SEUiBattlePanel
---@param runtimeCardData SECardRuntimeData
---@return number, number
function SEUiBattlePanel:GetCardCd(runtimeCardData)
	if not runtimeCardData then
		return 0, 0
	end

	local now = self._env:GetServerTime()
	return math.max(0, runtimeCardData.cdEndMs - now), runtimeCardData.cdMs
end

function SEUiBattlePanel:ShowPet(imageId)
	if self._hideSkillShow then return end
	if (not self._ui) then return end
	self._ui:ShowPet(imageId)
end

function SEUiBattlePanel:ShowPetEnemy(imageId)
	if self._hideSkillShow then return end
	if (not self._ui) then return end
	self._ui:ShowPetEnemy(imageId)
end

function SEUiBattlePanel:ShowCard(skillId, attacker)
	if (not self._ui) then return end
	local heroList = self._env._unitManager:GetHeroOrderedList()
	local index = -1
	for i, hero in ipairs(heroList) do
		if (hero and hero.m_entity and hero.m_entity.ID == attacker) then
			index = i
			break
		end
	end
	local cardId = self._skill2CardMap[skillId]
	if (index > 0 and cardId and cardId > 0) then
		self._ui:ShowCard(index, cardId)
	end
end

function SEUiBattlePanel:OnPanelUIClose()
	table.clear(self._cardItemGoCache)
	table.clear(self._cardItemIndexCache)
	self._ui = nil
end

return SEUiBattlePanel
