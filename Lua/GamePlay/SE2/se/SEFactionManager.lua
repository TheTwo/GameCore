---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by BE.Tenner.
--- DateTime: 2021/9/2 15:46
---

local ConfigRefer = require("ConfigRefer")
local FactionType = require("FactionType")
local ArtResourceUtils = require("ArtResourceUtils")

---@class SEFactionManager
local SEFactionManager = class("SEFactionManager")

local FACTION_MASK = {
    [1] = 1 << 0,
    [2] = 1 << 1,
    [3] = 1 << 2,
    [4] = 1 << 3,
    [5] = 1 << 4,
    [6] = 1 << 5,
    [7] = 1 << 6,
    [8] = 1 << 7,
    [9] = 1 << 8,
    [10] = 1 << 9,
    [11] = 1 << 10,
    [12] = 1 << 11,
    [13] = 1 << 12,
    [14] = 1 << 13,
    [15] = 1 << 14,
    [16] = 1 << 15,
    [17] = 1 << 16,
    [18] = 1 << 17,
    [19] = 1 << 18,
    [20] = 1 << 19
}

---@param self SEFactionManager
---@return void
function SEFactionManager:ctor()
    self._hostileTable = {}
    self._friendlyTable = {}

    
    self._enemyMat = ArtResourceUtils.GetItem(ConfigRefer.ReplicaPvpConst:MatEnemy())

    for _, v in ConfigRefer.FactionRelative:ipairs() do
        local faction = ConfigRefer.Faction:Find(v:FactionConf())
		local factionId = faction:FactionId()
        if (v:Typ() == FactionType.SE) then
            if (v:EnemyLength() > 0) then
                for j = 1, v:EnemyLength() do
                    local e = v:Enemy(j)
                    if (not self._hostileTable[factionId]) then
                        self._hostileTable[factionId] = {}
                    end
                    self._hostileTable[factionId][e] = true
                end
            end
            if (v:FriendLength() > 0) then
                for k = 1, v:FriendLength() do
                    local f = v:Friend(k)
                    if (not self._friendlyTable[factionId]) then
                        self._friendlyTable[factionId] = {}
                    end
                    self._friendlyTable[factionId][f] = true
                end
            end
        end
    end
end

---@param self SEFactionManager
---@return void
function SEFactionManager:Dispose()
    self._hostileTable = {}
    self._friendlyTable = {}
end

---获取阵营列表
---@param self SEFactionManager
---@param faction number
---@return table
function SEFactionManager:GetFactionList(faction)
    if (not faction or faction <= 0) then
        return nil
    end
    local result = {}
    for k, v in pairs(FACTION_MASK) do
        if (faction & v) == v then
            table.insert(result, k)
        end
    end
    return result
end

---是否友善
---@param self SEFactionManager
---@param faction1 number
---@param faction2 number
---@return boolean
function SEFactionManager:IsFriendly(faction1, faction2)
    if (faction1 == faction2) then
        return true
    end

    local f1 = self:GetFactionList(faction1)
    local f2 = self:GetFactionList(faction2)
    if (not f1 or not f2) then
        return false
    end

    for _, v1 in pairs(f1) do
        for _, v2 in pairs(f2) do
            if (self._friendlyTable[v1] and self._friendlyTable[v1][v2]) then
                return true
            end
        end
    end

    return false
end

---是否敌对
---@param self SEFactionManager
---@param faction1 number
---@param faction2 number
---@return boolean
function SEFactionManager:IsHostile(faction1, faction2)
    if (faction1 == faction2) then
        return false
    end

    local f1 = self:GetFactionList(faction1)
    local f2 = self:GetFactionList(faction2)
    if (not f1 or not f2) then
        return false
    end
    for _, v1 in pairs(f1) do
        for _, v2 in pairs(f2) do
            if (self._hostileTable[v1] and self._hostileTable[v1][v2]) then
                return true
            end
        end
    end
    return false
end

---是否中立
---@param self SEFactionManager
---@param faction1 number
---@param faction2 number
---@return boolean
function SEFactionManager:IsNeutral(faction1, faction2)
    return not self:IsFriendly(faction1, faction2) and not self:IsHostile(faction1, faction2)
end

function SEFactionManager:GetEnemyAppendMat()
    return self._enemyMat
end

return SEFactionManager
