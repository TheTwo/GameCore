---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shuo.cheng.
--- DateTime: 2021/8/3 10:26
---

---@class BehaviourManager
local BehaviourManager = class("BehaviourManager")
local m_Instance

local _classMap = {
    [CS.CG.Plot.BehaviourType.ShowDialogue] = "ShowDialogue",
    [CS.CG.Plot.BehaviourType.BubbleDialog] = "ShowBubbleDialog",
    [CS.CG.Plot.BehaviourType.GameEvent] = "TimelineGameEvent",
    [CS.CG.Plot.BehaviourType.SoundEvent] = "TimelineSoundEvent",
    [CS.CG.Plot.BehaviourType.VibrateEvent] = "TimelineVibrate",
}

---@return BehaviourManager
function BehaviourManager.Instance()
    if m_Instance == nil then
        m_Instance = BehaviourManager.new()
    end
    return m_Instance
end

function BehaviourManager:ctor()
    ---@type table<CS.CG.Plot.BehaviourType, BaseBehaviour>
    self.m_cacheBehaviours = {}
    ---@type table<BaseBehaviour, BaseBehaviour>
    self._currentUsedBehaviours = {}
end

function BehaviourManager:CleanUp()
    for _, v in pairs(self.m_cacheBehaviours) do
        v:CleanUp()
    end
end

---@param behaviourType CS.CG.Plot.BehaviourType
---@vararg any
function BehaviourManager:OnBehaviourStart(behaviourType, ...)
    local behaviour, behArgs = self:_GetBehaviour(behaviourType, ...)
    if behaviour then
        behaviour:OnStart(behArgs)
        self._currentUsedBehaviours[behaviour] = behaviour
    end
end

---@param behaviourType CS.CG.Plot.BehaviourType
---@vararg any
function BehaviourManager:OnBehaviourEnd(behaviourType, ...)
    local behaviour, behArgs = self:_GetBehaviour(behaviourType, ...)
    if behaviour then
        behaviour:OnEnd(behArgs)
        self._currentUsedBehaviours[behaviour] = nil
    end
end

---@param behaviourType CS.CG.Plot.BehaviourType
---@vararg any
function BehaviourManager:OnBehaviourPause(behaviourType, ...)
    local behaviour, behArgs = self:_GetBehaviour(behaviourType, ...)
    if behaviour then
        behaviour:OnPause(behArgs)
        self._currentUsedBehaviours[behaviour] = behaviour
    end
end

---@param behaviourType CS.CG.Plot.BehaviourType
---@vararg any
function BehaviourManager:OnBehaviourResume(behaviourType, ...)
    local behaviour, behArgs = self:_GetBehaviour(behaviourType, ...)
    if behaviour then
        behaviour:OnResume(behArgs)
        self._currentUsedBehaviours[behaviour] = behaviour
    end
end

---@param behaviourType CS.CG.Plot.BehaviourType
---@vararg any
function BehaviourManager:OnBehaviourTick(behaviourType, ...)
    local behaviour, behArgs = self:_GetBehaviour(behaviourType, ...)
    if behaviour then
        behaviour:OnTick(behArgs)
        self._currentUsedBehaviours[behaviour] = behaviour
    end
end

function BehaviourManager:OnTimelineExit()
    for _, v in pairs(self._currentUsedBehaviours) do
        v:OnCurrentTimelineExit()
    end
    table.clear(self._currentUsedBehaviours)
end

---@param behaviourType CS.CG.Plot.BehaviourType
---@vararg any
---@return BaseBehaviour|nil
function BehaviourManager:_GetBehaviour(behaviourType, ...)
    local _args = table.pack(...)
    local cache = self.m_cacheBehaviours[behaviourType]
    if not cache then
        local clsName = _classMap[behaviourType]
        if not clsName then
            g_Logger.Error("Can't find the behaviour type %s %s", tostring(behaviourType), clsName)
            return
        end
        local cls = require(clsName)
        if not cls then
            g_Logger.Error("Can't find the behaviour type %s %s", tostring(behaviourType), clsName)
            return
        end
        cache = cls.Instance()
        self.m_cacheBehaviours[behaviourType] = cache
    end

    return cache, _args
end

return BehaviourManager