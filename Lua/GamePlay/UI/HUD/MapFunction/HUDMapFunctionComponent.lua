---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/5/16 17:10
---
local BaseUIComponent = require('BaseUIComponent')
local Utils = require('Utils')
local ModuleRefer = require('ModuleRefer')
local Delegate = require('Delegate')
local EventConst = require('EventConst')
local UIMediatorNames = require('UIMediatorNames')
local KingdomMapUtils = require('KingdomMapUtils')
local I18N = require('I18N')
local ConfigRefer = require('ConfigRefer')
local CityFurnitureHelper = require('CityFurnitureHelper')
local NotificationType = require('NotificationType')
local DBEntityPath = require('DBEntityPath')
local TimerUtility = require('TimerUtility')
local AllianceModuleDefine = require("AllianceModuleDefine")
local NewFunctionUnlockIdDefine = require("NewFunctionUnlockIdDefine")
local MailTipComponent = require("MailTipComponent")
local KingdomConstant = require("KingdomConstant")

---@class HUDMapFunctionComponent : BaseUIMediator
local HUDMapFunctionComponent = class("HUDMapFunctionComponent",BaseUIComponent)

---@protected
function HUDMapFunctionComponent:ctor(...)
    BaseUIComponent.ctor(self, ...)
    -- self.gmTroopCDTimer = g_Game.ServerTime:GetServerTimestampInSeconds()
    -- self.gmTroopReadyTime = g_Game.PlayerPrefsEx:GetFloatByUid(GMTROOP_READY_TIME,0)
    -- self.gmTroopCDValue = ConfigRefer.ConstMain:GMTroopByConfigCD()

    self.mailTipComponent = MailTipComponent.new()
end

function HUDMapFunctionComponent:OnCreate(param)
    --CityComponents
    self._btn_Kingdom = self:Button('p_btn_wilderness',Delegate.GetOrCreate(self,self.OnKingdomButtonClick))
    self._go_Lock = self:GameObject('p_icon_lock')
    self:Text('p_text_wilderness','city_leftdown_btn_1')
    --KingdomComponents
    self._btn_City = self:Button('p_btn_city',Delegate.GetOrCreate(self,self.OnCityButtonClick))
    self:Text('p_text_city','city_leftdown_btn_2')
    --In City
    self._btn_AccidentCity = self:Button('p_btn_accident_city',Delegate.GetOrCreate(self,self.OnAccidentCityButtonClick))
    self._go_build_status_city = self:GameObject('p_build_status_city')
    self._btn_Build_city = self:Button('p_btn_build_city',Delegate.GetOrCreate(self,self.OnBuildCityButtonClick))
    self._comp_btn_science = self:LuaObject('child_hud_science')
    self.p_text_radar_quantity_city = self:Text('p_text_radar_quantity_city')

    --In World
    self._btn_AccidentWorld = self:Button('p_btn_accident_world',Delegate.GetOrCreate(self,self.OnAccidentWorldButtonClick))
    self._btn_Build_world = self:Button('p_btn_build_world',Delegate.GetOrCreate(self,self.OnBuildWorldButtonClick))
    self._btn_world_events = self:Button('p_btn_world_events',Delegate.GetOrCreate(self,self.OnWorldEventButtonClick))
    self._btn_world_mark = self:Button("p_btn_mark", Delegate.GetOrCreate(self, self.OnWorldMarkButtonClick))
    self.p_text_radar_quantity_world = self:Text('p_text_radar_quantity_world')

    self.goBuildWorld = self:GameObject('p_build_world')
    self.goAccidentCity = self:GameObject('p_accident_city')
    self.goAccidentWorld = self:GameObject('p_accident_world')
    self.goWorldEvents = self:GameObject('p_world_events')
    self.p_tips_new_event = self:GameObject('p_tips_new_event')
    self.p_popup_reward_city = self:Button('p_popup_reward_city',self.OnAccidentCityButtonClick)
    self.p_popup_reward_world = self:Button('p_popup_reward_world',self.OnAccidentWorldButtonClick)

    self.btnWorldSearch = self:Button('p_btn_world_search',Delegate.GetOrCreate(self,self.OnWorldSearchButtonClick))
    self.goWorldSearch = self:GameObject('p_world_search')

	self.mailButton = self:Button("p_btn_mail", Delegate.GetOrCreate(self, self.OnMailButtonClicked))

	---@type NotificationNode
	self.mailButtonRedDot = self:LuaObject("p_btn_mail_reddot")

    --reddot
    self.compChildReddotAccidentDefault = self:LuaObject('child_reddot_accident_default')
    self.compChildReddotWorldDefault = self:LuaObject('child_reddot_world_default')
    self._child_reddot_default_build_city = self:LuaObject("child_reddot_default_build_city")
    ---@type NotificationNode
    self._child_reddot_default_mark = self:LuaObject("child_reddot_default_mark")

    self.btnTask = self:Button('p_btn_daily_task', Delegate.GetOrCreate(self, self.OnBtnTaskClicked))
    self.taskProgress = self:Slider("p_task_progress")
    self.taskRedDot = self:LuaObject("child_reddot_default")

    self.secBtnsLayout = self:GameObject("sec_btns_layout")
    self.buttons = self:GameObject("buttons")

    self.p_popup_reward_city:SetVisible(false)
    self.p_popup_reward_world:SetVisible(false)
    self.p_tips_new_event:SetVisible(false)

    self.p_quantity_city = self:GameObject("p_quantity_city")
    self.p_quantity_world = self:GameObject("p_quantity_world")
    self.p_quantity_city:SetVisible(false)
    self.p_quantity_world:SetVisible(false)
end

--雷达红点改版
function HUDMapFunctionComponent:RefreshReddot(param)
    self.compChildReddotAccidentDefault:SetVisible(true)
    self.compChildReddotWorldDefault:SetVisible(true)
    local node1 = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("RADAR_ENTRY_RED_DOT_1", NotificationType.RADAR_ENTRY_RED_DOT)
    local node2 = ModuleRefer.NotificationModule:GetOrCreateDynamicNode("RADAR_ENTRY_RED_DOT_2", NotificationType.RADAR_ENTRY_RED_DOT)

    ModuleRefer.NotificationModule:AttachToGameObject(node1, self.compChildReddotAccidentDefault.go, self.compChildReddotAccidentDefault.redDot)
    ModuleRefer.NotificationModule:AttachToGameObject(node2, self.compChildReddotWorldDefault.go, self.compChildReddotWorldDefault.redDot)
end

function HUDMapFunctionComponent:OnShow(param)
    -- self._img_GmTroop_CD.enabled = self.gmTroopCDTimer < self.gmTroopReadyTime
    -- g_Game:AddFrameTicker(Delegate.GetOrCreate(self,self.Tick))

    self.mailTipComponent:Initialize(self)

    ModuleRefer.RadarModule:RefreshRedDot()
    self:RefreshReddot()

    local cityBuild = ModuleRefer.NotificationModule:GetOrCreateDynamicNode(CityFurnitureHelper.GetPlaceHudNotifyName(), NotificationType.CITY_FURNIURE_PLACE)
    ModuleRefer.NotificationModule:AttachToGameObject(cityBuild, self._child_reddot_default_build_city.go)
    g_Game.EventManager:AddListener(EventConst.QUEST_DATA_WATCHER_EVENT, Delegate.GetOrCreate(self,self.RefreshRadarBtnsState))
    g_Game.EventManager:AddListener(EventConst.RADAR_MEDIATOR_CLOSED, Delegate.GetOrCreate(self,self.OnRadarMediatorClosed))
    g_Game.EventManager:AddListener(EventConst.TASK_DATA_REFRESH, Delegate.GetOrCreate(self, self.RefreshConstructionBtnState))
    g_Game.EventManager:AddListener(EventConst.KINGDOM_SYSTEM_ENTRY_REFRESH, Delegate.GetOrCreate(self, self.OnKingdomSystemEntryChanged))
    g_Game.EventManager:AddListener(EventConst.HUD_HIDE_LAYOUT_BUTTONS, Delegate.GetOrCreate(self,self.HideLayoutButtons))
    g_Game.EventManager:AddListener(EventConst.RADAR_SHOW_NEW_TASK, Delegate.GetOrCreate(self, self.ShowRadarNewTask))
    g_Game.EventManager:AddListener(EventConst.RADAR_SHOW_REWARD_TASK, Delegate.GetOrCreate(self, self.ShowRadarRewardTask))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.Radar.MapRadarTask.EliteTasks.MsgPath, Delegate.GetOrCreate(self, self.RefreshRadarTaskNum))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.Radar.MapRadarTask.PetTrackInfo.PetTrackLeftTimes.MsgPath, Delegate.GetOrCreate(self, self.RefreshRadarTaskNum))

    self:RefreshRadarBtnsState()
    self:RefreshRadarTaskNum()
    self.goWorldEvents:SetVisible(false)

	-- 邮件红点
	local mailRedDot = ModuleRefer.MailModule:GetRedDotMain()
	ModuleRefer.NotificationModule:AttachToGameObject(mailRedDot, self.mailButtonRedDot.go)

    local allianceMark = ModuleRefer.NotificationModule:GetOrCreateDynamicNode(AllianceModuleDefine.NotifyNodeType.LabelEntry, NotificationType.ALLIANCE_LABEL_ENTRY)
    ModuleRefer.NotificationModule:AttachToGameObject(allianceMark, self._child_reddot_default_mark.go, self._child_reddot_default_mark.redDot)
end

function HUDMapFunctionComponent:OnHide(param)
    g_Game.EventManager:RemoveListener(EventConst.QUEST_DATA_WATCHER_EVENT, Delegate.GetOrCreate(self,self.RefreshRadarBtnsState))
    g_Game.EventManager:RemoveListener(EventConst.RADAR_MEDIATOR_CLOSED, Delegate.GetOrCreate(self,self.OnRadarMediatorClosed))
    g_Game.EventManager:RemoveListener(EventConst.TASK_DATA_REFRESH, Delegate.GetOrCreate(self, self.RefreshConstructionBtnState))
    g_Game.EventManager:RemoveListener(EventConst.KINGDOM_SYSTEM_ENTRY_REFRESH, Delegate.GetOrCreate(self, self.OnKingdomSystemEntryChanged))
    g_Game.EventManager:RemoveListener(EventConst.HUD_HIDE_LAYOUT_BUTTONS, Delegate.GetOrCreate(self,self.HideLayoutButtons))
    g_Game.EventManager:RemoveListener(EventConst.RADAR_SHOW_NEW_TASK, Delegate.GetOrCreate(self, self.ShowRadarNewTask))
    g_Game.EventManager:RemoveListener(EventConst.RADAR_SHOW_REWARD_TASK, Delegate.GetOrCreate(self, self.ShowRadarRewardTask))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.Radar.MapRadarTask.EliteTasks.MsgPath, Delegate.GetOrCreate(self, self.RefreshRadarTaskNum))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.Radar.MapRadarTask.PetTrackInfo.PetTrackLeftTimes.MsgPath, Delegate.GetOrCreate(self, self.RefreshRadarTaskNum))

    self.mailTipComponent:Dispose()

    -- g_Game:RemoveFrameTicker(Delegate.GetOrCreate(self,self.Tick))
    -- if self.timer then
    --     self.timer:Stop()
    --     self.timer = nil
    -- end
end

function HUDMapFunctionComponent:ShowRadarNewTask(isShow)
    self.showRadarNew = isShow
    if self.showRadarReward then
        self.p_tips_new_event:SetVisible(false)
    else
        self.p_tips_new_event:SetVisible(isShow)
    end
end

function HUDMapFunctionComponent:ShowRadarRewardTask(isShow)
    self.showRadarReward = isShow
    self.p_popup_reward_city:SetVisible(isShow)
    self.p_popup_reward_world:SetVisible(isShow)
    if self.showRadarNew then
        if isShow then
            self.p_tips_new_event:SetVisible(false)
        else
            self.p_tips_new_event:SetVisible(true)
        end
    end
end

function HUDMapFunctionComponent:OnRadarMediatorClosed()
    -- if self.timer then
    --     self.timer:Stop()
    --     self.timer = nil
    -- end
end

function HUDMapFunctionComponent:RefreshDailyBtn()
    self.btnTask.gameObject:SetActive(false)
end

function HUDMapFunctionComponent:OnBtnTaskClicked()
    -- local chapter = ModuleRefer.QuestModule.Chapter
    -- chapter:CreatePageState()
    -- chapter:SetInitPageState()
    g_Game.UIManager:Open(UIMediatorNames.QuestUIMediator, 1)
end

function HUDMapFunctionComponent:OnKingdomButtonClick()
    if HUDMapFunctionComponent.CanGotoKingdom() then
        g_Game.EventManager:TriggerEvent(EventConst.HUD_GOTO_KINGDOM)
    else
        ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("kingdom_locked"))
    end
end

function HUDMapFunctionComponent.CanGotoKingdom()
    local isSkip = g_Game.PlayerPrefsEx:GetInt("GMSkipNewbie") == 1
    if not isSkip then
        if not ModuleRefer.RadarModule:CheckIsUnlockRadar() then
            return false
        end
    end

    return true
end

function HUDMapFunctionComponent:OnCityButtonClick()
    g_Game.EventManager:TriggerEvent(EventConst.HUD_GOTO_MY_CITY)
end

function HUDMapFunctionComponent:OnAccidentCityButtonClick()
    local basicCamera = KingdomMapUtils.GetBasicCamera()
    -- basicCamera.ignoreLimit = true
    -- ModuleRefer.RadarModule:SetRadarState(true)
    local param = {isInCity = true, stack = basicCamera:RecordCurrentCameraStatus()}
    g_Game.UIManager:Open(UIMediatorNames.RadarMediator, param)
    -- TimerUtility.DelayExecute(function()
    --     basicCamera:ZoomToMaxSize(0.2)
    -- end, 1.5)
    -- basicCamera:ZoomToMaxSize(0.2, function()
    --     g_Game.UIManager:Open(UIMediatorNames.RadarMediator, param)
    -- end)
    -- local callback = function()
    --     self:OnAccidentWorldButtonClick()
    -- end
    -- local scene = g_Game.SceneManager.current
    -- scene:LeaveCity(callback)
end

function HUDMapFunctionComponent:OnAccidentWorldButtonClick()
    if ModuleRefer.RadarModule:CheckIsLockWorldRadar() then
        ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("kingdom_locked"))
        return
    end
    local size = KingdomMapUtils.GetKingdomScene().cameraLodData:GetSizeByLod(3)
    local basicCamera = KingdomMapUtils.GetBasicCamera()
    -- basicCamera.ignoreLimit = false
    ModuleRefer.RadarModule:SetRadarState(true)
    local param = {isInCity = false, stack = basicCamera:RecordCurrentCameraStatus()}
    g_Game.UIManager:Open(UIMediatorNames.RadarMediator, param)
    -- self.timer = TimerUtility.DelayExecute(function()
    --     basicCamera:ZoomTo(size - 50, -1)
    -- end, 0.5)
end

function HUDMapFunctionComponent:ChangeLod(newLod)
    if self.lod and self.lod == newLod then
        return
    end
    self:RefreshSearchStateByLod()
    self:RefreshWorldConstructionBtnStateByLod()
    self:RefreshBtnsStateByLod()
end

function HUDMapFunctionComponent:RefreshBtnsStateByLod()
    local lod = KingdomMapUtils.GetKingdomScene().cameraLodData.lod
    self.buttons:SetVisible(not KingdomMapUtils.InSymbolMapLod(lod))
end

function HUDMapFunctionComponent:RefreshSearchStateByLod()
    local lod = KingdomMapUtils.GetKingdomScene().cameraLodData.lod
    self.goWorldSearch:SetActive(not KingdomMapUtils.InSymbolMapLod(lod) and not self.inCity)
end

function HUDMapFunctionComponent:RefreshWorldConstructionBtnStateByLod()
    local kingdomScene = KingdomMapUtils.GetKingdomScene()
    if not kingdomScene or not kingdomScene.cameraLodData then
        self.goBuildWorld:SetVisible(false)
        return
    end
    local lod = kingdomScene.cameraLodData.lod
    self.goBuildWorld:SetVisible(not self.inCity and not self.inHighLod and lod and lod <= 1 and ModuleRefer.KingdomPlacingModule:CanDoBuild())
end

function HUDMapFunctionComponent:OnHuntingButtonClick()
    ModuleRefer.HuntingModule:OpenHuntingMediator()
end

function HUDMapFunctionComponent:OnWorldSearchButtonClick()
    g_Game.UIManager:Open(UIMediatorNames.UIWorldSearchMediator)
end

function HUDMapFunctionComponent:OnBuildWorldButtonClick()
    g_Game.UIManager:Open(UIMediatorNames.KingdomConstructionModeUIMediator)

end
function HUDMapFunctionComponent:OnWorldEventButtonClick()
    g_Game.UIManager:Open(UIMediatorNames.WorldEventRecordMediator)
end

function HUDMapFunctionComponent:OnWorldMarkButtonClick()
    g_Game.UIManager:Open(UIMediatorNames.AllianceMarkMainMediator)
end

function HUDMapFunctionComponent:OnBuildCityButtonClick()
    local myCity = ModuleRefer.CityModule.myCity
    if myCity then
        myCity:TryEnterEditMode()
    end
end

function HUDMapFunctionComponent:Switch(inCity, inMyCity, inHighLod)
    self.inCity = inCity
    self.inMyCity = inMyCity
    self.inHighLod = inHighLod
    self._btn_City:SetVisible(not inCity)
    self._btn_Kingdom:SetVisible(inCity)
    self:RefreshConstructionBtnState()
    self:RefreshWorldConstructionBtnStateByLod()
    self:RefreshRadarBtnsState()
    self:RefreshSearchStateByLod()
    self._btn_world_mark:SetVisible(not inCity)
end

function HUDMapFunctionComponent:RefreshRadarTaskNum()
    -- local isCityRadar = ModuleRefer.RadarModule:IsCityRadar()
    -- local radarTaskNum = ModuleRefer.RadarModule:GetRadarTaskNum()
    -- local state = ModuleRefer.RadarModule:GetRadarPetTraceState()
    -- local curT,maxT = ModuleRefer.RadarModule:GetRadarTrackingPetTimes()

    -- --正在追的时候 显示次数+1
    -- if state ~= 2 then
    --     curT = curT + 1
    -- end

    -- self.p_text_radar_quantity_city.text = curT.."/"..maxT
    -- self.p_text_radar_quantity_world.text = curT.."/"..maxT
end

function HUDMapFunctionComponent:RefreshRadarBtnsState()
    self:RefreshDailyBtn()
    local isUnlocked = ModuleRefer.RadarModule:CheckIsUnlockRadar()
    self.goAccidentCity:SetVisible(self.inCity and self.inMyCity and isUnlocked)
    self.goAccidentWorld:SetVisible(isUnlocked and not (self.inCity or self.inHighLod))
    -- self.goWorldEvents:SetVisible(not (self.inCity or self.inMyCity or self.inHighLod) and self:CanShowWorldEvent())
    self._go_Lock:SetActive(not isUnlocked)
    local sysIndex = ConfigRefer.ConstMain:ScienceSystemSwitch()
    local isOpenScience = ModuleRefer.NewFunctionUnlockModule:CheckNewFunctionIsUnlocked(sysIndex)
    self._comp_btn_science:SetVisible(isOpenScience and self.inMyCity)
end

-- 当玩家当前有已参加的并且还在保质期的世界事件时，显示该入口
function HUDMapFunctionComponent:CanShowWorldEvent()
    local player = ModuleRefer.PlayerModule:GetPlayer()
    if player == nil then
        return false
    end

    local joinExpeditions = player.PlayerWrapper2.PlayerExpeditions.JoinExpeditions
    for id, expedition in pairs(joinExpeditions) do
        if id and expedition then
            return true
        end
    end
    return false
end

function HUDMapFunctionComponent:RefreshWorldEvents()
    -- self.goWorldEvents:SetVisible(not (self.inCity or self.inMyCity or self.inHighLod) and self:CanShowWorldEvent())
end

-- function HUDMapFunctionComponent:OnGMTroopButtonClick()
--     if self.gmTroopCDTimer < self.gmTroopReadyTime then
--         return
--     end
--     local playerId = ModuleRefer.PlayerModule:GetPlayer().ID
--     if playerId > 0 then

--         local param = require('DebugCmdParameter').new()
--         param.args.Cmd = 'troopbyconfig'
--         param.args.EntityID = playerId
--         param.args.Args:Add(1)
--         param:Send()
--         self.gmTroopCDTimer = g_Game.ServerTime:GetServerTimestampInSeconds()
--         self.gmTroopReadyTime = self.gmTroopCDTimer + self.gmTroopCDValue
--         g_Game.PlayerPrefsEx:SetFloatByUid(GMTROOP_READY_TIME,self.gmTroopReadyTime)
--         self._img_GmTroop_CD.enabled = true
--     end
-- end

-- function HUDMapFunctionComponent:Tick(delta)
--     if self.gmTroopCDTimer > self.gmTroopReadyTime then
--         return
--     end

--     self.gmTroopCDTimer = self.gmTroopCDTimer + delta
--     self._img_GmTroop_CD.fillAmount = math.clamp01( (self.gmTroopReadyTime - self.gmTroopCDTimer) / self.gmTroopCDValue)
--     if self.gmTroopCDTimer > self.gmTroopReadyTime and self._img_GmTroop_CD.enabled then
--         self._img_GmTroop_CD.enabled = false
--     elseif not self._img_GmTroop_CD.enabled then
--         self._img_GmTroop_CD.enabled = true
--     end
-- end

function HUDMapFunctionComponent:RefreshConstructionBtnState()
    local canBuild = ModuleRefer.CityModule:CanDoBuild()
    self._go_build_status_city:SetVisible(self.inMyCity and canBuild)

    if canBuild then
        --- 一旦可以建造，就不再监听任务刷新事件
        g_Game.EventManager:RemoveListener(EventConst.TASK_DATA_REFRESH, Delegate.GetOrCreate(self, self.RefreshConstructionBtnState))
    end
end

function HUDMapFunctionComponent:OnMailButtonClicked()
    g_Game.UIManager:Open(UIMediatorNames.UIMailMediator)
end

function HUDMapFunctionComponent:OnMailBattleReportReceived(text)

end

---@param kingdomId number
---@param changedSet table<number, boolean>
function HUDMapFunctionComponent:OnKingdomSystemEntryChanged(kingdomId, changedSet)
    if not kingdomId or not changedSet then
        return
    end
    local myKingdom = ModuleRefer.KingdomModule:GetKingdomEntity()
    if not myKingdom or myKingdom.ID ~= kingdomId then
        return
    end
    if not changedSet[NewFunctionUnlockIdDefine.kingdom_map_build_entry] then
        return
    end
    self:RefreshWorldConstructionBtnStateByLod()
end

function HUDMapFunctionComponent:HideLayoutButtons(isShow)
    self.secBtnsLayout:SetVisible(isShow)
    self.buttons:SetVisible(isShow)
end

function HUDMapFunctionComponent:GetHammerPos()
    return self._go_build_status_city.transform.position
end

return HUDMapFunctionComponent
