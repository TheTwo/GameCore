---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hao.wu.ss
--- DateTime: 2023/2/27 15:03
---

local BaseModule = require('BaseModule')
local ModuleRefer = require('ModuleRefer')
local ConfigRefer = require('ConfigRefer')
local Delegate = require('Delegate')
local Utils = require("Utils")
local EventConst = require("EventConst")
local I18N = require("I18N")
local ChatShareType = require("ChatShareType")
local rapidJson = require("rapidjson");
---@type NotificationModule
local NM = ModuleRefer.NotificationModule
local DBEntityPath = require("DBEntityPath")
local UIMediatorNames = require("UIMediatorNames")
local NotificationType = require("NotificationType")
local DBEntityType = require('DBEntityType')

local ChatErrorCode = CS.FunPlusChat.Models.ChatErrorCode
local SessionType = CS.FunPlusChat.Models.SessionType
local GroupType = CS.FunPlusChat.Models.GroupType
local MessageType = CS.FunPlusChat.Models.MessageType
local MessageStatus = CS.FunPlusChat.Models.MessageStatus
local FPMessage = CS.FunPlusChat.Models.FPMessage
local GROUP_TYPE_GVE = GroupType.SELFDEF_110

local REDDOT_MAIN_UN = "__chat_main"
local REDDOT_SESSION_UN = "__chat_session_%s"

local FORMAT_FULL_TEXT = "%s: %s"
local FORMAT_CHAT_PREFIX_ALLIANCE = "[%s]%s"
local FORMAT_CHAT_PERFIX_NO_ALLIANCE = "%s"
local FORMAT_SYS_PREFIX = "[%s]%s"

local I18N_TAG_WORLD = "chat_channelname_01"
local I18N_TAG_ALLIANCE = "chat_channelname_02"
local I18N_TAG_P2P = "chat_private_chat"
local I18N_TAG_GROUP = "chat_group_chat"
--local I18N_TAG_PUBLIC = "*公开"
local I18N_TAG_SYSTEM = "chat_tag_system"
local TEXT_UNKNOWN = I18N.Temp().chat_error_unknown
local TEXT_UNSUPPORT = I18N.Get("chat_unsupported_msn")

local I18N_MSG_IMAGE = "chat_image_msn"
local I18N_MSG_AUDIO = "chat_voice_msn"
--local I18N_MSG_FILE = "[*文件]"

local I18N_SYS_MSG_ALLIANCE_IN = "chat_joinalliance"
local I18N_SYS_MSG_ALLIANCE_OUT = "chat_quitalliance"
local I18N_SESSION_NAME_SYSTEM_TOAST = "toast_chat"

local I18N_NONAME = "chat_no_nick"
local DEBUG_NAME = "{%s}"

local PREF_PINNED_SESSION = "__chat_pinned_session_list"
local PIN_MAX = 3

local SP_CHAT_ICON_ALLIANCE = "sp_chat_icon_league"
local SP_CHAT_ICON_ALLIANCE_SMALL = "sp_chat_icon_league_01"
local SP_CHAT_ICON_WORLD = "sp_chat_icon_world"
local SP_CHAT_ICON_WORLD_LOGO = "sp_chat_icon_logo_world"
local SP_CHAT_ICON_WORLD_SMALL = "sp_chat_icon_world_01"
local SP_CHAT_ICON_PRIVATE = "sp_chat_icon_friend"
local SP_CHAT_ICON_PRIVATE_SMALL = "sp_chat_icon_friend_01"
local SP_CHAT_ICON_GROUP = "sp_chat_icon_group"
local SP_CHAT_ICON_GROUP_SMALL = "sp_chat_icon_group_01"
local SP_CHAT_ICON_SYSTEM_TOAST = "sp_chat_icon_logo_inform"
local SP_CHAT_ICON_SYSTEM_TOAST_SMALL = "sp_chat_icon_disturb"

local SYS_MSG_TYPE_ALLIANCE = 1
local SYS_MSG_TYPE_SHARE = 2
local SYS_MSG_TYPE_ALLIANCE_RECRUIT = 3
local SYS_MSG_TYPE_ALLIANCE_MARK_SHARE = 5
local SYS_MSG_TYPE_ALLIANCE_ASSEMBLE = 6

local SESSION_ID_SYSTEM_TOAST = "__system_toast"

---@class MessageData
---@field message CS.FunPlusChat.Models.FPMessage
---@field sortValue number

--- 聊天模块
---@class ChatModule
local ChatModule = class('ChatModule', BaseModule)

-- 最新消息数量
local LATEST_MESSAGE_COUNT = 2
local LATEST_MESSAGE_COUNT_MAX = 10

-- 获取系统消息会话ID
function ChatModule:GetSystemToastSessionId()
	return SESSION_ID_SYSTEM_TOAST
end

--- 获取系统消息会话
---@param self ChatModule
---@return table
function ChatModule:GetSystemToastSession()
	if (not self._systemToastSession) then
		self._systemToastSession = {
			isToast = true,
			SessionId = SESSION_ID_SYSTEM_TOAST,
		}
		-- self._sessionIdMap[SESSION_ID_SYSTEM_TOAST] = self._systemToastSession
		-- self:OnSystemToastChanged()
	end
	self._sessionIdMap[SESSION_ID_SYSTEM_TOAST] = self._systemToastSession
	self:OnSystemToastChanged()
	return self._systemToastSession
end

function ChatModule:OnRegister()
	self._hudCommunity = nil
	---@type {sortValue:number, id:number}[]
	self._sessionSortList = {}
	---@type table<string, CS.FunPlusChat.Models.FPSession>
	self._sessionIdMap = {}
	---@type {sortValue:number, message:CS.FunPlusChat.Models.FPMessage}[]
	self._latestMessageSortList = {}
	---@type table<string, boolean>
	self._latestMessageMap = {}
	---@type CS.FunPlusChat.Models.FPSession
	self._sessionWorld = nil
	---@type CS.FunPlusChat.Models.FPSession
	self._sessionAlliance = nil
	self._selectedSessionId = -1
	---@type MessageData[]
	self._msgSessionList = {}
	---@type table<string, table<string, MessageData>>
	self._msgSessionMap = {}
	---@type table<string, CS.FunPlusChat.Models.FPMessage>
	self._msgMap = {}
	---@type CS.Notification.NotificationDynamicNode
	self._redDotMain = nil
	---@type table<string, CS.Notification.NotificationDynamicNode>
	self._redDotSessionMap = {}
	---@type table<string, number> @key:SessionId
	self._sessionUnreadTimeMap = {}
	self._initUpdate = false
	---@type table<string, boolean> @key:MessageId
	self._noMoreMessageMap = {}
	---@type table<string, string> @key:SessionId, value:UnsentMessageText
	self._unsentMessageMap = {}
	self._lastUpdatedInfo = {
		sessionId = nil,
		time = -1,
	}
	---@type table<number, CS.FunPlusChat.Models.FPSession>
	self._privateSessionUserMap = {}
	self._nextGotoSessionId = nil
	self._pinnedSessionCount = 0

	PIN_MAX = ConfigRefer.ConstMain.ChatChannelPinMax and ConfigRefer.ConstMain:ChatChannelPinMax() or PIN_MAX

	self:LoadPinnedSessionList()

	g_Game.DatabaseManager:AddChanged(DBEntityPath.Player.PlayerWrapper2.ChatInfo.Toast.MsgPath, Delegate.GetOrCreate(self, self.OnSystemToastChanged))
	g_Game.EventManager:AddListener(EventConst.HUD_COMMUNITY_COMP_SHOW, Delegate.GetOrCreate(self, self.OnHudCommunityShow))
	g_Game.EventManager:AddListener(EventConst.HUD_COMMUNITY_COMP_HIDE, Delegate.GetOrCreate(self, self.OnHudCommunityHide))
end

function ChatModule:OnRemove()
	g_Game.EventManager:RemoveListener(EventConst.HUD_COMMUNITY_COMP_SHOW, Delegate.GetOrCreate(self, self.OnHudCommunityShow))
	g_Game.EventManager:RemoveListener(EventConst.HUD_COMMUNITY_COMP_HIDE, Delegate.GetOrCreate(self, self.OnHudCommunityHide))
	g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Player.PlayerWrapper2.ChatInfo.Toast.MsgPath, Delegate.GetOrCreate(self, self.OnSystemToastChanged))
end

--- 获取主界面红点
---@param self ChatModule
function ChatModule:GetRedDotMain()
	return NM:GetOrCreateDynamicNode(REDDOT_MAIN_UN, NotificationType.CHAT_MAIN)
end

--- 获取会话红点
---@param self ChatModule
---@param sessionId string
---@return CS.Notification.NotificationDynamicNode
function ChatModule:GetSessionRedDot(sessionId)
	if (not sessionId) then return end
	if (sessionId == SESSION_ID_SYSTEM_TOAST) then return end

	local session = self:GetSession(sessionId)
	local un = string.format(REDDOT_SESSION_UN, sessionId)
	if (not self._redDotSessionMap[sessionId]) then
		local node = NM:GetOrCreateDynamicNode(un, NotificationType.CHAT_SESSION)
		if (not self:IsIgnoredSession(session)) then
			NM:AddToParent(node, self:GetRedDotMain())
		end
		self._redDotSessionMap[sessionId] = node
	end
	return self._redDotSessionMap[sessionId]
end

--- 设置会话红点数量
---@param self ChatModule
---@param sessionId string
---@param count number
function ChatModule:SetSessionRedDotCount(sessionId, count)
	local redDot = self:GetSessionRedDot(sessionId)
	if (not redDot) then return end
	g_Logger.TraceChannel("Chat", "为会话 %s 设置红点数量 %s", sessionId, count)
	NM:SetDynamicNodeNotificationCount(redDot, count)
end

--- 设置会话红点数量差值
---@param self ChatModule
---@param sessionId string
---@param delta count
function ChatModule:SetSessionRedDotCountDelta(sessionId, delta)
	local redDot = self:GetSessionRedDot(sessionId)
	if (not redDot) then return end
	g_Logger.TraceChannel("Chat", "为会话 %s 设置红点差值数量: 原值 %s 差值 %s", sessionId, redDot.NotificationCount, delta)
	NM:SetDynamicNodeNotificationCount(redDot, redDot.NotificationCount + delta)
end

--- 获取选中的会话ID
---@param self ChatModule
---@return string
function ChatModule:GetSelectedSessionId()
	return self._selectedSessionId
end

--- 设置选中的会话ID
---@param self ChatModule
---@param sessionId string
function ChatModule:SetSelectedSessionid(sessionId)
	self._selectedSessionId = sessionId
end

function ChatModule:Available()
	return ModuleRefer.ChatSDKModule:Available() and self._sessionWorld
end

---@param self ChatModule
---@return wds.Player
function ChatModule:GetPlayer()
    if (not self._player) then
        self._player = ModuleRefer.PlayerModule:GetPlayer()
    end
    return self._player
end

---@param self ChatModule
---@param hud HUDCommunityComponent
function ChatModule:OnHudCommunityShow(hud)
	self._hudCommunity = hud
	self:RefreshHud()
end

---@param self ChatModule
---@param hud HUDCommunityComponent
function ChatModule:OnHudCommunityHide(hud)
	self._hudCommunity = nil
end

--- 获取主界面聊天区
---@param self ChatModule
---@return HUDCommunityComponent
function ChatModule:GetHud()
	return self._hudCommunity
end

--- 尝试打开聊天面板
---@param self ChatModule
function ChatModule:TryOpenChatPanel()
	local available = self:Available()
	local enabled = ModuleRefer.ChatSDKModule:Enabled()
	if (not available and enabled) then
		g_Logger.Trace("聊天: 断线重新初始化sdk...")
		ModuleRefer.ChatSDKModule:Logout()
		ModuleRefer.ChatSDKModule:InitSdk()
	else
		g_Game.UIManager:Open(UIMediatorNames.ChatV2UIMediator)
	end
end

--- 刷新主界面聊天区
---@param self ChatModule
function ChatModule:RefreshHud()
	if (not self._hudCommunity) then return end
	self._hudCommunity.chatGroup:SetActive(true)

	-- 聊天是否可用
	local available = self:Available()
	if (not available) then
		self._hudCommunity:HideAllChatLines()

	-- 最新消息
	else
		self:RefreshRedDotMain()
		self:RefreshLatestMessages()
	end
end

--- 刷新主界面红点
---@param self ChatModule
function ChatModule:RefreshRedDotMain()
	local redDot = self:GetRedDotMain()
	local hudRedDot = self._hudCommunity:GetRedDot()
	NM:AttachToGameObject(redDot, hudRedDot.go)
end

--- 刷新最新消息
---@param self ChatModule
function ChatModule:RefreshLatestMessages()
	if (not self._hudCommunity or not self:Available()) then return end

	self._hudCommunity:HideAllChatLines()
	local msgs = self:GetLatestMessages()
	if (msgs) then
		local length = #self._hudCommunity.chatLine
		for index, msg in ipairs(msgs) do
			if (not self._hudCommunity:ShowChatLine(length - index + 1, msg)) then break end
		end
	end
end

--- 获取会话列表
---@param self ChatModule
---@return table<number, CS.FunPlusChat.Models.FPSession>
function ChatModule:GetSessionList()
	return self._sessionIdMap
end

--- 更新会话列表
---@param self ChatModule
---@param sessionList CS.System.Collections.Generic.List<CS.FunPlusChat.Models.FPSession>
function ChatModule:UpdateSessionList(sessionList)
	-- 计算移除的会话
	local toKeep = {}
	for _, session in pairs(sessionList) do
		toKeep[session.SessionId] = true
	end
	local toRemove = {}
	for id, _ in pairs(self._sessionIdMap) do
		if (not toKeep[id]) then
			table.insert(toRemove, id)
		end
	end

	-- 移除会话
	for _, id in ipairs(toRemove) do
		self:RemoveSession(id)
	end

	-- 重新构建会话列表
	self._latestMessageMap = {}
	self._latestMessageSortList = {}
	self._sessionSortList = {}
	self._noMoreMessageMap = {}
	if (sessionList) then
		for _, session in pairs(sessionList) do
			if (session) then
				g_Logger.TraceChannel("Chat", "**** UpdateSessionList sessionId: %s, sessionType: %s, groupType: %s", session.SessionId, session.SessionType, session.GroupType)
				self._sessionIdMap[session.SessionId] = session
				self:UpdateSpecialSession(session)
				self:UpdatePrivateSession(session)
				if (not self._initUpdate) then
					self:UpdateSessionUnread(session)
					if (session.Msg) then
						self._sessionUnreadTimeMap[session.SessionId] = session.Msg.MsgTime
					end
				end
				self:UpdateMessage(session.Msg, true)
			end
		end
	end
	self._initUpdate = true
	self:ValidatePinnedSessionList()
	self:UpdateSessionSortList()
	self:PullLatestMessages(Delegate.GetOrCreate(self, self.RefreshHud))
	g_Game.EventManager:TriggerEvent(EventConst.CHAT_SESSION_LIST_UPDATED)
end

--- 更新会话
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
function ChatModule:UpdateSession(session)
	if (not session) then return end
	self._sessionIdMap[session.SessionId] = session
	self:UpdateSpecialSession(session)
	self:UpdatePrivateSession(session)
	self:UpdateSessionUnread(session)
end

--- 更新私聊
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
function ChatModule:UpdatePrivateSession(session)
	if (not session) then return end
	if (session.SessionType == SessionType.P2P) then
		self._privateSessionUserMap[session.ToId] = session
	end
end

--- 更新会话未读消息
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
function ChatModule:UpdateSessionUnread(session)
	if (session) then
		--g_Logger.TraceChannel("Chat", "***** session %s unread %s", session.SessionId, session.UnreadCount)
		local redDot = self:GetSessionRedDot(session.SessionId)
		g_Logger.TraceChannel("Chat", "为会话 %s 设置未读红点数量 %s", session.SessionId, session.UnreadCount)
		NM:SetDynamicNodeNotificationCount(redDot, session.UnreadCount)
	end
end

--- 设置会话未读数量差值
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
---@param delta number
function ChatModule:SetSessionUnreadDelta(session, delta)
	if (not session) then return end
	local redDot = self:GetSessionRedDot(session.SessionId)
	g_Logger.TraceChannel("Chat", "为会话 %s 设置未读红点数量差值: 原值 %s 差值 %s", session.SessionId, redDot.NotificationCount, delta)
	NM:SetDynamicNodeNotificationCount(redDot, redDot.NotificationCount + delta)
	session.UnreadCount = redDot.NotificationCount
end

--- 设置会话未读数量
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
---@param count number
function ChatModule:SetSessionUnreadCount(session, count)
	if (not session) then return end
	local redDot = self:GetSessionRedDot(session.SessionId)
	if (not redDot) then return end
	g_Logger.TraceChannel("Chat", "为会话 %s 设置未读红点数量 %s", session.SessionId, count)
	NM:SetDynamicNodeNotificationCount(redDot, count)
	session.UnreadCount = count
end

--- 更新特殊会话
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
function ChatModule:UpdateSpecialSession(session)
	if (not session) then return end
	if (session.SessionType == SessionType.Group) then
		if (session.GroupType == GroupType.World) then
			if (not self._sessionWorld or self._sessionWorld.SessionId ~= session.SessionId) then
				self._sessionWorld = session
				g_Logger.TraceChannel("Chat", "已加入世界频道: %s", session.SessionId)
			end
		elseif (session.GroupType == GroupType.Alliance) then
			if (not self._sessionAlliance or self._sessionAlliance.SessionId ~= session.SessionId) then
				self._sessionAlliance = session
				g_Logger.TraceChannel("Chat", "已加入联盟频道: %s", session.SessionId)
			end
		end
	end
end

--- 获取世界会话
---@param self ChatModule
---@return CS.FunPlusChat.Models.FPSession
function ChatModule:GetWorldSession()
	return self._sessionWorld
end

--- 获取联盟会话
---@param self ChatModule
---@return CS.FunPlusChat.Models.FPSession
function ChatModule:GetAllianceSession()
	return self._sessionAlliance
end

--- 获取会话
---@param self ChatModule
---@param id string
---@return CS.FunPlusChat.Models.FPSession
function ChatModule:GetSession(id)
	return self._sessionIdMap[id]
end

---@param self ChatModule
function ChatModule:UpdateSessionSortList()
	self._sessionSortList = {}
	if (not self._sessionIdMap) then return end
	for id, session in pairs(self._sessionIdMap) do
		table.insert(self._sessionSortList, {
			sortValue = session.OperationTime,
			id = id,
		})
	end
	table.sort(self._sessionSortList, ChatModule.SortBySortValueDesc)
end

--- 是否没有更多历史消息了
---@param self ChatModule
---@param sessionId string
---@return boolean
function ChatModule:NoMoreMessage(sessionId)
	local session = self._sessionIdMap[sessionId]
	if (not session) then return true end
	if (self:IsSystemToastSession(session)) then return true end
	return self._noMoreMessageMap[sessionId] == true
end

--- 拉取最新消息, 每个会话拉取成功都会进行回调
---@param self ChatModule
---@param count number
---@param callback fun() 回调
function ChatModule:PullLatestMessages(callback, count)
	if (not self._sessionSortList or #self._sessionSortList == 0) then return end
	if (not count) then count = LATEST_MESSAGE_COUNT end
	local sessionCount = LATEST_MESSAGE_COUNT_MAX
	if (sessionCount > #self._sessionSortList) then sessionCount = #self._sessionSortList end
	for i = 1, sessionCount do
		local sessionSort = self._sessionSortList[i]
		if (sessionSort) then
			local session = self:GetSession(sessionSort.id)
			if (session) then
				if (self._noMoreMessageMap[session.SessionId]) then return end
				CS.ChatSdkWrapper.GetSessionUpMsg(session.SessionId, function (code, list)
					if (code == ChatErrorCode.Ok) then
						local msgCount = 0
						if (not list or list.Count == 0) then
							self._noMoreMessageMap[session.SessionId] = true
						else
							for _, fpmsg in pairs(list) do
								self:UpdateMessage(fpmsg)
							end
						end
						if (callback) then callback(msgCount) end
					end
				end, nil, count)
			end
		end
	end
end

---@param self ChatModule
---@param sessionId string
---@param lastMsg CS.FunPlusChat.Models.FPMessage
---@param count number
---@param sucCallback fun(number) 成功回调
---@param failCallback fun(number) 失败回调
function ChatModule:PullMessages(sessionId, lastMsg, count, sucCallback, failCallback)
	if (self._noMoreMessageMap[sessionId]) then return end
	CS.ChatSdkWrapper.GetSessionUpMsg(sessionId, function (code, list)
		if (code == ChatErrorCode.Ok) then
			local msgCount = 0
			if (not list or list.Count == 0) then
				self._noMoreMessageMap[sessionId] = true
			else
				for _, fpmsg in pairs(list) do
					if (self:UpdateMessage(fpmsg, true)) then
						msgCount = msgCount + 1
					end
				end
			end
			if (msgCount == 0) then
				self._noMoreMessageMap[sessionId] = true
			end
			if (sucCallback) then sucCallback(msgCount) end
		else
			if (failCallback) then failCallback(code) end
		end
	end, lastMsg, count)
end

--- 更新消息
---@param self ChatModule
---@param message CS.FunPlusChat.Models.FPMessage
---@param noEvent boolean
---@return boolean 新消息返回true, 已存在或非法消息返回false (不处理)
function ChatModule:UpdateMessage(message, noEvent)
	if (not message) then return false end

	self:AddToLatestMessage(message)
	if (self._msgMap[message.ImId]) then
		return false
	end

	if (message.MsgStatus ~= MessageStatus.Ok) then
		if (UNITY_DEBUG or UNITY_EDITOR) then
			g_Logger.Error("消息状态不正确, sessionId: %s, imId: %s, status: %s", message.SessionId, message.ImId, message.MsgStatus)
		end
		--ModuleRefer.ToastModule:AddSimpleToast(I18N.GetWithParams("chat_send_error", message.MsgStatus))
		return false
	end

	-- 最新消息信息
	if (not self._lastUpdatedInfo.sessionId) then
		self._lastUpdatedInfo.sessionId = message.SessionId
		self._lastUpdatedInfo.time = message.MsgTime
	else
		if (message.MsgTime > self._lastUpdatedInfo.time) then
			self._lastUpdatedInfo.sessionId = message.SessionId
			self._lastUpdatedInfo.time = message.MsgTime
		end
	end

	self._msgMap[message.ImId] = message

	if (not self._msgSessionList[message.SessionId]) then
		self._msgSessionList[message.SessionId] = {}
	end
	if (not self._msgSessionMap[message.SessionId]) then
		self._msgSessionMap[message.SessionId] = {}
	end

	if (not self._msgSessionMap[message.SessionId][message.ImId]) then
		self._msgSessionMap[message.SessionId][message.ImId] = message
		local msgData = {
			sortValue = message.MsgTime,
			message = message,
		}
		table.insert(self._msgSessionList[message.SessionId], msgData)
		table.sort(self._msgSessionList[message.SessionId], ChatModule.SortBySortValueAsc)
		local unreadTime = self._sessionUnreadTimeMap[message.SessionId]
		if (not unreadTime or message.MsgTime > unreadTime) then
			local session = self:GetSession(message.SessionId)
			self:SetSessionUnreadDelta(session, 1)
		end
	end

	if (not noEvent) then
		g_Game.EventManager:TriggerEvent(EventConst.CHAT_MESSAGE_UPDATED, {
			sessionId = message.SessionId,
			imId = message.ImId,
		})
	end

	return true
end

--- 是否为自己的消息
---@param self ChatModule
---@param message CS.FunPlusChat.Models.FPMessage
---@return boolean
function ChatModule:IsSelfMessage(message)
	if (not message) then return false end
	return message.MsgType == MessageType.Chat
			and message.FromId == ModuleRefer.PlayerModule:GetPlayer().ID
end

--- 是否为自己的分享消息
---@param self ChatModule
---@param message CS.FunPlusChat.Models.FPMessage
---@return boolean
function ChatModule:IsSelfShareMessage(message)
	if (not message) then return false end
	return message.MsgType == MessageType.GameSystem
			and message.FromId == ModuleRefer.PlayerModule:GetPlayer().ID
end

--- 获取消息
---@param self ChatModule
---@param imId string
---@return CS.FunPlusChat.Models.FPMessage
function ChatModule:GetMessage(imId)
	return self._msgMap[imId]
end

--- 获取会话消息列表
---@param self ChatModule
---@param sessionId string
---@return MessageData[]
function ChatModule:GetSessionMessageList(sessionId)
	return self._msgSessionList[sessionId]
end

--- 添加到最新消息
---@param self ChatModule
---@param message CS.FunPlusChat.Models.FPMessage
function ChatModule:AddToLatestMessage(message)
	if (not message or not message.ImId) then return end
	if (self._latestMessageMap[message.ImId]) then return end
	local session = self:GetSession(message.SessionId)
	if (self:IsIgnoredSession(session)) then return end

	table.insert(self._latestMessageSortList, {
		sortValue = message.MsgTime,
		msg = message,
	})
	self._latestMessageMap[message.ImId] = true
	self:TrimLatestMessage()
	self:RefreshHud()
end

---@param self ChatModule
function ChatModule:TrimLatestMessage()
	if (not self._latestMessageSortList) then return end
	table.sort(self._latestMessageSortList, ChatModule.SortBySortValueDesc)
	if (#self._latestMessageSortList <= LATEST_MESSAGE_COUNT_MAX) then return end
	for i = #self._latestMessageSortList, LATEST_MESSAGE_COUNT_MAX + 1, -1 do
		self._latestMessageMap[self._latestMessageSortList[i].msg.ImId] = nil
		self._latestMessageSortList[i] = nil
	end
end

--- 获取最新消息
---@param self ChatModule
---@param count number 数量
---@return table<CS.FunPlusChat.Models.FPMessage>
function ChatModule:GetLatestMessages(count)
	if (not count) then count = LATEST_MESSAGE_COUNT end
	local result = {}
	for i = 1, count do
		local item = self._latestMessageSortList[i]
		if (item) then
			table.insert(result, item.msg)
		else
			break
		end
	end
	return result
end

--- 获取最新会话
---@param self ChatModule
---@param count number 消息数量
---@return table<CS.FunPlusChat.Models.FPSession>
function ChatModule:GetLatestSessions(count)
	local result = {}
	if (not count) then count = LATEST_MESSAGE_COUNT end
	for i = 1, count do
		local sessionSort = self._sessionSortList[i]
		if (sessionSort) then
			---@type CS.FunPlusChat.Models.FPSession
			local session = self._sessionIdMap[sessionSort.id]
			if (session) then
				table.insert(result, session)
			end
		else
			break
		end
	end
	return result
end

---@param a table
---@param b table
function ChatModule.SortBySortValueDescWithPin(a, b)
	if (a.pinned and not b.pinned) then return true end
	if (not a.pinned and b.pinned) then return false end
	return ChatModule.SortBySortValueDesc(a, b)
end

---@param a table
---@param b table
function ChatModule.SortBySortValueAsc(a, b)
	if (a.sortValue and not b.sortValue) then return true end
	if (not a.sortValue and b.sortValue) then return false end
	return a.sortValue < b.sortValue
end

---@param a table
---@param b table
function ChatModule.SortBySortValueDesc(a, b)
	if (a.sortValue and not b.sortValue) then return false end
	if (not a.sortValue and b.sortValue) then return true end
	return a.sortValue > b.sortValue
end

--- 获取标签文字
---@param self ChatModule
---@param sessionType CS.FunPlusChat.Models.SessionType
---@param groupType CS.FunPlusChat.Models.GroupType
function ChatModule:GetTagText(sessionType, groupType)
	if (sessionType == SessionType.Group) then
		if (groupType == GroupType.World) then
			return I18N.Get(I18N_TAG_WORLD)
		elseif (groupType == GroupType.Alliance) then
			return I18N.Get(I18N_TAG_ALLIANCE)
		elseif (groupType == GroupType.Common) then
			return I18N.Get(I18N_TAG_GROUP)
		end
	elseif (sessionType == SessionType.P2P) then
		return I18N.Get(I18N_TAG_P2P)
	end
	return "???"
end

---@param self ChatModule
---@param sessionType CS.FunPlusChat.Models.SessionType
---@param groupType CS.FunPlusChat.Models.GroupType
---@return string
function ChatModule:GetTagSpriteName(sessionType, groupType)
	if (sessionType == SessionType.Group) then
		if (groupType == GroupType.World) then
			return SP_CHAT_ICON_WORLD
		elseif (groupType == GroupType.Alliance) then
			return SP_CHAT_ICON_ALLIANCE
		elseif (groupType == GroupType.Common) then
			return SP_CHAT_ICON_GROUP
		end
	elseif (sessionType == SessionType.P2P) then
		return SP_CHAT_ICON_PRIVATE
	end
end

--- 获取系统通知图像
---@param self ChatModule
---@param small boolean
---@return string
function ChatModule:GetSystemToastSpriteName(small)
	if (small) then return SP_CHAT_ICON_SYSTEM_TOAST_SMALL end
	return SP_CHAT_ICON_SYSTEM_TOAST
end

--- 获取世界图像
---@param self ChatModule
---@param small boolean
---@return string
function ChatModule:GetWorldSpriteName(small)
	if (small) then return SP_CHAT_ICON_WORLD_SMALL end
	return SP_CHAT_ICON_WORLD_LOGO
end

--- 获取联盟图像
---@param self ChatModule
---@param small boolean
---@return string
function ChatModule:GetAllianceSpriteName(small)
	if (small) then return SP_CHAT_ICON_ALLIANCE_SMALL end
	return SP_CHAT_ICON_ALLIANCE
end

--- 获取私聊图像
---@param self ChatModule
---@param small boolean
---@return string
function ChatModule:GetPrivateSpriteName(small)
	if (small) then return SP_CHAT_ICON_PRIVATE_SMALL end
	return SP_CHAT_ICON_PRIVATE
end

--- 获取群聊图像
---@param self ChatModule
---@param small boolean
---@return string
function ChatModule:GetGroupSpriteName(small)
	if (small) then return SP_CHAT_ICON_GROUP_SMALL end
	return SP_CHAT_ICON_GROUP
end


--- 获取消息文本
---@param self ChatModule
---@param message CS.FunPlusChat.Models.FPMessage
function ChatModule:GetMessageText(message)
	if (not message) then return end
	if (message.MsgType == MessageType.AudioFile) then
		return I18N.Get(I18N_MSG_AUDIO)
	elseif (message.MsgType == MessageType.ImageFile) then
		return I18N.Get(I18N_MSG_IMAGE)
	elseif (message.MsgType == MessageType.GameSystem) then
		return self:GetSystemText(message)
	elseif (message.MsgType == MessageType.Chat) then
		return message.MsgStr
	else
		return TEXT_UNSUPPORT
	end
end

--- 获取系统消息文本
---@param self ChatModule
---@param message CS.FunPlusChat.Models.FPMessage
---@return string
function ChatModule:GetSystemText(message)
	local text = nil
	local extInfo = ModuleRefer.ChatModule:DecodeJson(message.Attrs)
	if (extInfo and extInfo.e) then
		if (extInfo.e == SYS_MSG_TYPE_ALLIANCE) then
			-- 联盟
			if (extInfo.io) then
				local io = extInfo.io
				local isIn = io.i
				local uid = io.p
				local name = io.n
				local nickname = ModuleRefer.ChatModule:EnsureNickname(name, uid)
				if (isIn) then
					text = I18N.GetWithParams(I18N_SYS_MSG_ALLIANCE_IN, nickname)
				else
					text = I18N.GetWithParams(I18N_SYS_MSG_ALLIANCE_OUT, nickname)
				end
			end
            if (extInfo.vt) then
                --- village territory
                local vt = extInfo.vt
                --- territory configId
                local id = vt.i
                local tConfig = ConfigRefer.Territory:Find(id)
                local lv = string.Empty
                local villageName = string.Empty
                local posX = string.Empty
                local posY = string.Empty
                if tConfig then
                    local pos = tConfig:VillagePosition()
                    posX = tostring(pos:X())
                    posY = tostring(pos:Y())
                    local villageConfig = ConfigRefer.FixedMapBuilding:Find(tConfig:VillageId())
                    if villageConfig then
                        lv = I18N.Get(("*Lv.%s"):format(villageConfig:Level()))
                        villageName = I18N.Get(villageConfig:Name())
                    end
                end
                text = I18N.Get(("*您的联盟向 %s（%s,%s）发起了进攻！请做好战斗准备！（点击前往）"):format(lv, villageName, posX, posY))
            end
		elseif (extInfo.e == SYS_MSG_TYPE_SHARE) then
			local type = extInfo.t
			local configID = extInfo.c
			local chatParam = {}
			if type == ChatShareType.WorldEvent then
				local configInfo = ConfigRefer.WorldExpeditionTemplate:Find(configID)
				if configInfo then
					chatParam.x = extInfo.x
					chatParam.y = extInfo.y
					chatParam.level = string.format("Lv%d", configInfo:Level())
					chatParam.name = I18N.Get(configInfo:Name())
					text = string.format("%s %s(X:%d Y:%d))", chatParam.level, chatParam.name, chatParam.x, chatParam.y)
				end
			elseif type == ChatShareType.ResourceField then
				local configInfo = ConfigRefer.FixedMapBuilding:Find(configID)
				if configInfo then
					chatParam.x = extInfo.x
					chatParam.y = extInfo.y
					chatParam.level = string.format("Lv%d", configInfo:Level())
					chatParam.name = I18N.Get(configInfo:Name())
					text = string.format("%s %s(X:%d Y:%d))", chatParam.level, chatParam.name, chatParam.x, chatParam.y)
				end
			elseif type == ChatShareType.SlgMonster then
				local configInfo = ConfigRefer.KmonsterData:Find(configID)
				if configInfo then
					chatParam.x = extInfo.x
					chatParam.y = extInfo.y
					chatParam.level = string.format("Lv%d", configInfo:Level())
					chatParam.name = I18N.Get(configInfo:Name())
					text = string.format("%s %s(X:%d Y:%d))", chatParam.level, chatParam.name, chatParam.x, chatParam.y)
				end
			elseif type == ChatShareType.SlgBuilding then
				local configInfo = ConfigRefer.FixedMapBuilding:Find(configID)
				if configInfo then
					chatParam.x = extInfo.x
					chatParam.y = extInfo.y
					chatParam.level = string.format("Lv%d", configInfo:Level())
					chatParam.name = I18N.Get(configInfo:Name())
					text = string.format("%s %s(X:%d Y:%d))", chatParam.level, chatParam.name, chatParam.x, chatParam.y)
				end
			elseif type == ChatShareType.Pet then
				text = I18N.Get("pet_share_des")
				chatParam.pl = extInfo.pl
				chatParam.gn = extInfo.gn
			else
                if (extInfo.vt) then
					if not extInfo.vt.i then return string.Empty end
					local config = ConfigRefer.Territory:Find(extInfo.vt.i)
					if not config then return string.Empty end
					local villageConfig = ConfigRefer.FixedMapBuilding:Find(config:VillageId())
					if not villageConfig then return string.Empty end
					chatParam.x = config:VillagePosition():X()
					chatParam.y = config:VillagePosition():Y()
					chatParam.name = I18N.Get(villageConfig:Name())
					chatParam.customPic = villageConfig:Image()
					chatParam.level = string.format("Lv.%d", villageConfig:Level())
					text = string.format("%s %s(X:%d Y:%d))", chatParam.level, chatParam.name, chatParam.x, chatParam.y)
                else
                    chatParam.x = extInfo.x
                    chatParam.y = extInfo.y
                    chatParam.name = I18N.Get("share_position_content")
                    chatParam.level = ""
					if chatParam.x and chatParam.y then
						text = string.format("%s %s(X:%d Y:%d))", chatParam.level, chatParam.name, chatParam.x, chatParam.y)
					else
						text = I18N.Get(chatParam.name)
					end
                end
			end
		elseif extInfo.e == SYS_MSG_TYPE_ALLIANCE_MARK_SHARE then
			if extInfo.si and extInfo.si.aam then
				local labelServerData = ModuleRefer.AllianceModule:GetMyAllianceMapLabel(extInfo.si.aam.l)
				if labelServerData == nil then
					if not string.IsNullOrEmpty(extInfo.si.aam.on) then
						text = extInfo.si.aam.on
					else
						local cfg = ConfigRefer.AllianceMapLabel:Find(extInfo.si.aam.c)
						if cfg then
							text = I18N.Get(cfg:DefaultDesc())
						else
							text = "#已废弃的联盟标记"
						end
					end
				else
					text = ModuleRefer.AllianceModule.BuildContentInfo(labelServerData)
				end
			end
		elseif (extInfo.oe) then
			local ExpeditionEntityId = extInfo.oe.e
			local entity = g_Game.DatabaseManager:GetEntity(ExpeditionEntityId, DBEntityType.Expedition)
			if entity then
				local cfg = ConfigRefer.WorldExpeditionTemplate:Find(entity.ExpeditionInfo.Tid)
				text = I18N.GetWithParams("alliance_worldevent_chat_opened", I18N.Get(cfg:Name()))
			end
		elseif extInfo.e == SYS_MSG_TYPE_ALLIANCE_RECRUIT then
			text = message.MsgStr
		elseif extInfo.e == SYS_MSG_TYPE_ALLIANCE_ASSEMBLE then
			-- text = message.MsgStr
			text  = I18N.Get("alliance_team_jingong")
		end
    end

	return text
end

--- 获取完整消息文本
---@param self ChatModule
---@param message CS.FunPlusChat.Models.FPMessage
function ChatModule:GetFullText(message)
	if (not message) then return end
	local text = self:GetMessageText(message)
	if (message.MsgType == MessageType.Chat) then
		local prefix = ""
		if (message.Attrs and message.Attrs ~= "") then
			local extInfo = self:DecodeJson(message.Attrs)
			local name = self:GetNicknameFromExtInfo(extInfo, message.FromId) or "???"
			local alliance = self:GetAllianceAbbrFromExtInfo(extInfo)
			if (alliance and alliance ~= "") then
				prefix = string.format(FORMAT_CHAT_PREFIX_ALLIANCE, alliance, name)
			else
				prefix = string.format(FORMAT_CHAT_PERFIX_NO_ALLIANCE, name)
			end
		end
		return string.format(FORMAT_FULL_TEXT, prefix, text)
	elseif (message.MsgType == MessageType.GameSystem) then
		return string.format(FORMAT_SYS_PREFIX, I18N.Get(I18N_TAG_SYSTEM), text)
	else
		return text
	end
end

--- 从额外信息中获取昵称
---@param self ChatModule
---@param extInfo table
---@param uid number
function ChatModule:GetNicknameFromExtInfo(extInfo, uid)
	local name = nil
	if (extInfo) then
        if extInfo.vt then
            return extInfo.vt.n
        end
        name = extInfo.n
    end
	return self:EnsureNickname(name, uid)
end

--- 从额外信息中获取带联盟名称的昵称
---@param self ChatModule
---@param extInfo table
---@param uid number
function ChatModule:GetNicknameWithAllianceFromExtInfo(extInfo, uid)
	if (not extInfo) then return I18N.Get(I18N_NONAME) end
	local alliance = self:GetAllianceAbbrFromExtInfo(extInfo)
	local name = self:GetNicknameFromExtInfo(extInfo, uid)
	if (Utils.IsNullOrEmpty(alliance)) then
		return string.format(FORMAT_CHAT_PERFIX_NO_ALLIANCE, name)
	else
		return string.format(FORMAT_CHAT_PREFIX_ALLIANCE, alliance, name)
	end
end

--- 从额外信息中获取头像
---@param self ChatModule
---@param extInfo table
function ChatModule:GetPortraitFromExtInfo(extInfo)
	if (not extInfo) then return nil end
	return extInfo.p
end

--- 从额外信息中获取联盟缩写
---@param self ChatModule
---@param extInfo table
function ChatModule:GetAllianceAbbrFromExtInfo(extInfo)
	if (not extInfo) then return nil end
    if extInfo.vt then
        return extInfo.vt.a
    end
	return extInfo.a
end

--- 编码玩家额外信息
---@param self ChatModule
---@param player wds.Player
---@return string, table
function ChatModule:EncodePlayerExtInfo(player)
	if (not player) then return end
	local result = {}

	-- Nickname
	result.n = player.Basics.Name

	-- Portrait
	result.p = player.Basics.PortraitInfo.PlayerPortrait
	result.fp = player.Basics.PortraitInfo.PortraitFrameId

	if not string.IsNullOrEmpty(player.Basics.PortraitInfo.CustomAvatar) then
		result.ca = player.Basics.PortraitInfo.CustomAvatar
	end

	if (player.Owner.AllianceID > 0) then

		-- Alliance Abbr
		result.a = player.Owner.AllianceAbbr.String

	end

	return rapidJson.encode(result), result
end

--- 编码玩家分享的额外信息
---@param self ChatModule
---@param player wds.Player
---@param param table
---@return string, table
function ChatModule:EncodePlayerShareExtInfo(player, param)
	if (not player) then return end
	local result = {}

	-- Nickname
	result.n = player.Basics.Name

	-- Portrait
	result.p = player.Basics.PortraitInfo.PlayerPortrait
	result.fp = player.Basics.PortraitInfo.PortraitFrameId

	if not string.IsNullOrEmpty(player.Basics.PortraitInfo.CustomAvatar) then
		result.ca = player.Basics.PortraitInfo.CustomAvatar
	end

	if (player.Owner.AllianceID > 0) then
		-- Alliance Abbr
		result.a = player.Owner.AllianceAbbr.String
	end
	if param then
		result.e = SYS_MSG_TYPE_SHARE
		result.t = param.type
		result.c = param.configID
		result.s = true		-- isShareChat
		result.x = param.x
		result.y = param.y
		result.z = param.z
		result.pl = param.skillLevels
		result.gn = param.petGeneInfo
		if param.shareTime then
			result.b = param.shareTime		-- beginShareTime创建分享的时间
		end
		if param.name then
			result.on = param.name			-- 分享内容
		end
		if param.shareDesc then
			result.sd = param.shareDesc		-- 分享副内容
		end
	end

	return rapidJson.encode(result), result
end

---@param param AllianceRecruitMsgParam
function ChatModule:EncodeAllianceRecruitInfo(player, param)
	local result = {}
	result.i = param.allianceId
	result.ar = true --- is alliance recruit
	result.e = SYS_MSG_TYPE_ALLIANCE_RECRUIT
	result.p = player.Basics.PortraitInfo.PlayerPortrait
	result.n = player.Basics.Name
	return rapidJson.encode(result), result
end

---@param player wds.Player
---@param param wds.AllianceTeamInfo
function ChatModule:EncodeAllianceAssembleInfo(player, id, param)
	local result = {}
	result.aid = id
	if (player.Owner.AllianceID > 0) then
		-- Alliance Abbr
		result.a = player.Owner.AllianceAbbr.String
	end
	result.aai = true
	result.i = param.allianceId
	result.t = param.CreateTime
	result.e = SYS_MSG_TYPE_ALLIANCE_ASSEMBLE
	local target = param.TargetInfo
	result.p = player.Basics.PortraitInfo.PlayerPortrait
	result.n = player.Basics.Name
	result.px = target.Pos.X
	result.py = target.Pos.Y
	if target.CfgId ~= 0 then
		result.ot = target.ObjectType
		result.c = target.CfgId
	else
		result.tn = target.Name
		result.tp = target.PortraitInfo.PlayerPortrait
	end
	return rapidJson.encode(result), result
end

--- 解码Json
---@param self ChatModule
---@param jsonText string
---@return table
function ChatModule:DecodeJson(jsonText)
	if (not jsonText) then return nil end
	return rapidJson.decode(jsonText)
end

--- 创建文本消息对象
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
---@param msg string
---@return CS.FunPlusChat.Models.FPMessage
function ChatModule:CreateTextMessage(session, msg)
	if (not msg or msg == "") then return nil end
	local player = ModuleRefer.PlayerModule:GetPlayer()
	local result = FPMessage.CreateMessage(
		session,
		MessageType.Chat,
		msg,
		self:EncodePlayerExtInfo(player)
	)
	return result
end

--- 创建分享消息对象
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
---@param param table
---@return CS.FunPlusChat.Models.FPMessage
function ChatModule:CreateShareMessage(session, param)
	if (not param ) then return nil end
	local player = ModuleRefer.PlayerModule:GetPlayer()
	local result = FPMessage.CreateMessage(
		session,
		MessageType.GameSystem,
		param.content,
		self:EncodePlayerShareExtInfo(player, param)
	)
	return result
end

function ChatModule:CreateAllianceRecruitMessage(session, param)
	if (not param ) then return nil end
	local player = ModuleRefer.PlayerModule:GetPlayer()
	if not player then return nil end
	---@type wds.Alliance
	local result = FPMessage.CreateMessage(
		session,
		MessageType.GameSystem,
		param.content,
		self:EncodeAllianceRecruitInfo(player, param)
	)
	return result
end

---@param param wds.AllianceTeamInfo
function ChatModule:CreateAllianceAssembleInfo(session, id, param)
	if (not param ) then return nil end
	local player = ModuleRefer.PlayerModule:GetPlayer()
	if not player then return nil end
	local result = FPMessage.CreateMessage(
		session,
		MessageType.GameSystem,
		I18N.Get("alliance_team_jingong"),
		self:EncodeAllianceAssembleInfo(player, id, param)
	)
	return result
end

--- 发送文本消息
---@param self ChatModule
---@param sessionID number
---@param param ShareChatItemParam
function ChatModule:SendShareMsg(sessionID, param)
	if (Utils.IsNullOrEmpty(sessionID)) then return end

	local session = ModuleRefer.ChatModule:GetSession(sessionID)
	if (not session) then
		g_Logger.Error("聊天会话 %s 未找到!", sessionID)
		return
	end

	if param.type == ChatShareType.Pet then
		param.content = I18N.Get("pet_share_des")
	elseif param.type ==ChatShareType.AllianceTask then
		param.content =  I18N.Get(param.name)
	else
		param.content =  string.format("%s(X:%d Y:%d))", param.name, param.x, param.y)
	end
	local msg = self:CreateShareMessage(session, param)
	if (not msg) then
		g_Logger.Error("聊天分享创建失败!")
		return
	end

	ModuleRefer.ChatSDKModule:Send(msg)
end

---@class AllianceRecruitMsgParam
---@field allianceId number
---@field content string

---@param sessionId number
---@param param AllianceRecruitMsgParam
function ChatModule:SendAllianceRecruitMsg(sessionID, param)
	if (Utils.IsNullOrEmpty(sessionID)) then return end

	local session = ModuleRefer.ChatModule:GetSession(sessionID)
	if (not session) then
		g_Logger.Error("聊天会话 %s 未找到!", sessionID)
		return
	end
	local msg = self:CreateAllianceRecruitMessage(session, param)
	if (not msg) then
		g_Logger.Error("聊天分享创建失败!")
		return
	end
	ModuleRefer.ChatSDKModule:Send(msg)
end

---@param param wds.AllianceTeamInfo
function ChatModule:SendAllinceAssemnbleInfoMsg(sessionID, id, param)
	if (Utils.IsNullOrEmpty(sessionID)) then return end

	local session = ModuleRefer.ChatModule:GetSession(sessionID)
	if (not session) then
		g_Logger.Error("聊天会话 %s 未找到!", sessionID)
		return
	end
	local msg = self:CreateAllianceAssembleInfo(session, id, param)
	if (not msg) then
		g_Logger.Error("聊天分享创建失败!")
		return
	end
	ModuleRefer.ChatSDKModule:Send(msg)
end

--- 是否为置顶会话
---@param self ChatModule
---@param sessionId string
---@return boolean
function ChatModule:IsPinned(sessionId)
	return self._pinnedSessionMap[sessionId] ~= nil
end

--- 是否为静音会话
---@param self ChatModule
---@param sessionId string
---@return boolean
function ChatModule:IsMuted(sessionId)
	---TODO:
	return false
end

--- 确保昵称不为空
---@param self ChatModule
---@param name string
---@param uid number
---@return string
function ChatModule:EnsureNickname(name, uid)
	if (Utils.IsNullOrEmpty(name)) then
		if (UNITY_DEBUG or UNITY_EDITOR) then
			return string.format(DEBUG_NAME, uid)
		else
			return I18N.Get(I18N_NONAME)
		end
	end
	return name
end

--- 获取会话名称
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
---@return string
function ChatModule:GetSessionName(session)
	if (not session) then return TEXT_UNKNOWN end

	-- 系统通知
	if (self:IsSystemToastSession(session)) then return I18N.Get(I18N_SESSION_NAME_SYSTEM_TOAST) end

	-- 世界
	if (self:IsWorldSession(session)) then return I18N.Get(I18N_TAG_WORLD) end

	-- 联盟
	if (self:IsAllianceSession(session)) then return I18N.Get(I18N_TAG_ALLIANCE) end

	-- 私聊
	if (self:IsPrivateSession(session)) then
		return self:EnsureNickname(session.Name, session.ToId)
		-- local playerName = self:EnsureNickname(session.Name, session.ToId)
		-- local msg = session.Msg
		-- if (not msg) then return playerName end
		-- local extInfo = self:DecodeJson(msg.Attrs)
		-- if (not extInfo) then return playerName end
		-- return self:GetNicknameFromExtInfo(extInfo, session.ToId)
	end
end

--- 设置未发送消息文本
---@param self ChatModule
---@param sessionId string
---@param text string
function ChatModule:SetUnsentMessage(sessionId, text)
	if (Utils.IsNullOrEmpty(text)) then
		self._unsentMessageMap[sessionId] = nil
	else
		self._unsentMessageMap[sessionId] = text
	end
end

--- 获取未发送消息文本
---@param self ChatModule
---@param sessionId string
---@return string
function ChatModule:GetUnsentMessage(sessionId)
	return self._unsentMessageMap[sessionId]
end

--- 获取最近更新的会话ID
---@param self ChatModule
---@return string
function ChatModule:GetLastUpdatedSessionId()
	return self._lastUpdatedInfo.sessionId
end

--- 清除最近更新的会话ID
---@param self ChatModule
function ChatModule:ClearLastUpdatedSessionId()
	self._lastUpdatedInfo = {
		sessionId = nil,
		time = -1,
	}
end

---是否为系统消息会话
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession|table
function ChatModule:IsSystemToastSession(session)
	return session and session.SessionId == SESSION_ID_SYSTEM_TOAST
end

--- 是否为联盟会话
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
---@return boolean
function ChatModule:IsAllianceSession(session)
	if (not session or not self._sessionAlliance) then return false end
	return session.SessionId == self._sessionAlliance.SessionId
end

--- 是否为世界会话
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
---@return boolean
function ChatModule:IsWorldSession(session)
	if (not session or not self._sessionWorld) then return false end
	return session.SessionId == self._sessionWorld.SessionId
end

--- 是否为私聊会话
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
---@return boolean
function ChatModule:IsPrivateSession(session)
	if (not session) then return false end
	return session.SessionType == SessionType.P2P
end

--- 是否为群聊会话
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
---@return boolean
function ChatModule:IsGroupSession(session)
	if (not session) then return false end
	return not self:IsWorldSession(session)
			and not self:IsAllianceSession(session)
			and session.SessionType == SessionType.Group
end

--- 通过Uid获取私聊会话
---@param self ChatModule
---@param uid number
---@return CS.FunPlusChat.Models.FPSession
function ChatModule:GetPrivateSessionByUid(uid)
	return self._privateSessionUserMap[uid]
end

--- 加载置顶会话列表
---@param self ChatModule
function ChatModule:LoadPinnedSessionList()
	local data = g_Game.PlayerPrefsEx:GetStringByUid(PREF_PINNED_SESSION, "{}")
	self._pinnedSessionMap = rapidJson.decode(data)
end

--- 保存置顶会话列表
---@param self ChatModule
function ChatModule:SavePinnedSessionList()
	local data = rapidJson.encode(self._pinnedSessionMap)
	g_Game.PlayerPrefsEx:SetStringByUid(PREF_PINNED_SESSION, data)
end

--- 添加到置顶会话列表
---@param self ChatModule
---@param sessionId string
---@param save boolean
function ChatModule:AddToPinnedSessionList(sessionId, save)
	if (Utils.IsNullOrEmpty(sessionId)) then return end
	if (self:IsPinned(sessionId)) then return end
	if (self._pinnedSessionCount >= PIN_MAX) then
		ModuleRefer.ToastModule:AddSimpleToast(I18N.GetWithParams("chat_sticky_toast", PIN_MAX))
		return
	end
	if (save == nil) then save = true end
	self._pinnedSessionMap[sessionId] = 1
	self._pinnedSessionCount = self._pinnedSessionCount + 1
	if (save) then
		self:SavePinnedSessionList()
	end
end

--- 从置顶会话列表移除
---@param self ChatModule
---@param sessionId string
---@param save boolean
function ChatModule:RemoveFromPinnedSessionList(sessionId, save)
	if (Utils.IsNullOrEmpty(sessionId)) then return end
	if (not self:IsPinned(sessionId)) then return end
	if (save == nil) then save = true end
	self._pinnedSessionMap[sessionId] = nil
	self._pinnedSessionCount = self._pinnedSessionCount - 1
	if (save) then
		self:SavePinnedSessionList()
	end
end

--- 验证置顶会话列表
---@param self ChatModule
function ChatModule:ValidatePinnedSessionList()
	self._pinnedSessionCount = 0
	local toRemove = {}
	for id, _ in pairs(self._pinnedSessionMap) do
		if (not self._sessionIdMap[id]) then
			table.insert(toRemove, id)
		else
			self._pinnedSessionCount = self._pinnedSessionCount + 1
		end
	end
	for _, id in ipairs(toRemove) do
		self._pinnedSessionMap[id] = nil
	end
end

--- 移除会话
---@param self ChatModule
---@param sessionId string
function ChatModule:RemoveSession(sessionId)
	local session = self:GetSession(sessionId)
	if (session and not self:IsWorldSession(session)) then
		if (self:IsAllianceSession(session)) then
			self._sessionAlliance = nil
		end
		self:RemoveFromPinnedSessionList(sessionId)
		if (self._msgSessionMap[sessionId]) then
			for imId, _ in pairs(self._msgSessionMap[sessionId]) do
				self._msgMap[imId] = nil
			end
		end
		self._msgSessionMap[sessionId] = nil
		self._msgSessionList[sessionId] = nil
		local redDotNode = self:GetSessionRedDot(sessionId)
		if (redDotNode) then
			NM:RemoveFromParent(redDotNode)
			redDotNode:Dispose()
			self._redDotSessionMap[sessionId] = nil
		end
		self._sessionSortList = {}
		self._sessionUnreadTimeMap[sessionId] = nil
		self._unsentMessageMap[sessionId] = nil
		if (session.ToId) then
			self._privateSessionUserMap[session.ToId] = nil
		end
		self._sessionIdMap[sessionId] = nil
		if (self._nextGotoSessionId == sessionId) then
			self._nextGotoSessionId = nil
		end
		self._noMoreMessageMap[sessionId] = nil
	end
end

--- 设置下一次前往的会话ID
---@param self ChatModule
---@param sessionId string
function ChatModule:SetNextGotoSessionId(sessionId)
	self._nextGotoSessionId = sessionId
end

--- 获取下一次前往的会话ID
---@param self ChatModule
---@param remove boolean
function ChatModule:GetNextGotoSessionId()
	return self._nextGotoSessionId
end

local DEFAULT_MSG_COUNT = 20
local TIMESTAMP_MIN_DELTA = 300000	-- 5分钟(ms)
local MESSAGE_MAX_LENGTH = 40

function ChatModule:GetMainConfigs()
	if not self._msg_count then
		self._msg_count = ConfigRefer.ConstMain.ChatServerPullMsgCount and ConfigRefer.ConstMain:ChatServerPullMsgCount() or DEFAULT_MSG_COUNT
		self._timestamp_min_delta = ConfigRefer.ConstMain.ChatTimestampInterval and ConfigRefer.ConstMain:ChatTimestampInterval() * 1000 or TIMESTAMP_MIN_DELTA
		self._msg_max_length = ConfigRefer.ConstMain.ChatCharMax and ConfigRefer.ConstMain:ChatCharMax() or MESSAGE_MAX_LENGTH
	end
	return self._msg_count, self._timestamp_min_delta, self._msg_max_length
end

--- 是否为忽略的会话
---@param self ChatModule
---@param session CS.FunPlusChat.Models.FPSession
---@return boolean
function ChatModule:IsIgnoredSession(session)
	if (not session) then return true end

	-- GvE会话
	if (session.SessionType == SessionType.Group and session.GroupType == GROUP_TYPE_GVE) then return true end

	return false
end

-- 系统通知变更
function ChatModule:OnSystemToastChanged()
	self._msgSessionList[SESSION_ID_SYSTEM_TOAST] = {}
	local player = ModuleRefer.PlayerModule:GetPlayer()
	if (player and player.PlayerWrapper2.ChatInfo.Toast) then
		for _, toast in pairs(player.PlayerWrapper2.ChatInfo.Toast) do
			local data = {
				message = {
					isToast = true,
					SessionId = SESSION_ID_SYSTEM_TOAST,
					ImId = math.floor(toast.SendTime.Millisecond),
					MsgTime = math.floor(toast.SendTime.Millisecond),
					toast = toast,
				},
			}
			table.insert(self._msgSessionList[SESSION_ID_SYSTEM_TOAST], data)
		end
	end
end

return ChatModule
