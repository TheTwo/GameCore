---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hao.wu.ss
--- DateTime: 2022/9/15 11:59
---

local BaseModule = require('BaseModule')
local ProtocolId = require("ProtocolId")
local Delegate = require('Delegate')
local UIMediatorNames = require("UIMediatorNames")
local ItemPopType = require("ItemPopType")
local ModuleRefer = require("ModuleRefer")
local ConfigRefer = require("ConfigRefer")
local EventConst = require("EventConst")
local ResourcePopDatum = require("ResourcePopDatum")
local NumberFormatter = require("NumberFormatter")
local AllianceModuleDefine = require('AllianceModuleDefine')
local UIAsyncDataProvider = require("UIAsyncDataProvider")
local I18N = require("I18N")
local QualityColorHelper = require("QualityColorHelper")
local TimerUtility = require("TimerUtility")
---@class RewardModule
local RewardModule = class('RewardModule', BaseModule)

function RewardModule:ctor()

end

function RewardModule:OnRegister()
    g_Game.ServiceManager:AddResponseCallback(ProtocolId.PushReward, Delegate.GetOrCreate(self, self.OnPushReward))
end

function RewardModule:OnRemove()
    g_Game.ServiceManager:RemoveResponseCallback(ProtocolId.PushReward, Delegate.GetOrCreate(self, self.OnPushReward))
end

---@param self RewardModule
---@param isSucceed boolean
---@param msg wrpc.PushRewardRequest
function RewardModule:OnPushReward(isSucceed, msg)
    if msg.PopType == ItemPopType.PopTypeDefault then
        ---@type UIRewardMediatorParameter
        local data = {}
        local itemInfo = {}
        local itemId2ItemInfoIndex = {}
        for index, id in ipairs(msg.ItemID) do
            local i = itemId2ItemInfoIndex[id]
            if not i then
                table.insert(itemInfo, {
                    id = id,
                    count = msg.ItemCount[index],
                })
                itemId2ItemInfoIndex[id] = #itemInfo
            else
                itemInfo[i].count = itemInfo[i].count + msg.ItemCount[index]
            end
        end
        data.itemInfo = itemInfo
        data.itemProfiteType = msg.ProfitReason
        self:ShowDefaultReward(data)
    elseif msg.PopType == ItemPopType.PopTypeLightReward then
        local hudMediator = g_Game.UIManager:FindUIMediatorByName(UIMediatorNames.HUDMediator)
        if not hudMediator then
            return
        end
        if msg.ProfitReason == wds.enum.ItemProfitType.ItemAddByCityCollectRes and g_Game.UIManager:GetTopOpenedUIMediator() ~= nil then
            return
        end
        if msg.ProfitReason == wds.enum.ItemProfitType.ItemAddBySlgCreepRemove then
            return
        end
        self:ShowLightReward(msg)
    elseif msg.PopType == ItemPopType.PopTypeResource then
        local city = ModuleRefer.CityModule:GetMyCity()
        if not city then return end

        self:ShowResourcePopByRpc(city, msg)
    elseif msg.PopType == ItemPopType.PopTypeTips then
        self:ShowTipsReward(msg)
    end
end

---@param msg wrpc.PushRewardRequest
function RewardModule:ShowTipsReward(msg)
    for i, itemId in ipairs(msg.ItemID) do
        local itemCfg = ConfigRefer.Item:Find(itemId)
        local itemName = I18N.Get(itemCfg:NameKey())
        local count = msg.ItemCount[i]
        local icon = itemCfg:Icon()
        local color = QualityColorHelper.GetQualityColorStr(itemCfg:Quality(), QualityColorHelper.Type.Item)
        TimerUtility.DelayExecute(function()
            ModuleRefer.ToastModule:AddJumpToast(("%s+%d"):format(itemName, count), icon, color)
        end, 0.5 * (i - 1))
    end
end

---@param data UIRewardMediatorParameter
function RewardModule:ShowDefaultReward(data)
    -- g_Game.UIManager:Open(UIMediatorNames.UIRewardMediator, data)
    local provider = UIAsyncDataProvider.new()
    local name = UIMediatorNames.UIRewardMediator
    local timing = UIAsyncDataProvider.PopupTimings.AnyTime
    local check = UIAsyncDataProvider.CheckTypes.DoNotShowOnOtherMediator
    local checkFailedStrategy = UIAsyncDataProvider.StrategyOnCheckFailed.DelayToAnyTimeAvailable
    provider:Init(name, timing, check, checkFailedStrategy, false, data)
    provider:SetOtherMediatorCheckType(0)
    provider:AddOtherMediatorBlackList(UIMediatorNames.ActivityShopPackRewardPopupMediator)
    g_Game.UIAsyncManager:AddAsyncMediator(provider)
end

---@param msg wrpc.PushRewardRequest
function RewardModule:ShowLightReward(msg)
    if table.isNilOrZeroNums(msg and msg.ItemID) then return end
    ---@type {id:number,showCount:boolean,pos:wds.Point2,reason:wds.enum.ItemProfitType}
    local itemInfo = {}
    local rewardCount = #msg.ItemID
    local coefficient = 3 / rewardCount
    for index, id in ipairs(msg.ItemID) do
        --不要显示的道具
        if id == AllianceModuleDefine.AllianceTechExpItemId then
            goto continue
        end
        if self:CheckIsNeedTiling(id) then
            local count = msg.ItemCount[index]
            if count > 10 then
                count = math.floor(10 * coefficient)
            end
            for _ = 1, count do
                table.insert(itemInfo, {
                    id = id,
                    showCount = false,
                    pos = msg.Pos,
                    reason = msg.ProfitReason,
                })
            end
        else
            table.insert(itemInfo, {
                id = id,
                count = msg.ItemCount[index],
                pos = msg.Pos,
                reason = msg.ProfitReason,
            })
        end
        ::continue::
    end
    self.rewardMeditor = g_Game.UIManager:FindUIMediatorByName(UIMediatorNames.UIRewardLightMediator)
    if self.rewardMeditor then
        self.rewardMeditor:AddRewardList(itemInfo)
    elseif not self.rewardUIId then
        self.rewardUIId = g_Game.UIManager:Open(UIMediatorNames.UIRewardLightMediator, itemInfo, function(uimediator)
            self:AddToList(uimediator)
        end)
    else
        self.rewardList = self.rewardList or {}
        self.rewardList[#self.rewardList + 1] = itemInfo
    end
end

function RewardModule:AddToList(uimediator)
    self.rewardMeditor = uimediator
    self.rewardUIId = nil
    if self.rewardList then
        for _, v in ipairs(self.rewardList) do
            self.rewardMeditor:AddRewardList(v)
        end
        self.rewardList = nil
    end
end

function RewardModule:ClearRewardUIId()
    self.rewardUIId = nil
end

function RewardModule:ShowResourcePopByRpc(city, msg)
    for i, v in ipairs(msg.ItemID) do
        local itemCfg = ConfigRefer.Item:Find(v)
        local datum = ResourcePopDatum.new(itemCfg:Icon(), NumberFormatter.NumberAbbr(msg.ItemCount[i], true, true), msg.Pos.X, msg.Pos.Y)
        self:ShowResourcePopType(city, datum)
    end
end

function RewardModule:ShowResourcePopType(city, datum)
    if not g_Game.UIManager:IsOpenedByName(UIMediatorNames.UIRewardResourceMediator) then
        g_Game.UIManager:Open(UIMediatorNames.UIRewardResourceMediator, {city = city, datum = datum})
    else
        g_Game.EventManager:TriggerEvent(EventConst.UI_REWARD_RESOURCE_POPUP, datum)
    end
end

function RewardModule:CheckIsNeedTiling(itemId)
    local resId = ModuleRefer.InventoryModule:GetResTypeByItemId(itemId)
    if itemId == ConfigRefer.ConstMain:UniversalCoin() or resId or self:IsMoney(itemId) then
        return true
    end
    return false
end

function RewardModule:IsMoney(itemId)
    for i = 1, ConfigRefer.ConstMain:HUDCoinItemIdLength() do
        if ConfigRefer.ConstMain:HUDCoinItemId(i) == itemId then
            return true
        end
    end
    return false
end

-- function RewardModule:PushRewardDropPos(profitReason, pos)
--     self.rewardDropList = self.rewardDropList or {}
--     if not self.rewardDropList[profitReason] then
--         self.rewardDropList[profitReason] = {}
--     end
--     table.insert(self.rewardDropList[profitReason], pos)
-- end

-- function RewardModule:PopRerwdDropPos(profitReason)
--     self.rewardDropList = self.rewardDropList or {}
--     if not self.rewardDropList[profitReason] then
--         return nil
--     end
--     local pos = self.rewardDropList[profitReason][1]
--     if not pos then
--         return nil
--     end
--     table.remove(self.rewardDropList[profitReason], 1)
--     return pos
-- end

return RewardModule