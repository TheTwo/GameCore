---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/2/17 21:17
---
local Delegate = require('Delegate')
local PageBaseState = require('PageBaseState')
local QuestStateConstant = require('QuestStateConstant')
local TimerUtility = require('TimerUtility')

---@class PageStateCtrl
---@field module QuestModule_Chapter
---@field viewer ChapterQuestPageComponent
---@field curState PageBaseState
local PageStateCtrl = class('PageStateCtrl')
function PageStateCtrl:ctor(module,viewer)
    self.module = module
    self.viewer = viewer
    self.curState = nil
    self.preState = nil
    self.nextStateName = nil
    self.nextStateData = nil
    self.nextFrameTimer = 0
    self.blackboard = {}
    self:InitStates()
end
function PageStateCtrl:AddState(stateName,state)
    self.states[stateName] = state
end
function PageStateCtrl:InitStates()
    self.states = {}
    for i, v in pairs(QuestStateConstant.StateName) do
        self:AddState(v,require(v).new(self.module,self.viewer,self))
    end
end

---@param viewer ChapterQuestPageComponent
function PageStateCtrl:SetViewer(viewer)
    self.viewer = viewer
    for __, state in pairs(self.states) do
        state:SetViewer(self.viewer)
    end
end

function PageStateCtrl:ChangeState(stateName)
    if string.IsNullOrEmpty(stateName)
        or ( self.curState ~= nil
            and self.curState.GetName() == stateName)
    then
        return
    end

    local nextState = self.states[stateName]
    if nextState == nil then
        return
    end

    if self.curState ~= nil then
        self.curState:Out()
    end
    self.preState = self.curState
    self.curState = nextState
    nextState:In()
end

function PageStateCtrl:Next(nextframe)
    if self.curState == nil then
        return
    end

    local nextStateName = self.curState:Next(self.preState)
    if string.IsNullOrEmpty(nextStateName)
        or nextStateName == self.curState.GetName()
    then
        return
    end
    self.nextStateName = nextStateName
    self.nextFrameTimer = nextframe and 1 or 0
end

function PageStateCtrl:SetInitState(stateName)
    if not string.IsNullOrEmpty( stateName ) then
        self.initState = stateName;
    end
end

function PageStateCtrl:Start()
    if self.initState == nil then
        self:ChangeState(QuestStateConstant.StateName.Init)
    else
        local init =self.initState
        self.initState = nil
        self:ChangeState(init)
    end
    g_Game:AddLateFrameTicker(Delegate.GetOrCreate(self,self.Tick))
end

function PageStateCtrl:Stop()
    g_Game:RemoveLateFrameTicker(Delegate.GetOrCreate(self,self.Tick))
    --table.clear(self.states)
    --self.states = nil
    self.curState = nil
    --self.module = nil
    --self.viewer = nil
end

function PageStateCtrl:Tick()
    if self.nextStateName ~= nil then
        if self.nextFrameTimer > 0 then
            self.nextFrameTimer = self.nextFrameTimer - 1
        else
            self:ChangeState(self.nextStateName)
            self.nextStateName = nil
            self.nextFrameTimer = 0
        end
    end
end

function PageStateCtrl:IsInState(stateName)
    if self.curState == nil or string.IsNullOrEmpty(stateName) then
        return false;
    end

    return self.curState.GetName() == stateName
end

function PageStateCtrl:GoNext(nextframe)
    if nextframe == nil then nextframe = false end
    self:Next(nextframe)
end

function PageStateCtrl:Refresh()
    if self.curState ~= nil then
        self.curState:Refresh()
    end
end

function PageStateCtrl:WriteBlackboard(key,value)
    self.blackboard[key] = value
end

function PageStateCtrl:ReadBlackboard(key,clean)
    local v = self.blackboard[key]
    if clean then
        self.blackboard[key] = nil
    end
    return v
end


return PageStateCtrl