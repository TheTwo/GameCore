---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/4/28 15:36
---
---@type State
local State = require("State")
---@class BootState:State
local BootState = class("BootState", State)
---@type PreloadingState
local PreloadingState = require("PreloadingState")
local ModuleRefer = require("ModuleRefer")
---@type SdkCrashlytics
local SdkCrashlytics = require("SdkCrashlytics")

---@type DeviceUtil
local DeviceUtil = require('DeviceUtil')

BootState.Name = "BootState"

function BootState:GetName()
    return BootState.Name
end

---range Init Steps
function BootState:InitLocalization()
    g_Game.LocalizationManager:Initialize()
    local currentLang = g_Game.LocalizationManager:GetCurrentLanguage()
    --g_Game.LocalizationManager:Reload(currentLang, true)
    g_Game.LocalizationManager:Reload(currentLang, false)
	
	g_Logger.Log("iSLowMemoryDevice: " .. tostring(DeviceUtil.IsLowMemoryDevice()))
end

function BootState:InitServiceManager()
    g_Game.ServiceManager:Initialize()
end    

function BootState:InitDatabase()
    g_Game.DatabaseManager:Initialize()
end

function BootState:InitSoundManager()
    g_Game.SoundManager:InitSoundManager()
end

function BootState:InitUIManager()
    g_Game.UIManager:Initialize()
    g_Game.UIManager:RegisterPreRequestUI()    
end

function BootState:InitSceneManager()
    g_Game.SceneManager:Initialize()
end

function BootState:InitAStar()
   
end

function BootState:InitUWA()
    local uwaEnable = ModuleRefer.AppInfoModule:UwaEnable()
    local controlByPoco = ModuleRefer.AppInfoModule:ControlByPoco()
    if uwaEnable then
        if controlByPoco then
            local poco = CS.UnityEngine.GameObject("PocoManager")
            poco:AddComponent(typeof(CS.PocoManager))
            CS.UWAEngine.StaticInit(true)
        else
            CS.UWAEngine.StaticInit(false)
        end
    end
end

function BootState:InitSettings()
    if g_Game.debugSupportOn then
        local RuntimeDebugSettings = require("RuntimeDebugSettings")
        local has, safeId = RuntimeDebugSettings:GetString('safe_id')
        if has then
            SdkCrashlytics.SetReporter(safeId)
        end
    end
end

function BootState:InitDeserializeMinMax()
    local deserializeMinMilliseconds = 10
    local deserializeMaxMilliseconds = 15
    local deviceLevel = g_Game.PerformanceLevelManager:GetDeviceLevel()
    if deviceLevel == CS.DragonReborn.Performance.DeviceLevel.Low then
        deserializeMinMilliseconds = 15
        deserializeMaxMilliseconds = 20
    end

    g_Game.ServiceManager:SetDeserializeMinMax(deserializeMinMilliseconds, deserializeMaxMilliseconds)
end

function BootState:InitPerformance()
    ModuleRefer.PerformanceModule:SetLoadingFinish(false)
    g_Game.PerformanceLevelManager:SetLoadingFinish(false)
	
	-- 设置物理模拟模式
	CS.UnityEngine.Physics2D.simulationMode = CS.UnityEngine.SimulationMode2D.Script
end

function BootState:InitDotween()
	CS.DG.Tweening.DOTween.useSafeMode = true
end

function BootState:InitSpriteManager()
    if DeviceUtil.IsLowMemoryDevice() then
        g_Game.SpriteManager:SetLRUSize(50)
    else
        g_Game.SpriteManager:SetLRUSize(1000)
    end
end

---end range

function BootState:Enter()
    g_Game.IOAccessRecorder.StartStep("BootState")
    if SdkCrashlytics then
        SdkCrashlytics.RecordCrashlyticsLog("GAME_STATE_MACHINE_[".. tostring(self.Name) .."]_ENTER")
    end
    g_Logger.LogChannel("GameState",'Boot')
    g_Game.EventManager = g_Game:AddManager(require("EventManager").new())
    g_Game.ModuleManager = g_Game:AddManager(require("ModuleManager").new())
    g_Game.LocalizationManager = g_Game:AddManager(require("LocalizationManager").new())
    --g_Game.DatabaseManager = g_Game:AddManager(require("DatabaseManager").new())
    --g_Game.ServiceManager = g_Game:AddManager(require("ServiceManager").new())
	g_Game.PerformanceLevelManager = g_Game:AddManager(require('PerformanceLevelManager').new())
    g_Game.SceneManager =g_Game:AddManager(require("SceneManager").new())
    --g_Game.UIManager = g_Game:AddManager(require("UIManager").new())
    --g_Game.SoundManager = g_Game:AddManager(require("SoundManager").new())
    g_Game.GestureManager = g_Game:AddManager(require("GestureManager").new())
    --g_Game.ServerTime = g_Game:AddManager(require("ServerTime").new())
    g_Game.FileSystemManager = g_Game:AddManager(require("FileSystemManager").new())
    g_Game.DownloadManager = g_Game:AddManager(require("DownloadManager").new())
    g_Game.SimpleHttpManager = g_Game:AddManager(require("SimpleHttpManager").new())
    g_Game.AssetManager = g_Game:AddManager(require("AssetManager").new())
    g_Game.GameObjectPoolManager = g_Game:AddManager(require("GameObjectPoolManager").new())
    --g_Game.EntityPoolManager = g_Game:AddManager(require("EntityPoolManager").new())
    g_Game.GameObjectManager = g_Game:AddManager(require("GameObjectManager").new())
    g_Game.SpriteManager = g_Game:AddManager(require("SpriteManager").new())
    --g_Game.VisualEffectManager = g_Game:AddManager(require("VisualEffectManager").new())
    g_Game.MaterialManager = g_Game:AddManager(require("MaterialManager").new())
    --g_Game.ConfigManager = g_Game:AddManager(require("ConfigManager").new())
    g_Game.TaskManager = g_Game:AddManager(require('TaskManager').new())
    g_Game.PowerManager = g_Game:AddManager(require("PowerManager").new())
    --g_Game.ProjectileManager = g_Game:AddManager(require('ProjectileManager').new())
    g_Game.VideoClipManager = g_Game:AddManager(require("VideoClipManager").new())    
    --g_Game.TroopViewManager = g_Game:AddManager(require('TroopViewEntityManager').new())
    --g_Game.PingManager = g_Game:AddManager(require("PingManager").new())
    --g_Game.UIAsyncManager = g_Game:AddManager(require("UIAsyncManager").new())

    --if UNITY_DEBUG or UNITY_EDITOR then
    --    g_Game.ConfigManager:SwitchTrace(true)
    --end

    --self:InitLocalization()
    --self:InitDatabase()
    --self:InitServiceManager()
    --self:InitSoundManager()
    --self:InitUIManager()
    self:InitSceneManager()
    self:InitAStar()
    --self:InitUWA()
    self:InitSettings()
    --self:InitDeserializeMinMax()
    --self:InitPerformance()
	self:InitDotween()
    self:InitSpriteManager()
    
    g_Game:AddState(require("PreloadingState").Name, require("PreloadingState").new())
    g_Game:AddState(require("WaitingState").Name, require("WaitingState").new())
    
    --初始化GM工具
    --if g_Game.debugSupportOn then
    --    local GMPanel = require("GMPanel")
    --    g_Game.GMPanel = GMPanel.new()
    --    g_Game.GMPanel:Init()
    --end
    --if g_Game.sdkWrapper then
    --    g_Game.sdkWrapper:Initialize()
    --end

    --CS.RenderPiplineUtil.Clear()
end

function BootState:Exit()
    if SdkCrashlytics then
        SdkCrashlytics.RecordCrashlyticsLog("GAME_STATE_MACHINE_[".. tostring(self.Name) .."]_EXIT")
    end
end


function BootState:Tick(dt)
    self.stateMachine:ChangeState(PreloadingState.Name)
end

return BootState
