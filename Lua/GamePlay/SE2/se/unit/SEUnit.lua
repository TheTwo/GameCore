---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by BE.Tenner.
--- DateTime: 2021/7/14 14:55
---
--- 单位基类

local SEUnitComponentType = require("SEUnitComponentType")
local ConfigRefer = require("ConfigRefer")
local BuffClientManager = require("BuffClientManager")
local BuffClientParam = require("BuffClientParam")
local SELogger = require("SELogger")
local SEUnitCategory = require("SEUnitCategory")
local SEUnitType = require("SEUnitType")
local ModuleRefer = require("ModuleRefer")
local I18N = require("I18N")
local Utils = require("Utils")

---@class SEUnit
---@field new fun(manager:SEUnitManager, id:number, data:SEUnitData):SEUnit
local SEUnit = class("SEUnit")

-- 自由落体参数
--local FREEFALL_GRAVITY = 0.5
--local FREEFALL_TIME = 2

function SEUnit:ctor(manager, id, type)
    ---@type SEUnitManager
    self._manager = manager
    self._id = id
    self._type = type
    ---@type table<string, SEUnitComponent>
    self._components = {}
    self._ownerId = -1
    self._isDead = false
    self._waitingForLoot = false
    self._deathReason = 0
    self._deathTime = 0
    ---@type SEActor
    self.m_actor = nil
    ---@type wds.Puppet|wds.SePet|wds.Monster|wds.Hero
    self.m_entity = nil
    ---@type CS.SEUnitHud
    self.m_hud = nil
    ---@type CS.DragonReborn.AssetTool.PooledGameObjectHandle
    self.m_hudHandle = nil
    ---@type CS.SEUnitDialog
    self.m_dialog = nil
    ---@type CS.DragonReborn.AssetTool.PooledGameObjectHandle
    self.m_dialogHandle = nil
    self.m_moveSpeed = 0
    self.m_functionHandleList = {}
    ---@type CS.SEAlertRange
    self.m_alertRange = nil
    ---@type CS.DragonReborn.AssetTool.PooledGameObjectHandle
    self.m_alertRangeHandle = nil
    self.m_clientDominated = false
    self._init = false
    self._lastServerDominated = false
    self._lastServerControlled = false
    self._hpClient = 0
    self._hpClientFromDamage = 0
    self.m_isHidden = false
    ---@type table<number, wds.BuffInfo>
    self._curBuffs = {}
    self._playingSkillCount = 0
    self._lastMp = 0
	self._lastHp = 0
	---@type SeNpcConfigCell
	self._config = nil
	self._isHostile = false
	self._isFriendly = false
	self._bodySize = nil
    ---@type SEUnitHudPetCatch
    self.m_petCatchHud = nil
    ---@type CS.DragonReborn.AssetTool.PooledGameObjectHandle
    self.m_petCatchHudHandle = nil
    self.m_globalFocusSwitch = false
end

---@return number
function SEUnit:GetID()
    return self._id
end

---@return SEActor
function SEUnit:GetActor()
    return self.m_actor
end

---@return CS.SEUnitHud, CS.DragonReborn.AssetTool.PooledGameObjectHandle
function SEUnit:GetHud()
    return self.m_hud, self.m_hudHandle
end

---@return boolean
function SEUnit:IsInit()
    return self._init
end

---@return void
function SEUnit:SetInit()
    self._init = true
end

---@param entity wds.Puppet|wds.SePet|wds.Monster|wds.Hero
---@return void
function SEUnit:SetEntity(entity)
    self.m_entity = entity
    self._hpClient = self:GetHPServer()
    self._hpClientFromDamage = self._hpClient
end

function SEUnit:ForceSyncFromServerHp()
    self._hpClient = self:GetHPServer()
    self._hpClientFromDamage = self._hpClient
end

function SEUnit:GetHPPct()
	return math.clamp01(self._hpClient / self:GetHPMax())
end

---@return wds.Puppet|wds.SePet|wds.Monster|wds.Hero
function SEUnit:GetEntity()
    return self.m_entity
end

function SEUnit:GetLevelCampIndex()
    return self.m_entity.Owner.LevelCampIndex or 0
end

---@return wds.Fight
function SEUnit:GetFight()
    if (self.m_entity.TypeHash == wds.Player.TypeHash) then
        return self.m_entity.PlayerWrapper.Fight
    else
        return self.m_entity.Fight
    end
end

---@return boolean
function SEUnit:GetMapStatesBattle()
    return self.m_entity.MapStates.StateWrapper.Battle
end

---@return wds.MapEntityState
function SEUnit:GetMapStates()
    return self.m_entity.MapStates
end

---@return number
function SEUnit:GetFaction()
    return self:GetFight().Faction
end

---@return number
function SEUnit:GetHP()
    return self._hpClient
end

---@return void
function SEUnit:SyncHpClientFromKeyEvent()
    if self._hpClient ~= self._hpClientFromDamage then
        self._hpClient = self._hpClientFromDamage
        self:GetManager():OnUnitFightChange(self)
        if not self:IsDead() and self._hpClient <= 0 then
            self:SetDead(true)
            self:GetManager():AddDeadUnit(self)
        end
    end
end

---@param hpClientFromDamage any
---@return void
function SEUnit:SetHpClientFromDamage(hpClientFromDamage)
    self._hpClientFromDamage = hpClientFromDamage
end

---@return number
function SEUnit:GetHPMax()
    return self:GetFight().HPMax
end

---@return number
function SEUnit:GetHPServer()
    return self:GetFight().HP
end

---@return number
function SEUnit:GetHPMaxServer()
    return self:GetFight().HPMax
end

---@return number
function SEUnit:GetMP()
    if (self:IsDead()) then
        return 0
    end
    return self:GetFight().MP
end

---@return number
function SEUnit:GetMPMax()
    return self:GetFight().MPMax
end

---@param hud CS.SEUnitHud
---@param handle CS.DragonReborn.AssetTool.PooledGameObjectHandle
---@return void
function SEUnit:SetHud(hud, handle)
    self.m_hud = hud
    self.m_hudHandle = handle
end

---@param dialog CS.SEUnitDialog
---@param dialog CS.SEUnitDialog
---@param handle CS.DragonReborn.AssetTool.PooledGameObjectHandle
---@return void
function SEUnit:SetDialog(dialog, handle)
    self.m_dialog = dialog
    self.m_dialogHandle = handle
end

---@return CS.SEUnitDialog, CS.DragonReborn.AssetTool.PooledGameObjectHandle
function SEUnit:GetDialog()
    return self.m_dialog, self.m_dialogHandle
end

---@param hud SEUnitHudPetCatch
---@param handle CS.DragonReborn.AssetTool.PooledGameObjectHandle
function SEUnit:SetPetCatchHud(hud, handle)
    self.m_petCatchHud = hud
    self.m_petCatchHudHandle = handle
end

---@return SEUnitHudPetCatch, CS.DragonReborn.AssetTool.PooledGameObjectHandle
function SEUnit:GetPetCatchHud()
    return self.m_petCatchHud, self.m_petCatchHudHandle
end

---@return CS.UnityEngine.GameObject
function SEUnit:GetPetCatchHudGo()
    return self.m_petCatchHud and self.m_petCatchHud:GetGameObject()
end

---@return boolean
function SEUnit:IsHost()
    return false
end

---@return void
function SEUnit:Init()
    for _, v in pairs(self._components) do
        if (v:IsManualInit() == false) then
            v:Init()
        end
    end

    self:OnBuffChange()
end

---@return void
function SEUnit:PostInit()
    for _, v in pairs(self._components) do
        v:PostInit()
    end
end

---@param delta number
---@return void
function SEUnit:Update(delta, nowTime)
    if (not self._init) then
        return
    end

    if (not self._isDead) then
        local actor = self.m_actor
        if (actor) then
            actor:Update(delta, nowTime)
        end
        for _, v in pairs(self._components) do
            v:Update(delta, nowTime)
        end
    end
    if self.m_petCatchHud then
        self.m_petCatchHud:Tick(delta)
    end
end

---@return SEUnitManager
function SEUnit:GetManager()
    return self._manager
end

---@return number
function SEUnit:GetOwnerID()
    return self._ownerId
end

---@param ownerId number
---@return void
function SEUnit:SetOwnerID(ownerId)
    self._ownerId = ownerId
end

---@return number @SEUnitType
function SEUnit:GetType()
    return self._type
end

---@param type number
---@return void
function SEUnit:SetType(type)
    self._type = type;
end

---@return boolean
function SEUnit:IsDead()
    return self._isDead
end

---@return void
function SEUnit:IsDeadServer()
    return self:GetHPServer() <= 0
end

---@param dead boolean
---@return void
function SEUnit:SetDead(dead)
    self._isDead = dead
    if (dead) then
        SELogger.Trace("Set dead %s", self._id)

		self:GetActor():SetSkillCovered(false)

        -- 己方英雄死亡的提示
		if (self:IsHero() and self:IsFriendly() ) then
			-- 死亡提示
			local key = ConfigRefer.ConstSe:SeHeroDieTips()
			---@type HeroesConfigCell
			local heroCfg = self:GetHeroConfig()
			ModuleRefer.ToastModule:AddSimpleToast(I18N.GetWithParams(key, I18N.Get(heroCfg:Name())))
			self:GetManager():GetEnvironment():GetUiBattlePanel():RefreshHeroStatus()

			-- 清除路点
			---@type SEHero
			local hero = self
			hero:HideWaypoint()

			-- 取消技能
            self:GetManager():GetEnvironment():GetSkillManager():CancelSkill(self)
            self:GetManager():GetEnvironment():GetUiBattlePanel():CancelCardUsingByHero(self)
        end

        -- HUD
        local hud = self:GetHud()
        if (hud) then
            hud:HideProgress()
            hud:HideHP()
            self:GetActor():HideSkillProgress()
            --hud:SetActive(false)
        end

        self._deathTime = self:GetManager():GetEnvironment():GetServerTime()
        self:GetManager():HideBubbleDialog(self._id)

        -- 移除NavMeshAgent
        --self:GetLocomotion():SetAgentEnabled(false)

        -- SNS时期，死亡掉落和死亡表现逻辑
        -- -- 死因（死亡技能表现）
        -- self._deathReason = SEUnitDeathReason.Normal
        -- local fightInfo = self:GetFight().FightInfo
        -- local reason = fightInfo.DeathAssert
        -- -- 是否有掉落
        -- self._waitingForLoot = fightInfo.DeadDrop
        -- local noDeathAnim = false
        -- if (reason) then
        --     if (reason ~= 0) then
        --         self._deathReason = SEUnitDeathReason.FreeFall
        --     else
        --         if (fightInfo.LethalSkillId > 0) then
        --             local skill = ConfigRefer.KheroSkillLogicalSe:Find(fightInfo.LethalSkillId)
        --             if (skill and skill:DeathFly() ~= 0) then
        --                 --g.Logger.Log("Lethal skill is DeathFly! skillId: %s, unitID: %s", fightInfo.LethalSkillId, self._id)
        --                 noDeathAnim = true
        --             end
        --         end
        --     end
        -- end

        -- if (not noDeathAnim) then
        --     -- 死亡特效
        --     local config = self:GetData():GetConfig()
        --     if (config and config:DeathSkillAsset() ~= 0) then
        --         self._manager._env._skillManager:CastSkillPerform(config:DeathSkillAsset(),
        --                 wds.enum.SkillStageType.SkillStageTypeDefault, nil,
        --                 self:GetActor():GetPosition(), self:GetActor(), self:GetActor():GetPosition())
        --     end
        --     -- 死亡动画
        --     self:GetStateMachine():OnDead()
        -- end

        -- 有亡语技能的单位，死亡的时候不播死亡动画
        local config = self:GetData():GetConfig()
        if not (config and config:CastSkillWhenDead()) then
            --产品又说可以把暂时不用这个死亡时插入可捕捉状态的处理了
            --local entity = self:GetEntity()
            --if entity and entity.MapStates.StateWrapper3.CanCatch then
            --    local catchStatusEndTime = nil --todo 服务器下发可捕捉状态结束时间
            --    self:GetStateMachine():OnCanCatch(catchStatusEndTime)
            --else
                self:GetStateMachine():OnDead()
            --end
        --else
        --    local entity = self:GetEntity()
        --    if entity and entity.MapStates.StateWrapper3.CanCatch then
        --        self:GetStateMachine():OnCanCatch()
        --    end
        end

		-- 计数
		if (self:IsHostile()) then
			self._manager:RemoveHostileUnitCount(self._type)
		else
			self._manager:RemoveFriendlyUnitCount(self._type)
		end

    -- 复活
    else
        -- HUD
        local hud = self:GetHud()
        if (hud) then
            hud:SetActive(true)
        end

        --self:GetLocomotion():SetAgentEnabled(true)

		-- 计数
		if (self:IsHostile()) then
			self._manager:AddHostileUnitCount(self._type)
		else
			self._manager:AddFriendlyUnitCount(self._type)
		end
		
        -- 拉起来
        self:GetStateMachine():OnIdle(true)
    end

    -- 刷新卡牌列表
    if (self:IsHero()) then
        self:GetManager():GetEnvironment():GetUiBattlePanel():RefreshCardList(false)
    end
end

---@param component SEUnitComponent
---@return void
function SEUnit:AddComponent(component)
    self._components[component:GetName()] = component
end

---@param name string
---@return SEUnitComponent
function SEUnit:GetComponent(name)
    return self._components[name]
end

---@param component SEUnitComponent
---@return SEUnitComponent
function SEUnit:EnsureComponent(component)
    local comp = self:GetComponent(component:GetName())
    if comp == nil then
        self:AddComponent(component)
        comp = component
    end
    return comp
end

---@return SEUnitData
function SEUnit:GetData()
    return self:GetComponent(SEUnitComponentType.Data)
end

---@return SEUnitLocomotion
function SEUnit:GetLocomotion()
    return self:GetComponent(SEUnitComponentType.Locomotion)
end

---@return SEUnitStateMachine
function SEUnit:GetStateMachine()
    return self:GetComponent(SEUnitComponentType.StateMachine)
end

---@return SEUnitController
function SEUnit:GetController()
    return self:GetComponent(SEUnitComponentType.Controller)
end

---@return SEUnitAudio
function SEUnit:GetAudio()
    return self:GetComponent(SEUnitComponentType.Audio)
end

---@return SEUnitRenderer
function SEUnit:GetRenderer()
    return self:GetComponent(SEUnitComponentType.Renderer)
end

---@return CS.UnityEngine.Transform
function SEUnit:GetWeaponNozzle()
    return self:GetActor():GetTransform():FirstOrDefaultByName("dummy0")
end

---@return CS.UnityEngine.Transform
function SEUnit:GetLight()
    return self:GetActor():GetTransform():FirstOrDefaultByName("light")
end

---@param force boolean
---@return void
function SEUnit:Release(force)
	if (not self._init) then return end
	
	if (self:GetData():GetConfig():Category() == SEUnitCategory.Boss) then
		local index = self:GetManager():GetBossIndex(self)
		self:GetManager():ClearBossIndex(index)
		self:GetManager():GetEnvironment():GetUiBattlePanel():HideBossHPBar(index)
	end

    for _, v in pairs(self._components) do
        v:Release()
    end
    self._components = {}
    if (self:GetActor()) then
        self:GetActor():Release(force)
    end
    self.m_actor = nil
    self._init = false
end

---@param speed number
---@return void
function SEUnit:SetMoveSpeed(speed)
    --g.Logger.Log("set unit [%s] speed: [%s]", tostring(self._id), tostring(speed))
    self.m_moveSpeed = speed
    local locomotion = self:GetLocomotion()
    if (locomotion) then
        locomotion:SetMoveSpeed(self.m_moveSpeed)
    end
end

---@return CS.SEAlertRange, CS.DragonReborn.AssetTool.PooledGameObjectHandle
function SEUnit:GetAlertRange()
    return self.m_alertRange, self.m_alertRangeHandle
end

---@param alertRange CS.SEAlertRange
---@param handle CS.DragonReborn.AssetTool.PooledGameObjectHandle
---@return void
function SEUnit:SetAlertRange(alertRange, handle)
    self.m_alertRange = alertRange
    self.m_alertRangeHandle = handle
end

function SEUnit:IsPet()
	return self._type == SEUnitType.Pet
end

---@return boolean
function SEUnit:IsHero()
	return self._type == SEUnitType.Hero
end

---@return boolean
function SEUnit:IsInvisible()
    if (self.m_entity and self.m_entity.MapStates and self.m_entity.MapStates.StateWrapper) then
        return self.m_entity.MapStates.StateWrapper.Invisible
    end
    return false
end

---@return boolean
function SEUnit:IsControl()
    if (self.m_entity and self.m_entity.MapStates and self.m_entity.MapStates.StateWrapper) then
        return self.m_entity.MapStates.StateWrapper.Control
    end
    return false
end

---@return boolean
function SEUnit:IsDominated()
    if (self.m_clientDominated) then
        return true
    end
    if (self.m_entity and self.m_entity.MapStates and self.m_entity.MapStates.StateWrapper) then
        return self.m_entity.MapStates.StateWrapper.Dominated
    end
    return false
end

---@return boolean
function SEUnit:IsWarning()
    if (self.m_entity and self.m_entity.MapStates and self.m_entity.MapStates.StateWrapper) then
        return self.m_entity.MapStates.StateWrapper.Warning
    end
    return false
end

---@return boolean
function SEUnit:IsIdle()
    if (self.m_entity and self.m_entity.MapStates and self.m_entity.MapStates.StateWrapper) then
        return self.m_entity.MapStates.StateWrapper.Idle
    end
    return false
end

---@return void
function SEUnit:OnStateWrapperChange()
    local dominated = self:IsDominated()
    local controlled = self:IsControl()
    if (dominated or controlled) then
        if (self._lastServerDominated ~= dominated or self._lastServerControlled ~= controlled) then
            self._lastServerControlled = controlled
            self._lastServerDominated = dominated
            --g.Logger.Log("**** unit %s became server dominated! d: %s, c: %s", self._id, dominated, controlled)
            self:GetController():StopMove()
        end
    end
end

---@return void
function SEUnit:OnStateWrapper3Change()
    local catchHud = self:GetPetCatchHud()
    if not catchHud then return end
    local entity = self:GetEntity()
    local showPetCatchHud = entity and (entity.MapStates.StateWrapper3.CanCatch or entity.MapStates.StateWrapper3.Catching) and self:GetManager():NotInCityModeOrAllowShowCatchHud() and not self:GetManager():GetEnvironment():CurrentFocusTeamAnyHeroInBattle()
    catchHud:SetShowIcon(showPetCatchHud and not entity.MapStates.StateWrapper3.Catching)
    catchHud:SetShowProgress(showPetCatchHud and entity.MapStates.StateWrapper3.Catching)
end

---@param dominated boolean
---@return void
function SEUnit:SetClientDominated(dominated)
    local old = self.m_clientDominated
    self.m_clientDominated = dominated
    if (dominated and not old) then
        --g.Logger.Log("**** unit %s became client dominated!", self._id)
        self:GetController():StopMove()
    end
end

------------------------------
--- buff

---@return table<number, wds.BuffInfo>
function SEUnit:GetBuff()
    return self.m_entity.Skill.SeBuffs
end

---@param buffConfigCell KheroBuffLogicalSeConfigCell
---@param layer number
function SEUnit:GetBuffPerformIdByLayer(buffConfigCell, layer)
    local performIdCount = buffConfigCell:PerformIdsLength()
    if layer > performIdCount then
        return buffConfigCell:PerformIds(performIdCount)
    end

    if layer <= 0 then
        SELogger.LogError('buff layer %s is invalid', layer)
        return buffConfigCell:PerformIds(1)
    end

    return buffConfigCell:PerformIds(layer)
end

---@return void
function SEUnit:OnBuffChange()
    local curBuffs = self._curBuffs
    local newBuffs = self:GetBuff()
    -- buff delete
    for i, v in pairs(curBuffs) do
        if newBuffs[i] == nil then
            local param = BuffClientParam.new(i, v.ConfigId)
            param:SetTargetClass(require("se.skillclient.SEBuffClientTarget"))
            param:SetTarget(self:GetActor())
            BuffClientManager.GetInstance():End(param)
            curBuffs[i] = nil -- delete
        end
    end

    -- buff changed
    for i, v in pairs(newBuffs) do
        if curBuffs[i] then
            local tBuff = ConfigRefer.KheroBuffLogicalSe:Find(v.ConfigId)
            local performId = self:GetBuffPerformIdByLayer(tBuff, v.Layer)
            if performId and performId > 0 then
                local tmpParam = BuffClientParam.new(i, v.ConfigId)
                tmpParam:SetTargetClass(require("se.skillclient.SEBuffClientTarget"))
                tmpParam:SetTarget(self:GetActor())
                tmpParam:SetPerformId(performId)
                if tBuff:IsLogic() then tmpParam:SetStageLogic() end
                -- 同一个buff，表现发生了改变
                if BuffClientManager.GetInstance():IsBuffChanged(tmpParam) then
                    SELogger.Log('SEUnit %s buff %s layer %s change Perform %s', self._id, v.ConfigId, v.Layer, performId)
                    BuffClientManager.GetInstance():End(tmpParam)
                    BuffClientManager.GetInstance():Start(tmpParam)
                end
            end
        end
    end

    -- buff add
    for i, v in pairs(newBuffs) do
        if curBuffs[i] == nil then
            local tBuff = ConfigRefer.KheroBuffLogicalSe:Find(v.ConfigId)
            local performId = self:GetBuffPerformIdByLayer(tBuff, v.Layer)
            if performId and performId > 0 then
                local param = BuffClientParam.new(i, v.ConfigId)
                param:SetTargetClass(require("se.skillclient.SEBuffClientTarget"))
                param:SetTarget(self:GetActor())
                param:SetPerformId(performId)
                if tBuff:IsLogic() then param:SetStageLogic() end
                BuffClientManager.GetInstance():Start(param)
            end
        end
        curBuffs[i] = v
    end
end

---@return boolean
function SEUnit:IsHidden()
    return self.m_isHidden
end

---@param hidden boolean
---@return void
function SEUnit:SetHidden(hidden)
    -- if (hidden == self.m_isHidden) then
    --     return
    -- end
    self.m_isHidden = hidden
    if (self:GetActor()) then
        self:GetActor():SetHidden(hidden)
    end
	if (self:GetHud()) then
		self:GetHud().gameObject:SetActive(not hidden)
	end
end

---@return boolean
function SEUnit:IsWaitingForLoot()
    return self._waitingForLoot
end

---@return void
function SEUnit:ClearWaitingForLoot()
    self._waitingForLoot = false
    --self._deathTime = ServerTimeData.GetMillisecondsServerTime()
    self._deathTime = self:GetManager():GetEnvironment():GetServerTime()
end

---@param value any
---@return void
function SEUnit:SetPlayingSkill(value)
    if value then
        self._playingSkillCount = self._playingSkillCount + 1
    else
        self._playingSkillCount = self._playingSkillCount - 1
    end
end

---@return void
function SEUnit:IsPlayingSkill()
    return self._playingSkillCount > 0
end

---@param hp number
function SEUnit:SetLastHP(hp)
	self._lastHp = hp
end

---@return number
function SEUnit:GetLastHP()
	return self._lastHp
end

---@param mp number
---@return void
function SEUnit:SetLastMP(mp)
    self._lastMp = mp
end

---@return number
function SEUnit:GetLastMP()
    return self._lastMp
end

---@return boolean
function SEUnit:IsCaptain()
    return self._manager:GetCaptainId() == self._id
end

--- 是否为怪物类型
---@return boolean
function SEUnit:IsMonsterType()
    return (self._type & SEUnitType.Monster) == SEUnitType.Monster
end

--- 是否为玩家类型
------@return boolean
function SEUnit:IsPlayerType()
    return (self._type & SEUnitType.Player) == SEUnitType.Player
end

--- 是否为傀儡类型
---@return boolean
function SEUnit:IsPuppetType()
    return (self._type & SEUnitType.Puppet) == SEUnitType.Puppet
end

--- 是否为英雄类型
---@return boolean
function SEUnit:IsHeroType()
    return (self._type & SEUnitType.Hero) == SEUnitType.Hero
end

--- 是否为NPC类型
---@return boolean
function SEUnit:IsNpcType()
    return (self._type & SEUnitType.NPC) == SEUnitType.NPC
end

--- 是否为替身类型
---@return boolean
function SEUnit:IsDummyType()
    return (self._type & SEUnitType.Dummy) == SEUnitType.Dummy
end

function SEUnit:IsPetType()
	return (self._type & SEUnitType.Pet) == SEUnitType.Pet
end

function SEUnit:SetHudVisible(visible)
	if (self.m_hud) then
		self.m_hud.gameObject:SetActive(visible)
	end
end

function SEUnit:GetConfig()
	if (not self._config) then
		self._config = self:GetData():GetConfig()
	end
	return self._config
end

function SEUnit:IsBoss()
	if (not self._config) then self:GetConfig() end
	return self._config:Category() == SEUnitCategory.Boss
end

function SEUnit:IsElite()
	if (not self._config) then self:GetConfig() end
	return self._config:Category() == SEUnitCategory.Elite
end

function SEUnit:IsHostile()
	return self._isHostile
end

function SEUnit:IsFriendly()
	return self._isFriendly
end

function SEUnit:SetHostile()
	self._isHostile = true
	self._isFriendly = false
end

function SEUnit:SetFriendly()
	self._isHostile = false
	self._isFriendly = true
end

function SEUnit:UpdateFaction()
	self._isHostile = self._manager:GetEnvironment():IsHostile(self)
	self._isFriendly = not self._isHostile
end

function SEUnit:GetBodySize()
	if (not self._bodySize) then
		self._bodySize = self:GetData():GetConfig():BodySize()
	end
	return self._bodySize
end

function SEUnit:GetDebugName()
    return string.Empty
end

function SEUnit:OnLevelChanged()
    self:RefreshHudLevel()
end

function SEUnit:RefreshHudLevel()
end

function SEUnit:IsInCanCatchState()
    local entity = self:GetEntity()
    return entity and entity.MapStates.StateWrapper3.CanCatch
end

function SEUnit:SetGlobalFocusSwitch(value)
    if self.m_globalFocusSwitch == value then return end
    self.m_globalFocusSwitch = value
    local fbxRender = self:GetActor():GetFbxRendererList()
    if not fbxRender or fbxRender.Length <= 0 then return end
    local shaderPropertyName = CS.RenderExtension.ShaderConst.SceneDarkenToggle
    local toggleValue = value and 1 or 0
    for i = 0, fbxRender.Length - 1 do
        local render = fbxRender[i]
        if Utils.IsNotNull(render) then
            local materials = render.materials
            if materials and materials.Length > 0 then
                for j = 0, materials.Length - 1 do
                    local mat = materials[j]
                    if Utils.IsNotNull(mat) and mat:HasFloat(shaderPropertyName) then
                        mat:SetFloat(shaderPropertyName, toggleValue)
                    end
                end
                render.materials = materials
            end
        end
    end
end

return SEUnit
