---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hao.wu.ss
--- DateTime: 2023/8/15 11:05
---

--- scene: scene_child_slg_card

local BaseUIComponent = require('BaseUIComponent')
local Delegate = require('Delegate')
local HeroUIUtilities = require('HeroUIUtilities')
local EventConst = require('EventConst')
local UITroopConst = require('UITroopConst')
local UIHelper = require('UIHelper')
local Utils = require('Utils')
local Vector2 = CS.UnityEngine.Vector2

---@class UITroopHeroCard : BaseUIComponent
local UITroopHeroCard = class('UITroopHeroCard', BaseUIComponent)

---@class UITroopHeroCardData
---@field heroUnit TroopEditHeroUnit
---@field petUnit TroopEditPetUnit

local STATUS_INDEX_EMPTY = 0
local STATUS_INDEX_NORMAL = 1

function UITroopHeroCard:ctor()
	self.originalPosHero = nil
	self.originalPosPet = nil
	self.isModelDraging = false
	self.bingdingModel = nil
	self.modelType = 0
	self.cam = g_Game.UIManager.ui3DViewManager:UICam3D()
end

function UITroopHeroCard:Tick()
	if self.isModelDraging then
		self:TrackModelPos()
	end
end

function UITroopHeroCard:OnCreate(param)
	self:InitObjects()
	self.originalPosHero = Vector2(self.rectHeroInfo.anchoredPosition.x, self.rectHeroInfo.anchoredPosition.y)
	self.originalPosPet = Vector2(self.rectPetInfo.anchoredPosition.x, self.rectPetInfo.anchoredPosition.y)
end

function UITroopHeroCard:OnShow(param)
	g_Game:AddIgnoreInvervalTicker(Delegate.GetOrCreate(self, self.Tick))
	g_Game.EventManager:AddListener(EventConst.ON_TROOP_MODEL_DRAG_START, Delegate.GetOrCreate(self, self.OnModelDragStart))
	g_Game.EventManager:AddListener(EventConst.ON_TROOP_MODEL_DRAG_END, Delegate.GetOrCreate(self, self.OnModelDragEnd))
end

function UITroopHeroCard:OnHide(param)
	self.isModelDraging = false
	self.bingdingModel = nil
	self.modelType = 0
	g_Game:RemoveIgnoreInvervalTicker(Delegate.GetOrCreate(self, self.Tick))
	g_Game.EventManager:RemoveListener(EventConst.ON_TROOP_MODEL_DRAG_START, Delegate.GetOrCreate(self, self.OnModelDragStart))
	g_Game.EventManager:RemoveListener(EventConst.ON_TROOP_MODEL_DRAG_END, Delegate.GetOrCreate(self, self.OnModelDragEnd))
end

function UITroopHeroCard:InitObjects()
	--Hero Infos
	self.rectHeroInfo = self:RectTransform('p_hero_status')
	self.goHeroInfo = self:GameObject('p_hero_status')
	self.heroStatusRecord = self:StatusRecordParent("p_hero_status")
	self.emptyButton = self:Button("p_btn_hero_empty", Delegate.GetOrCreate(self, self.OnEmptyButtonClick))
	self.heroAddIcon = self:GameObject("p_btn_hero_empty")

	self.heroName = self:Text("p_text_name")
	self.heroLvText = self:Text("p_text_lv")

	self.heroJobIcon = self:Image('p_icon_job')
	---@see UIHeroAssociateIconComponent
	self.compHeroStyle = self:LuaObject('p_icon_style')

	self.heroHpPreview = self:Slider("p_progress_view_hero")
	self.heroHpSlider = self:Slider("p_hero_hp")
	self.goHeroHp = self:GameObject('p_hp')

	--Pet Infos
	self.rectPetInfo = self:RectTransform('p_pet_status')
	self.goPetInfo = self:GameObject('p_pet_status')
	self.petStatusRecord = self:StatusRecordParent("p_pet_status")
	self.goPetBase = self:GameObject('p_base_n_pet')
	---@see PetStarLevelComponent
	self.luaPetStar = self:LuaObject('p_star_layout')
	self.petAddButton = self:Button("p_btn_pet_empty", Delegate.GetOrCreate(self, self.OnPetButtonClick))
	self.compPetStyle = self:LuaObject('p_icon_style_pet')

	self.petLvText = self:Text("p_text_lv_pet")
	self.petHpPreview = self:Slider("p_progress_view_pet")
	self.petHpSlider = self:Slider("p_progress_pet_hp")
	---@see NotificationNode
	self.petRedDot = self:LuaObject("p_pet_red_dot")
	---@see NotificationNode
	self.heroRedDot = self:LuaObject("p_hero_reddot")

	self.petJobIcon = self:Image('p_icon_job_pet')

	self.goCircleButtons = self:GameObject('p_circle_buttons')
    self.btnDelete = self:Button('p_btn_delete', Delegate.GetOrCreate(self, self.OnBtnDeleteClicked))
    self.btnTroop = self:Button('p_btn_troop', Delegate.GetOrCreate(self, self.OnBtnTroopClicked))
	self.textInjuriedInfo = self:Text('p_text_injuried','formation_injuringwarn')

	self.goInjured = self:GameObject('p_base_injured')
	self.imgLv = self:Image('p_lv')
	self.imgFillHero = self:Image('p_fill_hero')

	self.imgFillPet = self:Image('p_fill_pet')
	self.strengthPet = self:LuaObject('p_strengthen_pet_icon')
	self.goInjuredPet = self:GameObject('p_base_injured_pet')
	---@see UIHeroStrengthenCellGroup
	self.luaHeroStrengthen = self:LuaObject('p_strengthen_hero_group')

	---@type CS.UnityEngine.UI.Image[]
	self.petStars = {}

	self.vxGoHeroHp = self:GameObject('p_add_blood_hero')
	self.vxGoPetHp = self:GameObject('p_add_blood_pet')

	self.heroHpPreview.value = 0
	self.petHpPreview.value = 0
end

---@param data UITroopHeroCardData
function UITroopHeroCard:OnFeedData(data)
	self.heroUnit = data.heroUnit
	self.petUnit = data.petUnit
	self.index = data.index
	self:RefreshUI(data)
end

function UITroopHeroCard:SetupHeroRanckIcon(strengthLv)
	self.luaHeroStrengthen:FeedData(strengthLv)
end

---@param data UITroopHeroCardData
function UITroopHeroCard:RefreshUI(data)
	self:UpdateHeroInfo(data.heroUnit)
	self:UpdatePetInfo(data.petUnit)
	self:ResetPos()

	self.petAddButton.gameObject:SetActive(false)
	self.heroAddIcon:SetActive(false)
end

---@param heroUnit TroopEditHeroUnit
function UITroopHeroCard:UpdateHeroInfo(heroUnit)
	if not heroUnit then
		self.heroStatusRecord:ApplyStatusRecord(STATUS_INDEX_EMPTY)
		return
	end
	heroUnit:SetUIGameObject(self.goHeroInfo)
	self.heroStatusRecord:ApplyStatusRecord(STATUS_INDEX_NORMAL)
	self.heroHpSlider.value = heroUnit:GetHpPercent()
	self.goInjured:SetActive(heroUnit:IsInjured())
	self.heroLvText.text = "Lv." .. heroUnit:GetLevel()
	self.luaHeroStrengthen:FeedData(heroUnit:GetStars())

	---@type AssociateIconParam
	local data = {}
	data.tagId = heroUnit:GetAssociatedTagId()
	self.compHeroStyle:FeedData(data)

	local battleTypeIcon = HeroUIUtilities.GetHeroBattleTypeTextureName(heroUnit:GetBattleStyleId())
	g_Game.SpriteManager:LoadSprite(battleTypeIcon, self.heroJobIcon)
end

---@param petUnit TroopEditPetUnit
function UITroopHeroCard:UpdatePetInfo(petUnit)
	if not petUnit then
		self.petStatusRecord:ApplyStatusRecord(STATUS_INDEX_EMPTY)
		return
	end
	petUnit:SetUIGameObject(self.goPetInfo)
	self.petStatusRecord:ApplyStatusRecord(STATUS_INDEX_NORMAL)
	self.petHpSlider.value = petUnit:GetHpPercent()
	self.goInjuredPet:SetActive(petUnit:IsInjured())
	self.petLvText.text = "Lv" .. petUnit:GetLevel()
	self.luaPetStar:FeedData(petUnit:GetStars())

	---@type AssociateIconParam
	local data = {}
	data.tagId = petUnit:GetAssociatedTagId()
	self.compPetStyle:FeedData(data)

	local battleTypeIcon = HeroUIUtilities.GetHeroBattleTypeTextureName(petUnit:GetBattleStyleId())
	g_Game.SpriteManager:LoadSprite(battleTypeIcon, self.petJobIcon)
end

function UITroopHeroCard:OnModelDragStart(slotIndex, slotType, model)
	if slotIndex == self.index then
		self.isModelDraging = true
		self.bingdingModel = model
		self.modelType = slotType
	end
end

function UITroopHeroCard:OnModelDragEnd(slotIndex, slotType)
	self.isModelDraging = false
	self.bingdingModel = nil
	self.modelType = 0
	self:ResetPos()
end

function UITroopHeroCard:TrackModelPos()
	if not Utils.IsNotNull(self.bingdingModel) then return end
	if self.modelType == UITroopConst.TroopSlotType.Hero then
		UIHelper.SetWSPosAnchor(self.cam, self.heroStatusRecord.transform, self.bingdingModel.position)
	elseif self.modelType == UITroopConst.TroopSlotType.Pet then
		UIHelper.SetWSPosAnchor(self.cam, self.petStatusRecord.transform, self.bingdingModel.position)
	end
end

function UITroopHeroCard:ResetPos()
	self.rectHeroInfo.anchoredPosition = Vector2(self.originalPosHero.x, self.originalPosHero.y)
	self.rectPetInfo.anchoredPosition = Vector2(self.originalPosPet.x, self.originalPosPet.y)
end

function UITroopHeroCard:ShowHpAnimHero()
	self.vxGoHeroHp:SetActive(true)
end

function UITroopHeroCard:ShowHpAnimPet()
	self.vxGoPetHp:SetActive(true)
end

return UITroopHeroCard