---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/5/16 17:10
---

local BaseUIComponent = require('BaseUIComponent')
local UIHelper = require('UIHelper')
local ModuleRefer = require('ModuleRefer')
local Delegate = require('Delegate')
local DBEntityPath = require('DBEntityPath')
local EventConst = require('EventConst')
local DBEntityType = require('DBEntityType')
local I18N = require('I18N')
local ConfigRefer = require('ConfigRefer')
local AllianceAuthorityItem = require('AllianceAuthorityItem')
local SEHudTroopMediatorDefine = require('SEHudTroopMediatorDefine')
local GotoUtils = require('GotoUtils')
local UIMediatorNames = require('UIMediatorNames')
local SlgUtils = require('SlgUtils')
local NpcServiceType = require('NpcServiceType')
local NpcServiceObjectType = require("NpcServiceObjectType")
local HomeSeInExploreParameter = require('HomeSeInExploreParameter')
local HUDTroopUtils = require("HUDTroopUtils")

---@class HUDTroopListData
---@field index number
---@field presetIndex number
---@field troopInfo TroopInfo
---@field eventTriggerd boolean
---@field onClick fun():void
---@field onTriggerClick fun():void
---@field tipData table
---@field triggerPos wds.Vector3F
---@field triggerTime number
---@field behemothInfo {configId:number,entity:wds.MobileFortress,vanishTime:number}

---@class HUDTroopList : BaseUIComponent
local HUDTroopList = class("HUDTroopList",BaseUIComponent)

HUDTroopList.NormalHeight = 420
HUDTroopList.ExtendHeight = 475
HUDTroopList.MaxTroopCount = ConfigRefer.ConstMain:FormationUnlockNum()

---@param tableIndex number
---@return HUDTroopListData
local function CreateEmptySlotData(tableIndex, presetIndex)
    ---@type TroopInfo
    local emptyTroop =
    {
        preset = nil,
        troopId = 0,
        entityData = nil,
        locked = false
    }
    
    ---@type HUDTroopListData
    local data =
    {
        index = tableIndex,
        presetIndex = presetIndex,
        troopInfo = emptyTroop
    }

    return data
end

---@param tableIndex number
---@return HUDTroopListData
local function CreateLockSlotData(tableIndex, presetIndex)
    ---@type TroopInfo
    local lockedTroop =
    {
        preset = nil,
        troopId = 0,
        entityData = nil,
        locked = true
    }

    ---@type HUDTroopListData
    local data =
    {
        index = tableIndex,
        presetIndex = presetIndex,
        troopInfo = lockedTroop
    }

    return data
end

---@param mobileFortress wds.MobileFortress
---@param tableIndex number
local function CreateMobileFortressSlotData(mobileFortress, tableIndex)
    local cfgId = ModuleRefer.AllianceModule.Behemoth:GetCurrentBindBehemothSummonConfigId()
    local info = ModuleRefer.AllianceModule.Behemoth:GetCurrentInSummonBehemothInfo()

    ---@type HUDTroopListData
    local data =
    {
        index = tableIndex,
        behemothInfo =
        {
            configId = cfgId,
            entity = mobileFortress,
            vanishTime = info:GetVanishTime()
        }
    }

    return data
end

---@param oldList HUDTroopListData[]
---@param newList HUDTroopListData[]
---@param mobileFortress wds.MobileFortress
---@return boolean
local function NeedResetTroopList(oldList, newList, mobileFortress)
    local oldCount = #oldList
    local newCount = #newList
    local needReset = false

    if oldCount ~= newCount then
        needReset = true
    end

    if not needReset and mobileFortress then
        for i = 1, newCount do
            if newList[i] and newList[i].behemothInfo then
                if not oldList[i] or not oldList[i].behemothInfo then
                    needReset = true
                    break
                end
            end
        end
    end

    return needReset
end

---@param data HUDTroopListData
function HUDTroopList:CanSelectTroopListData(data)
    if data == nil then
        return false
    end

    if data.troopInfo == nil then
        return false
    end

    if data.troopInfo.locked then
        return false
    end

    if data.troopInfo.entityData == nil and data.troopInfo.preset == nil then
        return false
    end

    if data.troopInfo.entityData and not SlgUtils.IsTroopSelectable(data.troopInfo.entityData) then
        return false
    end

    if data.troopInfo.preset and not self.slgModule:IsPresetCanCreated(data.troopInfo.preset) then
        return false
    end

    return true
end

HUDTroopList.ShowRedDot = false

function HUDTroopList:NeedShow()
    return ModuleRefer.NewFunctionUnlockModule:CheckNewFunctionIsUnlocked(self.unlockSysId)
end

function HUDTroopList:OnCreate(param)
    self.middleBase = self:RectTransform("middle_base")
    self.tableView = self:TableViewPro('p_troop_list')
    self.scrollRect = self:ScrollRect("p_troop_list")
    self.groupSelect = self:GameObject('p_check')
    self.groupSelectButton = self:Button('child_toggle_set',Delegate.GetOrCreate(self,self.OnGroupSelectClicked))
    self.groupSelectState = self:StatusRecordParent('child_toggle_set')
    self.groupSelect:SetVisible(false)
    self.unlockSysId = ConfigRefer.ConstMain:FormationRightShow()
    
    ---@type HUDTroopListData[]
    self.troopList = {}
    self.tipDataIndex = -1

    self.transEventInfoTip = self:RectTransform('p_btns_l')
    self.imgEventInfoTipIcon = self:Image('p_icon_evens')
    self.textEventIcon = self:Text('p_text_evens')
    self.textBtnEventInfoTip = self:Text('p_text_goto','circlemenu_joinbattle')
    self.btnEventInfoTip = self:Button('p_btn_goto',Delegate.GetOrCreate(self,self.OnGotoEvent))
    self.btnGotoPosition = self:Button('p_btn_position',Delegate.GetOrCreate(self,self.OnEventInfoGotoClick))
    self.triggerEventShowTime = ConfigRefer.ConstMain:TroopListEventTipTime()

    self.btnSet = self:Button('p_btn_set', Delegate.GetOrCreate(self, self.OnSetClicked))
    self.textSet = self:Text('p_text_set', 'troop_hud_ui_edit')

    self.luaRedDot = self:LuaObject('p_child_reddot')
end

function HUDTroopList:OnShow(param)
    self.playerModule = ModuleRefer.PlayerModule
    self.slgModule = ModuleRefer.SlgModule
    self.kingdomInteraction = ModuleRefer.KingdomInteractionModule
    self.groupSelectState:Play(0)

    g_Game.EventManager:AddListener(EventConst.MY_TROOP_UPDATE, Delegate.GetOrCreate(self,self.UpdateTroopList))
    g_Game.EventManager:AddListener(EventConst.ALLIANCE_BEHEMOTH_MOBILE_FORTRESS_ADD,Delegate.GetOrCreate(self,self.MobileFortressSummonedChanged))
    g_Game.EventManager:AddListener(EventConst.ALLIANCE_BEHEMOTH_MOBILE_FORTRESS_REMOVED,Delegate.GetOrCreate(self,self.MobileFortressSummonedChanged))
    g_Game.EventManager:AddListener(EventConst.SLGTROOP_SELECTION,Delegate.GetOrCreate(self,self.OnTroopSelected))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.CastleBrief.TroopPresets.MsgPath,Delegate.GetOrCreate(self,self.OnPreseetsChanged))
    g_Game.EventManager:AddListener(EventConst.ON_TROOP_ENTER_EVENT_TRIGGER, Delegate.GetOrCreate(self,self.OnTroopEnterEventTrigger))
    g_Game.EventManager:AddListener(EventConst.ON_TROOP_LEAVE_EVENT_TRIGGER, Delegate.GetOrCreate(self,self.OnTroopLeaveEventTrigger))
    g_Game.EventManager:AddListener(EventConst.SCENE_LOAD_STAGE_CHANGED, Delegate.GetOrCreate(self,self.OnChangeScene))
    g_Game.EventManager:AddListener(EventConst.HUD_STATE_CHANGED, Delegate.GetOrCreate(self, self.OnHudStateRefresh))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.Troop.MapBasics.Position.MsgPath,Delegate.GetOrCreate(self,self.OnTroopMoved))
    g_Game.DatabaseManager:AddChanged(DBEntityPath.CastleBrief.Castle.CastleAttribute.GlobalAttr.MsgPath,Delegate.GetOrCreate(self,self.OnCastleAttrChanged))
    g_Game.ServiceManager:AddResponseCallback(HomeSeInExploreParameter.GetMsgId(), Delegate.GetOrCreate(self, self.OnHomeSeInExploreEnd))

    g_Game:AddFrameTicker(Delegate.GetOrCreate(self,self.Tick))
    self:UpdateShowState()
    ---@type HUDMediator
    self.hudMediator = self:GetParentBaseUIMediator()
    self.luaRedDot:SetVisible(true)
    ModuleRefer.TroopModule:RefreshRedDotStatus()
    local node = ModuleRefer.TroopModule:GetRedDotCityHud()
    ModuleRefer.NotificationModule:AttachToGameObject(node, self.luaRedDot.go)
end

function HUDTroopList:OnHide(param)
    g_Game.EventManager:RemoveListener(EventConst.MY_TROOP_UPDATE,Delegate.GetOrCreate(self,self.UpdateTroopList))
    g_Game.EventManager:RemoveListener(EventConst.ALLIANCE_BEHEMOTH_MOBILE_FORTRESS_ADD,Delegate.GetOrCreate(self,self.MobileFortressSummonedChanged))
    g_Game.EventManager:RemoveListener(EventConst.ALLIANCE_BEHEMOTH_MOBILE_FORTRESS_REMOVED,Delegate.GetOrCreate(self,self.MobileFortressSummonedChanged))
    g_Game.EventManager:RemoveListener(EventConst.SLGTROOP_SELECTION,Delegate.GetOrCreate(self,self.OnTroopSelected))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.CastleBrief.TroopPresets.MsgPath,Delegate.GetOrCreate(self,self.OnPreseetsChanged))
    g_Game.EventManager:RemoveListener(EventConst.ON_TROOP_ENTER_EVENT_TRIGGER, Delegate.GetOrCreate(self,self.OnTroopEnterEventTrigger))
    g_Game.EventManager:RemoveListener(EventConst.ON_TROOP_LEAVE_EVENT_TRIGGER, Delegate.GetOrCreate(self,self.OnTroopLeaveEventTrigger))
    g_Game.EventManager:RemoveListener(EventConst.SCENE_LOAD_STAGE_CHANGED, Delegate.GetOrCreate(self,self.OnChangeScene))
    g_Game.EventManager:RemoveListener(EventConst.HUD_STATE_CHANGED, Delegate.GetOrCreate(self, self.OnHudStateRefresh))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.Troop.MapBasics.Position.MsgPath,Delegate.GetOrCreate(self,self.OnTroopMoved))
    g_Game.DatabaseManager:RemoveChanged(DBEntityPath.CastleBrief.Castle.CastleAttribute.GlobalAttr.MsgPath,Delegate.GetOrCreate(self,self.OnCastleAttrChanged))
    g_Game.ServiceManager:RemoveResponseCallback(HomeSeInExploreParameter.GetMsgId(), Delegate.GetOrCreate(self, self.OnHomeSeInExploreEnd))
    g_Game:RemoveFrameTicker(Delegate.GetOrCreate(self,self.Tick))
end

function HUDTroopList:OnSetClicked()
    local hasNotify = ModuleRefer.TroopModule:RefreshRedDotStatus()
    if hasNotify then
        HUDTroopList.ShowRedDot = false
    end
    g_Game.UIManager:Open(UIMediatorNames.UITroopMediator)
end

function HUDTroopList:UpdateShowState()
    self:SetVisible(self:NeedShow())

    if not self:NeedShow() then
        return
    end
    
    self:UpdateTroopList()
end

---@param data wds.CastleBrief
---@param changed wds.TroopPresets
function HUDTroopList:OnPreseetsChanged(data,changed)
    if not self:NeedShow() or not self.playerModule:IsMine(data.Owner)  then
        return
    end
    if changed.Presets and (changed.Presets.Add or changed.Presets.Remove) then
        self:UpdateTroopList()
        return
    end

    if changed.Presets then
        local needUpdateList = false
        for _, value in pairs(changed.Presets) do
            if value and value.Heroes then
                needUpdateList = true
                break
            end
        end
        if needUpdateList then
            self:UpdateTroopList()
            return
        end
    end
end

function HUDTroopList:OnHomeSeInExploreEnd()
    for _, data in ipairs(self.troopList) do
        if data.presetIndex then
            self.slgModule.selectManager:CancelSelectPreset(data.presetIndex)
        end
    end
end

function HUDTroopList:OnCastleAttrChanged(data, changed)
    if (changed.Remove or {})[50030] or (changed.Add or {})[50030] then
        self:UpdateTroopList()
    end
end

function HUDTroopList:MobileFortressSummonedChanged(id)
    self:UpdateTroopList()
end

function HUDTroopList:UpdateTroopList(param)
    if param and param.udpateFortress then
        g_Logger.LogChannel("Behemoth Summon","HUDTroopList Set Dirty :" .. g_Game.Time.frameCount)
        self.isDirty = true
    end
    if self.kingdomInteraction and not self.kingdomInteraction:IsDraging() then
        self.isDirty = true
    end
    self.isDirty = true
end

function HUDTroopList:OnTroopSelected()
    --在调用OnGroupSelectClicked时，避免处理消息EventConst.SLGTROOP_SELECTION
    if not self:NeedShow() or self.selectingGroup then
        return
    end
    local selectCount = self.slgModule.selectManager:GetSelectCount()
    if self.mulitSelectActive and selectCount < 2 then
        local selectInfo = self.slgModule.selectManager:GetFirstSelected()
        local selectIndex = -1
        if selectInfo then
            local selectTroopId = -1
            local selectPresetIndex = selectInfo.presetIndex
            if selectInfo.entityData then
                selectTroopId = selectInfo.entityData.ID
            end
            for index, value in ipairs(self.troopList) do
                if value then
                    if selectPresetIndex > 0 and value.index == selectPresetIndex then
                        selectIndex = index
                        break;
                    elseif selectTroopId > 0 and value.troopInfo and value.troopInfo.entityData
                        and selectTroopId == value.troopInfo.entityData.ID
                    then
                        selectIndex = index
                        break;
                    end
                end
            end
        end

        if selectIndex < 0 then
            self.tableView:ToggleUnSelect()
        else
            self.tableView:SetMultiSelect(self.troopList[selectIndex])
        end
        
        self.groupSelectState:Play(0)

        for index, value in ipairs(self.troopList) do
            self.tableView:UpdateData(self.troopList[index])
        end

    else
        self.tableView:UnSelectAll()

        self.groupSelectState:Play(1)

        local sMan = self.slgModule.selectManager
        for index, value in ipairs(self.troopList) do
            if value and value.troopInfo
            and value.troopInfo.entityData
            and sMan:IsTroopSelect(value.troopInfo.entityData.ID)
            then
                self.tableView:SetMultiSelect(value)
            elseif value and value.index > 0
            and sMan:IsPresetSelect(value.index)
            then
                self.tableView:SetMultiSelect(value)
            end
        end
    end
end

function HUDTroopList:OnGroupSelectClicked()
    local sMan = self.slgModule.selectManager
    
    local selectCount = sMan:GetMySelectCount()
    local controllableCount = self:GetControllableCount(self.troopList)

    sMan:ClearAllSelect()
    self.slgModule:CloseTroopMenu()

    if selectCount < controllableCount then
        self.selectingGroup = true

        selectCount = 0
        for _, data in ipairs(self.troopList) do
            if self:CanSelectTroopListData(data) then
                local ctrl = nil
                if data.troopInfo.entityData then
                    ctrl = self.slgModule:GetTroopCtrl(data.troopInfo.entityData.ID)
                end
                if ctrl then
                    sMan:AddSelect(ctrl)
                    selectCount = selectCount + 1
                elseif data.index and data.index > 0 then
                    sMan:AddSelectPreset(data.index)
                    selectCount = selectCount + 1
                end
            end
        end
    
        self.selectingGroup = false
    end
    
    if selectCount == 1 then
        local curSelectData = sMan:GetFirstSelected()
        if curSelectData then
            if curSelectData.ctrl then
                self.slgModule:SelectAndOpenTroopMenu(curSelectData.ctrl)
                self.slgModule:LookAtTroop(curSelectData.ctrl)
            end
        end
    end

    self:OnTroopSelected()

    for index, value in ipairs(self.troopList) do
        self.tableView:UpdateData(self.troopList[index])
    end
end

---@param myTroops TroopInfo[]
---@param outputs HUDTroopListData[]
---@param outputCount number
---@return HUDTroopListData, number
function HUDTroopList:SetupPresetTroops(myTroops, outputs, outputCount)
    if outputs == nil then
        outputs = {}
        outputCount = 0
    end
    
    if myTroops == nil then
        return outputs, outputCount
    end

    for presetIndex, troopInfo in pairs(myTroops) do
        ---@type HUDTroopListData
        local data = nil
        local tableIndex = outputCount + 1

        if troopInfo.locked then
            data = CreateLockSlotData(tableIndex, presetIndex)
        elseif HUDTroopUtils.DoesPresetHaveAnyHero(troopInfo.preset) then
            data =
            {
                index = tableIndex,
                presetIndex = presetIndex,
                troopInfo = troopInfo
            }
        else
            data = CreateEmptySlotData(tableIndex, presetIndex)
        end

        table.insert(outputs, data)

        outputCount = tableIndex
    end

    return outputs, outputCount
end

function HUDTroopList:SetupGMTroops(gmTroops, outputs, outputCount)
    if outputs == nil then
        outputs = {}
        outputCount = 0
    end
    
    if gmTroops == nil then
        return outputs, outputCount
    end

    for _, v in pairs(gmTroops) do
        local tableIndex = outputCount + 1

        ---@type HUDTroopListData
        local data =
        {
            index = tableIndex,
            troopInfo = v
        }
        
        table.insert(outputs, data)

        outputCount = tableIndex
    end

    return outputs, outputCount
end

---@param troops HUDTroopListData[]
function HUDTroopList:GetControllableCount(troops)
    local controllableCount = 0
    for _, troop in pairs(troops) do
        if (troop.troopInfo) and
           (not troop.troopInfo.locked) and
           (troop.troopInfo.preset ~= nil or troop.troopInfo.entityData ~= nil)
        then
            controllableCount = controllableCount + 1
        end
    end
    return controllableCount
end

function HUDTroopList:Tick()
    self:UpdateTriggerEventTimer()
    local hasNotify = ModuleRefer.TroopModule:RefreshRedDotStatus()
    self.luaRedDot:SetVisible(hasNotify and HUDTroopList.ShowRedDot)

    if not self.isDirty then
        return
    end

    self.isDirty = false

    self.slgModule.selectManager:RefreshSelectedData()
    local myTroops, gmTroops = self.slgModule:GetMyTroops(true)

    if myTroops == nil or table.nums(myTroops) < 1 then
        self.tableView:Clear()
        return
    end

    local mobileFortress = self:GetMobileFortress()

    ---@type HUDTroopListData[]
    local outputs = {}
    local outputCount = 0

    outputs, outputCount = self:SetupPresetTroops(myTroops, outputs, outputCount)

    if mobileFortress then
        local data = CreateMobileFortressSlotData(mobileFortress, outputCount)
        table.insert(outputs, data)
        outputCount = outputCount + 1
    end

    ---setup Troop Create by GM Cmd
    outputs, outputCount = self:SetupGMTroops(gmTroops,outputs,outputCount)

    local controllableCount = self:GetControllableCount(outputs)
    self.mulitSelectActive = controllableCount >= 2 and not self.slgModule:IsInCity()
    self.scrollRect.enabled = outputCount > HUDTroopList.MaxTroopCount

    local extendSize = false
    local rectSize = self.middleBase.sizeDelta
    if self.mulitSelectActive then
        rectSize.y = HUDTroopList.ExtendHeight
        extendSize = true
    else
        rectSize.y = HUDTroopList.NormalHeight
        extendSize = false
    end
    self.middleBase.sizeDelta = rectSize

    if not self.hudMediator then
        self.hudMediator = g_Game.UIManager:FindUIMediatorByName(UIMediatorNames.HUDMediator)
    end

    if self.hudMediator then
        self.hudMediator:WriteBlackboard("HUDTroopListExtended",extendSize)
    end

    local needReset = NeedResetTroopList(self.troopList, outputs, mobileFortress)
    if needReset then
        local resetPos = outputCount <= HUDTroopList.MaxTroopCount
        self.tableView:Clear(false, resetPos)
        self.troopList = {}
        for i = 1, outputCount do
            self.troopList[i] = outputs[i]
            self.tableView:AppendData(self.troopList[i], outputs[i].behemothInfo ~= nil and 1 or 0)
        end
    else
        for i = 1, outputCount do
            self.troopList[i].index = outputs[i].index
            self.troopList[i].presetIndex = outputs[i].presetIndex
            self.troopList[i].troopInfo = outputs[i].troopInfo
            self.tableView:UpdateData(self.troopList[i])
        end
    end

    self.groupSelect:SetVisible(self.mulitSelectActive)
    self:OnTroopSelected()
end

function HUDTroopList:OnChangeScene()
    if  not self:NeedShow() then
        return
    end
    if self.troopVisibleWatching then
        self.troopVisibleWatching = false
        local cam = self.slgModule:GetBasicCamera()
        cam:RemoveTransformChangeListener(Delegate.GetOrCreate(self,self.OnCameraChanged))
    end

    if self.troopList then
        for index, value in ipairs(self.troopList) do
            self.troopList[index].eventTriggerd = false
            self.troopList[index].tipData = nil
            self.troopList[index].onClick = nil
            self.troopList[index].onTriggerClick = nil
        end
    end
    self:HideEventInfoTip()
end

function HUDTroopList:OnHudStateRefresh()

end

---@class EnterTriggerEventData
---@field teamId number
---@field presetIdx number
---@field onClick fun():void
---@field tipData table

---@param data EnterTriggerEventData
function HUDTroopList:OnTroopEnterEventTrigger(data)
    self:SetTroopEventLabel(data,true)
end

function HUDTroopList:OnTroopLeaveEventTrigger(teamId, inCityLeave, troopPresetIndex)
    self:SetTroopEventLabel({teamId = teamId, presetIdx = troopPresetIndex, inCityLeave=true},false)
end

---@param data EnterTriggerEventData
function HUDTroopList:SetTroopEventLabel(data,show)
    if not self:NeedShow() or not data or not self.troopList or #self.troopList < 1  then
        return
    end
    if (not data.teamId or data.teamId < 1) and (not data.presetIdx) then
        return
    end

    local dataIndex = -1
    for index, value in ipairs(self.troopList) do
        if value.troopInfo and value.troopInfo.troopId == data.teamId then
            dataIndex = index
            break
        end
        if value.presetIndex == data.presetIdx then
            dataIndex = index
            break
        end
    end

    if dataIndex < 0 then
        return
    end
    self.menuDatum = data.menuDatum
    self:OnEventTriggerUpdated(dataIndex,show,data)

    if show and not self.troopVisibleWatching  then
        self.troopVisibleWatching = true
        self.lastWatchingDataIndex = dataIndex
        self.lookingTroopId = data.teamId
        local cam = self.slgModule:GetBasicCamera()
        cam:AddTransformChangeListener(Delegate.GetOrCreate(self,self.OnCameraChanged))
        self:OnCameraChanged()
    elseif self:GetEventTriggeredTroopIndex() < 0 and self.troopVisibleWatching then
        self.troopVisibleWatching = false
        local cam = self.slgModule:GetBasicCamera()
        cam:RemoveTransformChangeListener(Delegate.GetOrCreate(self,self.OnCameraChanged))
    end
end

function HUDTroopList:OnCameraChanged()
    if self.tipDataIndex < 0 then
        self.tipDataIndex = self.lastWatchingDataIndex
    end
    local data = self.troopList[self.tipDataIndex]
    if data and data.troopInfo and data.troopInfo.troopId > 0 then
        if self.slgModule:IsTroopVisible(data.troopInfo.troopId) then
            if self.lookingTroopId ~= data.troopInfo.troopId then
                self.lookingTroopId = data.troopInfo.troopId
                --防止计时被重置
                local triggerTime = data.triggerTime
                if not self:IsTouchMenuOpend() and data.onTriggerClick then
                    data.onTriggerClick()
                end
                data.triggerTime = triggerTime
                self:HideEventInfoTip()
            end
        else
            if self.lookingTroopId == data.troopInfo.troopId then
                self.lookingTroopId = -1
                if self:IsTouchMenuOpend() then
                    self:CloseTouchMenu()
                end
                self:SelectEventInfoTip(self.tipDataIndex,true)
            end
        end
    end
end

---@param data EnterTriggerEventData
function HUDTroopList:OnEventTriggerUpdated(dataIndex,show,data)
    self.troopList[dataIndex].eventTriggerd = show
    self.troopList[dataIndex].onTriggerClick = show and data.onClick or nil
    self.troopList[dataIndex].onClick = show and Delegate.GetOrCreate(self,self.OnSelectEventInfoTip) or nil
    self.troopList[dataIndex].tipData = data.tipData
    self.tableView:UpdateData(self.troopList[dataIndex])

    local troopData = self.troopList[dataIndex]
    if show and troopData.troopInfo.entityData then
        self.troopList[dataIndex].triggerPos = troopData.troopInfo.entityData.MapBasics.Position
        self.troopList[dataIndex].triggerTime = g_Game.Time.time
    elseif not show and data.inCityLeave then
        -- 城内脱离交互关闭tip
        self:HideEventInfoTip()
    end
end

---@param data HUDTroopListData
function HUDTroopList:OnSelectEventInfoTip(index)
    if self:IsTouchMenuOpend() then
        return
    end
    local data = self.troopList[index]
    if self.slgModule:IsTroopVisible(data.troopInfo.troopId) then
        self.tipDataIndex = index
        self.lookingTroopId = data.troopInfo.troopId
        if data.onTriggerClick then
            data.onTriggerClick()
        end
        self:HideEventInfoTip()
    else
        self:SelectEventInfoTip(index,true)
    end
end

function HUDTroopList:GetEventTriggeredTroopIndex()
    local dataIndex = -1
    for index, value in ipairs(self.troopList) do
        if value.troopInfo and value.eventTriggerd then
            dataIndex = index
            break
        end
    end
    return dataIndex
end

function HUDTroopList:SelectEventInfoTip(dataIndex,show)

    local cell = nil
    if dataIndex > 0 then
        cell = self.tableView:GetCell(dataIndex-1)
    end
    self.tipDataIndex = -1
    if show and cell then
        self.tipDataIndex = dataIndex
        self:ShowEventInfoTip(self.troopList[dataIndex].tipData,cell.transform)
    else
        dataIndex = self:GetEventTriggeredTroopIndex()

        if dataIndex < 0 then
            self:HideEventInfoTip()
        else
            if self.tableView:IsDataVisable(dataIndex-1,true) then
                cell = self.tableView:GetCell(dataIndex - 1)
                if cell then
                    self.tipDataIndex = dataIndex
                    self:ShowEventInfoTip(self.troopList[dataIndex].tipData,cell.transform)
                else
                    self:HideEventInfoTip()
                end
            else
                self.tableView:SetDataFocus(dataIndex - 1,2,function()
                    cell = self.tableView:GetCell(dataIndex - 1)
                    if cell then
                        self.tipDataIndex = dataIndex
                        self:ShowEventInfoTip(self.troopList[dataIndex].tipData,cell.transform)
                    else
                        self:HideEventInfoTip()
                    end
                end)
            end
        end
    end
end

function HUDTroopList:HideEventInfoTip()
    UIHelper.SetOtherUIAnchor(self.transEventInfoTip,nil,CS.UnityEngine.Vector3.zero)
    self.transEventInfoTip:SetVisible(false)
end


function HUDTroopList:ShowEventInfoTip(tipData,tableCell)

    UIHelper.SetOtherUIAnchor(self.transEventInfoTip,tableCell.transform,CS.UnityEngine.Vector3(-111.5,-50,0))
    self.transEventInfoTip:SetVisible(true)
    if tipData.tipType == 0 then
        self:ShowEventInfoTipInCity(tipData)
	elseif (tipData.tipType == 1) then
        self:ShowEventInfoTipInWorld(tipData)
    elseif (tipData.tipType == 2) then
		self:ShowEventInfoTipInWorldPetCatch(tipData)
    elseif (tipData.tipType == 4) then
        self:ShowEventInfoTipInCityPetCatch(tipData)
    end
end

function HUDTroopList:ShowEventInfoTipInCity(tipData)
    -- self.imgEventInfoTipIcon
    -- self.textEventIcon
    -- local targetId = tipData.targetId
    local npcId = tipData.npcId
    -- local cityPos = tipData.cityPos
    local npcCfg = ConfigRefer.NpcService:Find(npcId)
    local tid = npcCfg:ServiceParam()
	local mapCfg = ConfigRefer.MapInstance:Find(tid)
	if (mapCfg:HeadPic() > 0) then
		self.imgEventInfoTipIcon.gameObject:SetActive(true)
		self:LoadSprite(mapCfg:HeadPic(),self.imgEventInfoTipIcon)
	else
		self.imgEventInfoTipIcon.gameObject:SetActive(false)
	end
    self.textEventIcon.text = I18N.Get(mapCfg:Name())
    self.btnEventInfoTip.interactable = true
    self.textBtnEventInfoTip.text = I18N.Get('circlemenu_joinbattle')
    -- local needPow = mapCfg:Power()
end

function HUDTroopList:ShowEventInfoTipInWorldPetCatch(tipData)
    local tid = ModuleRefer.PetModule:GetSeMapIdByPetWildId(tipData.petData.data.ConfigId)
    local mapCfg = ConfigRefer.MapInstance:Find(tid)
	if (mapCfg:HeadPic() > 0) then
		self.imgEventInfoTipIcon.gameObject:SetActive(true)
		self:LoadSprite(mapCfg:HeadPic(),self.imgEventInfoTipIcon)
	else
		self.imgEventInfoTipIcon.gameObject:SetActive(false)
	end
    self.textEventIcon.text = I18N.Get(mapCfg:Name())
    local hasCatchItem = ModuleRefer.PetModule:IsInCityPetCatchHasItem()
    self.btnEventInfoTip.interactable = hasCatchItem
    self.textBtnEventInfoTip.text = hasCatchItem and I18N.Get('circlemenu_joinbattle') or I18N.Get('setips_btn_itemlack')
end

function HUDTroopList:ShowEventInfoTipInCityPetCatch(tipData)
    local npcId = tipData.npcId
    if (not npcId) then return false end
	local npcCfg = ConfigRefer.NpcService:Find(npcId)
	if (not npcCfg) then return false end
	local tid = npcCfg:ServiceParam()
	local mapCfg = ConfigRefer.MapInstance:Find(tid)
	if (not mapCfg) then return false end
    if (mapCfg:HeadPic() > 0) then
		self.imgEventInfoTipIcon.gameObject:SetActive(true)
		self:LoadSprite(mapCfg:HeadPic(),self.imgEventInfoTipIcon)
	else
		self.imgEventInfoTipIcon.gameObject:SetActive(false)
	end
    self.textEventIcon.text = I18N.Get(mapCfg:Name())
    local hasCatchItem = ModuleRefer.PetModule:IsInCityPetCatchHasItem()
    self.btnEventInfoTip.interactable = hasCatchItem
    self.textBtnEventInfoTip.text = hasCatchItem and I18N.Get('circlemenu_joinbattle') or I18N.Get('setips_btn_itemlack')
end

function HUDTroopList:GetMenuDatumButtonData()
    if self.menuDatum and self.menuDatum.pages and self.menuDatum.pages[1] then
        local pageData = self.menuDatum.pages[1]
        if pageData.buttonGroupData and pageData.buttonGroupData[1] then
            local buttonData = pageData.buttonGroupData[1]
            if buttonData.data and buttonData.data[1] then
                return buttonData.data[1]
            end
        end
    end
end

---@param menuDatum TouchMenuUIDatum
function HUDTroopList:ShowEventInfoTipInWorld(tipData)

    if self.menuDatum and self.menuDatum.pages and self.menuDatum.pages[1] then
        local pageData = self.menuDatum.pages[1].basic
        if pageData.image then
            self.imgEventInfoTipIcon.gameObject:SetActive(true)
            UIHelper.LoadSprite(pageData.image,self.imgEventInfoTipIcon)
        else
            self.imgEventInfoTipIcon.gameObject:SetActive(false)
        end
        self.textEventIcon.text = pageData.name
        self.btnEventInfoTip.interactable = self.menuDatum ~= nil
        local buttonData = self:GetMenuDatumButtonData()
        if buttonData then
            self.textBtnEventInfoTip.text = buttonData.label
        else
            self.textBtnEventInfoTip.text = I18N.Get('circlemenu_joinbattle')
        end
        return
    end

    local interactorConfId = tipData.interactorConfId
    local mineConf = ConfigRefer.Mine:Find(interactorConfId)
    if (not mineConf) then
        g_Logger.Error("创建大世界进入副本环形菜单: 非法interactorConfId: %s", interactorConfId)
        return
    end
    local tid = mineConf:MapInstanceId()
    local mapCfg = ConfigRefer.MapInstance:Find(tid)
	if (mapCfg:HeadPic() > 0) then
		self.imgEventInfoTipIcon.gameObject:SetActive(true)
		self:LoadSprite(mapCfg:HeadPic(),self.imgEventInfoTipIcon)
	else
		self.imgEventInfoTipIcon.gameObject:SetActive(false)
	end

    self.textEventIcon.text = I18N.Get(mapCfg:Name())
    self.btnEventInfoTip.interactable = self.menuDatum ~= nil
    self.textBtnEventInfoTip.text = I18N.Get('circlemenu_joinbattle')
end

---@param cityElementTid number
---@param serviceId number
---@param callback fun(success:boolean, rsp:any)
function HUDTroopList:RequestNpcService(cityElementTid, serviceId, callback)
    ModuleRefer.PlayerServiceModule:RequestNpcService(nil, NpcServiceObjectType.CityElement, cityElementTid, serviceId, nil, function(cmd, isSuccess, rsp)
        if callback then
            callback(isSuccess, rsp)
        end
    end)
end

function HUDTroopList:OnGotoEvent()
    if self.tipDataIndex < 0 then
        return
    end
    local troopData = self.troopList[self.tipDataIndex]

    local tipData = troopData.tipData
    if not tipData then
        return
    end
    if tipData.tipType == 0 or tipData.tipType == 4 then --in city
        local cityElementTid = tipData.targetId
        local npcId = tipData.npcId
        local cityPos = tipData.cityPos
        local npcCfg = ConfigRefer.NpcService:Find(npcId)
        if npcCfg:ServiceType() == NpcServiceType.CatchPet then
            -- 城内新抓宠
            if ModuleRefer.PetModule:CheckIsFullPet() then
                ModuleRefer.ToastModule:AddSimpleToast(I18N.Get("pet_amout_limit"))
                return
            end

            GotoUtils.GotoCityPetCatch(npcId, cityElementTid)
        else
            -- 城内SE
            local tid = npcCfg:ServiceParam()
            local troopId = troopData.troopInfo.troopId
            local mapCfg = ConfigRefer.MapInstance:Find(tid)
            if not mapCfg then
                g_Logger.Error("city 从trooplist 弹tip进入副本: 未找到副本, id: %s", tid)
                return
            end

            g_Game.EventManager:TriggerEvent(EventConst.ON_TROOP_LEAVE_EVENT_TRIGGER, troopId, false, troopData.presetIndex)
            self:RequestNpcService(cityElementTid, npcId, function(success, rsp)
                if success then
                    g_Game.StateMachine:WriteBlackboard("SE_FROM_TYPE", SEHudTroopMediatorDefine.FromType.City,true)
                    g_Game.StateMachine:WriteBlackboard("SE_FROM_X", cityPos:X())
                    g_Game.StateMachine:WriteBlackboard("SE_FROM_Y", cityPos:Y())
                    GotoUtils.GotoSceneSeFromCityNpc(tid, troopId, cityElementTid, npcId)
                end
            end)
        end
    else

        local onButtonClick = nil
        local buttonData = self:GetMenuDatumButtonData()
        if buttonData then
            onButtonClick = buttonData.onClick
        end

        if onButtonClick then
            onButtonClick()
        end

    end
end

function HUDTroopList:IsTouchMenuOpend()
    return g_Game.UIManager:IsOpenedByName(UIMediatorNames.TouchMenuUIMediator)
end
function HUDTroopList:CloseTouchMenu()
    return g_Game.UIManager:CloseAllByName(UIMediatorNames.TouchMenuUIMediator)
end

function HUDTroopList:UpdateTriggerEventTimer()
    if not self.troopVisibleWatching then
        return
    end
    local endDataIndex = -1
    for index, value in ipairs(self.troopList) do
        -- body
        if value.eventTriggerd and value.triggerTime and (g_Game.Time.time - value.triggerTime > self.triggerEventShowTime) then
            endDataIndex = index
            break
        end
    end

    if endDataIndex > 0 then
        if self.tipDataIndex == endDataIndex then
            self:HideEventInfoTip()
        end
        self:OnTroopLeaveEventTrigger(self.troopList[endDataIndex].troopInfo.troopId)
    end
end

---@param data wds.Troop
---@param changed wds.Vector3F
function HUDTroopList:OnTroopMoved(data, changed)
    if not self:NeedShow() or not self.slgModule:IsMyTroop(data) then
        return
    end
    local endDataIndex = -1
    for index, value in ipairs(self.troopList) do
        -- body
        if value.eventTriggerd and value.troopInfo and value.troopInfo.troopId == data.ID then

            local deltaX = value.triggerPos.X - changed.X
            local deltaY = value.triggerPos.Y - changed.Y
            if deltaX*deltaX + deltaY * deltaY > 2 then
                endDataIndex = index
            end
            break
        end
    end

    if endDataIndex > 0 then
        self:OnTroopLeaveEventTrigger(self.troopList[endDataIndex].troopInfo.troopId)

        if self.tipDataIndex == endDataIndex then
            self:HideEventInfoTip()
            self.tipDataIndex = -1
        end
    end
end

function HUDTroopList:OnEventInfoGotoClick()
    self:OnSelectEventInfoTip(self.tipDataIndex)
    if self:IsTouchMenuOpend() then
        return
    end
    
    local index = self.tipDataIndex
    local data = self.troopList[index]
    local ctrl = self.slgModule:GetTroopCtrl(data.troopInfo.troopId)
    self.slgModule:LookAtTroop(ctrl)
end

---@return wds.MobileFortress
function HUDTroopList:GetMobileFortress()
    local hasAuthority = ModuleRefer.AllianceModule:CheckHasAuthority(AllianceAuthorityItem.MoveMobileFortress) and
        ModuleRefer.AllianceModule.Behemoth:IsCurrentBehemothInSummon()

    if hasAuthority then
        local fortress = self.slgModule:FindFriendlyMobileFortress()
        return fortress
    end

    return nil
end

return HUDTroopList
