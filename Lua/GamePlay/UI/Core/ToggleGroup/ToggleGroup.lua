---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/4/22 15:15
---
---@class BaseToggleButtonData
---@field index number

local BaseUIComponent = require('BaseUIComponent')
local Delegate = require('Delegate')
local UIHelper = require('UIHelper')

---@class ToggleGroup
---@field buttons BaseToggleButton[] | StatusRecordToggleButton[]
---@field btnDatas BaseToggleButtonData[]
---@field enableChecker fun(table)
local ToggleGroup = class('ToggleGroup',BaseUIComponent)

function ToggleGroup:OnClose(param)
    self.onToggleSelected = nil
    self.btnDatas = nil
    self.buttons = nil
end

---InitButtons
---@param buttonNames string[]
---@param onToggleSelected fun(data:BaseToggleButtonData)
---@return BaseUIComponent[] buttons
function ToggleGroup:InitButtons(buttonNames, onToggleSelected)
    if not buttonNames or #buttonNames < 1 then
        g_Logger.Error('ToggleGroup Setup Error!')
        return nil
    end 
    
    self.buttons = {}
    for i = 1, #buttonNames do
        self.buttons[i] = self:LuaObject(buttonNames[i])
        if not self.buttons[i]  then
            g_Logger.Error('Cannot Find Toggle Button '.. buttonNames[i])
            return nil
        end
    end
    self.onToggleSelected = onToggleSelected
    return self.buttons
end

---@param btnDatas BaseToggleButtonData[]
function ToggleGroup:SetupButtonDatas(btnDatas)
    self.btnDatas = btnDatas;        
    local dataCount = #self.btnDatas
    for i = 1,  #self.buttons do
       local button = self.buttons[i] 
        if button then
            if i <= dataCount then
                if self:CheckEnable(self.btnDatas[i]) then
                    button:OnEnable()
                else
                    button:OnDisable()
                end

                button:SetVisible(true)
                button:FeedData(
                        {
                            onButtonClick = Delegate.GetOrCreate(self, self.OnButtonClick),
                            data = self.btnDatas[i]
                        }
                )
            else
                button:SetVisible(false)
            end
        end
    end
end

---SetupGroup
---@param buttons BaseUIComponent[]
---@param btnDatas BaseToggleButtonData[]
---@param onToggleSelected fun(data:BaseToggleButtonData)
function ToggleGroup:SetupGroup(buttons, btnDatas, onToggleSelected)
    if buttons == nil or btnDatas == nil or #buttons ~= #btnDatas then
        return
    end
    self.buttons = buttons;
    self.onToggleSelected = onToggleSelected
    self:SetupButtonDatas(btnDatas)
end

function ToggleGroup:SelectToggle(index)
    if index < 1 or index > #self.buttons then
        return
    end
    self:OnButtonClick( self.buttons[index])
end

function ToggleGroup:OnButtonClick(button)
    local index = 0
    for i = 1, #self.buttons do
        if self.buttons[i] == button then
            index = i
        end
    end

    for i = 1, #self.buttons do
        if self:CheckEnable(self.btnDatas[index]) then
            if i == index then
                self.buttons[i]:OnSelected()
            else
                self.buttons[i]:OnDeselected()
            end
        end
    end
    if self.onToggleSelected ~= nil then
        self.onToggleSelected(self.btnDatas[index])
    end
end

function ToggleGroup:SetEnableChecker(enableChecker)
    self.enableChecker = enableChecker
end

function ToggleGroup:CheckEnable(data)
    return not self.enableChecker or self.enableChecker(data)
end


return ToggleGroup