---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shoufeng.zhang.
--- DateTime: 2022/4/28 15:08
---
local BaseModule = require('BaseModule')
local Delegate = require('Delegate')

---@class PreloadingModule
---@field _progress number
---@field _progressInfo string
---@field _allLoadState BaseLoadState[]
---@field _allExecutingState BaseLoadState[]
---@field _allCompleteState BaseLoadState[]
local PreloadingModule = class('PreloadingModule',BaseModule)

function PreloadingModule:ctor()
    self._progress = 0
    self.Finished = false
    self._needRestart = false
end

function PreloadingModule:OnRegister()   
    g_Game:AddFrameTicker(Delegate.GetOrCreate(self,self.Tick))

    self._needRestart = false
end

function PreloadingModule:OnRemove()
    g_Game:RemoveFrameTicker(Delegate.GetOrCreate(self,self.Tick))    
end

function PreloadingModule:Release()
    
end

function PreloadingModule:GetCurrentProgress()
    return self._progress,self._progressInfo
end

function PreloadingModule:SetCoreAssetUpdated()
    self._needRestart = true
end

function PreloadingModule:IsCoreAssetUpdated()
    return self._needRestart
end

local PRELOADING_PROGRESS = 0.9;
function PreloadingModule:Tick(delta)
    if self.Finished or self._allExecutingState == nil then
        return
    end

    local loadingDesc = nil
    local descPriority = -1
    for i = #self._allExecutingState, 1, -1 do
        local state = self._allExecutingState[i]
        if state.Finished then
            state:Exit()
            g_Logger.Log("Exit:"..state.__class.__cname)
            table.remove(self._allExecutingState, i)
            table.insert(self._allCompleteState, state)
        else
            if state:DescriptionPriority() > descPriority then
                loadingDesc = state:Description()
                if UNITY_EDITOR or UNITY_DEBUG then
                    loadingDesc = loadingDesc .. string.format("[%s]", GetClassName(state))
                end
                descPriority = state:DescriptionPriority()
            end
        end
    end

    if not string.IsNullOrEmpty(loadingDesc) then
        self._progressInfo = loadingDesc
    end

    for _, state in ipairs(self._allExecutingState) do
        state:Tick(delta)
    end

    for i = #self._allLoadState, 1, -1 do
        local state = self._allLoadState[i]
        if state:AllDependenciesFinished() then
            table.remove(self._allLoadState, i)
            table.insert(self._allExecutingState, state)
			state:Enter()
        end
    end

    local totalStep = #self._allLoadState + #self._allExecutingState + #self._allCompleteState;
    if totalStep > 0 then        
        --local finish = #self._allLoadState == 0 and #self._allExecutingState == 0 and math.abs(self._progress - 1) < 0.2
        
        -- if not finish then
        --     self._progress = #self._allCompleteState ;
        -- end
        --local step = PRELOADING_PROGRESS / totalStep;
        local weight = 0
        for i, v in ipairs(self._allStates) do
            weight = weight + v:GetProgressWeight()            
        end
        self._progress = 0
        for i, v in ipairs(self._allCompleteState) do
            self._progress = self._progress + v:GetProgressWeight()           
        end

        for i, v in ipairs(self._allExecutingState) do
            self._progress = self._progress + v:GetProgress() * v:GetProgressWeight();
        end
        self._progress = self._progress / weight
    end
    
    self.Finished = #self._allLoadState == 0 and #self._allExecutingState == 0 
end

function PreloadingModule:Start()
    g_Logger.LogChannel("PreloadingModule",'Start')
    g_Game.IOAccessRecorder.StartStep("PreloadingModule:Start")
    self._allLoadState = {}
    self._allExecutingState = {}
    self._allCompleteState = {}
    self:SetupStates()
    self.Finished = false
end

function PreloadingModule:SetupStates()

    local GameObjectCreateHelper = CS.DragonReborn.AssetTool.GameObjectCreateHelper.Create()

    GameObjectCreateHelper:Create("Cube",CS.UnityEngine.GameObject.Find("Entrance").transform,  function (go)
        g_Logger.Log("Create Cube")
    end)
    
    g_Logger.Log("PreloadingModule SetupStates")
    
    --table.insert(self._allLoadState, self._initManifestState)
    --
    --self._allStates = {}
    --table.addrange(self._allStates, self._allLoadState)
end

return PreloadingModule
